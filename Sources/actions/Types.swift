// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get GitHub Actions cache usage for an organization
    ///
    /// Gets the total GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/cache/usage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage/get(actions/get-actions-cache-usage-for-org)`.
    func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org(_ input: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output
    /// List repositories with GitHub Actions cache usage for an organization
    ///
    /// Lists repositories and their GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/cache/usage-by-repository`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage-by-repository/get(actions/get-actions-cache-usage-by-repo-for-org)`.
    func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org(_ input: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output
    /// Get GitHub Actions permissions for an organization
    ///
    /// Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/get(actions/get-github-actions-permissions-organization)`.
    func actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization(_ input: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output
    /// Set GitHub Actions permissions for an organization
    ///
    /// Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/put(actions/set-github-actions-permissions-organization)`.
    func actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization(_ input: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output
    /// List selected repositories enabled for GitHub Actions in an organization
    ///
    /// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/get(actions/list-selected-repositories-enabled-github-actions-organization)`.
    func actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization(_ input: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input) async throws -> Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output
    /// Set selected repositories enabled for GitHub Actions in an organization
    ///
    /// Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/put(actions/set-selected-repositories-enabled-github-actions-organization)`.
    func actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization(_ input: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input) async throws -> Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output
    /// Enable a selected repository for GitHub Actions in an organization
    ///
    /// Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/put(actions/enable-selected-repository-github-actions-organization)`.
    func actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization(_ input: Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input) async throws -> Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output
    /// Disable a selected repository for GitHub Actions in an organization
    ///
    /// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/delete(actions/disable-selected-repository-github-actions-organization)`.
    func actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization(_ input: Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input) async throws -> Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output
    /// Get allowed actions and reusable workflows for an organization
    ///
    /// Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/get(actions/get-allowed-actions-organization)`.
    func actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization(_ input: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input) async throws -> Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Output
    /// Set allowed actions and reusable workflows for an organization
    ///
    /// Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/put(actions/set-allowed-actions-organization)`.
    func actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization(_ input: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input) async throws -> Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Output
    /// Get default workflow permissions for an organization
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
    /// as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-organization)`.
    func actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization(_ input: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output
    /// Set default workflow permissions for an organization
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
    /// can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-organization)`.
    func actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization(_ input: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output
    /// List self-hosted runners for an organization
    ///
    /// Lists all self-hosted runners configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/get(actions/list-self-hosted-runners-for-org)`.
    func actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org(_ input: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output
    /// List runner applications for an organization
    ///
    /// Lists binaries for the runner application that you can download and run.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/downloads`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/downloads/get(actions/list-runner-applications-for-org)`.
    func actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org(_ input: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Output
    /// Create configuration for a just-in-time runner for an organization
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    ///
    /// The authenticated user must have admin access to the organization.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/generate-jitconfig`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-org)`.
    func actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org(_ input: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Output
    /// Create a registration token for an organization
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    ///
    /// ```
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/registration-token`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/registration-token/post(actions/create-registration-token-for-org)`.
    func actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org(_ input: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Output
    /// Create a remove token for an organization
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    ///
    /// ```
    /// ./config.sh remove --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/remove-token`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/remove-token/post(actions/create-remove-token-for-org)`.
    func actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org(_ input: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Output
    /// Get a self-hosted runner for an organization
    ///
    /// Gets a specific self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-org)`.
    func actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(_ input: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output
    /// Delete a self-hosted runner from an organization
    ///
    /// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-org)`.
    func actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org(_ input: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Input) async throws -> Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Output
    /// List labels for a self-hosted runner for an organization
    ///
    /// Lists all labels for a self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-org)`.
    func actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(_ input: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output
    /// Add custom labels to a self-hosted runner for an organization
    ///
    /// Adds custom labels to a self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-org)`.
    func actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(_ input: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output
    /// Set custom labels for a self-hosted runner for an organization
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-org)`.
    func actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(_ input: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output
    /// Remove all custom labels from a self-hosted runner for an organization
    ///
    /// Remove all custom labels from a self-hosted runner configured in an
    /// organization. Returns the remaining read-only labels from the runner.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-org)`.
    func actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(_ input: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output
    /// Remove a custom label from a self-hosted runner for an organization
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in an organization. Returns the remaining labels from the runner.
    ///
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-org)`.
    func actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(_ input: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input) async throws -> Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output
    /// List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/get(actions/list-org-secrets)`.
    func actions_sol_list_hyphen_org_hyphen_secrets(_ input: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input) async throws -> Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output
    /// Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/public-key/get(actions/get-org-public-key)`.
    func actions_sol_get_hyphen_org_hyphen_public_hyphen_key(_ input: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input) async throws -> Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Output
    /// Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/get(actions/get-org-secret)`.
    func actions_sol_get_hyphen_org_hyphen_secret(_ input: Operations.actions_sol_get_hyphen_org_hyphen_secret.Input) async throws -> Operations.actions_sol_get_hyphen_org_hyphen_secret.Output
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/put(actions/create-or-update-org-secret)`.
    func actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(_ input: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input) async throws -> Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output
    /// Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/delete(actions/delete-org-secret)`.
    func actions_sol_delete_hyphen_org_hyphen_secret(_ input: Operations.actions_sol_delete_hyphen_org_hyphen_secret.Input) async throws -> Operations.actions_sol_delete_hyphen_org_hyphen_secret.Output
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/get(actions/list-selected-repos-for-org-secret)`.
    func actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(_ input: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input) async throws -> Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/put(actions/set-selected-repos-for-org-secret)`.
    func actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(_ input: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input) async throws -> Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. For more information about setting the visibility, see [Create or
    /// update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-secret)`.
    func actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(_ input: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input) async throws -> Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-secret)`.
    func actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(_ input: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input) async throws -> Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output
    /// List organization variables
    ///
    /// Lists all organization variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/get(actions/list-org-variables)`.
    func actions_sol_list_hyphen_org_hyphen_variables(_ input: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input) async throws -> Operations.actions_sol_list_hyphen_org_hyphen_variables.Output
    /// Create an organization variable
    ///
    /// Creates an organization variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/variables`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/post(actions/create-org-variable)`.
    func actions_sol_create_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_create_hyphen_org_hyphen_variable.Output
    /// Get an organization variable
    ///
    /// Gets a specific variable in an organization.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/get(actions/get-org-variable)`.
    func actions_sol_get_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_get_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_get_hyphen_org_hyphen_variable.Output
    /// Update an organization variable
    ///
    /// Updates an organization variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/patch(actions/update-org-variable)`.
    func actions_sol_update_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_update_hyphen_org_hyphen_variable.Output
    /// Delete an organization variable
    ///
    /// Deletes an organization variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/delete(actions/delete-org-variable)`.
    func actions_sol_delete_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_delete_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_delete_hyphen_org_hyphen_variable.Output
    /// List selected repositories for an organization variable
    ///
    /// Lists all repositories that can access an organization variable
    /// that is available to selected repositories.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables/{name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/get(actions/list-selected-repos-for-org-variable)`.
    func actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output
    /// Set selected repositories for an organization variable
    ///
    /// Replaces all repositories for an organization variable that is available
    /// to selected repositories. Organization variables that are available to selected
    /// repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/variables/{name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/put(actions/set-selected-repos-for-org-variable)`.
    func actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output
    /// Add selected repository to an organization variable
    ///
    /// Adds a repository to an organization variable that is available to selected repositories.
    /// Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-variable)`.
    func actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Output
    /// Remove selected repository from an organization variable
    ///
    /// Removes a repository from an organization variable that is
    /// available to selected repositories. Organization variables that are available to
    /// selected repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-variable)`.
    func actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable(_ input: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Input) async throws -> Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Output
    /// List artifacts for a repository
    ///
    /// Lists all artifacts for a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/get(actions/list-artifacts-for-repo)`.
    func actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output
    /// Get an artifact
    ///
    /// Gets a specific artifact for a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/get(actions/get-artifact)`.
    func actions_sol_get_hyphen_artifact(_ input: Operations.actions_sol_get_hyphen_artifact.Input) async throws -> Operations.actions_sol_get_hyphen_artifact.Output
    /// Delete an artifact
    ///
    /// Deletes an artifact for a workflow run.
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/delete(actions/delete-artifact)`.
    func actions_sol_delete_hyphen_artifact(_ input: Operations.actions_sol_delete_hyphen_artifact.Input) async throws -> Operations.actions_sol_delete_hyphen_artifact.Output
    /// Download an artifact
    ///
    /// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
    /// the response header to find the URL for the download. The `:archive_format` must be `zip`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/get(actions/download-artifact)`.
    func actions_sol_download_hyphen_artifact(_ input: Operations.actions_sol_download_hyphen_artifact.Input) async throws -> Operations.actions_sol_download_hyphen_artifact.Output
    /// Get GitHub Actions cache usage for a repository
    ///
    /// Gets GitHub Actions cache usage for a repository.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/cache/usage`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/cache/usage/get(actions/get-actions-cache-usage)`.
    func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage(_ input: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Output
    /// List GitHub Actions caches for a repository
    ///
    /// Lists the GitHub Actions caches for a repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/caches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/get(actions/get-actions-cache-list)`.
    func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list(_ input: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output
    /// Delete GitHub Actions caches for a repository (using a cache key)
    ///
    /// Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/caches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/delete(actions/delete-actions-cache-by-key)`.
    func actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key(_ input: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input) async throws -> Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Output
    /// Delete a GitHub Actions cache for a repository (using a cache ID)
    ///
    /// Deletes a GitHub Actions cache for a repository, using a cache ID.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/{cache_id}/delete(actions/delete-actions-cache-by-id)`.
    func actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id(_ input: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Input) async throws -> Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Output
    /// Get a job for a workflow run
    ///
    /// Gets a specific job in a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/jobs/{job_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/get(actions/get-job-for-workflow-run)`.
    func actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output
    /// Download job logs for a workflow run
    ///
    /// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
    /// for `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/logs/get(actions/download-job-logs-for-workflow-run)`.
    func actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Output
    /// Re-run a job from a workflow run
    ///
    /// Re-run a job and its dependent jobs in a workflow run.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/post(actions/re-run-job-for-workflow-run)`.
    func actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output
    /// Get the customization template for an OIDC subject claim for a repository
    ///
    /// Gets the customization template for an OpenID Connect (OIDC) subject claim.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/oidc/customization/sub`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/get(actions/get-custom-oidc-sub-claim-for-repo)`.
    func actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output
    /// Set the customization template for an OIDC subject claim for a repository
    ///
    /// Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/oidc/customization/sub`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/put(actions/set-custom-oidc-sub-claim-for-repo)`.
    func actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output
    /// List repository organization secrets
    ///
    /// Lists all organization secrets shared with a repository without revealing their encrypted
    /// values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/organization-secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-secrets/get(actions/list-repo-organization-secrets)`.
    func actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets(_ input: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output
    /// List repository organization variables
    ///
    /// Lists all organization variables shared with a repository.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/organization-variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-variables/get(actions/list-repo-organization-variables)`.
    func actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables(_ input: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output
    /// Get GitHub Actions permissions for a repository
    ///
    /// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/get(actions/get-github-actions-permissions-repository)`.
    func actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository(_ input: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output
    /// Set GitHub Actions permissions for a repository
    ///
    /// Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/put(actions/set-github-actions-permissions-repository)`.
    func actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository(_ input: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output
    /// Get the level of access for workflows outside of the repository
    ///
    /// Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/access`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/get(actions/get-workflow-access-to-repository)`.
    func actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository(_ input: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output
    /// Set the level of access for workflows outside of the repository
    ///
    /// Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/access`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/put(actions/set-workflow-access-to-repository)`.
    func actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository(_ input: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input) async throws -> Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output
    /// Get allowed actions and reusable workflows for a repository
    ///
    /// Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/get(actions/get-allowed-actions-repository)`.
    func actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository(_ input: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input) async throws -> Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Output
    /// Set allowed actions and reusable workflows for a repository
    ///
    /// Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/put(actions/set-allowed-actions-repository)`.
    func actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository(_ input: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input) async throws -> Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Output
    /// Get default workflow permissions for a repository
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
    /// as well as if GitHub Actions can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-repository)`.
    func actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository(_ input: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output
    /// Set default workflow permissions for a repository
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
    /// can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-repository)`.
    func actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository(_ input: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output
    /// List self-hosted runners for a repository
    ///
    /// Lists all self-hosted runners configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/get(actions/list-self-hosted-runners-for-repo)`.
    func actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output
    /// List runner applications for a repository
    ///
    /// Lists binaries for the runner application that you can download and run.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/downloads`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/downloads/get(actions/list-runner-applications-for-repo)`.
    func actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Output
    /// Create configuration for a just-in-time runner for a repository
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    ///
    /// The authenticated user must have admin access to the repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-repo)`.
    func actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Output
    /// Create a registration token for a repository
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    ///
    /// ```
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/registration-token`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/registration-token/post(actions/create-registration-token-for-repo)`.
    func actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Output
    /// Create a remove token for a repository
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    ///
    /// ```
    /// ./config.sh remove --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/remove-token`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/remove-token/post(actions/create-remove-token-for-repo)`.
    func actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Output
    /// Get a self-hosted runner for a repository
    ///
    /// Gets a specific self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-repo)`.
    func actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output
    /// Delete a self-hosted runner from a repository
    ///
    /// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-repo)`.
    func actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo(_ input: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Input) async throws -> Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Output
    /// List labels for a self-hosted runner for a repository
    ///
    /// Lists all labels for a self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-repo)`.
    func actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output
    /// Add custom labels to a self-hosted runner for a repository
    ///
    /// Adds custom labels to a self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-repo)`.
    func actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output
    /// Set custom labels for a self-hosted runner for a repository
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-repo)`.
    func actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output
    /// Remove all custom labels from a self-hosted runner for a repository
    ///
    /// Remove all custom labels from a self-hosted runner configured in a
    /// repository. Returns the remaining read-only labels from the runner.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-repo)`.
    func actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output
    /// Remove a custom label from a self-hosted runner for a repository
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in a repository. Returns the remaining labels from the runner.
    ///
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-repo)`.
    func actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output
    /// List workflow runs for a repository
    ///
    /// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// This API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/get(actions/list-workflow-runs-for-repo)`.
    func actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo(_ input: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input) async throws -> Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output
    /// Get a workflow run
    ///
    /// Gets a specific workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/get(actions/get-workflow-run)`.
    func actions_sol_get_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_run.Output
    /// Delete a workflow run
    ///
    /// Deletes a specific workflow run.
    ///
    /// Anyone with write access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/delete(actions/delete-workflow-run)`.
    func actions_sol_delete_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Output
    /// Get the review history for a workflow run
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approvals/get(actions/get-reviews-for-run)`.
    func actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run(_ input: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input) async throws -> Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Output
    /// Approve a workflow run for a fork pull request
    ///
    /// Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approve/post(actions/approve-workflow-run)`.
    func actions_sol_approve_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Output
    /// List workflow run artifacts
    ///
    /// Lists artifacts for a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/get(actions/list-workflow-run-artifacts)`.
    func actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts(_ input: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input) async throws -> Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output
    /// Get a workflow run attempt
    ///
    /// Gets a specific workflow run attempt.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/get(actions/get-workflow-run-attempt)`.
    func actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt(_ input: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Output
    /// List jobs for a workflow run attempt
    ///
    /// Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/get(actions/list-jobs-for-workflow-run-attempt)`.
    func actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt(_ input: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input) async throws -> Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output
    /// Download workflow run attempt logs
    ///
    /// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
    /// 1 minute. Look for `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/get(actions/download-workflow-run-attempt-logs)`.
    func actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs(_ input: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Input) async throws -> Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Output
    /// Cancel a workflow run
    ///
    /// Cancels a workflow run using its `id`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/cancel/post(actions/cancel-workflow-run)`.
    func actions_sol_cancel_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Output
    /// Review custom deployment protection rules for a workflow run
    ///
    /// Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// **Note:** GitHub Apps can only review their own custom deployment protection rules.
    /// To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/post(actions/review-custom-gates-for-run)`.
    func actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run(_ input: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input) async throws -> Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Output
    /// Force cancel a workflow run
    ///
    /// Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
    /// You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/post(actions/force-cancel-workflow-run)`.
    func actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Output
    /// List jobs for a workflow run
    ///
    /// Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/jobs/get(actions/list-jobs-for-workflow-run)`.
    func actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run(_ input: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input) async throws -> Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output
    /// Download workflow run logs
    ///
    /// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
    /// `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/get(actions/download-workflow-run-logs)`.
    func actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs(_ input: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Input) async throws -> Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Output
    /// Delete workflow run logs
    ///
    /// Deletes all logs for a workflow run.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/delete(actions/delete-workflow-run-logs)`.
    func actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs(_ input: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input) async throws -> Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Output
    /// Get pending deployments for a workflow run
    ///
    /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/get(actions/get-pending-deployments-for-run)`.
    func actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run(_ input: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input) async throws -> Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output
    /// Review pending deployments for a workflow run
    ///
    /// Approve or reject pending deployments that are waiting on approval by a required reviewer.
    ///
    /// Required reviewers with read access to the repository contents and deployments can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/post(actions/review-pending-deployments-for-run)`.
    func actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run(_ input: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input) async throws -> Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output
    /// Re-run a workflow
    ///
    /// Re-runs your workflow run using its `id`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun/post(actions/re-run-workflow)`.
    func actions_sol_re_hyphen_run_hyphen_workflow(_ input: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input) async throws -> Operations.actions_sol_re_hyphen_run_hyphen_workflow.Output
    /// Re-run failed jobs from a workflow run
    ///
    /// Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/post(actions/re-run-workflow-failed-jobs)`.
    func actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs(_ input: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input) async throws -> Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Output
    /// Get workflow run usage
    ///
    /// Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/timing/get(actions/get-workflow-run-usage)`.
    func actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage(_ input: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Output
    /// List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/get(actions/list-repo-secrets)`.
    func actions_sol_list_hyphen_repo_hyphen_secrets(_ input: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/public-key/get(actions/get-repo-public-key)`.
    func actions_sol_get_hyphen_repo_hyphen_public_hyphen_key(_ input: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input) async throws -> Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output
    /// Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    ///
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/get(actions/get-repo-secret)`.
    func actions_sol_get_hyphen_repo_hyphen_secret(_ input: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input) async throws -> Operations.actions_sol_get_hyphen_repo_hyphen_secret.Output
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/put(actions/create-or-update-repo-secret)`.
    func actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(_ input: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input) async throws -> Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output
    /// Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/delete(actions/delete-repo-secret)`.
    func actions_sol_delete_hyphen_repo_hyphen_secret(_ input: Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Input) async throws -> Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Output
    /// List repository variables
    ///
    /// Lists all repository variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/get(actions/list-repo-variables)`.
    func actions_sol_list_hyphen_repo_hyphen_variables(_ input: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output
    /// Create a repository variable
    ///
    /// Creates a repository variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/post(actions/create-repo-variable)`.
    func actions_sol_create_hyphen_repo_hyphen_variable(_ input: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input) async throws -> Operations.actions_sol_create_hyphen_repo_hyphen_variable.Output
    /// Get a repository variable
    ///
    /// Gets a specific variable in a repository.
    ///
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/get(actions/get-repo-variable)`.
    func actions_sol_get_hyphen_repo_hyphen_variable(_ input: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input) async throws -> Operations.actions_sol_get_hyphen_repo_hyphen_variable.Output
    /// Update a repository variable
    ///
    /// Updates a repository variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/patch(actions/update-repo-variable)`.
    func actions_sol_update_hyphen_repo_hyphen_variable(_ input: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input) async throws -> Operations.actions_sol_update_hyphen_repo_hyphen_variable.Output
    /// Delete a repository variable
    ///
    /// Deletes a repository variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/delete(actions/delete-repo-variable)`.
    func actions_sol_delete_hyphen_repo_hyphen_variable(_ input: Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Input) async throws -> Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Output
    /// List repository workflows
    ///
    /// Lists the workflows in a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/get(actions/list-repo-workflows)`.
    func actions_sol_list_hyphen_repo_hyphen_workflows(_ input: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output
    /// Get a workflow
    ///
    /// Gets a specific workflow. You can replace `workflow_id` with the workflow
    /// file name. For example, you could use `main.yaml`.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/get(actions/get-workflow)`.
    func actions_sol_get_hyphen_workflow(_ input: Operations.actions_sol_get_hyphen_workflow.Input) async throws -> Operations.actions_sol_get_hyphen_workflow.Output
    /// Disable a workflow
    ///
    /// Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/put(actions/disable-workflow)`.
    func actions_sol_disable_hyphen_workflow(_ input: Operations.actions_sol_disable_hyphen_workflow.Input) async throws -> Operations.actions_sol_disable_hyphen_workflow.Output
    /// Create a workflow dispatch event
    ///
    /// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/post(actions/create-workflow-dispatch)`.
    func actions_sol_create_hyphen_workflow_hyphen_dispatch(_ input: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input) async throws -> Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Output
    /// Enable a workflow
    ///
    /// Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/put(actions/enable-workflow)`.
    func actions_sol_enable_hyphen_workflow(_ input: Operations.actions_sol_enable_hyphen_workflow.Input) async throws -> Operations.actions_sol_enable_hyphen_workflow.Output
    /// List workflow runs for a workflow
    ///
    /// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/get(actions/list-workflow-runs)`.
    func actions_sol_list_hyphen_workflow_hyphen_runs(_ input: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input) async throws -> Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output
    /// Get workflow usage
    ///
    /// Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/get(actions/get-workflow-usage)`.
    func actions_sol_get_hyphen_workflow_hyphen_usage(_ input: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Output
    /// List environment secrets
    ///
    /// Lists all secrets available in an environment without revealing their
    /// encrypted values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/get(actions/list-environment-secrets)`.
    func actions_sol_list_hyphen_environment_hyphen_secrets(_ input: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input) async throws -> Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output
    /// Get an environment public key
    ///
    /// Get the public key for an environment, which you need to encrypt environment
    /// secrets. You need to encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/get(actions/get-environment-public-key)`.
    func actions_sol_get_hyphen_environment_hyphen_public_hyphen_key(_ input: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input) async throws -> Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Output
    /// Get an environment secret
    ///
    /// Gets a single environment secret without revealing its encrypted value.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/get(actions/get-environment-secret)`.
    func actions_sol_get_hyphen_environment_hyphen_secret(_ input: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input) async throws -> Operations.actions_sol_get_hyphen_environment_hyphen_secret.Output
    /// Create or update an environment secret
    ///
    /// Creates or updates an environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/put(actions/create-or-update-environment-secret)`.
    func actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret(_ input: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input) async throws -> Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output
    /// Delete an environment secret
    ///
    /// Deletes a secret in an environment using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/delete(actions/delete-environment-secret)`.
    func actions_sol_delete_hyphen_environment_hyphen_secret(_ input: Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Input) async throws -> Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Output
    /// List environment variables
    ///
    /// Lists all environment variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/get(actions/list-environment-variables)`.
    func actions_sol_list_hyphen_environment_hyphen_variables(_ input: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input) async throws -> Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output
    /// Create an environment variable
    ///
    /// Create an environment variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/post(actions/create-environment-variable)`.
    func actions_sol_create_hyphen_environment_hyphen_variable(_ input: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input) async throws -> Operations.actions_sol_create_hyphen_environment_hyphen_variable.Output
    /// Get an environment variable
    ///
    /// Gets a specific variable in an environment.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/get(actions/get-environment-variable)`.
    func actions_sol_get_hyphen_environment_hyphen_variable(_ input: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input) async throws -> Operations.actions_sol_get_hyphen_environment_hyphen_variable.Output
    /// Update an environment variable
    ///
    /// Updates an environment variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/patch(actions/update-environment-variable)`.
    func actions_sol_update_hyphen_environment_hyphen_variable(_ input: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input) async throws -> Operations.actions_sol_update_hyphen_environment_hyphen_variable.Output
    /// Delete an environment variable
    ///
    /// Deletes an environment variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/delete(actions/delete-environment-variable)`.
    func actions_sol_delete_hyphen_environment_hyphen_variable(_ input: Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Input) async throws -> Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get GitHub Actions cache usage for an organization
    ///
    /// Gets the total GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/cache/usage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage/get(actions/get-actions-cache-usage-for-org)`.
    public func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org(
        path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output {
        try await actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repositories with GitHub Actions cache usage for an organization
    ///
    /// Lists repositories and their GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/cache/usage-by-repository`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage-by-repository/get(actions/get-actions-cache-usage-by-repo-for-org)`.
    public func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org(
        path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Path,
        query: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output {
        try await actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get GitHub Actions permissions for an organization
    ///
    /// Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/get(actions/get-github-actions-permissions-organization)`.
    public func actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization(
        path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Path,
        headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output {
        try await actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set GitHub Actions permissions for an organization
    ///
    /// Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/put(actions/set-github-actions-permissions-organization)`.
    public func actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization(
        path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Path,
        body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output {
        try await actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input(
            path: path,
            body: body
        ))
    }
    /// List selected repositories enabled for GitHub Actions in an organization
    ///
    /// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/get(actions/list-selected-repositories-enabled-github-actions-organization)`.
    public func actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization(
        path: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Path,
        query: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output {
        try await actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization(Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Set selected repositories enabled for GitHub Actions in an organization
    ///
    /// Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/put(actions/set-selected-repositories-enabled-github-actions-organization)`.
    public func actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization(
        path: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Path,
        body: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output {
        try await actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization(Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input(
            path: path,
            body: body
        ))
    }
    /// Enable a selected repository for GitHub Actions in an organization
    ///
    /// Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/put(actions/enable-selected-repository-github-actions-organization)`.
    public func actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization(path: Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input.Path) async throws -> Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output {
        try await actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization(Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input(path: path))
    }
    /// Disable a selected repository for GitHub Actions in an organization
    ///
    /// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/delete(actions/disable-selected-repository-github-actions-organization)`.
    public func actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization(path: Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input.Path) async throws -> Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output {
        try await actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization(Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input(path: path))
    }
    /// Get allowed actions and reusable workflows for an organization
    ///
    /// Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/get(actions/get-allowed-actions-organization)`.
    public func actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization(
        path: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Path,
        headers: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Output {
        try await actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization(Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set allowed actions and reusable workflows for an organization
    ///
    /// Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/put(actions/set-allowed-actions-organization)`.
    public func actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization(
        path: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Path,
        body: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Body? = nil
    ) async throws -> Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Output {
        try await actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization(Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input(
            path: path,
            body: body
        ))
    }
    /// Get default workflow permissions for an organization
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
    /// as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-organization)`.
    public func actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization(
        path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Path,
        headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output {
        try await actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set default workflow permissions for an organization
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
    /// can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-organization)`.
    public func actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization(
        path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Path,
        body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Body? = nil
    ) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output {
        try await actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input(
            path: path,
            body: body
        ))
    }
    /// List self-hosted runners for an organization
    ///
    /// Lists all self-hosted runners configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/get(actions/list-self-hosted-runners-for-org)`.
    public func actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org(
        path: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Path,
        query: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output {
        try await actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org(Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List runner applications for an organization
    ///
    /// Lists binaries for the runner application that you can download and run.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/downloads`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/downloads/get(actions/list-runner-applications-for-org)`.
    public func actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org(
        path: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Output {
        try await actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org(Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create configuration for a just-in-time runner for an organization
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    ///
    /// The authenticated user must have admin access to the organization.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/generate-jitconfig`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-org)`.
    public func actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org(
        path: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Headers = .init(),
        body: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Body
    ) async throws -> Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Output {
        try await actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org(Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create a registration token for an organization
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    ///
    /// ```
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/registration-token`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/registration-token/post(actions/create-registration-token-for-org)`.
    public func actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org(
        path: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Output {
        try await actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org(Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a remove token for an organization
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    ///
    /// ```
    /// ./config.sh remove --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/remove-token`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/remove-token/post(actions/create-remove-token-for-org)`.
    public func actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org(
        path: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Output {
        try await actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org(Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a self-hosted runner for an organization
    ///
    /// Gets a specific self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-org)`.
    public func actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(
        path: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output {
        try await actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a self-hosted runner from an organization
    ///
    /// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-org)`.
    public func actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org(path: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Output {
        try await actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org(Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Input(path: path))
    }
    /// List labels for a self-hosted runner for an organization
    ///
    /// Lists all labels for a self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-org)`.
    public func actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(
        path: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output {
        try await actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add custom labels to a self-hosted runner for an organization
    ///
    /// Adds custom labels to a self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-org)`.
    public func actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(
        path: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init(),
        body: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body
    ) async throws -> Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output {
        try await actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set custom labels for a self-hosted runner for an organization
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-org)`.
    public func actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(
        path: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init(),
        body: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output {
        try await actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove all custom labels from a self-hosted runner for an organization
    ///
    /// Remove all custom labels from a self-hosted runner configured in an
    /// organization. Returns the remaining read-only labels from the runner.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-org)`.
    public func actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(
        path: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output {
        try await actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove a custom label from a self-hosted runner for an organization
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in an organization. Returns the remaining labels from the runner.
    ///
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-org)`.
    public func actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(
        path: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output {
        try await actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org(Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/get(actions/list-org-secrets)`.
    public func actions_sol_list_hyphen_org_hyphen_secrets(
        path: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Path,
        query: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output {
        try await actions_sol_list_hyphen_org_hyphen_secrets(Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/public-key/get(actions/get-org-public-key)`.
    public func actions_sol_get_hyphen_org_hyphen_public_hyphen_key(
        path: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path,
        headers: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Output {
        try await actions_sol_get_hyphen_org_hyphen_public_hyphen_key(Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/get(actions/get-org-secret)`.
    public func actions_sol_get_hyphen_org_hyphen_secret(
        path: Operations.actions_sol_get_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.actions_sol_get_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_org_hyphen_secret.Output {
        try await actions_sol_get_hyphen_org_hyphen_secret(Operations.actions_sol_get_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/put(actions/create-or-update-org-secret)`.
    public func actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(
        path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers = .init(),
        body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
    ) async throws -> Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output {
        try await actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/delete(actions/delete-org-secret)`.
    public func actions_sol_delete_hyphen_org_hyphen_secret(path: Operations.actions_sol_delete_hyphen_org_hyphen_secret.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_org_hyphen_secret.Output {
        try await actions_sol_delete_hyphen_org_hyphen_secret(Operations.actions_sol_delete_hyphen_org_hyphen_secret.Input(path: path))
    }
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/get(actions/list-selected-repos-for-org-secret)`.
    public func actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(
        path: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
        query: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output {
        try await actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/put(actions/set-selected-repos-for-org-secret)`.
    public func actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(
        path: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
        body: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output {
        try await actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input(
            path: path,
            body: body
        ))
    }
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. For more information about setting the visibility, see [Create or
    /// update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-secret)`.
    public func actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(path: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path) async throws -> Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output {
        try await actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input(path: path))
    }
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-secret)`.
    public func actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(path: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path) async throws -> Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output {
        try await actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input(path: path))
    }
    /// List organization variables
    ///
    /// Lists all organization variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/get(actions/list-org-variables)`.
    public func actions_sol_list_hyphen_org_hyphen_variables(
        path: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Path,
        query: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_org_hyphen_variables.Output {
        try await actions_sol_list_hyphen_org_hyphen_variables(Operations.actions_sol_list_hyphen_org_hyphen_variables.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an organization variable
    ///
    /// Creates an organization variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/variables`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/post(actions/create-org-variable)`.
    public func actions_sol_create_hyphen_org_hyphen_variable(
        path: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Path,
        headers: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Headers = .init(),
        body: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Body
    ) async throws -> Operations.actions_sol_create_hyphen_org_hyphen_variable.Output {
        try await actions_sol_create_hyphen_org_hyphen_variable(Operations.actions_sol_create_hyphen_org_hyphen_variable.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an organization variable
    ///
    /// Gets a specific variable in an organization.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/get(actions/get-org-variable)`.
    public func actions_sol_get_hyphen_org_hyphen_variable(
        path: Operations.actions_sol_get_hyphen_org_hyphen_variable.Input.Path,
        headers: Operations.actions_sol_get_hyphen_org_hyphen_variable.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_org_hyphen_variable.Output {
        try await actions_sol_get_hyphen_org_hyphen_variable(Operations.actions_sol_get_hyphen_org_hyphen_variable.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an organization variable
    ///
    /// Updates an organization variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/patch(actions/update-org-variable)`.
    public func actions_sol_update_hyphen_org_hyphen_variable(
        path: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Path,
        body: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Body
    ) async throws -> Operations.actions_sol_update_hyphen_org_hyphen_variable.Output {
        try await actions_sol_update_hyphen_org_hyphen_variable(Operations.actions_sol_update_hyphen_org_hyphen_variable.Input(
            path: path,
            body: body
        ))
    }
    /// Delete an organization variable
    ///
    /// Deletes an organization variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/delete(actions/delete-org-variable)`.
    public func actions_sol_delete_hyphen_org_hyphen_variable(path: Operations.actions_sol_delete_hyphen_org_hyphen_variable.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_org_hyphen_variable.Output {
        try await actions_sol_delete_hyphen_org_hyphen_variable(Operations.actions_sol_delete_hyphen_org_hyphen_variable.Input(path: path))
    }
    /// List selected repositories for an organization variable
    ///
    /// Lists all repositories that can access an organization variable
    /// that is available to selected repositories.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables/{name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/get(actions/list-selected-repos-for-org-variable)`.
    public func actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable(
        path: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Path,
        query: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output {
        try await actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable(Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Set selected repositories for an organization variable
    ///
    /// Replaces all repositories for an organization variable that is available
    /// to selected repositories. Organization variables that are available to selected
    /// repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/variables/{name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/put(actions/set-selected-repos-for-org-variable)`.
    public func actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable(
        path: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Path,
        body: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output {
        try await actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable(Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input(
            path: path,
            body: body
        ))
    }
    /// Add selected repository to an organization variable
    ///
    /// Adds a repository to an organization variable that is available to selected repositories.
    /// Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-variable)`.
    public func actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable(path: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Input.Path) async throws -> Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Output {
        try await actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable(Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Input(path: path))
    }
    /// Remove selected repository from an organization variable
    ///
    /// Removes a repository from an organization variable that is
    /// available to selected repositories. Organization variables that are available to
    /// selected repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-variable)`.
    public func actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable(path: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Input.Path) async throws -> Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Output {
        try await actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable(Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Input(path: path))
    }
    /// List artifacts for a repository
    ///
    /// Lists all artifacts for a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/get(actions/list-artifacts-for-repo)`.
    public func actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output {
        try await actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo(Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an artifact
    ///
    /// Gets a specific artifact for a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/get(actions/get-artifact)`.
    public func actions_sol_get_hyphen_artifact(
        path: Operations.actions_sol_get_hyphen_artifact.Input.Path,
        headers: Operations.actions_sol_get_hyphen_artifact.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_artifact.Output {
        try await actions_sol_get_hyphen_artifact(Operations.actions_sol_get_hyphen_artifact.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an artifact
    ///
    /// Deletes an artifact for a workflow run.
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/delete(actions/delete-artifact)`.
    public func actions_sol_delete_hyphen_artifact(path: Operations.actions_sol_delete_hyphen_artifact.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_artifact.Output {
        try await actions_sol_delete_hyphen_artifact(Operations.actions_sol_delete_hyphen_artifact.Input(path: path))
    }
    /// Download an artifact
    ///
    /// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
    /// the response header to find the URL for the download. The `:archive_format` must be `zip`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/get(actions/download-artifact)`.
    public func actions_sol_download_hyphen_artifact(
        path: Operations.actions_sol_download_hyphen_artifact.Input.Path,
        headers: Operations.actions_sol_download_hyphen_artifact.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_download_hyphen_artifact.Output {
        try await actions_sol_download_hyphen_artifact(Operations.actions_sol_download_hyphen_artifact.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get GitHub Actions cache usage for a repository
    ///
    /// Gets GitHub Actions cache usage for a repository.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/cache/usage`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/cache/usage/get(actions/get-actions-cache-usage)`.
    public func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage(
        path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input.Path,
        headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Output {
        try await actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input(
            path: path,
            headers: headers
        ))
    }
    /// List GitHub Actions caches for a repository
    ///
    /// Lists the GitHub Actions caches for a repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/caches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/get(actions/get-actions-cache-list)`.
    public func actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list(
        path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Path,
        query: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Query = .init(),
        headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output {
        try await actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Delete GitHub Actions caches for a repository (using a cache key)
    ///
    /// Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/caches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/delete(actions/delete-actions-cache-by-key)`.
    public func actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key(
        path: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Path,
        query: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Query,
        headers: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Output {
        try await actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key(Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Delete a GitHub Actions cache for a repository (using a cache ID)
    ///
    /// Deletes a GitHub Actions cache for a repository, using a cache ID.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/{cache_id}/delete(actions/delete-actions-cache-by-id)`.
    public func actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id(path: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Output {
        try await actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id(Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Input(path: path))
    }
    /// Get a job for a workflow run
    ///
    /// Gets a specific job in a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/jobs/{job_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/get(actions/get-job-for-workflow-run)`.
    public func actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run(
        path: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Path,
        headers: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run(Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input(
            path: path,
            headers: headers
        ))
    }
    /// Download job logs for a workflow run
    ///
    /// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
    /// for `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/logs/get(actions/download-job-logs-for-workflow-run)`.
    public func actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run(path: Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Input.Path) async throws -> Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run(Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Input(path: path))
    }
    /// Re-run a job from a workflow run
    ///
    /// Re-run a job and its dependent jobs in a workflow run.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/post(actions/re-run-job-for-workflow-run)`.
    public func actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run(
        path: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Path,
        headers: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers = .init(),
        body: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Body? = nil
    ) async throws -> Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run(Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get the customization template for an OIDC subject claim for a repository
    ///
    /// Gets the customization template for an OpenID Connect (OIDC) subject claim.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/oidc/customization/sub`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/get(actions/get-custom-oidc-sub-claim-for-repo)`.
    public func actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output {
        try await actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo(Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set the customization template for an OIDC subject claim for a repository
    ///
    /// Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/oidc/customization/sub`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/put(actions/set-custom-oidc-sub-claim-for-repo)`.
    public func actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Headers = .init(),
        body: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output {
        try await actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo(Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repository organization secrets
    ///
    /// Lists all organization secrets shared with a repository without revealing their encrypted
    /// values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/organization-secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-secrets/get(actions/list-repo-organization-secrets)`.
    public func actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets(
        path: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Path,
        query: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output {
        try await actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets(Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository organization variables
    ///
    /// Lists all organization variables shared with a repository.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/organization-variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-variables/get(actions/list-repo-organization-variables)`.
    public func actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables(
        path: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Path,
        query: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output {
        try await actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables(Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get GitHub Actions permissions for a repository
    ///
    /// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/get(actions/get-github-actions-permissions-repository)`.
    public func actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository(
        path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Path,
        headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output {
        try await actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set GitHub Actions permissions for a repository
    ///
    /// Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/put(actions/set-github-actions-permissions-repository)`.
    public func actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository(
        path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Path,
        body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output {
        try await actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input(
            path: path,
            body: body
        ))
    }
    /// Get the level of access for workflows outside of the repository
    ///
    /// Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/access`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/get(actions/get-workflow-access-to-repository)`.
    public func actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository(
        path: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Path,
        headers: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output {
        try await actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository(Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set the level of access for workflows outside of the repository
    ///
    /// Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/access`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/put(actions/set-workflow-access-to-repository)`.
    public func actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository(
        path: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Path,
        body: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output {
        try await actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository(Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input(
            path: path,
            body: body
        ))
    }
    /// Get allowed actions and reusable workflows for a repository
    ///
    /// Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/get(actions/get-allowed-actions-repository)`.
    public func actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository(
        path: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Path,
        headers: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Output {
        try await actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository(Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set allowed actions and reusable workflows for a repository
    ///
    /// Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/put(actions/set-allowed-actions-repository)`.
    public func actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository(
        path: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Path,
        body: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Body? = nil
    ) async throws -> Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Output {
        try await actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository(Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input(
            path: path,
            body: body
        ))
    }
    /// Get default workflow permissions for a repository
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
    /// as well as if GitHub Actions can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-repository)`.
    public func actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository(
        path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Path,
        headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output {
        try await actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set default workflow permissions for a repository
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
    /// can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-repository)`.
    public func actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository(
        path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Path,
        body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output {
        try await actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input(
            path: path,
            body: body
        ))
    }
    /// List self-hosted runners for a repository
    ///
    /// Lists all self-hosted runners configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/get(actions/list-self-hosted-runners-for-repo)`.
    public func actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output {
        try await actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo(Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List runner applications for a repository
    ///
    /// Lists binaries for the runner application that you can download and run.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/downloads`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/downloads/get(actions/list-runner-applications-for-repo)`.
    public func actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Output {
        try await actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo(Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create configuration for a just-in-time runner for a repository
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    ///
    /// The authenticated user must have admin access to the repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-repo)`.
    public func actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Headers = .init(),
        body: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Body
    ) async throws -> Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Output {
        try await actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo(Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create a registration token for a repository
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    ///
    /// ```
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/registration-token`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/registration-token/post(actions/create-registration-token-for-repo)`.
    public func actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Output {
        try await actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo(Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a remove token for a repository
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    ///
    /// ```
    /// ./config.sh remove --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/remove-token`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/remove-token/post(actions/create-remove-token-for-repo)`.
    public func actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Output {
        try await actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo(Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a self-hosted runner for a repository
    ///
    /// Gets a specific self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-repo)`.
    public func actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output {
        try await actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a self-hosted runner from a repository
    ///
    /// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-repo)`.
    public func actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo(path: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Output {
        try await actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo(Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Input(path: path))
    }
    /// List labels for a self-hosted runner for a repository
    ///
    /// Lists all labels for a self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-repo)`.
    public func actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output {
        try await actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add custom labels to a self-hosted runner for a repository
    ///
    /// Adds custom labels to a self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-repo)`.
    public func actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init(),
        body: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body
    ) async throws -> Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output {
        try await actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set custom labels for a self-hosted runner for a repository
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-repo)`.
    public func actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init(),
        body: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body
    ) async throws -> Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output {
        try await actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove all custom labels from a self-hosted runner for a repository
    ///
    /// Remove all custom labels from a self-hosted runner configured in a
    /// repository. Returns the remaining read-only labels from the runner.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-repo)`.
    public func actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output {
        try await actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove a custom label from a self-hosted runner for a repository
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in a repository. Returns the remaining labels from the runner.
    ///
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-repo)`.
    public func actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output {
        try await actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo(Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// List workflow runs for a repository
    ///
    /// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// This API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/get(actions/list-workflow-runs-for-repo)`.
    public func actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo(
        path: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output {
        try await actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo(Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a workflow run
    ///
    /// Gets a specific workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/get(actions/get-workflow-run)`.
    public func actions_sol_get_hyphen_workflow_hyphen_run(
        path: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Path,
        query: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Query = .init(),
        headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_get_hyphen_workflow_hyphen_run(Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Delete a workflow run
    ///
    /// Deletes a specific workflow run.
    ///
    /// Anyone with write access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/delete(actions/delete-workflow-run)`.
    public func actions_sol_delete_hyphen_workflow_hyphen_run(path: Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_delete_hyphen_workflow_hyphen_run(Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Input(path: path))
    }
    /// Get the review history for a workflow run
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approvals/get(actions/get-reviews-for-run)`.
    public func actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run(
        path: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input.Path,
        headers: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Output {
        try await actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run(Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input(
            path: path,
            headers: headers
        ))
    }
    /// Approve a workflow run for a fork pull request
    ///
    /// Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approve/post(actions/approve-workflow-run)`.
    public func actions_sol_approve_hyphen_workflow_hyphen_run(
        path: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input.Path,
        headers: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_approve_hyphen_workflow_hyphen_run(Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input(
            path: path,
            headers: headers
        ))
    }
    /// List workflow run artifacts
    ///
    /// Lists artifacts for a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/get(actions/list-workflow-run-artifacts)`.
    public func actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts(
        path: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Path,
        query: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output {
        try await actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts(Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a workflow run attempt
    ///
    /// Gets a specific workflow run attempt.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/get(actions/get-workflow-run-attempt)`.
    public func actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt(
        path: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Path,
        query: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Query = .init(),
        headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Output {
        try await actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt(Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List jobs for a workflow run attempt
    ///
    /// Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/get(actions/list-jobs-for-workflow-run-attempt)`.
    public func actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt(
        path: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Path,
        query: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output {
        try await actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt(Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Download workflow run attempt logs
    ///
    /// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
    /// 1 minute. Look for `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/get(actions/download-workflow-run-attempt-logs)`.
    public func actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs(path: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Input.Path) async throws -> Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Output {
        try await actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs(Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Input(path: path))
    }
    /// Cancel a workflow run
    ///
    /// Cancels a workflow run using its `id`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/cancel/post(actions/cancel-workflow-run)`.
    public func actions_sol_cancel_hyphen_workflow_hyphen_run(
        path: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input.Path,
        headers: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_cancel_hyphen_workflow_hyphen_run(Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input(
            path: path,
            headers: headers
        ))
    }
    /// Review custom deployment protection rules for a workflow run
    ///
    /// Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// **Note:** GitHub Apps can only review their own custom deployment protection rules.
    /// To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/post(actions/review-custom-gates-for-run)`.
    public func actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run(
        path: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input.Path,
        body: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input.Body
    ) async throws -> Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Output {
        try await actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run(Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input(
            path: path,
            body: body
        ))
    }
    /// Force cancel a workflow run
    ///
    /// Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
    /// You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/post(actions/force-cancel-workflow-run)`.
    public func actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run(
        path: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input.Path,
        headers: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run(Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input(
            path: path,
            headers: headers
        ))
    }
    /// List jobs for a workflow run
    ///
    /// Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/jobs/get(actions/list-jobs-for-workflow-run)`.
    public func actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run(
        path: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Path,
        query: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output {
        try await actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run(Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Download workflow run logs
    ///
    /// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
    /// `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/get(actions/download-workflow-run-logs)`.
    public func actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs(path: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Input.Path) async throws -> Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Output {
        try await actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs(Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Input(path: path))
    }
    /// Delete workflow run logs
    ///
    /// Deletes all logs for a workflow run.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/delete(actions/delete-workflow-run-logs)`.
    public func actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs(
        path: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input.Path,
        headers: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Output {
        try await actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs(Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get pending deployments for a workflow run
    ///
    /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/get(actions/get-pending-deployments-for-run)`.
    public func actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run(
        path: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Path,
        headers: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output {
        try await actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run(Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input(
            path: path,
            headers: headers
        ))
    }
    /// Review pending deployments for a workflow run
    ///
    /// Approve or reject pending deployments that are waiting on approval by a required reviewer.
    ///
    /// Required reviewers with read access to the repository contents and deployments can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/post(actions/review-pending-deployments-for-run)`.
    public func actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run(
        path: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Path,
        headers: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Headers = .init(),
        body: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Body
    ) async throws -> Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output {
        try await actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run(Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Re-run a workflow
    ///
    /// Re-runs your workflow run using its `id`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun/post(actions/re-run-workflow)`.
    public func actions_sol_re_hyphen_run_hyphen_workflow(
        path: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Path,
        headers: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Headers = .init(),
        body: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Body? = nil
    ) async throws -> Operations.actions_sol_re_hyphen_run_hyphen_workflow.Output {
        try await actions_sol_re_hyphen_run_hyphen_workflow(Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Re-run failed jobs from a workflow run
    ///
    /// Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/post(actions/re-run-workflow-failed-jobs)`.
    public func actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs(
        path: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Path,
        headers: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Headers = .init(),
        body: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Body? = nil
    ) async throws -> Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Output {
        try await actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs(Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get workflow run usage
    ///
    /// Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/timing/get(actions/get-workflow-run-usage)`.
    public func actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage(
        path: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input.Path,
        headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Output {
        try await actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage(Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/get(actions/list-repo-secrets)`.
    public func actions_sol_list_hyphen_repo_hyphen_secrets(
        path: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Path,
        query: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output {
        try await actions_sol_list_hyphen_repo_hyphen_secrets(Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/public-key/get(actions/get-repo-public-key)`.
    public func actions_sol_get_hyphen_repo_hyphen_public_hyphen_key(
        path: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path,
        headers: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output {
        try await actions_sol_get_hyphen_repo_hyphen_public_hyphen_key(Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    ///
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/get(actions/get-repo-secret)`.
    public func actions_sol_get_hyphen_repo_hyphen_secret(
        path: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input.Path,
        headers: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_repo_hyphen_secret.Output {
        try await actions_sol_get_hyphen_repo_hyphen_secret(Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/put(actions/create-or-update-repo-secret)`.
    public func actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(
        path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path,
        headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers = .init(),
        body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
    ) async throws -> Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output {
        try await actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/delete(actions/delete-repo-secret)`.
    public func actions_sol_delete_hyphen_repo_hyphen_secret(path: Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Output {
        try await actions_sol_delete_hyphen_repo_hyphen_secret(Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Input(path: path))
    }
    /// List repository variables
    ///
    /// Lists all repository variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/get(actions/list-repo-variables)`.
    public func actions_sol_list_hyphen_repo_hyphen_variables(
        path: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Path,
        query: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output {
        try await actions_sol_list_hyphen_repo_hyphen_variables(Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a repository variable
    ///
    /// Creates a repository variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/post(actions/create-repo-variable)`.
    public func actions_sol_create_hyphen_repo_hyphen_variable(
        path: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Path,
        headers: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Headers = .init(),
        body: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Body
    ) async throws -> Operations.actions_sol_create_hyphen_repo_hyphen_variable.Output {
        try await actions_sol_create_hyphen_repo_hyphen_variable(Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a repository variable
    ///
    /// Gets a specific variable in a repository.
    ///
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/get(actions/get-repo-variable)`.
    public func actions_sol_get_hyphen_repo_hyphen_variable(
        path: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input.Path,
        headers: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_repo_hyphen_variable.Output {
        try await actions_sol_get_hyphen_repo_hyphen_variable(Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a repository variable
    ///
    /// Updates a repository variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/patch(actions/update-repo-variable)`.
    public func actions_sol_update_hyphen_repo_hyphen_variable(
        path: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input.Path,
        body: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input.Body
    ) async throws -> Operations.actions_sol_update_hyphen_repo_hyphen_variable.Output {
        try await actions_sol_update_hyphen_repo_hyphen_variable(Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input(
            path: path,
            body: body
        ))
    }
    /// Delete a repository variable
    ///
    /// Deletes a repository variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/delete(actions/delete-repo-variable)`.
    public func actions_sol_delete_hyphen_repo_hyphen_variable(path: Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Output {
        try await actions_sol_delete_hyphen_repo_hyphen_variable(Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Input(path: path))
    }
    /// List repository workflows
    ///
    /// Lists the workflows in a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/get(actions/list-repo-workflows)`.
    public func actions_sol_list_hyphen_repo_hyphen_workflows(
        path: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Path,
        query: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output {
        try await actions_sol_list_hyphen_repo_hyphen_workflows(Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a workflow
    ///
    /// Gets a specific workflow. You can replace `workflow_id` with the workflow
    /// file name. For example, you could use `main.yaml`.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/get(actions/get-workflow)`.
    public func actions_sol_get_hyphen_workflow(
        path: Operations.actions_sol_get_hyphen_workflow.Input.Path,
        headers: Operations.actions_sol_get_hyphen_workflow.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_workflow.Output {
        try await actions_sol_get_hyphen_workflow(Operations.actions_sol_get_hyphen_workflow.Input(
            path: path,
            headers: headers
        ))
    }
    /// Disable a workflow
    ///
    /// Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/put(actions/disable-workflow)`.
    public func actions_sol_disable_hyphen_workflow(path: Operations.actions_sol_disable_hyphen_workflow.Input.Path) async throws -> Operations.actions_sol_disable_hyphen_workflow.Output {
        try await actions_sol_disable_hyphen_workflow(Operations.actions_sol_disable_hyphen_workflow.Input(path: path))
    }
    /// Create a workflow dispatch event
    ///
    /// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/post(actions/create-workflow-dispatch)`.
    public func actions_sol_create_hyphen_workflow_hyphen_dispatch(
        path: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Path,
        body: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Body
    ) async throws -> Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Output {
        try await actions_sol_create_hyphen_workflow_hyphen_dispatch(Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input(
            path: path,
            body: body
        ))
    }
    /// Enable a workflow
    ///
    /// Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/put(actions/enable-workflow)`.
    public func actions_sol_enable_hyphen_workflow(path: Operations.actions_sol_enable_hyphen_workflow.Input.Path) async throws -> Operations.actions_sol_enable_hyphen_workflow.Output {
        try await actions_sol_enable_hyphen_workflow(Operations.actions_sol_enable_hyphen_workflow.Input(path: path))
    }
    /// List workflow runs for a workflow
    ///
    /// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/get(actions/list-workflow-runs)`.
    public func actions_sol_list_hyphen_workflow_hyphen_runs(
        path: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Path,
        query: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output {
        try await actions_sol_list_hyphen_workflow_hyphen_runs(Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get workflow usage
    ///
    /// Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/get(actions/get-workflow-usage)`.
    public func actions_sol_get_hyphen_workflow_hyphen_usage(
        path: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input.Path,
        headers: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Output {
        try await actions_sol_get_hyphen_workflow_hyphen_usage(Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input(
            path: path,
            headers: headers
        ))
    }
    /// List environment secrets
    ///
    /// Lists all secrets available in an environment without revealing their
    /// encrypted values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/get(actions/list-environment-secrets)`.
    public func actions_sol_list_hyphen_environment_hyphen_secrets(
        path: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Path,
        query: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output {
        try await actions_sol_list_hyphen_environment_hyphen_secrets(Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an environment public key
    ///
    /// Get the public key for an environment, which you need to encrypt environment
    /// secrets. You need to encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/get(actions/get-environment-public-key)`.
    public func actions_sol_get_hyphen_environment_hyphen_public_hyphen_key(
        path: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input.Path,
        headers: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Output {
        try await actions_sol_get_hyphen_environment_hyphen_public_hyphen_key(Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get an environment secret
    ///
    /// Gets a single environment secret without revealing its encrypted value.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/get(actions/get-environment-secret)`.
    public func actions_sol_get_hyphen_environment_hyphen_secret(
        path: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input.Path,
        headers: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_environment_hyphen_secret.Output {
        try await actions_sol_get_hyphen_environment_hyphen_secret(Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update an environment secret
    ///
    /// Creates or updates an environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/put(actions/create-or-update-environment-secret)`.
    public func actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret(
        path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Path,
        headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Headers = .init(),
        body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Body
    ) async throws -> Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output {
        try await actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an environment secret
    ///
    /// Deletes a secret in an environment using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/delete(actions/delete-environment-secret)`.
    public func actions_sol_delete_hyphen_environment_hyphen_secret(path: Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Output {
        try await actions_sol_delete_hyphen_environment_hyphen_secret(Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Input(path: path))
    }
    /// List environment variables
    ///
    /// Lists all environment variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/get(actions/list-environment-variables)`.
    public func actions_sol_list_hyphen_environment_hyphen_variables(
        path: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Path,
        query: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Query = .init(),
        headers: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output {
        try await actions_sol_list_hyphen_environment_hyphen_variables(Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an environment variable
    ///
    /// Create an environment variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/post(actions/create-environment-variable)`.
    public func actions_sol_create_hyphen_environment_hyphen_variable(
        path: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Path,
        headers: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Headers = .init(),
        body: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Body
    ) async throws -> Operations.actions_sol_create_hyphen_environment_hyphen_variable.Output {
        try await actions_sol_create_hyphen_environment_hyphen_variable(Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an environment variable
    ///
    /// Gets a specific variable in an environment.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/get(actions/get-environment-variable)`.
    public func actions_sol_get_hyphen_environment_hyphen_variable(
        path: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input.Path,
        headers: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input.Headers = .init()
    ) async throws -> Operations.actions_sol_get_hyphen_environment_hyphen_variable.Output {
        try await actions_sol_get_hyphen_environment_hyphen_variable(Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an environment variable
    ///
    /// Updates an environment variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/patch(actions/update-environment-variable)`.
    public func actions_sol_update_hyphen_environment_hyphen_variable(
        path: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input.Path,
        body: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input.Body
    ) async throws -> Operations.actions_sol_update_hyphen_environment_hyphen_variable.Output {
        try await actions_sol_update_hyphen_environment_hyphen_variable(Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input(
            path: path,
            body: body
        ))
    }
    /// Delete an environment variable
    ///
    /// Deletes an environment variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/delete(actions/delete-environment-variable)`.
    public func actions_sol_delete_hyphen_environment_hyphen_variable(path: Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Input.Path) async throws -> Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Output {
        try await actions_sol_delete_hyphen_environment_hyphen_variable(Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Input(path: path))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_hyphen_error_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_hyphen_error_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct nullable_hyphen_integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `nullable_hyphen_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_id:
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_id = client_id
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_id
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// - Remark: Generated from `#/components/schemas/actions-cache-usage-org-enterprise`.
        public struct actions_hyphen_cache_hyphen_usage_hyphen_org_hyphen_enterprise: Codable, Hashable, Sendable {
            /// The count of active caches across all repositories of an enterprise or an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-usage-org-enterprise/total_active_caches_count`.
            public var total_active_caches_count: Swift.Int
            /// The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-usage-org-enterprise/total_active_caches_size_in_bytes`.
            public var total_active_caches_size_in_bytes: Swift.Int
            /// Creates a new `actions_hyphen_cache_hyphen_usage_hyphen_org_hyphen_enterprise`.
            ///
            /// - Parameters:
            ///   - total_active_caches_count: The count of active caches across all repositories of an enterprise or an organization.
            ///   - total_active_caches_size_in_bytes: The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
            public init(
                total_active_caches_count: Swift.Int,
                total_active_caches_size_in_bytes: Swift.Int
            ) {
                self.total_active_caches_count = total_active_caches_count
                self.total_active_caches_size_in_bytes = total_active_caches_size_in_bytes
            }
            public enum CodingKeys: String, CodingKey {
                case total_active_caches_count
                case total_active_caches_size_in_bytes
            }
        }
        /// GitHub Actions Cache Usage by repository.
        ///
        /// - Remark: Generated from `#/components/schemas/actions-cache-usage-by-repository`.
        public struct actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repository: Codable, Hashable, Sendable {
            /// The repository owner and name for the cache usage being shown.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-usage-by-repository/full_name`.
            public var full_name: Swift.String
            /// The sum of the size in bytes of all the active cache items in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-usage-by-repository/active_caches_size_in_bytes`.
            public var active_caches_size_in_bytes: Swift.Int
            /// The number of active caches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-usage-by-repository/active_caches_count`.
            public var active_caches_count: Swift.Int
            /// Creates a new `actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - full_name: The repository owner and name for the cache usage being shown.
            ///   - active_caches_size_in_bytes: The sum of the size in bytes of all the active cache items in the repository.
            ///   - active_caches_count: The number of active caches in the repository.
            public init(
                full_name: Swift.String,
                active_caches_size_in_bytes: Swift.Int,
                active_caches_count: Swift.Int
            ) {
                self.full_name = full_name
                self.active_caches_size_in_bytes = active_caches_size_in_bytes
                self.active_caches_count = active_caches_count
            }
            public enum CodingKeys: String, CodingKey {
                case full_name
                case active_caches_size_in_bytes
                case active_caches_count
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        public struct empty_hyphen_object: Codable, Hashable, Sendable {
            /// Creates a new `empty_hyphen_object`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
        ///
        /// - Remark: Generated from `#/components/schemas/enabled-repositories`.
        @frozen public enum enabled_hyphen_repositories: String, Codable, Hashable, Sendable {
            case all = "all"
            case none = "none"
            case selected = "selected"
        }
        /// The permissions policy that controls the actions and reusable workflows that are allowed to run.
        ///
        /// - Remark: Generated from `#/components/schemas/allowed-actions`.
        @frozen public enum allowed_hyphen_actions: String, Codable, Hashable, Sendable {
            case all = "all"
            case local_only = "local_only"
            case selected = "selected"
        }
        /// The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
        ///
        /// - Remark: Generated from `#/components/schemas/selected-actions-url`.
        public typealias selected_hyphen_actions_hyphen_url = Swift.String
        /// - Remark: Generated from `#/components/schemas/actions-organization-permissions`.
        public struct actions_hyphen_organization_hyphen_permissions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/actions-organization-permissions/enabled_repositories`.
            public var enabled_repositories: Components.Schemas.enabled_hyphen_repositories
            /// The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-organization-permissions/selected_repositories_url`.
            public var selected_repositories_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/actions-organization-permissions/allowed_actions`.
            public var allowed_actions: Components.Schemas.allowed_hyphen_actions?
            /// - Remark: Generated from `#/components/schemas/actions-organization-permissions/selected_actions_url`.
            public var selected_actions_url: Components.Schemas.selected_hyphen_actions_hyphen_url?
            /// Creates a new `actions_hyphen_organization_hyphen_permissions`.
            ///
            /// - Parameters:
            ///   - enabled_repositories:
            ///   - selected_repositories_url: The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
            ///   - allowed_actions:
            ///   - selected_actions_url:
            public init(
                enabled_repositories: Components.Schemas.enabled_hyphen_repositories,
                selected_repositories_url: Swift.String? = nil,
                allowed_actions: Components.Schemas.allowed_hyphen_actions? = nil,
                selected_actions_url: Components.Schemas.selected_hyphen_actions_hyphen_url? = nil
            ) {
                self.enabled_repositories = enabled_repositories
                self.selected_repositories_url = selected_repositories_url
                self.allowed_actions = allowed_actions
                self.selected_actions_url = selected_actions_url
            }
            public enum CodingKeys: String, CodingKey {
                case enabled_repositories
                case selected_repositories_url
                case allowed_actions
                case selected_actions_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/selected-actions`.
        public struct selected_hyphen_actions: Codable, Hashable, Sendable {
            /// Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
            ///
            /// - Remark: Generated from `#/components/schemas/selected-actions/github_owned_allowed`.
            public var github_owned_allowed: Swift.Bool?
            /// Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
            ///
            /// - Remark: Generated from `#/components/schemas/selected-actions/verified_allowed`.
            public var verified_allowed: Swift.Bool?
            /// Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
            ///
            /// **Note**: The `patterns_allowed` setting only applies to public repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/selected-actions/patterns_allowed`.
            public var patterns_allowed: [Swift.String]?
            /// Creates a new `selected_hyphen_actions`.
            ///
            /// - Parameters:
            ///   - github_owned_allowed: Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
            ///   - verified_allowed: Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
            ///   - patterns_allowed: Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
            public init(
                github_owned_allowed: Swift.Bool? = nil,
                verified_allowed: Swift.Bool? = nil,
                patterns_allowed: [Swift.String]? = nil
            ) {
                self.github_owned_allowed = github_owned_allowed
                self.verified_allowed = verified_allowed
                self.patterns_allowed = patterns_allowed
            }
            public enum CodingKeys: String, CodingKey {
                case github_owned_allowed
                case verified_allowed
                case patterns_allowed
            }
        }
        /// The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
        ///
        /// - Remark: Generated from `#/components/schemas/actions-default-workflow-permissions`.
        @frozen public enum actions_hyphen_default_hyphen_workflow_hyphen_permissions: String, Codable, Hashable, Sendable {
            case read = "read"
            case write = "write"
        }
        /// Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
        ///
        /// - Remark: Generated from `#/components/schemas/actions-can-approve-pull-request-reviews`.
        public typealias actions_hyphen_can_hyphen_approve_hyphen_pull_hyphen_request_hyphen_reviews = Swift.Bool
        /// - Remark: Generated from `#/components/schemas/actions-get-default-workflow-permissions`.
        public struct actions_hyphen_get_hyphen_default_hyphen_workflow_hyphen_permissions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/actions-get-default-workflow-permissions/default_workflow_permissions`.
            public var default_workflow_permissions: Components.Schemas.actions_hyphen_default_hyphen_workflow_hyphen_permissions
            /// - Remark: Generated from `#/components/schemas/actions-get-default-workflow-permissions/can_approve_pull_request_reviews`.
            public var can_approve_pull_request_reviews: Components.Schemas.actions_hyphen_can_hyphen_approve_hyphen_pull_hyphen_request_hyphen_reviews
            /// Creates a new `actions_hyphen_get_hyphen_default_hyphen_workflow_hyphen_permissions`.
            ///
            /// - Parameters:
            ///   - default_workflow_permissions:
            ///   - can_approve_pull_request_reviews:
            public init(
                default_workflow_permissions: Components.Schemas.actions_hyphen_default_hyphen_workflow_hyphen_permissions,
                can_approve_pull_request_reviews: Components.Schemas.actions_hyphen_can_hyphen_approve_hyphen_pull_hyphen_request_hyphen_reviews
            ) {
                self.default_workflow_permissions = default_workflow_permissions
                self.can_approve_pull_request_reviews = can_approve_pull_request_reviews
            }
            public enum CodingKeys: String, CodingKey {
                case default_workflow_permissions
                case can_approve_pull_request_reviews
            }
        }
        /// - Remark: Generated from `#/components/schemas/actions-set-default-workflow-permissions`.
        public struct actions_hyphen_set_hyphen_default_hyphen_workflow_hyphen_permissions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/actions-set-default-workflow-permissions/default_workflow_permissions`.
            public var default_workflow_permissions: Components.Schemas.actions_hyphen_default_hyphen_workflow_hyphen_permissions?
            /// - Remark: Generated from `#/components/schemas/actions-set-default-workflow-permissions/can_approve_pull_request_reviews`.
            public var can_approve_pull_request_reviews: Components.Schemas.actions_hyphen_can_hyphen_approve_hyphen_pull_hyphen_request_hyphen_reviews?
            /// Creates a new `actions_hyphen_set_hyphen_default_hyphen_workflow_hyphen_permissions`.
            ///
            /// - Parameters:
            ///   - default_workflow_permissions:
            ///   - can_approve_pull_request_reviews:
            public init(
                default_workflow_permissions: Components.Schemas.actions_hyphen_default_hyphen_workflow_hyphen_permissions? = nil,
                can_approve_pull_request_reviews: Components.Schemas.actions_hyphen_can_hyphen_approve_hyphen_pull_hyphen_request_hyphen_reviews? = nil
            ) {
                self.default_workflow_permissions = default_workflow_permissions
                self.can_approve_pull_request_reviews = can_approve_pull_request_reviews
            }
            public enum CodingKeys: String, CodingKey {
                case default_workflow_permissions
                case can_approve_pull_request_reviews
            }
        }
        /// A label for a self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner-label`.
        public struct runner_hyphen_label: Codable, Hashable, Sendable {
            /// Unique identifier of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/id`.
            public var id: Swift.Int?
            /// Name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/name`.
            public var name: Swift.String
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case read_hyphen_only = "read-only"
                case custom = "custom"
            }
            /// The type of label. Read-only labels are applied automatically when the runner is configured.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-label/type`.
            public var _type: Components.Schemas.runner_hyphen_label._typePayload?
            /// Creates a new `runner_hyphen_label`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the label.
            ///   - name: Name of the label.
            ///   - _type: The type of label. Read-only labels are applied automatically when the runner is configured.
            public init(
                id: Swift.Int? = nil,
                name: Swift.String,
                _type: Components.Schemas.runner_hyphen_label._typePayload? = nil
            ) {
                self.id = id
                self.name = name
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case _type = "type"
            }
        }
        /// A self hosted runner
        ///
        /// - Remark: Generated from `#/components/schemas/runner`.
        public struct runner: Codable, Hashable, Sendable {
            /// The id of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/id`.
            public var id: Swift.Int
            /// The id of the runner group.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/runner_group_id`.
            public var runner_group_id: Swift.Int?
            /// The name of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/name`.
            public var name: Swift.String
            /// The Operating System of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/os`.
            public var os: Swift.String
            /// The status of the runner.
            ///
            /// - Remark: Generated from `#/components/schemas/runner/status`.
            public var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/runner/busy`.
            public var busy: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/runner/labels`.
            public var labels: [Components.Schemas.runner_hyphen_label]
            /// Creates a new `runner`.
            ///
            /// - Parameters:
            ///   - id: The id of the runner.
            ///   - runner_group_id: The id of the runner group.
            ///   - name: The name of the runner.
            ///   - os: The Operating System of the runner.
            ///   - status: The status of the runner.
            ///   - busy:
            ///   - labels:
            public init(
                id: Swift.Int,
                runner_group_id: Swift.Int? = nil,
                name: Swift.String,
                os: Swift.String,
                status: Swift.String,
                busy: Swift.Bool,
                labels: [Components.Schemas.runner_hyphen_label]
            ) {
                self.id = id
                self.runner_group_id = runner_group_id
                self.name = name
                self.os = os
                self.status = status
                self.busy = busy
                self.labels = labels
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case runner_group_id
                case name
                case os
                case status
                case busy
                case labels
            }
        }
        /// Runner Application
        ///
        /// - Remark: Generated from `#/components/schemas/runner-application`.
        public struct runner_hyphen_application: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/runner-application/os`.
            public var os: Swift.String
            /// - Remark: Generated from `#/components/schemas/runner-application/architecture`.
            public var architecture: Swift.String
            /// - Remark: Generated from `#/components/schemas/runner-application/download_url`.
            public var download_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/runner-application/filename`.
            public var filename: Swift.String
            /// A short lived bearer token used to download the runner, if needed.
            ///
            /// - Remark: Generated from `#/components/schemas/runner-application/temp_download_token`.
            public var temp_download_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/runner-application/sha256_checksum`.
            public var sha256_checksum: Swift.String?
            /// Creates a new `runner_hyphen_application`.
            ///
            /// - Parameters:
            ///   - os:
            ///   - architecture:
            ///   - download_url:
            ///   - filename:
            ///   - temp_download_token: A short lived bearer token used to download the runner, if needed.
            ///   - sha256_checksum:
            public init(
                os: Swift.String,
                architecture: Swift.String,
                download_url: Swift.String,
                filename: Swift.String,
                temp_download_token: Swift.String? = nil,
                sha256_checksum: Swift.String? = nil
            ) {
                self.os = os
                self.architecture = architecture
                self.download_url = download_url
                self.filename = filename
                self.temp_download_token = temp_download_token
                self.sha256_checksum = sha256_checksum
            }
            public enum CodingKeys: String, CodingKey {
                case os
                case architecture
                case download_url
                case filename
                case temp_download_token
                case sha256_checksum
            }
        }
        /// Authentication Token
        ///
        /// - Remark: Generated from `#/components/schemas/authentication-token`.
        public struct authentication_hyphen_token: Codable, Hashable, Sendable {
            /// The token used for authentication
            ///
            /// - Remark: Generated from `#/components/schemas/authentication-token/token`.
            public var token: Swift.String
            /// The time this token expires
            ///
            /// - Remark: Generated from `#/components/schemas/authentication-token/expires_at`.
            public var expires_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/authentication-token/permissions`.
            public var permissions: OpenAPIRuntime.OpenAPIObjectContainer?
            /// The repositories this token has access to
            ///
            /// - Remark: Generated from `#/components/schemas/authentication-token/repositories`.
            public var repositories: [Components.Schemas.repository]?
            /// - Remark: Generated from `#/components/schemas/authentication-token/single_file`.
            public var single_file: Swift.String?
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/authentication-token/repository_selection`.
            @frozen public enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case selected = "selected"
            }
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/authentication-token/repository_selection`.
            public var repository_selection: Components.Schemas.authentication_hyphen_token.repository_selectionPayload?
            /// Creates a new `authentication_hyphen_token`.
            ///
            /// - Parameters:
            ///   - token: The token used for authentication
            ///   - expires_at: The time this token expires
            ///   - permissions:
            ///   - repositories: The repositories this token has access to
            ///   - single_file:
            ///   - repository_selection: Describe whether all repositories have been selected or there's a selection involved
            public init(
                token: Swift.String,
                expires_at: Foundation.Date,
                permissions: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                repositories: [Components.Schemas.repository]? = nil,
                single_file: Swift.String? = nil,
                repository_selection: Components.Schemas.authentication_hyphen_token.repository_selectionPayload? = nil
            ) {
                self.token = token
                self.expires_at = expires_at
                self.permissions = permissions
                self.repositories = repositories
                self.single_file = single_file
                self.repository_selection = repository_selection
            }
            public enum CodingKeys: String, CodingKey {
                case token
                case expires_at
                case permissions
                case repositories
                case single_file
                case repository_selection
            }
        }
        /// Secrets for GitHub Actions for an organization.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-actions-secret`.
        public struct organization_hyphen_actions_hyphen_secret: Codable, Hashable, Sendable {
            /// The name of the secret.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-secret/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-actions-secret/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization-actions-secret/updated_at`.
            public var updated_at: Foundation.Date
            /// Visibility of a secret
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-secret/visibility`.
            @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case _private = "private"
                case selected = "selected"
            }
            /// Visibility of a secret
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-secret/visibility`.
            public var visibility: Components.Schemas.organization_hyphen_actions_hyphen_secret.visibilityPayload
            /// - Remark: Generated from `#/components/schemas/organization-actions-secret/selected_repositories_url`.
            public var selected_repositories_url: Swift.String?
            /// Creates a new `organization_hyphen_actions_hyphen_secret`.
            ///
            /// - Parameters:
            ///   - name: The name of the secret.
            ///   - created_at:
            ///   - updated_at:
            ///   - visibility: Visibility of a secret
            ///   - selected_repositories_url:
            public init(
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                visibility: Components.Schemas.organization_hyphen_actions_hyphen_secret.visibilityPayload,
                selected_repositories_url: Swift.String? = nil
            ) {
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
                self.visibility = visibility
                self.selected_repositories_url = selected_repositories_url
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case created_at
                case updated_at
                case visibility
                case selected_repositories_url
            }
        }
        /// The public key used for setting Actions Secrets.
        ///
        /// - Remark: Generated from `#/components/schemas/actions-public-key`.
        public struct actions_hyphen_public_hyphen_key: Codable, Hashable, Sendable {
            /// The identifier for the key.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-public-key/key_id`.
            public var key_id: Swift.String
            /// The Base64 encoded public key.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-public-key/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/actions-public-key/id`.
            public var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/actions-public-key/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/actions-public-key/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/actions-public-key/created_at`.
            public var created_at: Swift.String?
            /// Creates a new `actions_hyphen_public_hyphen_key`.
            ///
            /// - Parameters:
            ///   - key_id: The identifier for the key.
            ///   - key: The Base64 encoded public key.
            ///   - id:
            ///   - url:
            ///   - title:
            ///   - created_at:
            public init(
                key_id: Swift.String,
                key: Swift.String,
                id: Swift.Int? = nil,
                url: Swift.String? = nil,
                title: Swift.String? = nil,
                created_at: Swift.String? = nil
            ) {
                self.key_id = key_id
                self.key = key
                self.id = id
                self.url = url
                self.title = title
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case key_id
                case key
                case id
                case url
                case title
                case created_at
            }
        }
        /// Organization variable for GitHub Actions.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-actions-variable`.
        public struct organization_hyphen_actions_hyphen_variable: Codable, Hashable, Sendable {
            /// The name of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-variable/name`.
            public var name: Swift.String
            /// The value of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-variable/value`.
            public var value: Swift.String
            /// The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-variable/created_at`.
            public var created_at: Foundation.Date
            /// The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-variable/updated_at`.
            public var updated_at: Foundation.Date
            /// Visibility of a variable
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-variable/visibility`.
            @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case _private = "private"
                case selected = "selected"
            }
            /// Visibility of a variable
            ///
            /// - Remark: Generated from `#/components/schemas/organization-actions-variable/visibility`.
            public var visibility: Components.Schemas.organization_hyphen_actions_hyphen_variable.visibilityPayload
            /// - Remark: Generated from `#/components/schemas/organization-actions-variable/selected_repositories_url`.
            public var selected_repositories_url: Swift.String?
            /// Creates a new `organization_hyphen_actions_hyphen_variable`.
            ///
            /// - Parameters:
            ///   - name: The name of the variable.
            ///   - value: The value of the variable.
            ///   - created_at: The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - updated_at: The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - visibility: Visibility of a variable
            ///   - selected_repositories_url:
            public init(
                name: Swift.String,
                value: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                visibility: Components.Schemas.organization_hyphen_actions_hyphen_variable.visibilityPayload,
                selected_repositories_url: Swift.String? = nil
            ) {
                self.name = name
                self.value = value
                self.created_at = created_at
                self.updated_at = updated_at
                self.visibility = visibility
                self.selected_repositories_url = selected_repositories_url
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case value
                case created_at
                case updated_at
                case visibility
                case selected_repositories_url
            }
        }
        /// An artifact
        ///
        /// - Remark: Generated from `#/components/schemas/artifact`.
        public struct artifact: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/artifact/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/artifact/node_id`.
            public var node_id: Swift.String
            /// The name of the artifact.
            ///
            /// - Remark: Generated from `#/components/schemas/artifact/name`.
            public var name: Swift.String
            /// The size in bytes of the artifact.
            ///
            /// - Remark: Generated from `#/components/schemas/artifact/size_in_bytes`.
            public var size_in_bytes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/artifact/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/artifact/archive_download_url`.
            public var archive_download_url: Swift.String
            /// Whether or not the artifact has expired.
            ///
            /// - Remark: Generated from `#/components/schemas/artifact/expired`.
            public var expired: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/artifact/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/artifact/expires_at`.
            public var expires_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/artifact/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/artifact/workflow_run`.
            public struct workflow_runPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/artifact/workflow_run/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/artifact/workflow_run/repository_id`.
                public var repository_id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/artifact/workflow_run/head_repository_id`.
                public var head_repository_id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/artifact/workflow_run/head_branch`.
                public var head_branch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/artifact/workflow_run/head_sha`.
                public var head_sha: Swift.String?
                /// Creates a new `workflow_runPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - repository_id:
                ///   - head_repository_id:
                ///   - head_branch:
                ///   - head_sha:
                public init(
                    id: Swift.Int? = nil,
                    repository_id: Swift.Int? = nil,
                    head_repository_id: Swift.Int? = nil,
                    head_branch: Swift.String? = nil,
                    head_sha: Swift.String? = nil
                ) {
                    self.id = id
                    self.repository_id = repository_id
                    self.head_repository_id = head_repository_id
                    self.head_branch = head_branch
                    self.head_sha = head_sha
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case repository_id
                    case head_repository_id
                    case head_branch
                    case head_sha
                }
            }
            /// - Remark: Generated from `#/components/schemas/artifact/workflow_run`.
            public var workflow_run: Components.Schemas.artifact.workflow_runPayload?
            /// Creates a new `artifact`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name: The name of the artifact.
            ///   - size_in_bytes: The size in bytes of the artifact.
            ///   - url:
            ///   - archive_download_url:
            ///   - expired: Whether or not the artifact has expired.
            ///   - created_at:
            ///   - expires_at:
            ///   - updated_at:
            ///   - workflow_run:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                size_in_bytes: Swift.Int,
                url: Swift.String,
                archive_download_url: Swift.String,
                expired: Swift.Bool,
                created_at: Foundation.Date? = nil,
                expires_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                workflow_run: Components.Schemas.artifact.workflow_runPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.size_in_bytes = size_in_bytes
                self.url = url
                self.archive_download_url = archive_download_url
                self.expired = expired
                self.created_at = created_at
                self.expires_at = expires_at
                self.updated_at = updated_at
                self.workflow_run = workflow_run
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case size_in_bytes
                case url
                case archive_download_url
                case expired
                case created_at
                case expires_at
                case updated_at
                case workflow_run
            }
        }
        /// Repository actions caches
        ///
        /// - Remark: Generated from `#/components/schemas/actions-cache-list`.
        public struct actions_hyphen_cache_hyphen_list: Codable, Hashable, Sendable {
            /// Total number of caches
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-list/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload`.
            public struct actions_cachesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload/ref`.
                public var ref: Swift.String?
                /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload/version`.
                public var version: Swift.String?
                /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload/last_accessed_at`.
                public var last_accessed_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload/created_at`.
                public var created_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_cachesPayload/size_in_bytes`.
                public var size_in_bytes: Swift.Int?
                /// Creates a new `actions_cachesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - ref:
                ///   - key:
                ///   - version:
                ///   - last_accessed_at:
                ///   - created_at:
                ///   - size_in_bytes:
                public init(
                    id: Swift.Int? = nil,
                    ref: Swift.String? = nil,
                    key: Swift.String? = nil,
                    version: Swift.String? = nil,
                    last_accessed_at: Foundation.Date? = nil,
                    created_at: Foundation.Date? = nil,
                    size_in_bytes: Swift.Int? = nil
                ) {
                    self.id = id
                    self.ref = ref
                    self.key = key
                    self.version = version
                    self.last_accessed_at = last_accessed_at
                    self.created_at = created_at
                    self.size_in_bytes = size_in_bytes
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case ref
                    case key
                    case version
                    case last_accessed_at
                    case created_at
                    case size_in_bytes
                }
            }
            /// Array of caches
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_caches`.
            public typealias actions_cachesPayload = [Components.Schemas.actions_hyphen_cache_hyphen_list.actions_cachesPayloadPayload]
            /// Array of caches
            ///
            /// - Remark: Generated from `#/components/schemas/actions-cache-list/actions_caches`.
            public var actions_caches: Components.Schemas.actions_hyphen_cache_hyphen_list.actions_cachesPayload
            /// Creates a new `actions_hyphen_cache_hyphen_list`.
            ///
            /// - Parameters:
            ///   - total_count: Total number of caches
            ///   - actions_caches: Array of caches
            public init(
                total_count: Swift.Int,
                actions_caches: Components.Schemas.actions_hyphen_cache_hyphen_list.actions_cachesPayload
            ) {
                self.total_count = total_count
                self.actions_caches = actions_caches
            }
            public enum CodingKeys: String, CodingKey {
                case total_count
                case actions_caches
            }
        }
        /// Information of a job execution in a workflow run
        ///
        /// - Remark: Generated from `#/components/schemas/job`.
        public struct job: Codable, Hashable, Sendable {
            /// The id of the job.
            ///
            /// - Remark: Generated from `#/components/schemas/job/id`.
            public var id: Swift.Int
            /// The id of the associated workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/job/run_id`.
            public var run_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/job/run_url`.
            public var run_url: Swift.String
            /// Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
            ///
            /// - Remark: Generated from `#/components/schemas/job/run_attempt`.
            public var run_attempt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/job/node_id`.
            public var node_id: Swift.String
            /// The SHA of the commit that is being run.
            ///
            /// - Remark: Generated from `#/components/schemas/job/head_sha`.
            public var head_sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/job/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/job/html_url`.
            public var html_url: Swift.String?
            /// The phase of the lifecycle that the job is currently in.
            ///
            /// - Remark: Generated from `#/components/schemas/job/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case queued = "queued"
                case in_progress = "in_progress"
                case completed = "completed"
                case waiting = "waiting"
                case requested = "requested"
                case pending = "pending"
            }
            /// The phase of the lifecycle that the job is currently in.
            ///
            /// - Remark: Generated from `#/components/schemas/job/status`.
            public var status: Components.Schemas.job.statusPayload
            /// The outcome of the job.
            ///
            /// - Remark: Generated from `#/components/schemas/job/conclusion`.
            @frozen public enum conclusionPayload: String, Codable, Hashable, Sendable {
                case success = "success"
                case failure = "failure"
                case neutral = "neutral"
                case cancelled = "cancelled"
                case skipped = "skipped"
                case timed_out = "timed_out"
                case action_required = "action_required"
            }
            /// The outcome of the job.
            ///
            /// - Remark: Generated from `#/components/schemas/job/conclusion`.
            public var conclusion: Components.Schemas.job.conclusionPayload?
            /// The time that the job created, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/job/created_at`.
            public var created_at: Foundation.Date
            /// The time that the job started, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/job/started_at`.
            public var started_at: Foundation.Date
            /// The time that the job finished, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/job/completed_at`.
            public var completed_at: Foundation.Date?
            /// The name of the job.
            ///
            /// - Remark: Generated from `#/components/schemas/job/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/job/stepsPayload`.
            public struct stepsPayloadPayload: Codable, Hashable, Sendable {
                /// The phase of the lifecycle that the job is currently in.
                ///
                /// - Remark: Generated from `#/components/schemas/job/stepsPayload/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case queued = "queued"
                    case in_progress = "in_progress"
                    case completed = "completed"
                }
                /// The phase of the lifecycle that the job is currently in.
                ///
                /// - Remark: Generated from `#/components/schemas/job/stepsPayload/status`.
                public var status: Components.Schemas.job.stepsPayloadPayload.statusPayload
                /// The outcome of the job.
                ///
                /// - Remark: Generated from `#/components/schemas/job/stepsPayload/conclusion`.
                public var conclusion: Swift.String?
                /// The name of the job.
                ///
                /// - Remark: Generated from `#/components/schemas/job/stepsPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/job/stepsPayload/number`.
                public var number: Swift.Int
                /// The time that the step started, in ISO 8601 format.
                ///
                /// - Remark: Generated from `#/components/schemas/job/stepsPayload/started_at`.
                public var started_at: Foundation.Date?
                /// The time that the job finished, in ISO 8601 format.
                ///
                /// - Remark: Generated from `#/components/schemas/job/stepsPayload/completed_at`.
                public var completed_at: Foundation.Date?
                /// Creates a new `stepsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - status: The phase of the lifecycle that the job is currently in.
                ///   - conclusion: The outcome of the job.
                ///   - name: The name of the job.
                ///   - number:
                ///   - started_at: The time that the step started, in ISO 8601 format.
                ///   - completed_at: The time that the job finished, in ISO 8601 format.
                public init(
                    status: Components.Schemas.job.stepsPayloadPayload.statusPayload,
                    conclusion: Swift.String? = nil,
                    name: Swift.String,
                    number: Swift.Int,
                    started_at: Foundation.Date? = nil,
                    completed_at: Foundation.Date? = nil
                ) {
                    self.status = status
                    self.conclusion = conclusion
                    self.name = name
                    self.number = number
                    self.started_at = started_at
                    self.completed_at = completed_at
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                    case conclusion
                    case name
                    case number
                    case started_at
                    case completed_at
                }
            }
            /// Steps in this job.
            ///
            /// - Remark: Generated from `#/components/schemas/job/steps`.
            public typealias stepsPayload = [Components.Schemas.job.stepsPayloadPayload]
            /// Steps in this job.
            ///
            /// - Remark: Generated from `#/components/schemas/job/steps`.
            public var steps: Components.Schemas.job.stepsPayload?
            /// - Remark: Generated from `#/components/schemas/job/check_run_url`.
            public var check_run_url: Swift.String
            /// Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
            ///
            /// - Remark: Generated from `#/components/schemas/job/labels`.
            public var labels: [Swift.String]
            /// The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///
            /// - Remark: Generated from `#/components/schemas/job/runner_id`.
            public var runner_id: Swift.Int?
            /// The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///
            /// - Remark: Generated from `#/components/schemas/job/runner_name`.
            public var runner_name: Swift.String?
            /// The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///
            /// - Remark: Generated from `#/components/schemas/job/runner_group_id`.
            public var runner_group_id: Swift.Int?
            /// The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///
            /// - Remark: Generated from `#/components/schemas/job/runner_group_name`.
            public var runner_group_name: Swift.String?
            /// The name of the workflow.
            ///
            /// - Remark: Generated from `#/components/schemas/job/workflow_name`.
            public var workflow_name: Swift.String?
            /// The name of the current branch.
            ///
            /// - Remark: Generated from `#/components/schemas/job/head_branch`.
            public var head_branch: Swift.String?
            /// Creates a new `job`.
            ///
            /// - Parameters:
            ///   - id: The id of the job.
            ///   - run_id: The id of the associated workflow run.
            ///   - run_url:
            ///   - run_attempt: Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
            ///   - node_id:
            ///   - head_sha: The SHA of the commit that is being run.
            ///   - url:
            ///   - html_url:
            ///   - status: The phase of the lifecycle that the job is currently in.
            ///   - conclusion: The outcome of the job.
            ///   - created_at: The time that the job created, in ISO 8601 format.
            ///   - started_at: The time that the job started, in ISO 8601 format.
            ///   - completed_at: The time that the job finished, in ISO 8601 format.
            ///   - name: The name of the job.
            ///   - steps: Steps in this job.
            ///   - check_run_url:
            ///   - labels: Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
            ///   - runner_id: The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///   - runner_name: The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///   - runner_group_id: The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///   - runner_group_name: The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
            ///   - workflow_name: The name of the workflow.
            ///   - head_branch: The name of the current branch.
            public init(
                id: Swift.Int,
                run_id: Swift.Int,
                run_url: Swift.String,
                run_attempt: Swift.Int? = nil,
                node_id: Swift.String,
                head_sha: Swift.String,
                url: Swift.String,
                html_url: Swift.String? = nil,
                status: Components.Schemas.job.statusPayload,
                conclusion: Components.Schemas.job.conclusionPayload? = nil,
                created_at: Foundation.Date,
                started_at: Foundation.Date,
                completed_at: Foundation.Date? = nil,
                name: Swift.String,
                steps: Components.Schemas.job.stepsPayload? = nil,
                check_run_url: Swift.String,
                labels: [Swift.String],
                runner_id: Swift.Int? = nil,
                runner_name: Swift.String? = nil,
                runner_group_id: Swift.Int? = nil,
                runner_group_name: Swift.String? = nil,
                workflow_name: Swift.String? = nil,
                head_branch: Swift.String? = nil
            ) {
                self.id = id
                self.run_id = run_id
                self.run_url = run_url
                self.run_attempt = run_attempt
                self.node_id = node_id
                self.head_sha = head_sha
                self.url = url
                self.html_url = html_url
                self.status = status
                self.conclusion = conclusion
                self.created_at = created_at
                self.started_at = started_at
                self.completed_at = completed_at
                self.name = name
                self.steps = steps
                self.check_run_url = check_run_url
                self.labels = labels
                self.runner_id = runner_id
                self.runner_name = runner_name
                self.runner_group_id = runner_group_id
                self.runner_group_name = runner_group_name
                self.workflow_name = workflow_name
                self.head_branch = head_branch
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case run_id
                case run_url
                case run_attempt
                case node_id
                case head_sha
                case url
                case html_url
                case status
                case conclusion
                case created_at
                case started_at
                case completed_at
                case name
                case steps
                case check_run_url
                case labels
                case runner_id
                case runner_name
                case runner_group_id
                case runner_group_name
                case workflow_name
                case head_branch
            }
        }
        /// Actions OIDC subject customization for a repository
        ///
        /// - Remark: Generated from `#/components/schemas/oidc-custom-sub-repo`.
        public struct oidc_hyphen_custom_hyphen_sub_hyphen_repo: Codable, Hashable, Sendable {
            /// Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/oidc-custom-sub-repo/use_default`.
            public var use_default: Swift.Bool
            /// Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
            ///
            /// - Remark: Generated from `#/components/schemas/oidc-custom-sub-repo/include_claim_keys`.
            public var include_claim_keys: [Swift.String]?
            /// Creates a new `oidc_hyphen_custom_hyphen_sub_hyphen_repo`.
            ///
            /// - Parameters:
            ///   - use_default: Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
            ///   - include_claim_keys: Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
            public init(
                use_default: Swift.Bool,
                include_claim_keys: [Swift.String]? = nil
            ) {
                self.use_default = use_default
                self.include_claim_keys = include_claim_keys
            }
            public enum CodingKeys: String, CodingKey {
                case use_default
                case include_claim_keys
            }
        }
        /// Set secrets for GitHub Actions.
        ///
        /// - Remark: Generated from `#/components/schemas/actions-secret`.
        public struct actions_hyphen_secret: Codable, Hashable, Sendable {
            /// The name of the secret.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-secret/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/actions-secret/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/actions-secret/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `actions_hyphen_secret`.
            ///
            /// - Parameters:
            ///   - name: The name of the secret.
            ///   - created_at:
            ///   - updated_at:
            public init(
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case created_at
                case updated_at
            }
        }
        /// - Remark: Generated from `#/components/schemas/actions-variable`.
        public struct actions_hyphen_variable: Codable, Hashable, Sendable {
            /// The name of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-variable/name`.
            public var name: Swift.String
            /// The value of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-variable/value`.
            public var value: Swift.String
            /// The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-variable/created_at`.
            public var created_at: Foundation.Date
            /// The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-variable/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `actions_hyphen_variable`.
            ///
            /// - Parameters:
            ///   - name: The name of the variable.
            ///   - value: The value of the variable.
            ///   - created_at: The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - updated_at: The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            public init(
                name: Swift.String,
                value: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.name = name
                self.value = value
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case value
                case created_at
                case updated_at
            }
        }
        /// Whether GitHub Actions is enabled on the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/actions-enabled`.
        public typealias actions_hyphen_enabled = Swift.Bool
        /// - Remark: Generated from `#/components/schemas/actions-repository-permissions`.
        public struct actions_hyphen_repository_hyphen_permissions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/actions-repository-permissions/enabled`.
            public var enabled: Components.Schemas.actions_hyphen_enabled
            /// - Remark: Generated from `#/components/schemas/actions-repository-permissions/allowed_actions`.
            public var allowed_actions: Components.Schemas.allowed_hyphen_actions?
            /// - Remark: Generated from `#/components/schemas/actions-repository-permissions/selected_actions_url`.
            public var selected_actions_url: Components.Schemas.selected_hyphen_actions_hyphen_url?
            /// Creates a new `actions_hyphen_repository_hyphen_permissions`.
            ///
            /// - Parameters:
            ///   - enabled:
            ///   - allowed_actions:
            ///   - selected_actions_url:
            public init(
                enabled: Components.Schemas.actions_hyphen_enabled,
                allowed_actions: Components.Schemas.allowed_hyphen_actions? = nil,
                selected_actions_url: Components.Schemas.selected_hyphen_actions_hyphen_url? = nil
            ) {
                self.enabled = enabled
                self.allowed_actions = allowed_actions
                self.selected_actions_url = selected_actions_url
            }
            public enum CodingKeys: String, CodingKey {
                case enabled
                case allowed_actions
                case selected_actions_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/actions-workflow-access-to-repository`.
        public struct actions_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository: Codable, Hashable, Sendable {
            /// Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
            /// repository.
            ///
            /// `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-workflow-access-to-repository/access_level`.
            @frozen public enum access_levelPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case user = "user"
                case organization = "organization"
            }
            /// Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
            /// repository.
            ///
            /// `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-workflow-access-to-repository/access_level`.
            public var access_level: Components.Schemas.actions_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.access_levelPayload
            /// Creates a new `actions_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - access_level: Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
            public init(access_level: Components.Schemas.actions_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.access_levelPayload) {
                self.access_level = access_level
            }
            public enum CodingKeys: String, CodingKey {
                case access_level
            }
        }
        /// A workflow referenced/reused by the initial caller workflow
        ///
        /// - Remark: Generated from `#/components/schemas/referenced-workflow`.
        public struct referenced_hyphen_workflow: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/referenced-workflow/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/referenced-workflow/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/referenced-workflow/ref`.
            public var ref: Swift.String?
            /// Creates a new `referenced_hyphen_workflow`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - sha:
            ///   - ref:
            public init(
                path: Swift.String,
                sha: Swift.String,
                ref: Swift.String? = nil
            ) {
                self.path = path
                self.sha = sha
                self.ref = ref
            }
            public enum CodingKeys: String, CodingKey {
                case path
                case sha
                case ref
            }
        }
        /// - Remark: Generated from `#/components/schemas/pull-request-minimal`.
        public struct pull_hyphen_request_hyphen_minimal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head`.
            public struct headPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo`.
                public struct repoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo/id`.
                    public var id: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo/name`.
                    public var name: Swift.String
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - url:
                    ///   - name:
                    public init(
                        id: Swift.Int64,
                        url: Swift.String,
                        name: Swift.String
                    ) {
                        self.id = id
                        self.url = url
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case url
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo`.
                public var repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload.repoPayload
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - ref:
                ///   - sha:
                ///   - repo:
                public init(
                    ref: Swift.String,
                    sha: Swift.String,
                    repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload.repoPayload
                ) {
                    self.ref = ref
                    self.sha = sha
                    self.repo = repo
                }
                public enum CodingKeys: String, CodingKey {
                    case ref
                    case sha
                    case repo
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head`.
            public var head: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base`.
            public struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo`.
                public struct repoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo/id`.
                    public var id: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo/name`.
                    public var name: Swift.String
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - url:
                    ///   - name:
                    public init(
                        id: Swift.Int64,
                        url: Swift.String,
                        name: Swift.String
                    ) {
                        self.id = id
                        self.url = url
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case url
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo`.
                public var repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload.repoPayload
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - ref:
                ///   - sha:
                ///   - repo:
                public init(
                    ref: Swift.String,
                    sha: Swift.String,
                    repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload.repoPayload
                ) {
                    self.ref = ref
                    self.sha = sha
                    self.repo = repo
                }
                public enum CodingKeys: String, CodingKey {
                    case ref
                    case sha
                    case repo
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base`.
            public var base: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload
            /// Creates a new `pull_hyphen_request_hyphen_minimal`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - number:
            ///   - url:
            ///   - head:
            ///   - base:
            public init(
                id: Swift.Int64,
                number: Swift.Int,
                url: Swift.String,
                head: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload,
                base: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload
            ) {
                self.id = id
                self.number = number
                self.url = url
                self.head = head
                self.base = base
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case number
                case url
                case head
                case base
            }
        }
        /// A commit.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-commit`.
        public struct nullable_hyphen_simple_hyphen_commit: Codable, Hashable, Sendable {
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/id`.
            public var id: Swift.String
            /// SHA for the commit's tree
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/tree_id`.
            public var tree_id: Swift.String
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/message`.
            public var message: Swift.String
            /// Timestamp of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/timestamp`.
            public var timestamp: Foundation.Date
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/author`.
            public struct authorPayload: Codable, Hashable, Sendable {
                /// Name of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/author/name`.
                public var name: Swift.String
                /// Git email address of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/author/email`.
                public var email: Swift.String
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's author
                ///   - email: Git email address of the commit's author
                public init(
                    name: Swift.String,
                    email: Swift.String
                ) {
                    self.name = name
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/author`.
            public var author: Components.Schemas.nullable_hyphen_simple_hyphen_commit.authorPayload?
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/committer`.
            public struct committerPayload: Codable, Hashable, Sendable {
                /// Name of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/committer/name`.
                public var name: Swift.String
                /// Git email address of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/committer/email`.
                public var email: Swift.String
                /// Creates a new `committerPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's committer
                ///   - email: Git email address of the commit's committer
                public init(
                    name: Swift.String,
                    email: Swift.String
                ) {
                    self.name = name
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-simple-commit/committer`.
            public var committer: Components.Schemas.nullable_hyphen_simple_hyphen_commit.committerPayload?
            /// Creates a new `nullable_hyphen_simple_hyphen_commit`.
            ///
            /// - Parameters:
            ///   - id: SHA for the commit
            ///   - tree_id: SHA for the commit's tree
            ///   - message: Message describing the purpose of the commit
            ///   - timestamp: Timestamp of the commit
            ///   - author: Information about the Git author
            ///   - committer: Information about the Git committer
            public init(
                id: Swift.String,
                tree_id: Swift.String,
                message: Swift.String,
                timestamp: Foundation.Date,
                author: Components.Schemas.nullable_hyphen_simple_hyphen_commit.authorPayload? = nil,
                committer: Components.Schemas.nullable_hyphen_simple_hyphen_commit.committerPayload? = nil
            ) {
                self.id = id
                self.tree_id = tree_id
                self.message = message
                self.timestamp = timestamp
                self.author = author
                self.committer = committer
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case tree_id
                case message
                case timestamp
                case author
                case committer
            }
        }
        /// An invocation of a workflow
        ///
        /// - Remark: Generated from `#/components/schemas/workflow-run`.
        public struct workflow_hyphen_run: Codable, Hashable, Sendable {
            /// The ID of the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/id`.
            public var id: Swift.Int
            /// The name of the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/workflow-run/node_id`.
            public var node_id: Swift.String
            /// The ID of the associated check suite.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/check_suite_id`.
            public var check_suite_id: Swift.Int?
            /// The node ID of the associated check suite.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/check_suite_node_id`.
            public var check_suite_node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/workflow-run/head_branch`.
            public var head_branch: Swift.String?
            /// The SHA of the head commit that points to the version of the workflow being run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/head_sha`.
            public var head_sha: Swift.String
            /// The full path of the workflow
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/path`.
            public var path: Swift.String
            /// The auto incrementing run number for the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/run_number`.
            public var run_number: Swift.Int
            /// Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/run_attempt`.
            public var run_attempt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/workflow-run/referenced_workflows`.
            public var referenced_workflows: [Components.Schemas.referenced_hyphen_workflow]?
            /// - Remark: Generated from `#/components/schemas/workflow-run/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow-run/status`.
            public var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/workflow-run/conclusion`.
            public var conclusion: Swift.String?
            /// The ID of the parent workflow.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/workflow_id`.
            public var workflow_id: Swift.Int
            /// The URL to the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow-run/html_url`.
            public var html_url: Swift.String
            /// Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/pull_requests`.
            public var pull_requests: [Components.Schemas.pull_hyphen_request_hyphen_minimal]?
            /// - Remark: Generated from `#/components/schemas/workflow-run/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/workflow-run/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/workflow-run/actor`.
            public var actor: Components.Schemas.simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/workflow-run/triggering_actor`.
            public var triggering_actor: Components.Schemas.simple_hyphen_user?
            /// The start time of the latest run. Resets on re-run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/run_started_at`.
            public var run_started_at: Foundation.Date?
            /// The URL to the jobs for the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/jobs_url`.
            public var jobs_url: Swift.String
            /// The URL to download the logs for the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/logs_url`.
            public var logs_url: Swift.String
            /// The URL to the associated check suite.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/check_suite_url`.
            public var check_suite_url: Swift.String
            /// The URL to the artifacts for the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/artifacts_url`.
            public var artifacts_url: Swift.String
            /// The URL to cancel the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/cancel_url`.
            public var cancel_url: Swift.String
            /// The URL to rerun the workflow run.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/rerun_url`.
            public var rerun_url: Swift.String
            /// The URL to the previous attempted run of this workflow, if one exists.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/previous_attempt_url`.
            public var previous_attempt_url: Swift.String?
            /// The URL to the workflow.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/workflow_url`.
            public var workflow_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow-run/head_commit`.
            public var head_commit: Components.Schemas.nullable_hyphen_simple_hyphen_commit?
            /// - Remark: Generated from `#/components/schemas/workflow-run/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/workflow-run/head_repository`.
            public var head_repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/workflow-run/head_repository_id`.
            public var head_repository_id: Swift.Int?
            /// The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
            ///
            /// - Remark: Generated from `#/components/schemas/workflow-run/display_title`.
            public var display_title: Swift.String
            /// Creates a new `workflow_hyphen_run`.
            ///
            /// - Parameters:
            ///   - id: The ID of the workflow run.
            ///   - name: The name of the workflow run.
            ///   - node_id:
            ///   - check_suite_id: The ID of the associated check suite.
            ///   - check_suite_node_id: The node ID of the associated check suite.
            ///   - head_branch:
            ///   - head_sha: The SHA of the head commit that points to the version of the workflow being run.
            ///   - path: The full path of the workflow
            ///   - run_number: The auto incrementing run number for the workflow run.
            ///   - run_attempt: Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
            ///   - referenced_workflows:
            ///   - event:
            ///   - status:
            ///   - conclusion:
            ///   - workflow_id: The ID of the parent workflow.
            ///   - url: The URL to the workflow run.
            ///   - html_url:
            ///   - pull_requests: Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.
            ///   - created_at:
            ///   - updated_at:
            ///   - actor:
            ///   - triggering_actor:
            ///   - run_started_at: The start time of the latest run. Resets on re-run.
            ///   - jobs_url: The URL to the jobs for the workflow run.
            ///   - logs_url: The URL to download the logs for the workflow run.
            ///   - check_suite_url: The URL to the associated check suite.
            ///   - artifacts_url: The URL to the artifacts for the workflow run.
            ///   - cancel_url: The URL to cancel the workflow run.
            ///   - rerun_url: The URL to rerun the workflow run.
            ///   - previous_attempt_url: The URL to the previous attempted run of this workflow, if one exists.
            ///   - workflow_url: The URL to the workflow.
            ///   - head_commit:
            ///   - repository:
            ///   - head_repository:
            ///   - head_repository_id:
            ///   - display_title: The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
            public init(
                id: Swift.Int,
                name: Swift.String? = nil,
                node_id: Swift.String,
                check_suite_id: Swift.Int? = nil,
                check_suite_node_id: Swift.String? = nil,
                head_branch: Swift.String? = nil,
                head_sha: Swift.String,
                path: Swift.String,
                run_number: Swift.Int,
                run_attempt: Swift.Int? = nil,
                referenced_workflows: [Components.Schemas.referenced_hyphen_workflow]? = nil,
                event: Swift.String,
                status: Swift.String? = nil,
                conclusion: Swift.String? = nil,
                workflow_id: Swift.Int,
                url: Swift.String,
                html_url: Swift.String,
                pull_requests: [Components.Schemas.pull_hyphen_request_hyphen_minimal]? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                actor: Components.Schemas.simple_hyphen_user? = nil,
                triggering_actor: Components.Schemas.simple_hyphen_user? = nil,
                run_started_at: Foundation.Date? = nil,
                jobs_url: Swift.String,
                logs_url: Swift.String,
                check_suite_url: Swift.String,
                artifacts_url: Swift.String,
                cancel_url: Swift.String,
                rerun_url: Swift.String,
                previous_attempt_url: Swift.String? = nil,
                workflow_url: Swift.String,
                head_commit: Components.Schemas.nullable_hyphen_simple_hyphen_commit? = nil,
                repository: Components.Schemas.minimal_hyphen_repository,
                head_repository: Components.Schemas.minimal_hyphen_repository,
                head_repository_id: Swift.Int? = nil,
                display_title: Swift.String
            ) {
                self.id = id
                self.name = name
                self.node_id = node_id
                self.check_suite_id = check_suite_id
                self.check_suite_node_id = check_suite_node_id
                self.head_branch = head_branch
                self.head_sha = head_sha
                self.path = path
                self.run_number = run_number
                self.run_attempt = run_attempt
                self.referenced_workflows = referenced_workflows
                self.event = event
                self.status = status
                self.conclusion = conclusion
                self.workflow_id = workflow_id
                self.url = url
                self.html_url = html_url
                self.pull_requests = pull_requests
                self.created_at = created_at
                self.updated_at = updated_at
                self.actor = actor
                self.triggering_actor = triggering_actor
                self.run_started_at = run_started_at
                self.jobs_url = jobs_url
                self.logs_url = logs_url
                self.check_suite_url = check_suite_url
                self.artifacts_url = artifacts_url
                self.cancel_url = cancel_url
                self.rerun_url = rerun_url
                self.previous_attempt_url = previous_attempt_url
                self.workflow_url = workflow_url
                self.head_commit = head_commit
                self.repository = repository
                self.head_repository = head_repository
                self.head_repository_id = head_repository_id
                self.display_title = display_title
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case node_id
                case check_suite_id
                case check_suite_node_id
                case head_branch
                case head_sha
                case path
                case run_number
                case run_attempt
                case referenced_workflows
                case event
                case status
                case conclusion
                case workflow_id
                case url
                case html_url
                case pull_requests
                case created_at
                case updated_at
                case actor
                case triggering_actor
                case run_started_at
                case jobs_url
                case logs_url
                case check_suite_url
                case artifacts_url
                case cancel_url
                case rerun_url
                case previous_attempt_url
                case workflow_url
                case head_commit
                case repository
                case head_repository
                case head_repository_id
                case display_title
            }
        }
        /// An entry in the reviews log for environment deployments
        ///
        /// - Remark: Generated from `#/components/schemas/environment-approvals`.
        public struct environment_hyphen_approvals: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload`.
            public struct environmentsPayloadPayload: Codable, Hashable, Sendable {
                /// The id of the environment.
                ///
                /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload/node_id`.
                public var node_id: Swift.String?
                /// The name of the environment.
                ///
                /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload/html_url`.
                public var html_url: Swift.String?
                /// The time that the environment was created, in ISO 8601 format.
                ///
                /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload/created_at`.
                public var created_at: Foundation.Date?
                /// The time that the environment was last updated, in ISO 8601 format.
                ///
                /// - Remark: Generated from `#/components/schemas/environment-approvals/environmentsPayload/updated_at`.
                public var updated_at: Foundation.Date?
                /// Creates a new `environmentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id: The id of the environment.
                ///   - node_id:
                ///   - name: The name of the environment.
                ///   - url:
                ///   - html_url:
                ///   - created_at: The time that the environment was created, in ISO 8601 format.
                ///   - updated_at: The time that the environment was last updated, in ISO 8601 format.
                public init(
                    id: Swift.Int? = nil,
                    node_id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    created_at: Foundation.Date? = nil,
                    updated_at: Foundation.Date? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.name = name
                    self.url = url
                    self.html_url = html_url
                    self.created_at = created_at
                    self.updated_at = updated_at
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case name
                    case url
                    case html_url
                    case created_at
                    case updated_at
                }
            }
            /// The list of environments that were approved or rejected
            ///
            /// - Remark: Generated from `#/components/schemas/environment-approvals/environments`.
            public typealias environmentsPayload = [Components.Schemas.environment_hyphen_approvals.environmentsPayloadPayload]
            /// The list of environments that were approved or rejected
            ///
            /// - Remark: Generated from `#/components/schemas/environment-approvals/environments`.
            public var environments: Components.Schemas.environment_hyphen_approvals.environmentsPayload
            /// Whether deployment to the environment(s) was approved or rejected or pending (with comments)
            ///
            /// - Remark: Generated from `#/components/schemas/environment-approvals/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case approved = "approved"
                case rejected = "rejected"
                case pending = "pending"
            }
            /// Whether deployment to the environment(s) was approved or rejected or pending (with comments)
            ///
            /// - Remark: Generated from `#/components/schemas/environment-approvals/state`.
            public var state: Components.Schemas.environment_hyphen_approvals.statePayload
            /// - Remark: Generated from `#/components/schemas/environment-approvals/user`.
            public var user: Components.Schemas.simple_hyphen_user
            /// The comment submitted with the deployment review
            ///
            /// - Remark: Generated from `#/components/schemas/environment-approvals/comment`.
            public var comment: Swift.String
            /// Creates a new `environment_hyphen_approvals`.
            ///
            /// - Parameters:
            ///   - environments: The list of environments that were approved or rejected
            ///   - state: Whether deployment to the environment(s) was approved or rejected or pending (with comments)
            ///   - user:
            ///   - comment: The comment submitted with the deployment review
            public init(
                environments: Components.Schemas.environment_hyphen_approvals.environmentsPayload,
                state: Components.Schemas.environment_hyphen_approvals.statePayload,
                user: Components.Schemas.simple_hyphen_user,
                comment: Swift.String
            ) {
                self.environments = environments
                self.state = state
                self.user = user
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case environments
                case state
                case user
                case comment
            }
        }
        /// - Remark: Generated from `#/components/schemas/review-custom-gates-comment-required`.
        public struct review_hyphen_custom_hyphen_gates_hyphen_comment_hyphen_required: Codable, Hashable, Sendable {
            /// The name of the environment to approve or reject.
            ///
            /// - Remark: Generated from `#/components/schemas/review-custom-gates-comment-required/environment_name`.
            public var environment_name: Swift.String
            /// Comment associated with the pending deployment protection rule. **Required when state is not provided.**
            ///
            /// - Remark: Generated from `#/components/schemas/review-custom-gates-comment-required/comment`.
            public var comment: Swift.String
            /// Creates a new `review_hyphen_custom_hyphen_gates_hyphen_comment_hyphen_required`.
            ///
            /// - Parameters:
            ///   - environment_name: The name of the environment to approve or reject.
            ///   - comment: Comment associated with the pending deployment protection rule. **Required when state is not provided.**
            public init(
                environment_name: Swift.String,
                comment: Swift.String
            ) {
                self.environment_name = environment_name
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case environment_name
                case comment
            }
        }
        /// - Remark: Generated from `#/components/schemas/review-custom-gates-state-required`.
        public struct review_hyphen_custom_hyphen_gates_hyphen_state_hyphen_required: Codable, Hashable, Sendable {
            /// The name of the environment to approve or reject.
            ///
            /// - Remark: Generated from `#/components/schemas/review-custom-gates-state-required/environment_name`.
            public var environment_name: Swift.String
            /// Whether to approve or reject deployment to the specified environments.
            ///
            /// - Remark: Generated from `#/components/schemas/review-custom-gates-state-required/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case approved = "approved"
                case rejected = "rejected"
            }
            /// Whether to approve or reject deployment to the specified environments.
            ///
            /// - Remark: Generated from `#/components/schemas/review-custom-gates-state-required/state`.
            public var state: Components.Schemas.review_hyphen_custom_hyphen_gates_hyphen_state_hyphen_required.statePayload
            /// Optional comment to include with the review.
            ///
            /// - Remark: Generated from `#/components/schemas/review-custom-gates-state-required/comment`.
            public var comment: Swift.String?
            /// Creates a new `review_hyphen_custom_hyphen_gates_hyphen_state_hyphen_required`.
            ///
            /// - Parameters:
            ///   - environment_name: The name of the environment to approve or reject.
            ///   - state: Whether to approve or reject deployment to the specified environments.
            ///   - comment: Optional comment to include with the review.
            public init(
                environment_name: Swift.String,
                state: Components.Schemas.review_hyphen_custom_hyphen_gates_hyphen_state_hyphen_required.statePayload,
                comment: Swift.String? = nil
            ) {
                self.environment_name = environment_name
                self.state = state
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case environment_name
                case state
                case comment
            }
        }
        /// The type of reviewer.
        ///
        /// - Remark: Generated from `#/components/schemas/deployment-reviewer-type`.
        @frozen public enum deployment_hyphen_reviewer_hyphen_type: String, Codable, Hashable, Sendable {
            case User = "User"
            case Team = "Team"
        }
        /// Details of a deployment that is waiting for protection rules to pass
        ///
        /// - Remark: Generated from `#/components/schemas/pending-deployment`.
        public struct pending_hyphen_deployment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pending-deployment/environment`.
            public struct environmentPayload: Codable, Hashable, Sendable {
                /// The id of the environment.
                ///
                /// - Remark: Generated from `#/components/schemas/pending-deployment/environment/id`.
                public var id: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/pending-deployment/environment/node_id`.
                public var node_id: Swift.String?
                /// The name of the environment.
                ///
                /// - Remark: Generated from `#/components/schemas/pending-deployment/environment/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pending-deployment/environment/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pending-deployment/environment/html_url`.
                public var html_url: Swift.String?
                /// Creates a new `environmentPayload`.
                ///
                /// - Parameters:
                ///   - id: The id of the environment.
                ///   - node_id:
                ///   - name: The name of the environment.
                ///   - url:
                ///   - html_url:
                public init(
                    id: Swift.Int64? = nil,
                    node_id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    url: Swift.String? = nil,
                    html_url: Swift.String? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.name = name
                    self.url = url
                    self.html_url = html_url
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case name
                    case url
                    case html_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/pending-deployment/environment`.
            public var environment: Components.Schemas.pending_hyphen_deployment.environmentPayload
            /// The set duration of the wait timer
            ///
            /// - Remark: Generated from `#/components/schemas/pending-deployment/wait_timer`.
            public var wait_timer: Swift.Int
            /// The time that the wait timer began.
            ///
            /// - Remark: Generated from `#/components/schemas/pending-deployment/wait_timer_started_at`.
            public var wait_timer_started_at: Foundation.Date?
            /// Whether the currently authenticated user can approve the deployment
            ///
            /// - Remark: Generated from `#/components/schemas/pending-deployment/current_user_can_approve`.
            public var current_user_can_approve: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewersPayload`.
            public struct reviewersPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewersPayload/type`.
                public var _type: Components.Schemas.deployment_hyphen_reviewer_hyphen_type?
                /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewersPayload/reviewer`.
                public struct reviewerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewersPayload/reviewer/value1`.
                    public var value1: Components.Schemas.simple_hyphen_user?
                    /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewersPayload/reviewer/value2`.
                    public var value2: Components.Schemas.team?
                    /// Creates a new `reviewerPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.simple_hyphen_user? = nil,
                        value2: Components.Schemas.team? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewersPayload/reviewer`.
                public var reviewer: Components.Schemas.pending_hyphen_deployment.reviewersPayloadPayload.reviewerPayload?
                /// Creates a new `reviewersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - reviewer:
                public init(
                    _type: Components.Schemas.deployment_hyphen_reviewer_hyphen_type? = nil,
                    reviewer: Components.Schemas.pending_hyphen_deployment.reviewersPayloadPayload.reviewerPayload? = nil
                ) {
                    self._type = _type
                    self.reviewer = reviewer
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case reviewer
                }
            }
            /// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
            ///
            /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewers`.
            public typealias reviewersPayload = [Components.Schemas.pending_hyphen_deployment.reviewersPayloadPayload]
            /// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
            ///
            /// - Remark: Generated from `#/components/schemas/pending-deployment/reviewers`.
            public var reviewers: Components.Schemas.pending_hyphen_deployment.reviewersPayload
            /// Creates a new `pending_hyphen_deployment`.
            ///
            /// - Parameters:
            ///   - environment:
            ///   - wait_timer: The set duration of the wait timer
            ///   - wait_timer_started_at: The time that the wait timer began.
            ///   - current_user_can_approve: Whether the currently authenticated user can approve the deployment
            ///   - reviewers: The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
            public init(
                environment: Components.Schemas.pending_hyphen_deployment.environmentPayload,
                wait_timer: Swift.Int,
                wait_timer_started_at: Foundation.Date? = nil,
                current_user_can_approve: Swift.Bool,
                reviewers: Components.Schemas.pending_hyphen_deployment.reviewersPayload
            ) {
                self.environment = environment
                self.wait_timer = wait_timer
                self.wait_timer_started_at = wait_timer_started_at
                self.current_user_can_approve = current_user_can_approve
                self.reviewers = reviewers
            }
            public enum CodingKeys: String, CodingKey {
                case environment
                case wait_timer
                case wait_timer_started_at
                case current_user_can_approve
                case reviewers
            }
        }
        /// A request for a specific ref(branch,sha,tag) to be deployed
        ///
        /// - Remark: Generated from `#/components/schemas/deployment`.
        public struct deployment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/deployment/url`.
            public var url: Swift.String
            /// Unique identifier of the deployment
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/deployment/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/sha`.
            public var sha: Swift.String
            /// The ref to deploy. This can be a branch, tag, or sha.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/ref`.
            public var ref: Swift.String
            /// Parameter to specify a task to execute
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/task`.
            public var task: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/payload`.
            @frozen public enum payloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/deployment/payload/case1`.
                public struct Case1Payload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/deployment/payload/case1`.
                case case1(Components.Schemas.deployment.payloadPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/deployment/payload/case2`.
                case case2(Swift.String)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/deployment/payload`.
            public var payload: Components.Schemas.deployment.payloadPayload
            /// - Remark: Generated from `#/components/schemas/deployment/original_environment`.
            public var original_environment: Swift.String?
            /// Name for the target deployment environment.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/environment`.
            public var environment: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/deployment/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/deployment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/repository_url`.
            public var repository_url: Swift.String
            /// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/transient_environment`.
            public var transient_environment: Swift.Bool?
            /// Specifies if the given environment is one that end-users directly interact with. Default: false.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/production_environment`.
            public var production_environment: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/deployment/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// Creates a new `deployment`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id: Unique identifier of the deployment
            ///   - node_id:
            ///   - sha:
            ///   - ref: The ref to deploy. This can be a branch, tag, or sha.
            ///   - task: Parameter to specify a task to execute
            ///   - payload:
            ///   - original_environment:
            ///   - environment: Name for the target deployment environment.
            ///   - description:
            ///   - creator:
            ///   - created_at:
            ///   - updated_at:
            ///   - statuses_url:
            ///   - repository_url:
            ///   - transient_environment: Specifies if the given environment is will no longer exist at some point in the future. Default: false.
            ///   - production_environment: Specifies if the given environment is one that end-users directly interact with. Default: false.
            ///   - performed_via_github_app:
            public init(
                url: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                sha: Swift.String,
                ref: Swift.String,
                task: Swift.String,
                payload: Components.Schemas.deployment.payloadPayload,
                original_environment: Swift.String? = nil,
                environment: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                statuses_url: Swift.String,
                repository_url: Swift.String,
                transient_environment: Swift.Bool? = nil,
                production_environment: Swift.Bool? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.sha = sha
                self.ref = ref
                self.task = task
                self.payload = payload
                self.original_environment = original_environment
                self.environment = environment
                self.description = description
                self.creator = creator
                self.created_at = created_at
                self.updated_at = updated_at
                self.statuses_url = statuses_url
                self.repository_url = repository_url
                self.transient_environment = transient_environment
                self.production_environment = production_environment
                self.performed_via_github_app = performed_via_github_app
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case sha
                case ref
                case task
                case payload
                case original_environment
                case environment
                case description
                case creator
                case created_at
                case updated_at
                case statuses_url
                case repository_url
                case transient_environment
                case production_environment
                case performed_via_github_app
            }
        }
        /// Workflow Run Usage
        ///
        /// - Remark: Generated from `#/components/schemas/workflow-run-usage`.
        public struct workflow_hyphen_run_hyphen_usage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable`.
            public struct billablePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU`.
                public struct UBUNTUPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU/total_ms`.
                    public var total_ms: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU/jobs`.
                    public var jobs: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU/job_runsPayload`.
                    public struct job_runsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU/job_runsPayload/job_id`.
                        public var job_id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU/job_runsPayload/duration_ms`.
                        public var duration_ms: Swift.Int
                        /// Creates a new `job_runsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - job_id:
                        ///   - duration_ms:
                        public init(
                            job_id: Swift.Int,
                            duration_ms: Swift.Int
                        ) {
                            self.job_id = job_id
                            self.duration_ms = duration_ms
                        }
                        public enum CodingKeys: String, CodingKey {
                            case job_id
                            case duration_ms
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU/job_runs`.
                    public typealias job_runsPayload = [Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.UBUNTUPayload.job_runsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU/job_runs`.
                    public var job_runs: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.UBUNTUPayload.job_runsPayload?
                    /// Creates a new `UBUNTUPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_ms:
                    ///   - jobs:
                    ///   - job_runs:
                    public init(
                        total_ms: Swift.Int,
                        jobs: Swift.Int,
                        job_runs: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.UBUNTUPayload.job_runsPayload? = nil
                    ) {
                        self.total_ms = total_ms
                        self.jobs = jobs
                        self.job_runs = job_runs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_ms
                        case jobs
                        case job_runs
                    }
                }
                /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/UBUNTU`.
                public var UBUNTU: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.UBUNTUPayload?
                /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS`.
                public struct MACOSPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS/total_ms`.
                    public var total_ms: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS/jobs`.
                    public var jobs: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS/job_runsPayload`.
                    public struct job_runsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS/job_runsPayload/job_id`.
                        public var job_id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS/job_runsPayload/duration_ms`.
                        public var duration_ms: Swift.Int
                        /// Creates a new `job_runsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - job_id:
                        ///   - duration_ms:
                        public init(
                            job_id: Swift.Int,
                            duration_ms: Swift.Int
                        ) {
                            self.job_id = job_id
                            self.duration_ms = duration_ms
                        }
                        public enum CodingKeys: String, CodingKey {
                            case job_id
                            case duration_ms
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS/job_runs`.
                    public typealias job_runsPayload = [Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.MACOSPayload.job_runsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS/job_runs`.
                    public var job_runs: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.MACOSPayload.job_runsPayload?
                    /// Creates a new `MACOSPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_ms:
                    ///   - jobs:
                    ///   - job_runs:
                    public init(
                        total_ms: Swift.Int,
                        jobs: Swift.Int,
                        job_runs: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.MACOSPayload.job_runsPayload? = nil
                    ) {
                        self.total_ms = total_ms
                        self.jobs = jobs
                        self.job_runs = job_runs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_ms
                        case jobs
                        case job_runs
                    }
                }
                /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/MACOS`.
                public var MACOS: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.MACOSPayload?
                /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS`.
                public struct WINDOWSPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS/total_ms`.
                    public var total_ms: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS/jobs`.
                    public var jobs: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS/job_runsPayload`.
                    public struct job_runsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS/job_runsPayload/job_id`.
                        public var job_id: Swift.Int
                        /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS/job_runsPayload/duration_ms`.
                        public var duration_ms: Swift.Int
                        /// Creates a new `job_runsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - job_id:
                        ///   - duration_ms:
                        public init(
                            job_id: Swift.Int,
                            duration_ms: Swift.Int
                        ) {
                            self.job_id = job_id
                            self.duration_ms = duration_ms
                        }
                        public enum CodingKeys: String, CodingKey {
                            case job_id
                            case duration_ms
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS/job_runs`.
                    public typealias job_runsPayload = [Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.WINDOWSPayload.job_runsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS/job_runs`.
                    public var job_runs: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.WINDOWSPayload.job_runsPayload?
                    /// Creates a new `WINDOWSPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_ms:
                    ///   - jobs:
                    ///   - job_runs:
                    public init(
                        total_ms: Swift.Int,
                        jobs: Swift.Int,
                        job_runs: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.WINDOWSPayload.job_runsPayload? = nil
                    ) {
                        self.total_ms = total_ms
                        self.jobs = jobs
                        self.job_runs = job_runs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_ms
                        case jobs
                        case job_runs
                    }
                }
                /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable/WINDOWS`.
                public var WINDOWS: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.WINDOWSPayload?
                /// Creates a new `billablePayload`.
                ///
                /// - Parameters:
                ///   - UBUNTU:
                ///   - MACOS:
                ///   - WINDOWS:
                public init(
                    UBUNTU: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.UBUNTUPayload? = nil,
                    MACOS: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.MACOSPayload? = nil,
                    WINDOWS: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload.WINDOWSPayload? = nil
                ) {
                    self.UBUNTU = UBUNTU
                    self.MACOS = MACOS
                    self.WINDOWS = WINDOWS
                }
                public enum CodingKeys: String, CodingKey {
                    case UBUNTU
                    case MACOS
                    case WINDOWS
                }
            }
            /// - Remark: Generated from `#/components/schemas/workflow-run-usage/billable`.
            public var billable: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload
            /// - Remark: Generated from `#/components/schemas/workflow-run-usage/run_duration_ms`.
            public var run_duration_ms: Swift.Int?
            /// Creates a new `workflow_hyphen_run_hyphen_usage`.
            ///
            /// - Parameters:
            ///   - billable:
            ///   - run_duration_ms:
            public init(
                billable: Components.Schemas.workflow_hyphen_run_hyphen_usage.billablePayload,
                run_duration_ms: Swift.Int? = nil
            ) {
                self.billable = billable
                self.run_duration_ms = run_duration_ms
            }
            public enum CodingKeys: String, CodingKey {
                case billable
                case run_duration_ms
            }
        }
        /// A GitHub Actions workflow
        ///
        /// - Remark: Generated from `#/components/schemas/workflow`.
        public struct workflow: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/workflow/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/workflow/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case deleted = "deleted"
                case disabled_fork = "disabled_fork"
                case disabled_inactivity = "disabled_inactivity"
                case disabled_manually = "disabled_manually"
            }
            /// - Remark: Generated from `#/components/schemas/workflow/state`.
            public var state: Components.Schemas.workflow.statePayload
            /// - Remark: Generated from `#/components/schemas/workflow/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/workflow/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/workflow/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow/badge_url`.
            public var badge_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/workflow/deleted_at`.
            public var deleted_at: Foundation.Date?
            /// Creates a new `workflow`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - path:
            ///   - state:
            ///   - created_at:
            ///   - updated_at:
            ///   - url:
            ///   - html_url:
            ///   - badge_url:
            ///   - deleted_at:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                path: Swift.String,
                state: Components.Schemas.workflow.statePayload,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                url: Swift.String,
                html_url: Swift.String,
                badge_url: Swift.String,
                deleted_at: Foundation.Date? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.path = path
                self.state = state
                self.created_at = created_at
                self.updated_at = updated_at
                self.url = url
                self.html_url = html_url
                self.badge_url = badge_url
                self.deleted_at = deleted_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case path
                case state
                case created_at
                case updated_at
                case url
                case html_url
                case badge_url
                case deleted_at
            }
        }
        /// Workflow Usage
        ///
        /// - Remark: Generated from `#/components/schemas/workflow-usage`.
        public struct workflow_hyphen_usage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/workflow-usage/billable`.
            public struct billablePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/UBUNTU`.
                public struct UBUNTUPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/UBUNTU/total_ms`.
                    public var total_ms: Swift.Int?
                    /// Creates a new `UBUNTUPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_ms:
                    public init(total_ms: Swift.Int? = nil) {
                        self.total_ms = total_ms
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_ms
                    }
                }
                /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/UBUNTU`.
                public var UBUNTU: Components.Schemas.workflow_hyphen_usage.billablePayload.UBUNTUPayload?
                /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/MACOS`.
                public struct MACOSPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/MACOS/total_ms`.
                    public var total_ms: Swift.Int?
                    /// Creates a new `MACOSPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_ms:
                    public init(total_ms: Swift.Int? = nil) {
                        self.total_ms = total_ms
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_ms
                    }
                }
                /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/MACOS`.
                public var MACOS: Components.Schemas.workflow_hyphen_usage.billablePayload.MACOSPayload?
                /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/WINDOWS`.
                public struct WINDOWSPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/WINDOWS/total_ms`.
                    public var total_ms: Swift.Int?
                    /// Creates a new `WINDOWSPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_ms:
                    public init(total_ms: Swift.Int? = nil) {
                        self.total_ms = total_ms
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_ms
                    }
                }
                /// - Remark: Generated from `#/components/schemas/workflow-usage/billable/WINDOWS`.
                public var WINDOWS: Components.Schemas.workflow_hyphen_usage.billablePayload.WINDOWSPayload?
                /// Creates a new `billablePayload`.
                ///
                /// - Parameters:
                ///   - UBUNTU:
                ///   - MACOS:
                ///   - WINDOWS:
                public init(
                    UBUNTU: Components.Schemas.workflow_hyphen_usage.billablePayload.UBUNTUPayload? = nil,
                    MACOS: Components.Schemas.workflow_hyphen_usage.billablePayload.MACOSPayload? = nil,
                    WINDOWS: Components.Schemas.workflow_hyphen_usage.billablePayload.WINDOWSPayload? = nil
                ) {
                    self.UBUNTU = UBUNTU
                    self.MACOS = MACOS
                    self.WINDOWS = WINDOWS
                }
                public enum CodingKeys: String, CodingKey {
                    case UBUNTU
                    case MACOS
                    case WINDOWS
                }
            }
            /// - Remark: Generated from `#/components/schemas/workflow-usage/billable`.
            public var billable: Components.Schemas.workflow_hyphen_usage.billablePayload
            /// Creates a new `workflow_hyphen_usage`.
            ///
            /// - Parameters:
            ///   - billable:
            public init(billable: Components.Schemas.workflow_hyphen_usage.billablePayload) {
                self.billable = billable
            }
            public enum CodingKeys: String, CodingKey {
                case billable
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The unique identifier of the repository.
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id`.
        public typealias repository_hyphen_id = Swift.Int
        /// Unique identifier of the self-hosted runner.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-id`.
        public typealias runner_hyphen_id = Swift.Int
        /// The name of a self-hosted runner's custom label.
        ///
        /// - Remark: Generated from `#/components/parameters/runner-label-name`.
        public typealias runner_hyphen_label_hyphen_name = Swift.String
        /// The name of the secret.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-name`.
        public typealias secret_hyphen_name = Swift.String
        /// The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/variables-per-page`.
        public typealias variables_hyphen_per_hyphen_page = Swift.Int
        /// The name of the variable.
        ///
        /// - Remark: Generated from `#/components/parameters/variable-name`.
        public typealias variable_hyphen_name = Swift.String
        /// The name field of an artifact. When specified, only artifacts with this name will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/artifact-name`.
        public typealias artifact_hyphen_name = Swift.String
        /// The unique identifier of the artifact.
        ///
        /// - Remark: Generated from `#/components/parameters/artifact-id`.
        public typealias artifact_hyphen_id = Swift.Int
        /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-git-ref-full`.
        public typealias actions_hyphen_cache_hyphen_git_hyphen_ref_hyphen_full = Swift.String
        /// An explicit key or prefix for identifying the cache
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key`.
        public typealias actions_hyphen_cache_hyphen_key = Swift.String
        /// The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-list-sort`.
        @frozen public enum actions_hyphen_cache_hyphen_list_hyphen_sort: String, Codable, Hashable, Sendable {
            case created_at = "created_at"
            case last_accessed_at = "last_accessed_at"
            case size_in_bytes = "size_in_bytes"
        }
        /// A key for identifying the cache.
        ///
        /// - Remark: Generated from `#/components/parameters/actions-cache-key-required`.
        public typealias actions_hyphen_cache_hyphen_key_hyphen_required = Swift.String
        /// The unique identifier of the GitHub Actions cache.
        ///
        /// - Remark: Generated from `#/components/parameters/cache-id`.
        public typealias cache_hyphen_id = Swift.Int
        /// The unique identifier of the job.
        ///
        /// - Remark: Generated from `#/components/parameters/job-id`.
        public typealias job_hyphen_id = Swift.Int
        /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/actor`.
        public typealias actor = Swift.String
        /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-branch`.
        public typealias workflow_hyphen_run_hyphen_branch = Swift.String
        /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
        ///
        /// - Remark: Generated from `#/components/parameters/event`.
        public typealias event = Swift.String
        /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-status`.
        @frozen public enum workflow_hyphen_run_hyphen_status: String, Codable, Hashable, Sendable {
            case completed = "completed"
            case action_required = "action_required"
            case cancelled = "cancelled"
            case failure = "failure"
            case neutral = "neutral"
            case skipped = "skipped"
            case stale = "stale"
            case success = "success"
            case timed_out = "timed_out"
            case in_progress = "in_progress"
            case queued = "queued"
            case requested = "requested"
            case waiting = "waiting"
            case pending = "pending"
        }
        /// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
        ///
        /// - Remark: Generated from `#/components/parameters/created`.
        public typealias created = Foundation.Date
        /// If `true` pull requests are omitted from the response (empty array).
        ///
        /// - Remark: Generated from `#/components/parameters/exclude-pull-requests`.
        public typealias exclude_hyphen_pull_hyphen_requests = Swift.Bool
        /// Returns workflow runs with the `check_suite_id` that you specify.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-check-suite-id`.
        public typealias workflow_hyphen_run_hyphen_check_hyphen_suite_hyphen_id = Swift.Int
        /// Only returns workflow runs that are associated with the specified `head_sha`.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-run-head-sha`.
        public typealias workflow_hyphen_run_hyphen_head_hyphen_sha = Swift.String
        /// The unique identifier of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/run-id`.
        public typealias run_hyphen_id = Swift.Int
        /// The attempt number of the workflow run.
        ///
        /// - Remark: Generated from `#/components/parameters/attempt-number`.
        public typealias attempt_hyphen_number = Swift.Int
        /// The ID of the workflow. You can also pass the workflow file name as a string.
        ///
        /// - Remark: Generated from `#/components/parameters/workflow-id`.
        @frozen public enum workflow_hyphen_id: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
            case case1(Swift.Int)
            /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
            case case2(Swift.String)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
        ///
        /// - Remark: Generated from `#/components/parameters/environment-name`.
        public typealias environment_hyphen_name = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct validation_failed_simple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error_hyphen_simple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error_hyphen_simple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed_simple.Body) {
                self.body = body
            }
        }
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
        public struct conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.conflict.Body
            /// Creates a new `conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.conflict.Body) {
                self.body = body
            }
        }
        public struct actions_runner_jitconfig: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json/runner`.
                    public var runner: Components.Schemas.runner
                    /// The base64 encoded runner configuration.
                    ///
                    /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/json/encoded_jit_config`.
                    public var encoded_jit_config: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - runner:
                    ///   - encoded_jit_config: The base64 encoded runner configuration.
                    public init(
                        runner: Components.Schemas.runner,
                        encoded_jit_config: Swift.String
                    ) {
                        self.runner = runner
                        self.encoded_jit_config = encoded_jit_config
                    }
                    public enum CodingKeys: String, CodingKey {
                        case runner
                        case encoded_jit_config
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_jitconfig/content/application\/json`.
                case json(Components.Responses.actions_runner_jitconfig.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.actions_runner_jitconfig.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.actions_runner_jitconfig.Body
            /// Creates a new `actions_runner_jitconfig`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.actions_runner_jitconfig.Body) {
                self.body = body
            }
        }
        public struct actions_runner_labels: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_labels/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json/total_count`.
                    public var total_count: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/json/labels`.
                    public var labels: [Components.Schemas.runner_hyphen_label]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_count:
                    ///   - labels:
                    public init(
                        total_count: Swift.Int,
                        labels: [Components.Schemas.runner_hyphen_label]
                    ) {
                        self.total_count = total_count
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_count
                        case labels
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_labels/content/application\/json`.
                case json(Components.Responses.actions_runner_labels.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.actions_runner_labels.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.actions_runner_labels.Body
            /// Creates a new `actions_runner_labels`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.actions_runner_labels.Body) {
                self.body = body
            }
        }
        public struct actions_runner_labels_readonly: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json/total_count`.
                    public var total_count: Swift.Int
                    /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/json/labels`.
                    public var labels: [Components.Schemas.runner_hyphen_label]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - total_count:
                    ///   - labels:
                    public init(
                        total_count: Swift.Int,
                        labels: [Components.Schemas.runner_hyphen_label]
                    ) {
                        self.total_count = total_count
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_count
                        case labels
                    }
                }
                /// - Remark: Generated from `#/components/responses/actions_runner_labels_readonly/content/application\/json`.
                case json(Components.Responses.actions_runner_labels_readonly.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.actions_runner_labels_readonly.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.actions_runner_labels_readonly.Body
            /// Creates a new `actions_runner_labels_readonly`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.actions_runner_labels_readonly.Body) {
                self.body = body
            }
        }
        public struct gone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/gone/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/gone/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.gone.Body
            /// Creates a new `gone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.gone.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
        /// - Remark: Generated from `#/components/headers/location`.
        public typealias location = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get GitHub Actions cache usage for an organization
    ///
    /// Gets the total GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/cache/usage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage/get(actions/get-actions-cache-usage-for-org)`.
    public enum actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/get-actions-cache-usage-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_cache_hyphen_usage_hyphen_org_hyphen_enterprise)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_cache_hyphen_usage_hyphen_org_hyphen_enterprise {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage/get(actions/get-actions-cache-usage-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories with GitHub Actions cache usage for an organization
    ///
    /// Lists repositories and their GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/cache/usage-by-repository`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage-by-repository/get(actions/get-actions-cache-usage-by-repo-for-org)`.
    public enum actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/get-actions-cache-usage-by-repo-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Path,
                query: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/responses/200/content/json/repository_cache_usages`.
                        public var repository_cache_usages: [Components.Schemas.actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repository_cache_usages:
                        public init(
                            total_count: Swift.Int,
                            repository_cache_usages: [Components.Schemas.actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repository]
                        ) {
                            self.total_count = total_count
                            self.repository_cache_usages = repository_cache_usages
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repository_cache_usages
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/cache/usage-by-repository/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/cache/usage-by-repository/get(actions/get-actions-cache-usage-by-repo-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repo_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub Actions permissions for an organization
    ///
    /// Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/get(actions/get-github-actions-permissions-organization)`.
    public enum actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization {
        public static let id: Swift.String = "actions/get-github-actions-permissions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Path,
                headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_organization_hyphen_permissions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_organization_hyphen_permissions {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/get(actions/get-github-actions-permissions-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set GitHub Actions permissions for an organization
    ///
    /// Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/put(actions/set-github-actions-permissions-organization)`.
    public enum actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization {
        public static let id: Swift.String = "actions/set-github-actions-permissions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/PUT/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/PUT/requestBody/json/enabled_repositories`.
                    public var enabled_repositories: Components.Schemas.enabled_hyphen_repositories
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/PUT/requestBody/json/allowed_actions`.
                    public var allowed_actions: Components.Schemas.allowed_hyphen_actions?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - enabled_repositories:
                    ///   - allowed_actions:
                    public init(
                        enabled_repositories: Components.Schemas.enabled_hyphen_repositories,
                        allowed_actions: Components.Schemas.allowed_hyphen_actions? = nil
                    ) {
                        self.enabled_repositories = enabled_repositories
                        self.allowed_actions = allowed_actions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case enabled_repositories
                        case allowed_actions
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Path,
                body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/put(actions/set-github-actions-permissions-organization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_organization.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List selected repositories enabled for GitHub Actions in an organization
    ///
    /// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/get(actions/list-selected-repositories-enabled-github-actions-organization)`.
    public enum actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization {
        public static let id: Swift.String = "actions/list-selected-repositories-enabled-github-actions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Path,
                query: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Double
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repositories:
                        public init(
                            total_count: Swift.Double,
                            repositories: [Components.Schemas.repository]
                        ) {
                            self.total_count = total_count
                            self.repositories = repositories
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repositories
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/get(actions/list-selected-repositories-enabled-github-actions-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set selected repositories enabled for GitHub Actions in an organization
    ///
    /// Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/put(actions/set-selected-repositories-enabled-github-actions-organization)`.
    public enum actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization {
        public static let id: Swift.String = "actions/set-selected-repositories-enabled-github-actions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/PUT/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// List of repository IDs to enable for GitHub Actions.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_repository_ids: List of repository IDs to enable for GitHub Actions.
                    public init(selected_repository_ids: [Swift.Int]) {
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Path,
                body: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/put(actions/set-selected-repositories-enabled-github-actions-organization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_selected_hyphen_repositories_hyphen_enabled_hyphen_github_hyphen_actions_hyphen_organization.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Enable a selected repository for GitHub Actions in an organization
    ///
    /// Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/put(actions/enable-selected-repository-github-actions-organization)`.
    public enum actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization {
        public static let id: Swift.String = "actions/enable-selected-repository-github-actions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/{repository_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/{repository_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the repository.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/{repository_id}/PUT/path/repository_id`.
                public var repository_id: Components.Parameters.repository_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - repository_id: The unique identifier of the repository.
                public init(
                    org: Components.Parameters.org,
                    repository_id: Components.Parameters.repository_hyphen_id
                ) {
                    self.org = org
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/put(actions/enable-selected-repository-github-actions-organization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_enable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Disable a selected repository for GitHub Actions in an organization
    ///
    /// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/delete(actions/disable-selected-repository-github-actions-organization)`.
    public enum actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization {
        public static let id: Swift.String = "actions/disable-selected-repository-github-actions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/{repository_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/{repository_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the repository.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/repositories/{repository_id}/DELETE/path/repository_id`.
                public var repository_id: Components.Parameters.repository_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - repository_id: The unique identifier of the repository.
                public init(
                    org: Components.Parameters.org,
                    repository_id: Components.Parameters.repository_hyphen_id
                ) {
                    self.org = org
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/repositories/{repository_id}/delete(actions/disable-selected-repository-github-actions-organization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_disable_hyphen_selected_hyphen_repository_hyphen_github_hyphen_actions_hyphen_organization.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get allowed actions and reusable workflows for an organization
    ///
    /// Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/get(actions/get-allowed-actions-organization)`.
    public enum actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization {
        public static let id: Swift.String = "actions/get-allowed-actions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Path,
                headers: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.selected_hyphen_actions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.selected_hyphen_actions {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/get(actions/get-allowed-actions-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set allowed actions and reusable workflows for an organization
    ///
    /// Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/put(actions/set-allowed-actions-organization)`.
    public enum actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization {
        public static let id: Swift.String = "actions/set-allowed-actions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/PUT/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/selected-actions/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.selected_hyphen_actions)
            }
            public var body: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Path,
                body: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Input.Body? = nil
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/selected-actions/put(actions/set-allowed-actions-organization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_organization.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get default workflow permissions for an organization
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
    /// as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-organization)`.
    public enum actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization {
        public static let id: Swift.String = "actions/get-github-actions-default-workflow-permissions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Path,
                headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_get_hyphen_default_hyphen_workflow_hyphen_permissions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_get_hyphen_default_hyphen_workflow_hyphen_permissions {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set default workflow permissions for an organization
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
    /// can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-organization)`.
    public enum actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization {
        public static let id: Swift.String = "actions/set-github-actions-default-workflow-permissions-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/PUT/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/permissions/workflow/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.actions_hyphen_set_hyphen_default_hyphen_workflow_hyphen_permissions)
            }
            public var body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Path,
                body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Input.Body? = nil
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-organization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_organization.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List self-hosted runners for an organization
    ///
    /// Lists all self-hosted runners configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/get(actions/list-self-hosted-runners-for-org)`.
    public enum actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/list-self-hosted-runners-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The name of a self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/query/name`.
                public var name: Swift.String?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: The name of a self-hosted runner.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    name: Swift.String? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.name = name
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Path,
                query: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/responses/200/content/json/runners`.
                        public var runners: [Components.Schemas.runner]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - runners:
                        public init(
                            total_count: Swift.Int,
                            runners: [Components.Schemas.runner]
                        ) {
                            self.total_count = total_count
                            self.runners = runners
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case runners
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/get(actions/list-self-hosted-runners-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List runner applications for an organization
    ///
    /// Lists binaries for the runner application that you can download and run.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/downloads`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/downloads/get(actions/list-runner-applications-for-org)`.
    public enum actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/list-runner-applications-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/downloads/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/downloads/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/downloads/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/downloads/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/downloads/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.runner_hyphen_application])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.runner_hyphen_application] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/downloads/get(actions/list-runner-applications-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create configuration for a just-in-time runner for an organization
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    ///
    /// The authenticated user must have admin access to the organization.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/generate-jitconfig`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-org)`.
    public enum actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/generate-runner-jitconfig-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the new runner.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The ID of the runner group to register the runner to.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/requestBody/json/runner_group_id`.
                    public var runner_group_id: Swift.Int
                    /// The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/requestBody/json/labels`.
                    public var labels: [Swift.String]
                    /// The working directory to be used for job execution, relative to the runner install directory.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/requestBody/json/work_folder`.
                    public var work_folder: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the new runner.
                    ///   - runner_group_id: The ID of the runner group to register the runner to.
                    ///   - labels: The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
                    ///   - work_folder: The working directory to be used for job execution, relative to the runner install directory.
                    public init(
                        name: Swift.String,
                        runner_group_id: Swift.Int,
                        labels: [Swift.String],
                        work_folder: Swift.String? = nil
                    ) {
                        self.name = name
                        self.runner_group_id = runner_group_id
                        self.labels = labels
                        self.work_folder = work_folder
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case runner_group_id
                        case labels
                        case work_folder
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/generate-jitconfig/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Headers = .init(),
                body: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_org.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-org)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.actions_runner_jitconfig)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Components.Responses.actions_runner_jitconfig {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a registration token for an organization
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    ///
    /// ```
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/registration-token`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/registration-token/post(actions/create-registration-token-for-org)`.
    public enum actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/create-registration-token-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/registration-token/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/registration-token/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/registration-token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/registration-token/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/registration-token/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.authentication_hyphen_token)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.authentication_hyphen_token {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/registration-token/post(actions/create-registration-token-for-org)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_org.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a remove token for an organization
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    ///
    /// ```
    /// ./config.sh remove --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/remove-token`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/remove-token/post(actions/create-remove-token-for-org)`.
    public enum actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/create-remove-token-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/remove-token/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/remove-token/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/remove-token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/remove-token/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/remove-token/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.authentication_hyphen_token)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.authentication_hyphen_token {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/remove-token/post(actions/create-remove-token-for-org)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_org.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a self-hosted runner for an organization
    ///
    /// Gets a specific self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-org)`.
    public enum actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/get-self-hosted-runner-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/GET/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    org: Components.Parameters.org,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.org = org
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.runner)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.runner {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a self-hosted runner from an organization
    ///
    /// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-org)`.
    public enum actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org {
        public static let id: Swift.String = "actions/delete-self-hosted-runner-from-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/DELETE/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    org: Components.Parameters.org,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.org = org
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List labels for a self-hosted runner for an organization
    ///
    /// Lists all labels for a self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-org)`.
    public enum actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/list-labels-for-self-hosted-runner-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/GET/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/GET/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    org: Components.Parameters.org,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.org = org
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add custom labels to a self-hosted runner for an organization
    ///
    /// Adds custom labels to a self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-org)`.
    public enum actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/add-custom-labels-to-self-hosted-runner-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    org: Components.Parameters.org,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.org = org
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The names of the custom labels to add to the runner.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/requestBody/json/labels`.
                    public var labels: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - labels: The names of the custom labels to add to the runner.
                    public init(labels: [Swift.String]) {
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case labels
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init(),
                body: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set custom labels for a self-hosted runner for an organization
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in an organization.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-org)`.
    public enum actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/set-custom-labels-for-self-hosted-runner-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    org: Components.Parameters.org,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.org = org
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/requestBody/json/labels`.
                    public var labels: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - labels: The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
                    public init(labels: [Swift.String]) {
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case labels
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init(),
                body: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove all custom labels from a self-hosted runner for an organization
    ///
    /// Remove all custom labels from a self-hosted runner configured in an
    /// organization. Returns the remaining read-only labels from the runner.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-org)`.
    public enum actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/remove-all-custom-labels-from-self-hosted-runner-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/DELETE/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    org: Components.Parameters.org,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.org = org
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels_readonly)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels_readonly {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a custom label from a self-hosted runner for an organization
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in an organization. Returns the remaining labels from the runner.
    ///
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-org)`.
    public enum actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org {
        public static let id: Swift.String = "actions/remove-custom-label-from-self-hosted-runner-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/{name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/{name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/{name}/DELETE/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// The name of a self-hosted runner's custom label.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/{name}/DELETE/path/name`.
                public var name: Components.Parameters.runner_hyphen_label_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                ///   - name: The name of a self-hosted runner's custom label.
                public init(
                    org: Components.Parameters.org,
                    runner_id: Components.Parameters.runner_hyphen_id,
                    name: Components.Parameters.runner_hyphen_label_hyphen_name
                ) {
                    self.org = org
                    self.runner_id = runner_id
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/runners/{runner_id}/labels/{name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/get(actions/list-org-secrets)`.
    public enum actions_sol_list_hyphen_org_hyphen_secrets {
        public static let id: Swift.String = "actions/list-org-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_org_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_org_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Path,
                query: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.organization_hyphen_actions_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.organization_hyphen_actions_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/get(actions/list-org-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_org_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/public-key/get(actions/get-org-public-key)`.
    public enum actions_sol_get_hyphen_org_hyphen_public_hyphen_key {
        public static let id: Swift.String = "actions/get-org-public-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/public-key/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/public-key/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path,
                headers: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/public-key/get(actions/get-org-public-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/get(actions/get-org-secret)`.
    public enum actions_sol_get_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "actions/get-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_get_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.actions_sol_get_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_actions_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_actions_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_org_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_org_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/get(actions/get-org-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_org_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_org_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/put(actions/create-or-update-org-secret)`.
    public enum actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "actions/create-or-update-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String?
                    /// ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String?
                    /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case all = "all"
                        case _private = "private"
                        case selected = "selected"
                    }
                    /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody/json/visibility`.
                    public var visibility: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload.visibilityPayload
                    /// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.
                    ///   - key_id: ID of the key you used to encrypt the secret.
                    ///   - visibility: Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///   - selected_repository_ids: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    public init(
                        encrypted_value: Swift.String? = nil,
                        key_id: Swift.String? = nil,
                        visibility: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload.visibilityPayload,
                        selected_repository_ids: [Swift.Int]? = nil
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                        self.visibility = visibility
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                        case visibility
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers = .init(),
                body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a secret
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/put(actions/create-or-update-org-secret)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/put(actions/create-or-update-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/delete(actions/delete-org-secret)`.
    public enum actions_sol_delete_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "actions/delete-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_org_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_org_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/delete(actions/delete-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/get(actions/list-selected-repos-for-org-secret)`.
    public enum actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "actions/list-selected-repos-for-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
                query: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.minimal_hyphen_repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repositories:
                        public init(
                            total_count: Swift.Int,
                            repositories: [Components.Schemas.minimal_hyphen_repository]
                        ) {
                            self.total_count = total_count
                            self.repositories = repositories
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repositories
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/get(actions/list-selected-repos-for-org-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/put(actions/set-selected-repos-for-org-secret)`.
    public enum actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "actions/set-selected-repos-for-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_repository_ids: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    public init(selected_repository_ids: [Swift.Int]) {
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
                body: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/put(actions/set-selected-repos-for-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. For more information about setting the visibility, see [Create or
    /// update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-secret)`.
    public enum actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "actions/add-selected-repo-to-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/PUT/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when repository was added to the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when visibility type is not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-secret)`.
    public enum actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "actions/remove-selected-repo-from-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when repository was removed from the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when visibility type not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List organization variables
    ///
    /// Lists all organization variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/get(actions/list-org-variables)`.
    public enum actions_sol_list_hyphen_org_hyphen_variables {
        public static let id: Swift.String = "actions/list-org-variables"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/query/per_page`.
                public var per_page: Components.Parameters.variables_hyphen_per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.variables_hyphen_per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_org_hyphen_variables.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_org_hyphen_variables.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Path,
                query: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_org_hyphen_variables.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/responses/200/content/json/variables`.
                        public var variables: [Components.Schemas.organization_hyphen_actions_hyphen_variable]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - variables:
                        public init(
                            total_count: Swift.Int,
                            variables: [Components.Schemas.organization_hyphen_actions_hyphen_variable]
                        ) {
                            self.total_count = total_count
                            self.variables = variables
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case variables
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/get(actions/list-org-variables)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_org_hyphen_variables.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an organization variable
    ///
    /// Creates an organization variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/actions/variables`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/post(actions/create-org-variable)`.
    public enum actions_sol_create_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/create-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_org_hyphen_variable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_org_hyphen_variable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The value of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody/json/value`.
                    public var value: Swift.String
                    /// The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case all = "all"
                        case _private = "private"
                        case selected = "selected"
                    }
                    /// The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody/json/visibility`.
                    public var visibility: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Body.jsonPayload.visibilityPayload
                    /// An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the variable.
                    ///   - value: The value of the variable.
                    ///   - visibility: The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
                    ///   - selected_repository_ids: An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
                    public init(
                        name: Swift.String,
                        value: Swift.String,
                        visibility: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Body.jsonPayload.visibilityPayload,
                        selected_repository_ids: [Swift.Int]? = nil
                    ) {
                        self.name = name
                        self.value = value
                        self.visibility = visibility
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case value
                        case visibility
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Path,
                headers: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Headers = .init(),
                body: Operations.actions_sol_create_hyphen_org_hyphen_variable.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_org_hyphen_variable.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_org_hyphen_variable.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a variable
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/post(actions/create-org-variable)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_org_hyphen_variable.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_org_hyphen_variable.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization variable
    ///
    /// Gets a specific variable in an organization.
    ///
    /// The authenticated user must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/get(actions/get-org-variable)`.
    public enum actions_sol_get_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/get-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/GET/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    org: Components.Parameters.org,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.org = org
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_get_hyphen_org_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_org_hyphen_variable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_org_hyphen_variable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_org_hyphen_variable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_org_hyphen_variable.Input.Path,
                headers: Operations.actions_sol_get_hyphen_org_hyphen_variable.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_actions_hyphen_variable)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_actions_hyphen_variable {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_org_hyphen_variable.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_org_hyphen_variable.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/get(actions/get-org-variable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_org_hyphen_variable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_org_hyphen_variable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an organization variable
    ///
    /// Updates an organization variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/patch(actions/update-org-variable)`.
    public enum actions_sol_update_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/update-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    org: Components.Parameters.org,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.org = org
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The value of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody/json/value`.
                    public var value: Swift.String?
                    /// The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case all = "all"
                        case _private = "private"
                        case selected = "selected"
                    }
                    /// The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody/json/visibility`.
                    public var visibility: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Body.jsonPayload.visibilityPayload?
                    /// An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the variable.
                    ///   - value: The value of the variable.
                    ///   - visibility: The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
                    ///   - selected_repository_ids: An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
                    public init(
                        name: Swift.String? = nil,
                        value: Swift.String? = nil,
                        visibility: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Body.jsonPayload.visibilityPayload? = nil,
                        selected_repository_ids: [Swift.Int]? = nil
                    ) {
                        self.name = name
                        self.value = value
                        self.visibility = visibility
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case value
                        case visibility
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/PATCH/requestBody/content/application\/json`.
                case json(Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Path,
                body: Operations.actions_sol_update_hyphen_org_hyphen_variable.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/patch(actions/update-org-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_update_hyphen_org_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_update_hyphen_org_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Delete an organization variable
    ///
    /// Deletes an organization variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/delete(actions/delete-org-variable)`.
    public enum actions_sol_delete_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/delete-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/DELETE/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    org: Components.Parameters.org,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.org = org
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_org_hyphen_variable.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_org_hyphen_variable.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/delete(actions/delete-org-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_org_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_org_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List selected repositories for an organization variable
    ///
    /// Lists all repositories that can access an organization variable
    /// that is available to selected repositories.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/actions/variables/{name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/get(actions/list-selected-repos-for-org-variable)`.
    public enum actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/list-selected-repos-for-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    org: Components.Parameters.org,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.org = org
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Path,
                query: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.minimal_hyphen_repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repositories:
                        public init(
                            total_count: Swift.Int,
                            repositories: [Components.Schemas.minimal_hyphen_repository]
                        ) {
                            self.total_count = total_count
                            self.repositories = repositories
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repositories
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/get(actions/list-selected-repos-for-org-variable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Response when the visibility of the variable is not set to `selected`
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/get(actions/list-selected-repos-for-org-variable)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.actions_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set selected repositories for an organization variable
    ///
    /// Replaces all repositories for an organization variable that is available
    /// to selected repositories. Organization variables that are available to selected
    /// repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/variables/{name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/put(actions/set-selected-repos-for-org-variable)`.
    public enum actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/set-selected-repos-for-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/PUT/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    org: Components.Parameters.org,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.org = org
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The IDs of the repositories that can access the organization variable.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_repository_ids: The IDs of the repositories that can access the organization variable.
                    public init(selected_repository_ids: [Swift.Int]) {
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Path,
                body: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/put(actions/set-selected-repos-for-org-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Response when the visibility of the variable is not set to `selected`
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/put(actions/set-selected-repos-for-org-variable)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.actions_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_variable.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Add selected repository to an organization variable
    ///
    /// Adds a repository to an organization variable that is available to selected repositories.
    /// Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-variable)`.
    public enum actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/add-selected-repo-to-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/PUT/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/PUT/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - name: The name of the variable.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    name: Components.Parameters.variable_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.name = name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Response when the visibility of the variable is not set to `selected`
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/put(actions/add-selected-repo-to-org-variable)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.actions_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_variable.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove selected repository from an organization variable
    ///
    /// Removes a repository from an organization variable that is
    /// available to selected repositories. Organization variables that are available to
    /// selected repositories have their `visibility` field set to `selected`.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-variable)`.
    public enum actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable {
        public static let id: Swift.String = "actions/remove-selected-repo-from-org-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/DELETE/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/actions/variables/{name}/repositories/{repository_id}/DELETE/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - name: The name of the variable.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    name: Components.Parameters.variable_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.name = name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Response when the visibility of the variable is not set to `selected`
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/actions/variables/{name}/repositories/{repository_id}/delete(actions/remove-selected-repo-from-org-variable)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.actions_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_variable.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List artifacts for a repository
    ///
    /// Lists all artifacts for a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/get(actions/list-artifacts-for-repo)`.
    public enum actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/list-artifacts-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The name field of an artifact. When specified, only artifacts with this name will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/query/name`.
                public var name: Components.Parameters.artifact_hyphen_name?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - name: The name field of an artifact. When specified, only artifacts with this name will be returned.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    name: Components.Parameters.artifact_hyphen_name? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.name = name
                }
            }
            public var query: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/responses/200/content/json/artifacts`.
                        public var artifacts: [Components.Schemas.artifact]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - artifacts:
                        public init(
                            total_count: Swift.Int,
                            artifacts: [Components.Schemas.artifact]
                        ) {
                            self.total_count = total_count
                            self.artifacts = artifacts
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case artifacts
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/get(actions/list-artifacts-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_artifacts_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an artifact
    ///
    /// Gets a specific artifact for a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/get(actions/get-artifact)`.
    public enum actions_sol_get_hyphen_artifact {
        public static let id: Swift.String = "actions/get-artifact"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the artifact.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/GET/path/artifact_id`.
                public var artifact_id: Components.Parameters.artifact_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - artifact_id: The unique identifier of the artifact.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    artifact_id: Components.Parameters.artifact_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.artifact_id = artifact_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_artifact.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_artifact.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_artifact.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_artifact.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_artifact.Input.Path,
                headers: Operations.actions_sol_get_hyphen_artifact.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.artifact)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.artifact {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_artifact.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_artifact.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/get(actions/get-artifact)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_artifact.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_artifact.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an artifact
    ///
    /// Deletes an artifact for a workflow run.
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/delete(actions/delete-artifact)`.
    public enum actions_sol_delete_hyphen_artifact {
        public static let id: Swift.String = "actions/delete-artifact"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the artifact.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/DELETE/path/artifact_id`.
                public var artifact_id: Components.Parameters.artifact_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - artifact_id: The unique identifier of the artifact.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    artifact_id: Components.Parameters.artifact_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.artifact_id = artifact_id
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_artifact.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_artifact.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/delete(actions/delete-artifact)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_artifact.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_artifact.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Download an artifact
    ///
    /// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
    /// the response header to find the URL for the download. The `:archive_format` must be `zip`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/get(actions/download-artifact)`.
    public enum actions_sol_download_hyphen_artifact {
        public static let id: Swift.String = "actions/download-artifact"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the artifact.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/path/artifact_id`.
                public var artifact_id: Components.Parameters.artifact_hyphen_id
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/path/archive_format`.
                public var archive_format: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - artifact_id: The unique identifier of the artifact.
                ///   - archive_format:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    artifact_id: Components.Parameters.artifact_hyphen_id,
                    archive_format: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.artifact_id = artifact_id
                    self.archive_format = archive_format
                }
            }
            public var path: Operations.actions_sol_download_hyphen_artifact.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_download_hyphen_artifact.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_download_hyphen_artifact.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_download_hyphen_artifact.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_download_hyphen_artifact.Input.Path,
                headers: Operations.actions_sol_download_hyphen_artifact.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/GET/responses/302/headers/Location`.
                    public var Location: Components.Headers.location?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Components.Headers.location? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_download_hyphen_artifact.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.actions_sol_download_hyphen_artifact.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/get(actions/download-artifact)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.actions_sol_download_hyphen_artifact.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.actions_sol_download_hyphen_artifact.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}/get(actions/download-artifact)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub Actions cache usage for a repository
    ///
    /// Gets GitHub Actions cache usage for a repository.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/cache/usage`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/cache/usage/get(actions/get-actions-cache-usage)`.
    public enum actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage {
        public static let id: Swift.String = "actions/get-actions-cache-usage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/cache/usage/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/cache/usage/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/cache/usage/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/cache/usage/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input.Path,
                headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/cache/usage/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/cache/usage/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_cache_hyphen_usage_hyphen_by_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/cache/usage/get(actions/get-actions-cache-usage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_usage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List GitHub Actions caches for a repository
    ///
    /// Lists the GitHub Actions caches for a repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/caches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/get(actions/get-actions-cache-list)`.
    public enum actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list {
        public static let id: Swift.String = "actions/get-actions-cache-list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/query/ref`.
                public var ref: Components.Parameters.actions_hyphen_cache_hyphen_git_hyphen_ref_hyphen_full?
                /// An explicit key or prefix for identifying the cache
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/query/key`.
                public var key: Components.Parameters.actions_hyphen_cache_hyphen_key?
                /// - Remark: Generated from `#/components/parameters/actions-cache-list-sort`.
                @frozen public enum actions_hyphen_cache_hyphen_list_hyphen_sort: String, Codable, Hashable, Sendable {
                    case created_at = "created_at"
                    case last_accessed_at = "last_accessed_at"
                    case size_in_bytes = "size_in_bytes"
                }
                /// The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/query/sort`.
                public var sort: Components.Parameters.actions_hyphen_cache_hyphen_list_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - ref: The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
                ///   - key: An explicit key or prefix for identifying the cache
                ///   - sort: The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
                ///   - direction: The direction to sort the results by.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    ref: Components.Parameters.actions_hyphen_cache_hyphen_git_hyphen_ref_hyphen_full? = nil,
                    key: Components.Parameters.actions_hyphen_cache_hyphen_key? = nil,
                    sort: Components.Parameters.actions_hyphen_cache_hyphen_list_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.ref = ref
                    self.key = key
                    self.sort = sort
                    self.direction = direction
                }
            }
            public var query: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Path,
                query: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Query = .init(),
                headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_cache_hyphen_list)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_cache_hyphen_list {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/get(actions/get-actions-cache-list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_actions_hyphen_cache_hyphen_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete GitHub Actions caches for a repository (using a cache key)
    ///
    /// Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/caches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/delete(actions/delete-actions-cache-by-key)`.
    public enum actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key {
        public static let id: Swift.String = "actions/delete-actions-cache-by-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// A key for identifying the cache.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/query/key`.
                public var key: Components.Parameters.actions_hyphen_cache_hyphen_key_hyphen_required
                /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/query/ref`.
                public var ref: Components.Parameters.actions_hyphen_cache_hyphen_git_hyphen_ref_hyphen_full?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - key: A key for identifying the cache.
                ///   - ref: The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
                public init(
                    key: Components.Parameters.actions_hyphen_cache_hyphen_key_hyphen_required,
                    ref: Components.Parameters.actions_hyphen_cache_hyphen_git_hyphen_ref_hyphen_full? = nil
                ) {
                    self.key = key
                    self.ref = ref
                }
            }
            public var query: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Path,
                query: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Query,
                headers: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_cache_hyphen_list)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_cache_hyphen_list {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/delete(actions/delete-actions-cache-by-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a GitHub Actions cache for a repository (using a cache ID)
    ///
    /// Deletes a GitHub Actions cache for a repository, using a cache ID.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/{cache_id}/delete(actions/delete-actions-cache-by-id)`.
    public enum actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id {
        public static let id: Swift.String = "actions/delete-actions-cache-by-id"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/{cache_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/{cache_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/{cache_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the GitHub Actions cache.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/caches/{cache_id}/DELETE/path/cache_id`.
                public var cache_id: Components.Parameters.cache_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - cache_id: The unique identifier of the GitHub Actions cache.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    cache_id: Components.Parameters.cache_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.cache_id = cache_id
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/caches/{cache_id}/delete(actions/delete-actions-cache-by-id)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_actions_hyphen_cache_hyphen_by_hyphen_id.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get a job for a workflow run
    ///
    /// Gets a specific job in a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/jobs/{job_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/get(actions/get-job-for-workflow-run)`.
    public enum actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/get-job-for-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the job.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/GET/path/job_id`.
                public var job_id: Components.Parameters.job_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - job_id: The unique identifier of the job.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    job_id: Components.Parameters.job_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.job_id = job_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Path,
                headers: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.job)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.job {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/get(actions/get-job-for-workflow-run)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Download job logs for a workflow run
    ///
    /// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
    /// for `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/logs/get(actions/download-job-logs-for-workflow-run)`.
    public enum actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/download-job-logs-for-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/logs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/logs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/logs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the job.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/logs/GET/path/job_id`.
                public var job_id: Components.Parameters.job_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - job_id: The unique identifier of the job.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    job_id: Components.Parameters.job_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.job_id = job_id
                }
            }
            public var path: Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/logs/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/logs/GET/responses/302/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/logs/get(actions/download-job-logs-for-workflow-run)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.actions_sol_download_hyphen_job_hyphen_logs_hyphen_for_hyphen_workflow_hyphen_run.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Re-run a job from a workflow run
    ///
    /// Re-run a job and its dependent jobs in a workflow run.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/post(actions/re-run-job-for-workflow-run)`.
    public enum actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/re-run-job-for-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the job.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/path/job_id`.
                public var job_id: Components.Parameters.job_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - job_id: The unique identifier of the job.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    job_id: Components.Parameters.job_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.job_id = job_id
                }
            }
            public var path: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Whether to enable debug logging for the re-run.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/requestBody/json/enable_debug_logging`.
                    public var enable_debug_logging: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - enable_debug_logging: Whether to enable debug logging for the re-run.
                    public init(enable_debug_logging: Swift.Bool? = nil) {
                        self.enable_debug_logging = enable_debug_logging
                    }
                    public enum CodingKeys: String, CodingKey {
                        case enable_debug_logging
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Path,
                headers: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers = .init(),
                body: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/post(actions/re-run-job-for-workflow-run)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_re_hyphen_run_hyphen_job_hyphen_for_hyphen_workflow_hyphen_run.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/jobs/{job_id}/rerun/post(actions/re-run-job-for-workflow-run)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the customization template for an OIDC subject claim for a repository
    ///
    /// Gets the customization template for an OpenID Connect (OIDC) subject claim.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/oidc/customization/sub`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/get(actions/get-custom-oidc-sub-claim-for-repo)`.
    public enum actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/get-custom-oidc-sub-claim-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.oidc_hyphen_custom_hyphen_sub_hyphen_repo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.oidc_hyphen_custom_hyphen_sub_hyphen_repo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Status response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/get(actions/get-custom-oidc-sub-claim-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/get(actions/get-custom-oidc-sub-claim-for-repo)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/get(actions/get-custom-oidc-sub-claim-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Set the customization template for an OIDC subject claim for a repository
    ///
    /// Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/oidc/customization/sub`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/put(actions/set-custom-oidc-sub-claim-for-repo)`.
    public enum actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/set-custom-oidc-sub-claim-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// Actions OIDC subject customization for a repository
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/requestBody/json/use_default`.
                    public var use_default: Swift.Bool
                    /// Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/requestBody/json/include_claim_keys`.
                    public var include_claim_keys: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - use_default: Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
                    ///   - include_claim_keys: Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
                    public init(
                        use_default: Swift.Bool,
                        include_claim_keys: [Swift.String]? = nil
                    ) {
                        self.use_default = use_default
                        self.include_claim_keys = include_claim_keys
                    }
                    public enum CodingKeys: String, CodingKey {
                        case use_default
                        case include_claim_keys
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Headers = .init(),
                body: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/oidc/customization/sub/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Empty response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/put(actions/set-custom-oidc-sub-claim-for-repo)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_set_hyphen_custom_hyphen_oidc_hyphen_sub_hyphen_claim_hyphen_for_hyphen_repo.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/put(actions/set-custom-oidc-sub-claim-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/put(actions/set-custom-oidc-sub-claim-for-repo)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/oidc/customization/sub/put(actions/set-custom-oidc-sub-claim-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List repository organization secrets
    ///
    /// Lists all organization secrets shared with a repository without revealing their encrypted
    /// values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/organization-secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-secrets/get(actions/list-repo-organization-secrets)`.
    public enum actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets {
        public static let id: Swift.String = "actions/list-repo-organization-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Path,
                query: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.actions_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.actions_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-secrets/get(actions/list-repo-organization-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository organization variables
    ///
    /// Lists all organization variables shared with a repository.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/organization-variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-variables/get(actions/list-repo-organization-variables)`.
    public enum actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables {
        public static let id: Swift.String = "actions/list-repo-organization-variables"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/query/per_page`.
                public var per_page: Components.Parameters.variables_hyphen_per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.variables_hyphen_per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Path,
                query: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/responses/200/content/json/variables`.
                        public var variables: [Components.Schemas.actions_hyphen_variable]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - variables:
                        public init(
                            total_count: Swift.Int,
                            variables: [Components.Schemas.actions_hyphen_variable]
                        ) {
                            self.total_count = total_count
                            self.variables = variables
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case variables
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/organization-variables/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/organization-variables/get(actions/list-repo-organization-variables)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_repo_hyphen_organization_hyphen_variables.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub Actions permissions for a repository
    ///
    /// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/get(actions/get-github-actions-permissions-repository)`.
    public enum actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository {
        public static let id: Swift.String = "actions/get-github-actions-permissions-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Path,
                headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_repository_hyphen_permissions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_repository_hyphen_permissions {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/get(actions/get-github-actions-permissions-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set GitHub Actions permissions for a repository
    ///
    /// Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/put(actions/set-github-actions-permissions-repository)`.
    public enum actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository {
        public static let id: Swift.String = "actions/set-github-actions-permissions-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/requestBody/json/enabled`.
                    public var enabled: Components.Schemas.actions_hyphen_enabled
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/requestBody/json/allowed_actions`.
                    public var allowed_actions: Components.Schemas.allowed_hyphen_actions?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - enabled:
                    ///   - allowed_actions:
                    public init(
                        enabled: Components.Schemas.actions_hyphen_enabled,
                        allowed_actions: Components.Schemas.allowed_hyphen_actions? = nil
                    ) {
                        self.enabled = enabled
                        self.allowed_actions = allowed_actions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case enabled
                        case allowed_actions
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Path,
                body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/put(actions/set-github-actions-permissions-repository)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_permissions_hyphen_repository.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get the level of access for workflows outside of the repository
    ///
    /// Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/access`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/get(actions/get-workflow-access-to-repository)`.
    public enum actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository {
        public static let id: Swift.String = "actions/get-workflow-access-to-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Path,
                headers: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/get(actions/get-workflow-access-to-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set the level of access for workflows outside of the repository
    ///
    /// Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/access`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/put(actions/set-workflow-access-to-repository)`.
    public enum actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository {
        public static let id: Swift.String = "actions/set-workflow-access-to-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/access/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.actions_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository)
            }
            public var body: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Path,
                body: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/access/put(actions/set-workflow-access-to-repository)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_workflow_hyphen_access_hyphen_to_hyphen_repository.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get allowed actions and reusable workflows for a repository
    ///
    /// Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/get(actions/get-allowed-actions-repository)`.
    public enum actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository {
        public static let id: Swift.String = "actions/get-allowed-actions-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Path,
                headers: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.selected_hyphen_actions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.selected_hyphen_actions {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/get(actions/get-allowed-actions-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_allowed_hyphen_actions_hyphen_repository.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set allowed actions and reusable workflows for a repository
    ///
    /// Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/selected-actions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/put(actions/set-allowed-actions-repository)`.
    public enum actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository {
        public static let id: Swift.String = "actions/set-allowed-actions-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/selected-actions/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.selected_hyphen_actions)
            }
            public var body: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Path,
                body: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Input.Body? = nil
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/selected-actions/put(actions/set-allowed-actions-repository)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_allowed_hyphen_actions_hyphen_repository.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get default workflow permissions for a repository
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
    /// as well as if GitHub Actions can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-repository)`.
    public enum actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository {
        public static let id: Swift.String = "actions/get-github-actions-default-workflow-permissions-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Path,
                headers: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_get_hyphen_default_hyphen_workflow_hyphen_permissions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_get_hyphen_default_hyphen_workflow_hyphen_permissions {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/get(actions/get-github-actions-default-workflow-permissions-repository)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set default workflow permissions for a repository
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
    /// can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/permissions/workflow`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-repository)`.
    public enum actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository {
        public static let id: Swift.String = "actions/set-github-actions-default-workflow-permissions-repository"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/permissions/workflow/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.actions_hyphen_set_hyphen_default_hyphen_workflow_hyphen_permissions)
            }
            public var body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Path,
                body: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Success response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-repository)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict response when changing a setting is prevented by the owning organization
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/permissions/workflow/put(actions/set-github-actions-default-workflow-permissions-repository)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.actions_sol_set_hyphen_github_hyphen_actions_hyphen_default_hyphen_workflow_hyphen_permissions_hyphen_repository.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List self-hosted runners for a repository
    ///
    /// Lists all self-hosted runners configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/get(actions/list-self-hosted-runners-for-repo)`.
    public enum actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/list-self-hosted-runners-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The name of a self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/query/name`.
                public var name: Swift.String?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: The name of a self-hosted runner.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    name: Swift.String? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.name = name
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/responses/200/content/json/runners`.
                        public var runners: [Components.Schemas.runner]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - runners:
                        public init(
                            total_count: Swift.Int,
                            runners: [Components.Schemas.runner]
                        ) {
                            self.total_count = total_count
                            self.runners = runners
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case runners
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/get(actions/list-self-hosted-runners-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_self_hyphen_hosted_hyphen_runners_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List runner applications for a repository
    ///
    /// Lists binaries for the runner application that you can download and run.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/downloads`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/downloads/get(actions/list-runner-applications-for-repo)`.
    public enum actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/list-runner-applications-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/downloads/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/downloads/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/downloads/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/downloads/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/downloads/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/downloads/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.runner_hyphen_application])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.runner_hyphen_application] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/downloads/get(actions/list-runner-applications-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_runner_hyphen_applications_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create configuration for a just-in-time runner for a repository
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    ///
    /// The authenticated user must have admin access to the repository.
    ///
    /// OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-repo)`.
    public enum actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/generate-runner-jitconfig-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the new runner.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The ID of the runner group to register the runner to.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/requestBody/json/runner_group_id`.
                    public var runner_group_id: Swift.Int
                    /// The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/requestBody/json/labels`.
                    public var labels: [Swift.String]
                    /// The working directory to be used for job execution, relative to the runner install directory.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/requestBody/json/work_folder`.
                    public var work_folder: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the new runner.
                    ///   - runner_group_id: The ID of the runner group to register the runner to.
                    ///   - labels: The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
                    ///   - work_folder: The working directory to be used for job execution, relative to the runner install directory.
                    public init(
                        name: Swift.String,
                        runner_group_id: Swift.Int,
                        labels: [Swift.String],
                        work_folder: Swift.String? = nil
                    ) {
                        self.name = name
                        self.runner_group_id = runner_group_id
                        self.labels = labels
                        self.work_folder = work_folder
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case runner_group_id
                        case labels
                        case work_folder
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/generate-jitconfig/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Headers = .init(),
                body: Operations.actions_sol_generate_hyphen_runner_hyphen_jitconfig_hyphen_for_hyphen_repo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-repo)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Components.Responses.actions_runner_jitconfig)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Components.Responses.actions_runner_jitconfig {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/generate-jitconfig/post(actions/generate-runner-jitconfig-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a registration token for a repository
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    ///
    /// ```
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/registration-token`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/registration-token/post(actions/create-registration-token-for-repo)`.
    public enum actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/create-registration-token-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/registration-token/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/registration-token/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/registration-token/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/registration-token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/registration-token/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/registration-token/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.authentication_hyphen_token)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.authentication_hyphen_token {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/registration-token/post(actions/create-registration-token-for-repo)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_registration_hyphen_token_hyphen_for_hyphen_repo.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a remove token for a repository
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
    ///
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    ///
    /// ```
    /// ./config.sh remove --token TOKEN
    /// ```
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/remove-token`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/remove-token/post(actions/create-remove-token-for-repo)`.
    public enum actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/create-remove-token-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/remove-token/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/remove-token/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/remove-token/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/remove-token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/remove-token/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/remove-token/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.authentication_hyphen_token)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.authentication_hyphen_token {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/remove-token/post(actions/create-remove-token-for-repo)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_remove_hyphen_token_hyphen_for_hyphen_repo.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a self-hosted runner for a repository
    ///
    /// Gets a specific self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-repo)`.
    public enum actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/get-self-hosted-runner-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/GET/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.runner)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.runner {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/get(actions/get-self-hosted-runner-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a self-hosted runner from a repository
    ///
    /// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-repo)`.
    public enum actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo {
        public static let id: Swift.String = "actions/delete-self-hosted-runner-from-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/DELETE/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/delete(actions/delete-self-hosted-runner-from-repo)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_from_hyphen_repo.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List labels for a self-hosted runner for a repository
    ///
    /// Lists all labels for a self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-repo)`.
    public enum actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/list-labels-for-self-hosted-runner-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/GET/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_list_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/get(actions/list-labels-for-self-hosted-runner-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add custom labels to a self-hosted runner for a repository
    ///
    /// Adds custom labels to a self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the organization to use this endpoint.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-repo)`.
    public enum actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/add-custom-labels-to-self-hosted-runner-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The names of the custom labels to add to the runner.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/requestBody/json/labels`.
                    public var labels: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - labels: The names of the custom labels to add to the runner.
                    public init(labels: [Swift.String]) {
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case labels
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init(),
                body: Operations.actions_sol_add_hyphen_custom_hyphen_labels_hyphen_to_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/post(actions/add-custom-labels-to-self-hosted-runner-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set custom labels for a self-hosted runner for a repository
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in a repository.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-repo)`.
    public enum actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/set-custom-labels-for-self-hosted-runner-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/requestBody/json/labels`.
                    public var labels: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - labels: The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
                    public init(labels: [Swift.String]) {
                        self.labels = labels
                    }
                    public enum CodingKeys: String, CodingKey {
                        case labels
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init(),
                body: Operations.actions_sol_set_hyphen_custom_hyphen_labels_hyphen_for_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/put(actions/set-custom-labels-for-self-hosted-runner-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove all custom labels from a self-hosted runner for a repository
    ///
    /// Remove all custom labels from a self-hosted runner configured in a
    /// repository. Returns the remaining read-only labels from the runner.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-repo)`.
    public enum actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/remove-all-custom-labels-from-self-hosted-runner-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/DELETE/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    runner_id: Components.Parameters.runner_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.runner_id = runner_id
                }
            }
            public var path: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_remove_hyphen_all_hyphen_custom_hyphen_labels_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels_readonly)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels_readonly {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/delete(actions/remove-all-custom-labels-from-self-hosted-runner-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a custom label from a self-hosted runner for a repository
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in a repository. Returns the remaining labels from the runner.
    ///
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    ///
    /// Authenticated users must have admin access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-repo)`.
    public enum actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/remove-custom-label-from-self-hosted-runner-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Unique identifier of the self-hosted runner.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/DELETE/path/runner_id`.
                public var runner_id: Components.Parameters.runner_hyphen_id
                /// The name of a self-hosted runner's custom label.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/DELETE/path/name`.
                public var name: Components.Parameters.runner_hyphen_label_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - runner_id: Unique identifier of the self-hosted runner.
                ///   - name: The name of a self-hosted runner's custom label.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    runner_id: Components.Parameters.runner_hyphen_id,
                    name: Components.Parameters.runner_hyphen_label_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.runner_id = runner_id
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.actions_sol_remove_hyphen_custom_hyphen_label_hyphen_from_hyphen_self_hyphen_hosted_hyphen_runner_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.actions_runner_labels)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.actions_runner_labels {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}/delete(actions/remove-custom-label-from-self-hosted-runner-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List workflow runs for a repository
    ///
    /// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// This API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/get(actions/list-workflow-runs-for-repo)`.
    public enum actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "actions/list-workflow-runs-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/actor`.
                public var actor: Components.Parameters.actor?
                /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/branch`.
                public var branch: Components.Parameters.workflow_hyphen_run_hyphen_branch?
                /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/event`.
                public var event: Components.Parameters.event?
                /// - Remark: Generated from `#/components/parameters/workflow-run-status`.
                @frozen public enum workflow_hyphen_run_hyphen_status: String, Codable, Hashable, Sendable {
                    case completed = "completed"
                    case action_required = "action_required"
                    case cancelled = "cancelled"
                    case failure = "failure"
                    case neutral = "neutral"
                    case skipped = "skipped"
                    case stale = "stale"
                    case success = "success"
                    case timed_out = "timed_out"
                    case in_progress = "in_progress"
                    case queued = "queued"
                    case requested = "requested"
                    case waiting = "waiting"
                    case pending = "pending"
                }
                /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/status`.
                public var status: Components.Parameters.workflow_hyphen_run_hyphen_status?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/created`.
                public var created: Components.Parameters.created?
                /// If `true` pull requests are omitted from the response (empty array).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/exclude_pull_requests`.
                public var exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests?
                /// Returns workflow runs with the `check_suite_id` that you specify.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/check_suite_id`.
                public var check_suite_id: Components.Parameters.workflow_hyphen_run_hyphen_check_hyphen_suite_hyphen_id?
                /// Only returns workflow runs that are associated with the specified `head_sha`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/query/head_sha`.
                public var head_sha: Components.Parameters.workflow_hyphen_run_hyphen_head_hyphen_sha?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - actor: Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
                ///   - branch: Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
                ///   - event: Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
                ///   - status: Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - created: Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
                ///   - exclude_pull_requests: If `true` pull requests are omitted from the response (empty array).
                ///   - check_suite_id: Returns workflow runs with the `check_suite_id` that you specify.
                ///   - head_sha: Only returns workflow runs that are associated with the specified `head_sha`.
                public init(
                    actor: Components.Parameters.actor? = nil,
                    branch: Components.Parameters.workflow_hyphen_run_hyphen_branch? = nil,
                    event: Components.Parameters.event? = nil,
                    status: Components.Parameters.workflow_hyphen_run_hyphen_status? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    created: Components.Parameters.created? = nil,
                    exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests? = nil,
                    check_suite_id: Components.Parameters.workflow_hyphen_run_hyphen_check_hyphen_suite_hyphen_id? = nil,
                    head_sha: Components.Parameters.workflow_hyphen_run_hyphen_head_hyphen_sha? = nil
                ) {
                    self.actor = actor
                    self.branch = branch
                    self.event = event
                    self.status = status
                    self.per_page = per_page
                    self.page = page
                    self.created = created
                    self.exclude_pull_requests = exclude_pull_requests
                    self.check_suite_id = check_suite_id
                    self.head_sha = head_sha
                }
            }
            public var query: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/responses/200/content/json/workflow_runs`.
                        public var workflow_runs: [Components.Schemas.workflow_hyphen_run]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - workflow_runs:
                        public init(
                            total_count: Swift.Int,
                            workflow_runs: [Components.Schemas.workflow_hyphen_run]
                        ) {
                            self.total_count = total_count
                            self.workflow_runs = workflow_runs
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case workflow_runs
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/get(actions/list-workflow-runs-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_workflow_hyphen_runs_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a workflow run
    ///
    /// Gets a specific workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/get(actions/get-workflow-run)`.
    public enum actions_sol_get_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/get-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If `true` pull requests are omitted from the response (empty array).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/query/exclude_pull_requests`.
                public var exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - exclude_pull_requests: If `true` pull requests are omitted from the response (empty array).
                public init(exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests? = nil) {
                    self.exclude_pull_requests = exclude_pull_requests
                }
            }
            public var query: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Path,
                query: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Query = .init(),
                headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.workflow_hyphen_run)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.workflow_hyphen_run {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/get(actions/get-workflow-run)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_workflow_hyphen_run.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_workflow_hyphen_run.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a workflow run
    ///
    /// Deletes a specific workflow run.
    ///
    /// Anyone with write access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/delete(actions/delete-workflow-run)`.
    public enum actions_sol_delete_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/delete-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/DELETE/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/delete(actions/delete-workflow-run)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_workflow_hyphen_run.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get the review history for a workflow run
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approvals/get(actions/get-reviews-for-run)`.
    public enum actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run {
        public static let id: Swift.String = "actions/get-reviews-for-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approvals/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approvals/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approvals/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approvals/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approvals/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input.Path,
                headers: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approvals/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approvals/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.environment_hyphen_approvals])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.environment_hyphen_approvals] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approvals/get(actions/get-reviews-for-run)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_reviews_hyphen_for_hyphen_run.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Approve a workflow run for a fork pull request
    ///
    /// Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approve/post(actions/approve-workflow-run)`.
    public enum actions_sol_approve_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/approve-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approve/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approve/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approve/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approve/POST/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approve/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_approve_hyphen_workflow_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_approve_hyphen_workflow_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input.Path,
                headers: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approve/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/approve/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approve/post(actions/approve-workflow-run)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_approve_hyphen_workflow_hyphen_run.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approve/post(actions/approve-workflow-run)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/approve/post(actions/approve-workflow-run)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List workflow run artifacts
    ///
    /// Lists artifacts for a workflow run.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/get(actions/list-workflow-run-artifacts)`.
    public enum actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts {
        public static let id: Swift.String = "actions/list-workflow-run-artifacts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The name field of an artifact. When specified, only artifacts with this name will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/query/name`.
                public var name: Components.Parameters.artifact_hyphen_name?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - name: The name field of an artifact. When specified, only artifacts with this name will be returned.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    name: Components.Parameters.artifact_hyphen_name? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.name = name
                }
            }
            public var query: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Path,
                query: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/responses/200/content/json/artifacts`.
                        public var artifacts: [Components.Schemas.artifact]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - artifacts:
                        public init(
                            total_count: Swift.Int,
                            artifacts: [Components.Schemas.artifact]
                        ) {
                            self.total_count = total_count
                            self.artifacts = artifacts
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case artifacts
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/artifacts/get(actions/list-workflow-run-artifacts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_workflow_hyphen_run_hyphen_artifacts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a workflow run attempt
    ///
    /// Gets a specific workflow run attempt.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/get(actions/get-workflow-run-attempt)`.
    public enum actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt {
        public static let id: Swift.String = "actions/get-workflow-run-attempt"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// The attempt number of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/path/attempt_number`.
                public var attempt_number: Components.Parameters.attempt_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                ///   - attempt_number: The attempt number of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id,
                    attempt_number: Components.Parameters.attempt_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                    self.attempt_number = attempt_number
                }
            }
            public var path: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If `true` pull requests are omitted from the response (empty array).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/query/exclude_pull_requests`.
                public var exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - exclude_pull_requests: If `true` pull requests are omitted from the response (empty array).
                public init(exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests? = nil) {
                    self.exclude_pull_requests = exclude_pull_requests
                }
            }
            public var query: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Path,
                query: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Query = .init(),
                headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.workflow_hyphen_run)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.workflow_hyphen_run {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/get(actions/get-workflow-run-attempt)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List jobs for a workflow run attempt
    ///
    /// Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/get(actions/list-jobs-for-workflow-run-attempt)`.
    public enum actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt {
        public static let id: Swift.String = "actions/list-jobs-for-workflow-run-attempt"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// The attempt number of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/path/attempt_number`.
                public var attempt_number: Components.Parameters.attempt_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                ///   - attempt_number: The attempt number of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id,
                    attempt_number: Components.Parameters.attempt_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                    self.attempt_number = attempt_number
                }
            }
            public var path: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Path,
                query: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/responses/200/content/json/jobs`.
                        public var jobs: [Components.Schemas.job]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - jobs:
                        public init(
                            total_count: Swift.Int,
                            jobs: [Components.Schemas.job]
                        ) {
                            self.total_count = total_count
                            self.jobs = jobs
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case jobs
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/get(actions/list-jobs-for-workflow-run-attempt)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run_hyphen_attempt.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs/get(actions/list-jobs-for-workflow-run-attempt)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Download workflow run attempt logs
    ///
    /// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
    /// 1 minute. Look for `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/get(actions/download-workflow-run-attempt-logs)`.
    public enum actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs {
        public static let id: Swift.String = "actions/download-workflow-run-attempt-logs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// The attempt number of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/GET/path/attempt_number`.
                public var attempt_number: Components.Parameters.attempt_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                ///   - attempt_number: The attempt number of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id,
                    attempt_number: Components.Parameters.attempt_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                    self.attempt_number = attempt_number
                }
            }
            public var path: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/GET/responses/302/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs/get(actions/download-workflow-run-attempt-logs)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_attempt_hyphen_logs.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Cancel a workflow run
    ///
    /// Cancels a workflow run using its `id`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/cancel/post(actions/cancel-workflow-run)`.
    public enum actions_sol_cancel_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/cancel-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/cancel/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/cancel/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/cancel/POST/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input.Path,
                headers: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/cancel/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/cancel/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/cancel/post(actions/cancel-workflow-run)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.actions_sol_cancel_hyphen_workflow_hyphen_run.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/cancel/post(actions/cancel-workflow-run)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Review custom deployment protection rules for a workflow run
    ///
    /// Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// **Note:** GitHub Apps can only review their own custom deployment protection rules.
    /// To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/post(actions/review-custom-gates-for-run)`.
    public enum actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run {
        public static let id: Swift.String = "actions/review-custom-gates-for-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/requestBody/json/value1`.
                    public var value1: Components.Schemas.review_hyphen_custom_hyphen_gates_hyphen_comment_hyphen_required?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/requestBody/json/value2`.
                    public var value2: Components.Schemas.review_hyphen_custom_hyphen_gates_hyphen_state_hyphen_required?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.review_hyphen_custom_hyphen_gates_hyphen_comment_hyphen_required? = nil,
                        value2: Components.Schemas.review_hyphen_custom_hyphen_gates_hyphen_state_hyphen_required? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input.Path,
                body: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule/post(actions/review-custom-gates-for-run)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_review_hyphen_custom_hyphen_gates_hyphen_for_hyphen_run.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Force cancel a workflow run
    ///
    /// Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
    /// You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/post(actions/force-cancel-workflow-run)`.
    public enum actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/force-cancel-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/POST/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input.Path,
                headers: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/post(actions/force-cancel-workflow-run)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.actions_sol_force_hyphen_cancel_hyphen_workflow_hyphen_run.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel/post(actions/force-cancel-workflow-run)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List jobs for a workflow run
    ///
    /// Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/jobs/get(actions/list-jobs-for-workflow-run)`.
    public enum actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run {
        public static let id: Swift.String = "actions/list-jobs-for-workflow-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case latest = "latest"
                    case all = "all"
                }
                /// Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/query/filter`.
                public var filter: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Query.filterPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter: Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    filter: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Query.filterPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.filter = filter
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Path,
                query: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/responses/200/content/json/jobs`.
                        public var jobs: [Components.Schemas.job]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - jobs:
                        public init(
                            total_count: Swift.Int,
                            jobs: [Components.Schemas.job]
                        ) {
                            self.total_count = total_count
                            self.jobs = jobs
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case jobs
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/jobs/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/jobs/get(actions/list-jobs-for-workflow-run)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_jobs_hyphen_for_hyphen_workflow_hyphen_run.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Download workflow run logs
    ///
    /// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
    /// `Location:` in the response header to find the URL for the download.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/get(actions/download-workflow-run-logs)`.
    public enum actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs {
        public static let id: Swift.String = "actions/download-workflow-run-logs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/GET/responses/302/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/get(actions/download-workflow-run-logs)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.actions_sol_download_hyphen_workflow_hyphen_run_hyphen_logs.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Delete workflow run logs
    ///
    /// Deletes all logs for a workflow run.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/delete(actions/delete-workflow-run-logs)`.
    public enum actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs {
        public static let id: Swift.String = "actions/delete-workflow-run-logs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/DELETE/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/logs/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input.Path,
                headers: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/delete(actions/delete-workflow-run-logs)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_workflow_hyphen_run_hyphen_logs.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/delete(actions/delete-workflow-run-logs)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/logs/delete(actions/delete-workflow-run-logs)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get pending deployments for a workflow run
    ///
    /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/get(actions/get-pending-deployments-for-run)`.
    public enum actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run {
        public static let id: Swift.String = "actions/get-pending-deployments-for-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Path,
                headers: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pending_hyphen_deployment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.pending_hyphen_deployment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/get(actions/get-pending-deployments-for-run)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Review pending deployments for a workflow run
    ///
    /// Approve or reject pending deployments that are waiting on approval by a required reviewer.
    ///
    /// Required reviewers with read access to the repository contents and deployments can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/post(actions/review-pending-deployments-for-run)`.
    public enum actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run {
        public static let id: Swift.String = "actions/review-pending-deployments-for-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The list of environment ids to approve or reject
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/requestBody/json/environment_ids`.
                    public var environment_ids: [Swift.Int]
                    /// Whether to approve or reject deployment to the specified environments.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case approved = "approved"
                        case rejected = "rejected"
                    }
                    /// Whether to approve or reject deployment to the specified environments.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/requestBody/json/state`.
                    public var state: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Body.jsonPayload.statePayload
                    /// A comment to accompany the deployment review
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/requestBody/json/comment`.
                    public var comment: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - environment_ids: The list of environment ids to approve or reject
                    ///   - state: Whether to approve or reject deployment to the specified environments.
                    ///   - comment: A comment to accompany the deployment review
                    public init(
                        environment_ids: [Swift.Int],
                        state: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Body.jsonPayload.statePayload,
                        comment: Swift.String
                    ) {
                        self.environment_ids = environment_ids
                        self.state = state
                        self.comment = comment
                    }
                    public enum CodingKeys: String, CodingKey {
                        case environment_ids
                        case state
                        case comment
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Path,
                headers: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Headers = .init(),
                body: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/POST/responses/200/content/application\/json`.
                    case json([Components.Schemas.deployment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.deployment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments/post(actions/review-pending-deployments-for-run)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_review_hyphen_pending_hyphen_deployments_hyphen_for_hyphen_run.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Re-run a workflow
    ///
    /// Re-runs your workflow run using its `id`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun/post(actions/re-run-workflow)`.
    public enum actions_sol_re_hyphen_run_hyphen_workflow {
        public static let id: Swift.String = "actions/re-run-workflow"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_re_hyphen_run_hyphen_workflow.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_re_hyphen_run_hyphen_workflow.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Whether to enable debug logging for the re-run.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/requestBody/json/enable_debug_logging`.
                    public var enable_debug_logging: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - enable_debug_logging: Whether to enable debug logging for the re-run.
                    public init(enable_debug_logging: Swift.Bool? = nil) {
                        self.enable_debug_logging = enable_debug_logging
                    }
                    public enum CodingKeys: String, CodingKey {
                        case enable_debug_logging
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Path,
                headers: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Headers = .init(),
                body: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun/post(actions/re-run-workflow)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_re_hyphen_run_hyphen_workflow.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_re_hyphen_run_hyphen_workflow.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Re-run failed jobs from a workflow run
    ///
    /// Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/post(actions/re-run-workflow-failed-jobs)`.
    public enum actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs {
        public static let id: Swift.String = "actions/re-run-workflow-failed-jobs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Whether to enable debug logging for the re-run.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/requestBody/json/enable_debug_logging`.
                    public var enable_debug_logging: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - enable_debug_logging: Whether to enable debug logging for the re-run.
                    public init(enable_debug_logging: Swift.Bool? = nil) {
                        self.enable_debug_logging = enable_debug_logging
                    }
                    public enum CodingKeys: String, CodingKey {
                        case enable_debug_logging
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Path,
                headers: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Headers = .init(),
                body: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs/post(actions/re-run-workflow-failed-jobs)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_re_hyphen_run_hyphen_workflow_hyphen_failed_hyphen_jobs.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get workflow run usage
    ///
    /// Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/timing/get(actions/get-workflow-run-usage)`.
    public enum actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage {
        public static let id: Swift.String = "actions/get-workflow-run-usage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/timing/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/timing/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/timing/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/timing/GET/path/run_id`.
                public var run_id: Components.Parameters.run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - run_id: The unique identifier of the workflow run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    run_id: Components.Parameters.run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.run_id = run_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/timing/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input.Path,
                headers: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/timing/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/runs/{run_id}/timing/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.workflow_hyphen_run_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.workflow_hyphen_run_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/runs/{run_id}/timing/get(actions/get-workflow-run-usage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_workflow_hyphen_run_hyphen_usage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/get(actions/list-repo-secrets)`.
    public enum actions_sol_list_hyphen_repo_hyphen_secrets {
        public static let id: Swift.String = "actions/list-repo-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Path,
                query: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.actions_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.actions_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/get(actions/list-repo-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_repo_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/public-key/get(actions/get-repo-public-key)`.
    public enum actions_sol_get_hyphen_repo_hyphen_public_hyphen_key {
        public static let id: Swift.String = "actions/get-repo-public-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/public-key/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/public-key/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/public-key/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path,
                headers: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/public-key/get(actions/get-repo-public-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    ///
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/get(actions/get-repo-secret)`.
    public enum actions_sol_get_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "actions/get-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_repo_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_repo_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input.Path,
                headers: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/get(actions/get-repo-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_repo_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_repo_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/put(actions/create-or-update-repo-secret)`.
    public enum actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "actions/create-or-update-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String?
                    /// ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
                    ///   - key_id: ID of the key you used to encrypt the secret.
                    public init(
                        encrypted_value: Swift.String? = nil,
                        key_id: Swift.String? = nil
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path,
                headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers = .init(),
                body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/put(actions/create-or-update-repo-secret)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/put(actions/create-or-update-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/delete(actions/delete-repo-secret)`.
    public enum actions_sol_delete_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "actions/delete-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/secrets/{secret_name}/delete(actions/delete-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_repo_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List repository variables
    ///
    /// Lists all repository variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/get(actions/list-repo-variables)`.
    public enum actions_sol_list_hyphen_repo_hyphen_variables {
        public static let id: Swift.String = "actions/list-repo-variables"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/query/per_page`.
                public var per_page: Components.Parameters.variables_hyphen_per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.variables_hyphen_per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_variables.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_variables.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Path,
                query: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/responses/200/content/json/variables`.
                        public var variables: [Components.Schemas.actions_hyphen_variable]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - variables:
                        public init(
                            total_count: Swift.Int,
                            variables: [Components.Schemas.actions_hyphen_variable]
                        ) {
                            self.total_count = total_count
                            self.variables = variables
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case variables
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/get(actions/list-repo-variables)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_repo_hyphen_variables.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a repository variable
    ///
    /// Creates a repository variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/post(actions/create-repo-variable)`.
    public enum actions_sol_create_hyphen_repo_hyphen_variable {
        public static let id: Swift.String = "actions/create-repo-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_repo_hyphen_variable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_repo_hyphen_variable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The value of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/requestBody/json/value`.
                    public var value: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the variable.
                    ///   - value: The value of the variable.
                    public init(
                        name: Swift.String,
                        value: Swift.String
                    ) {
                        self.name = name
                        self.value = value
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case value
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Path,
                headers: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Headers = .init(),
                body: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/post(actions/create-repo-variable)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_repo_hyphen_variable.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_repo_hyphen_variable.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository variable
    ///
    /// Gets a specific variable in a repository.
    ///
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/get(actions/get-repo-variable)`.
    public enum actions_sol_get_hyphen_repo_hyphen_variable {
        public static let id: Swift.String = "actions/get-repo-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/GET/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_repo_hyphen_variable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_repo_hyphen_variable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input.Path,
                headers: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_variable)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_variable {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/get(actions/get-repo-variable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_repo_hyphen_variable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_repo_hyphen_variable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a repository variable
    ///
    /// Updates a repository variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/patch(actions/update-repo-variable)`.
    public enum actions_sol_update_hyphen_repo_hyphen_variable {
        public static let id: Swift.String = "actions/update-repo-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The value of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/requestBody/json/value`.
                    public var value: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the variable.
                    ///   - value: The value of the variable.
                    public init(
                        name: Swift.String? = nil,
                        value: Swift.String? = nil
                    ) {
                        self.name = name
                        self.value = value
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case value
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/PATCH/requestBody/content/application\/json`.
                case json(Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input.Path,
                body: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/patch(actions/update-repo-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_update_hyphen_repo_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_update_hyphen_repo_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Delete a repository variable
    ///
    /// Deletes a repository variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/actions/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/delete(actions/delete-repo-variable)`.
    public enum actions_sol_delete_hyphen_repo_hyphen_variable {
        public static let id: Swift.String = "actions/delete-repo-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/variables/{name}/DELETE/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name: The name of the variable.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/variables/{name}/delete(actions/delete-repo-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_repo_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List repository workflows
    ///
    /// Lists the workflows in a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/get(actions/list-repo-workflows)`.
    public enum actions_sol_list_hyphen_repo_hyphen_workflows {
        public static let id: Swift.String = "actions/list-repo-workflows"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_workflows.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_repo_hyphen_workflows.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Path,
                query: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/responses/200/content/json/workflows`.
                        public var workflows: [Components.Schemas.workflow]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - workflows:
                        public init(
                            total_count: Swift.Int,
                            workflows: [Components.Schemas.workflow]
                        ) {
                            self.total_count = total_count
                            self.workflows = workflows
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case workflows
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/get(actions/list-repo-workflows)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_repo_hyphen_workflows.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a workflow
    ///
    /// Gets a specific workflow. You can replace `workflow_id` with the workflow
    /// file name. For example, you could use `main.yaml`.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/get(actions/get-workflow)`.
    public enum actions_sol_get_hyphen_workflow {
        public static let id: Swift.String = "actions/get-workflow"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/workflow-id`.
                @frozen public enum workflow_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the workflow. You can also pass the workflow file name as a string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/GET/path/workflow_id`.
                public var workflow_id: Components.Parameters.workflow_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - workflow_id: The ID of the workflow. You can also pass the workflow file name as a string.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    workflow_id: Components.Parameters.workflow_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.workflow_id = workflow_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_workflow.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_workflow.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_workflow.Input.Path,
                headers: Operations.actions_sol_get_hyphen_workflow.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.workflow)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.workflow {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_workflow.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_workflow.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/get(actions/get-workflow)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_workflow.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_workflow.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Disable a workflow
    ///
    /// Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/put(actions/disable-workflow)`.
    public enum actions_sol_disable_hyphen_workflow {
        public static let id: Swift.String = "actions/disable-workflow"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/workflow-id`.
                @frozen public enum workflow_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the workflow. You can also pass the workflow file name as a string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/PUT/path/workflow_id`.
                public var workflow_id: Components.Parameters.workflow_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - workflow_id: The ID of the workflow. You can also pass the workflow file name as a string.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    workflow_id: Components.Parameters.workflow_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.workflow_id = workflow_id
                }
            }
            public var path: Operations.actions_sol_disable_hyphen_workflow.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_disable_hyphen_workflow.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable/put(actions/disable-workflow)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_disable_hyphen_workflow.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_disable_hyphen_workflow.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a workflow dispatch event
    ///
    /// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/post(actions/create-workflow-dispatch)`.
    public enum actions_sol_create_hyphen_workflow_hyphen_dispatch {
        public static let id: Swift.String = "actions/create-workflow-dispatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/workflow-id`.
                @frozen public enum workflow_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the workflow. You can also pass the workflow file name as a string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/path/workflow_id`.
                public var workflow_id: Components.Parameters.workflow_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - workflow_id: The ID of the workflow. You can also pass the workflow file name as a string.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    workflow_id: Components.Parameters.workflow_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.workflow_id = workflow_id
                }
            }
            public var path: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The git reference for the workflow. The reference can be a branch or tag name.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/requestBody/json/ref`.
                    public var ref: Swift.String
                    /// Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/requestBody/json/inputs`.
                    public struct inputsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `inputsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/requestBody/json/inputs`.
                    public var inputs: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Body.jsonPayload.inputsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ref: The git reference for the workflow. The reference can be a branch or tag name.
                    ///   - inputs: Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
                    public init(
                        ref: Swift.String,
                        inputs: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Body.jsonPayload.inputsPayload? = nil
                    ) {
                        self.ref = ref
                        self.inputs = inputs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ref
                        case inputs
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Path,
                body: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches/post(actions/create-workflow-dispatch)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_create_hyphen_workflow_hyphen_dispatch.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Enable a workflow
    ///
    /// Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/put(actions/enable-workflow)`.
    public enum actions_sol_enable_hyphen_workflow {
        public static let id: Swift.String = "actions/enable-workflow"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/workflow-id`.
                @frozen public enum workflow_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the workflow. You can also pass the workflow file name as a string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/PUT/path/workflow_id`.
                public var workflow_id: Components.Parameters.workflow_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - workflow_id: The ID of the workflow. You can also pass the workflow file name as a string.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    workflow_id: Components.Parameters.workflow_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.workflow_id = workflow_id
                }
            }
            public var path: Operations.actions_sol_enable_hyphen_workflow.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_enable_hyphen_workflow.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable/put(actions/enable-workflow)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_enable_hyphen_workflow.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_enable_hyphen_workflow.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List workflow runs for a workflow
    ///
    /// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    ///
    /// Anyone with read access to the repository can use this endpoint
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/get(actions/list-workflow-runs)`.
    public enum actions_sol_list_hyphen_workflow_hyphen_runs {
        public static let id: Swift.String = "actions/list-workflow-runs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/workflow-id`.
                @frozen public enum workflow_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the workflow. You can also pass the workflow file name as a string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/path/workflow_id`.
                public var workflow_id: Components.Parameters.workflow_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - workflow_id: The ID of the workflow. You can also pass the workflow file name as a string.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    workflow_id: Components.Parameters.workflow_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.workflow_id = workflow_id
                }
            }
            public var path: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/actor`.
                public var actor: Components.Parameters.actor?
                /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/branch`.
                public var branch: Components.Parameters.workflow_hyphen_run_hyphen_branch?
                /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/event`.
                public var event: Components.Parameters.event?
                /// - Remark: Generated from `#/components/parameters/workflow-run-status`.
                @frozen public enum workflow_hyphen_run_hyphen_status: String, Codable, Hashable, Sendable {
                    case completed = "completed"
                    case action_required = "action_required"
                    case cancelled = "cancelled"
                    case failure = "failure"
                    case neutral = "neutral"
                    case skipped = "skipped"
                    case stale = "stale"
                    case success = "success"
                    case timed_out = "timed_out"
                    case in_progress = "in_progress"
                    case queued = "queued"
                    case requested = "requested"
                    case waiting = "waiting"
                    case pending = "pending"
                }
                /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/status`.
                public var status: Components.Parameters.workflow_hyphen_run_hyphen_status?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/created`.
                public var created: Components.Parameters.created?
                /// If `true` pull requests are omitted from the response (empty array).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/exclude_pull_requests`.
                public var exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests?
                /// Returns workflow runs with the `check_suite_id` that you specify.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/check_suite_id`.
                public var check_suite_id: Components.Parameters.workflow_hyphen_run_hyphen_check_hyphen_suite_hyphen_id?
                /// Only returns workflow runs that are associated with the specified `head_sha`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/query/head_sha`.
                public var head_sha: Components.Parameters.workflow_hyphen_run_hyphen_head_hyphen_sha?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - actor: Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
                ///   - branch: Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
                ///   - event: Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
                ///   - status: Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - created: Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
                ///   - exclude_pull_requests: If `true` pull requests are omitted from the response (empty array).
                ///   - check_suite_id: Returns workflow runs with the `check_suite_id` that you specify.
                ///   - head_sha: Only returns workflow runs that are associated with the specified `head_sha`.
                public init(
                    actor: Components.Parameters.actor? = nil,
                    branch: Components.Parameters.workflow_hyphen_run_hyphen_branch? = nil,
                    event: Components.Parameters.event? = nil,
                    status: Components.Parameters.workflow_hyphen_run_hyphen_status? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    created: Components.Parameters.created? = nil,
                    exclude_pull_requests: Components.Parameters.exclude_hyphen_pull_hyphen_requests? = nil,
                    check_suite_id: Components.Parameters.workflow_hyphen_run_hyphen_check_hyphen_suite_hyphen_id? = nil,
                    head_sha: Components.Parameters.workflow_hyphen_run_hyphen_head_hyphen_sha? = nil
                ) {
                    self.actor = actor
                    self.branch = branch
                    self.event = event
                    self.status = status
                    self.per_page = per_page
                    self.page = page
                    self.created = created
                    self.exclude_pull_requests = exclude_pull_requests
                    self.check_suite_id = check_suite_id
                    self.head_sha = head_sha
                }
            }
            public var query: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_workflow_hyphen_runs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_workflow_hyphen_runs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Path,
                query: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/responses/200/content/json/workflow_runs`.
                        public var workflow_runs: [Components.Schemas.workflow_hyphen_run]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - workflow_runs:
                        public init(
                            total_count: Swift.Int,
                            workflow_runs: [Components.Schemas.workflow_hyphen_run]
                        ) {
                            self.total_count = total_count
                            self.workflow_runs = workflow_runs
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case workflow_runs
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs/get(actions/list-workflow-runs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_workflow_hyphen_runs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get workflow usage
    ///
    /// Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/get(actions/get-workflow-usage)`.
    public enum actions_sol_get_hyphen_workflow_hyphen_usage {
        public static let id: Swift.String = "actions/get-workflow-usage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/workflow-id`.
                @frozen public enum workflow_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/workflow-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the workflow. You can also pass the workflow file name as a string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/GET/path/workflow_id`.
                public var workflow_id: Components.Parameters.workflow_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - workflow_id: The ID of the workflow. You can also pass the workflow file name as a string.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    workflow_id: Components.Parameters.workflow_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.workflow_id = workflow_id
                }
            }
            public var path: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_usage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_workflow_hyphen_usage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input.Path,
                headers: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.workflow_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.workflow_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing/get(actions/get-workflow-usage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_workflow_hyphen_usage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List environment secrets
    ///
    /// Lists all secrets available in an environment without revealing their
    /// encrypted values.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/get(actions/list-environment-secrets)`.
    public enum actions_sol_list_hyphen_environment_hyphen_secrets {
        public static let id: Swift.String = "actions/list-environment-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_environment_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_environment_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Path,
                query: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.actions_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.actions_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/get(actions/list-environment-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_environment_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an environment public key
    ///
    /// Get the public key for an environment, which you need to encrypt environment
    /// secrets. You need to encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/get(actions/get-environment-public-key)`.
    public enum actions_sol_get_hyphen_environment_hyphen_public_hyphen_key {
        public static let id: Swift.String = "actions/get-environment-public-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input.Path,
                headers: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key/get(actions/get-environment-public-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_environment_hyphen_public_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an environment secret
    ///
    /// Gets a single environment secret without revealing its encrypted value.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/get(actions/get-environment-secret)`.
    public enum actions_sol_get_hyphen_environment_hyphen_secret {
        public static let id: Swift.String = "actions/get-environment-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_environment_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_environment_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input.Path,
                headers: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/get(actions/get-environment-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_environment_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_environment_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update an environment secret
    ///
    /// Creates or updates an environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/put(actions/create-or-update-environment-secret)`.
    public enum actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret {
        public static let id: Swift.String = "actions/create-or-update-environment-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String
                    /// ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
                    ///   - key_id: ID of the key you used to encrypt the secret.
                    public init(
                        encrypted_value: Swift.String,
                        key_id: Swift.String
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Path,
                headers: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Headers = .init(),
                body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/put(actions/create-or-update-environment-secret)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/put(actions/create-or-update-environment-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_create_hyphen_or_hyphen_update_hyphen_environment_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an environment secret
    ///
    /// Deletes a secret in an environment using the secret name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/delete(actions/delete-environment-secret)`.
    public enum actions_sol_delete_hyphen_environment_hyphen_secret {
        public static let id: Swift.String = "actions/delete-environment-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/DELETE/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Default response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}/delete(actions/delete-environment-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_environment_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List environment variables
    ///
    /// Lists all environment variables.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/get(actions/list-environment-variables)`.
    public enum actions_sol_list_hyphen_environment_hyphen_variables {
        public static let id: Swift.String = "actions/list-environment-variables"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/query/per_page`.
                public var per_page: Components.Parameters.variables_hyphen_per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.variables_hyphen_per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_environment_hyphen_variables.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_list_hyphen_environment_hyphen_variables.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Path,
                query: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Query = .init(),
                headers: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/responses/200/content/json/variables`.
                        public var variables: [Components.Schemas.actions_hyphen_variable]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - variables:
                        public init(
                            total_count: Swift.Int,
                            variables: [Components.Schemas.actions_hyphen_variable]
                        ) {
                            self.total_count = total_count
                            self.variables = variables
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case variables
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/GET/responses/200/content/application\/json`.
                    case json(Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok.Headers = .init(),
                    body: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/get(actions/list-environment-variables)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_list_hyphen_environment_hyphen_variables.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an environment variable
    ///
    /// Create an environment variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/variables`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/post(actions/create-environment-variable)`.
    public enum actions_sol_create_hyphen_environment_hyphen_variable {
        public static let id: Swift.String = "actions/create-environment-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_environment_hyphen_variable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_create_hyphen_environment_hyphen_variable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The value of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/requestBody/json/value`.
                    public var value: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the variable.
                    ///   - value: The value of the variable.
                    public init(
                        name: Swift.String,
                        value: Swift.String
                    ) {
                        self.name = name
                        self.value = value
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case value
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/requestBody/content/application\/json`.
                case json(Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Path,
                headers: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Headers = .init(),
                body: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/post(actions/create-environment-variable)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.actions_sol_create_hyphen_environment_hyphen_variable.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.actions_sol_create_hyphen_environment_hyphen_variable.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an environment variable
    ///
    /// Gets a specific variable in an environment.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/get(actions/get-environment-variable)`.
    public enum actions_sol_get_hyphen_environment_hyphen_variable {
        public static let id: Swift.String = "actions/get-environment-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - name: The name of the variable.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    name: Components.Parameters.variable_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.name = name
                }
            }
            public var path: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_environment_hyphen_variable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.actions_sol_get_hyphen_environment_hyphen_variable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input.Path,
                headers: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_variable)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_variable {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/get(actions/get-environment-variable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.actions_sol_get_hyphen_environment_hyphen_variable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.actions_sol_get_hyphen_environment_hyphen_variable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an environment variable
    ///
    /// Updates an environment variable that you can reference in a GitHub Actions workflow.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/patch(actions/update-environment-variable)`.
    public enum actions_sol_update_hyphen_environment_hyphen_variable {
        public static let id: Swift.String = "actions/update-environment-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name: The name of the variable.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Components.Parameters.variable_hyphen_name,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The value of the variable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/requestBody/json/value`.
                    public var value: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the variable.
                    ///   - value: The value of the variable.
                    public init(
                        name: Swift.String? = nil,
                        value: Swift.String? = nil
                    ) {
                        self.name = name
                        self.value = value
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case value
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/PATCH/requestBody/content/application\/json`.
                case json(Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input.Body.jsonPayload)
            }
            public var body: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input.Path,
                body: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/patch(actions/update-environment-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_update_hyphen_environment_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_update_hyphen_environment_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Delete an environment variable
    ///
    /// Deletes an environment variable using the variable name.
    ///
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    ///
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/delete(actions/delete-environment-variable)`.
    public enum actions_sol_delete_hyphen_environment_hyphen_variable {
        public static let id: Swift.String = "actions/delete-environment-variable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the variable.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/DELETE/path/name`.
                public var name: Components.Parameters.variable_hyphen_name
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/DELETE/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name: The name of the variable.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Components.Parameters.variable_hyphen_name,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/variables/{name}/delete(actions/delete-environment-variable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.actions_sol_delete_hyphen_environment_hyphen_variable.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
