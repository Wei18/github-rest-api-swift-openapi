// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Create a check run
    ///
    /// Creates a new check run for a specific commit in a repository.
    ///
    /// To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.
    ///
    /// In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/post(checks/create)`.
    func checks_sol_create(_ input: Operations.checks_sol_create.Input) async throws -> Operations.checks_sol_create.Output
    /// Get a check run
    ///
    /// Gets a single check run using its `id`.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-runs/{check_run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/get(checks/get)`.
    func checks_sol_get(_ input: Operations.checks_sol_get.Input) async throws -> Operations.checks_sol_get.Output
    /// Update a check run
    ///
    /// Updates a check run for a specific commit in a repository.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/patch(checks/update)`.
    func checks_sol_update(_ input: Operations.checks_sol_update.Input) async throws -> Operations.checks_sol_update.Output
    /// List check run annotations
    ///
    /// Lists annotations for a check run using the annotation `id`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/get(checks/list-annotations)`.
    func checks_sol_list_hyphen_annotations(_ input: Operations.checks_sol_list_hyphen_annotations.Input) async throws -> Operations.checks_sol_list_hyphen_annotations.Output
    /// Rerequest a check run
    ///
    /// Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    ///
    /// For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/post(checks/rerequest-run)`.
    func checks_sol_rerequest_hyphen_run(_ input: Operations.checks_sol_rerequest_hyphen_run.Input) async throws -> Operations.checks_sol_rerequest_hyphen_run.Output
    /// Create a check suite
    ///
    /// Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/post(checks/create-suite)`.
    func checks_sol_create_hyphen_suite(_ input: Operations.checks_sol_create_hyphen_suite.Input) async throws -> Operations.checks_sol_create_hyphen_suite.Output
    /// Update repository preferences for check suites
    ///
    /// Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
    /// You must have admin permissions in the repository to set preferences for check suites.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/check-suites/preferences`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/preferences/patch(checks/set-suites-preferences)`.
    func checks_sol_set_hyphen_suites_hyphen_preferences(_ input: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input) async throws -> Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Output
    /// Get a check suite
    ///
    /// Gets a single check suite using its `id`.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-suites/{check_suite_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/get(checks/get-suite)`.
    func checks_sol_get_hyphen_suite(_ input: Operations.checks_sol_get_hyphen_suite.Input) async throws -> Operations.checks_sol_get_hyphen_suite.Output
    /// List check runs in a check suite
    ///
    /// Lists check runs for a check suite using its `id`.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/get(checks/list-for-suite)`.
    func checks_sol_list_hyphen_for_hyphen_suite(_ input: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input) async throws -> Operations.checks_sol_list_hyphen_for_hyphen_suite.Output
    /// Rerequest a check suite
    ///
    /// Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/post(checks/rerequest-suite)`.
    func checks_sol_rerequest_hyphen_suite(_ input: Operations.checks_sol_rerequest_hyphen_suite.Input) async throws -> Operations.checks_sol_rerequest_hyphen_suite.Output
    /// List check runs for a Git reference
    ///
    /// Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-runs/get(checks/list-for-ref)`.
    func checks_sol_list_hyphen_for_hyphen_ref(_ input: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input) async throws -> Operations.checks_sol_list_hyphen_for_hyphen_ref.Output
    /// List check suites for a Git reference
    ///
    /// Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/check-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-suites/get(checks/list-suites-for-ref)`.
    func checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref(_ input: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input) async throws -> Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Create a check run
    ///
    /// Creates a new check run for a specific commit in a repository.
    ///
    /// To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.
    ///
    /// In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/post(checks/create)`.
    public func checks_sol_create(
        path: Operations.checks_sol_create.Input.Path,
        headers: Operations.checks_sol_create.Input.Headers = .init(),
        body: Operations.checks_sol_create.Input.Body
    ) async throws -> Operations.checks_sol_create.Output {
        try await checks_sol_create(Operations.checks_sol_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a check run
    ///
    /// Gets a single check run using its `id`.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-runs/{check_run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/get(checks/get)`.
    public func checks_sol_get(
        path: Operations.checks_sol_get.Input.Path,
        headers: Operations.checks_sol_get.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_get.Output {
        try await checks_sol_get(Operations.checks_sol_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a check run
    ///
    /// Updates a check run for a specific commit in a repository.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/patch(checks/update)`.
    public func checks_sol_update(
        path: Operations.checks_sol_update.Input.Path,
        headers: Operations.checks_sol_update.Input.Headers = .init(),
        body: Operations.checks_sol_update.Input.Body
    ) async throws -> Operations.checks_sol_update.Output {
        try await checks_sol_update(Operations.checks_sol_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List check run annotations
    ///
    /// Lists annotations for a check run using the annotation `id`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/get(checks/list-annotations)`.
    public func checks_sol_list_hyphen_annotations(
        path: Operations.checks_sol_list_hyphen_annotations.Input.Path,
        query: Operations.checks_sol_list_hyphen_annotations.Input.Query = .init(),
        headers: Operations.checks_sol_list_hyphen_annotations.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_list_hyphen_annotations.Output {
        try await checks_sol_list_hyphen_annotations(Operations.checks_sol_list_hyphen_annotations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Rerequest a check run
    ///
    /// Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    ///
    /// For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/post(checks/rerequest-run)`.
    public func checks_sol_rerequest_hyphen_run(
        path: Operations.checks_sol_rerequest_hyphen_run.Input.Path,
        headers: Operations.checks_sol_rerequest_hyphen_run.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_rerequest_hyphen_run.Output {
        try await checks_sol_rerequest_hyphen_run(Operations.checks_sol_rerequest_hyphen_run.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a check suite
    ///
    /// Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/post(checks/create-suite)`.
    public func checks_sol_create_hyphen_suite(
        path: Operations.checks_sol_create_hyphen_suite.Input.Path,
        headers: Operations.checks_sol_create_hyphen_suite.Input.Headers = .init(),
        body: Operations.checks_sol_create_hyphen_suite.Input.Body
    ) async throws -> Operations.checks_sol_create_hyphen_suite.Output {
        try await checks_sol_create_hyphen_suite(Operations.checks_sol_create_hyphen_suite.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Update repository preferences for check suites
    ///
    /// Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
    /// You must have admin permissions in the repository to set preferences for check suites.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/check-suites/preferences`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/preferences/patch(checks/set-suites-preferences)`.
    public func checks_sol_set_hyphen_suites_hyphen_preferences(
        path: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Path,
        headers: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Headers = .init(),
        body: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Body
    ) async throws -> Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Output {
        try await checks_sol_set_hyphen_suites_hyphen_preferences(Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a check suite
    ///
    /// Gets a single check suite using its `id`.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-suites/{check_suite_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/get(checks/get-suite)`.
    public func checks_sol_get_hyphen_suite(
        path: Operations.checks_sol_get_hyphen_suite.Input.Path,
        headers: Operations.checks_sol_get_hyphen_suite.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_get_hyphen_suite.Output {
        try await checks_sol_get_hyphen_suite(Operations.checks_sol_get_hyphen_suite.Input(
            path: path,
            headers: headers
        ))
    }
    /// List check runs in a check suite
    ///
    /// Lists check runs for a check suite using its `id`.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/get(checks/list-for-suite)`.
    public func checks_sol_list_hyphen_for_hyphen_suite(
        path: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Path,
        query: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Query = .init(),
        headers: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_list_hyphen_for_hyphen_suite.Output {
        try await checks_sol_list_hyphen_for_hyphen_suite(Operations.checks_sol_list_hyphen_for_hyphen_suite.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Rerequest a check suite
    ///
    /// Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/post(checks/rerequest-suite)`.
    public func checks_sol_rerequest_hyphen_suite(
        path: Operations.checks_sol_rerequest_hyphen_suite.Input.Path,
        headers: Operations.checks_sol_rerequest_hyphen_suite.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_rerequest_hyphen_suite.Output {
        try await checks_sol_rerequest_hyphen_suite(Operations.checks_sol_rerequest_hyphen_suite.Input(
            path: path,
            headers: headers
        ))
    }
    /// List check runs for a Git reference
    ///
    /// Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-runs/get(checks/list-for-ref)`.
    public func checks_sol_list_hyphen_for_hyphen_ref(
        path: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Path,
        query: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Query = .init(),
        headers: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_list_hyphen_for_hyphen_ref.Output {
        try await checks_sol_list_hyphen_for_hyphen_ref(Operations.checks_sol_list_hyphen_for_hyphen_ref.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List check suites for a Git reference
    ///
    /// Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/check-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-suites/get(checks/list-suites-for-ref)`.
    public func checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref(
        path: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Path,
        query: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Query = .init(),
        headers: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Headers = .init()
    ) async throws -> Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output {
        try await checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref(Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct nullable_hyphen_integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `nullable_hyphen_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_id:
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_id = client_id
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_id
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public struct secret_scanning_non_provider_patternsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload?
                /// Creates a new `secret_scanning_non_provider_patternsPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public var secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            ///   - secret_scanning_non_provider_patterns:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil,
                secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
                self.secret_scanning_non_provider_patterns = secret_scanning_non_provider_patterns
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
                case secret_scanning_non_provider_patterns
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        public struct empty_hyphen_object: Codable, Hashable, Sendable {
            /// Creates a new `empty_hyphen_object`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// - Remark: Generated from `#/components/schemas/pull-request-minimal`.
        public struct pull_hyphen_request_hyphen_minimal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head`.
            public struct headPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo`.
                public struct repoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo/id`.
                    public var id: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo/name`.
                    public var name: Swift.String
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - url:
                    ///   - name:
                    public init(
                        id: Swift.Int64,
                        url: Swift.String,
                        name: Swift.String
                    ) {
                        self.id = id
                        self.url = url
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case url
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head/repo`.
                public var repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload.repoPayload
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - ref:
                ///   - sha:
                ///   - repo:
                public init(
                    ref: Swift.String,
                    sha: Swift.String,
                    repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload.repoPayload
                ) {
                    self.ref = ref
                    self.sha = sha
                    self.repo = repo
                }
                public enum CodingKeys: String, CodingKey {
                    case ref
                    case sha
                    case repo
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/head`.
            public var head: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base`.
            public struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo`.
                public struct repoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo/id`.
                    public var id: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo/name`.
                    public var name: Swift.String
                    /// Creates a new `repoPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - url:
                    ///   - name:
                    public init(
                        id: Swift.Int64,
                        url: Swift.String,
                        name: Swift.String
                    ) {
                        self.id = id
                        self.url = url
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case url
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base/repo`.
                public var repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload.repoPayload
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - ref:
                ///   - sha:
                ///   - repo:
                public init(
                    ref: Swift.String,
                    sha: Swift.String,
                    repo: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload.repoPayload
                ) {
                    self.ref = ref
                    self.sha = sha
                    self.repo = repo
                }
                public enum CodingKeys: String, CodingKey {
                    case ref
                    case sha
                    case repo
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-minimal/base`.
            public var base: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload
            /// Creates a new `pull_hyphen_request_hyphen_minimal`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - number:
            ///   - url:
            ///   - head:
            ///   - base:
            public init(
                id: Swift.Int64,
                number: Swift.Int,
                url: Swift.String,
                head: Components.Schemas.pull_hyphen_request_hyphen_minimal.headPayload,
                base: Components.Schemas.pull_hyphen_request_hyphen_minimal.basePayload
            ) {
                self.id = id
                self.number = number
                self.url = url
                self.head = head
                self.base = base
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case number
                case url
                case head
                case base
            }
        }
        /// A deployment created as the result of an Actions check run from a workflow that references an environment
        ///
        /// - Remark: Generated from `#/components/schemas/deployment-simple`.
        public struct deployment_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/deployment-simple/url`.
            public var url: Swift.String
            /// Unique identifier of the deployment
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/deployment-simple/node_id`.
            public var node_id: Swift.String
            /// Parameter to specify a task to execute
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-simple/task`.
            public var task: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment-simple/original_environment`.
            public var original_environment: Swift.String?
            /// Name for the target deployment environment.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-simple/environment`.
            public var environment: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment-simple/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/deployment-simple/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment-simple/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment-simple/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment-simple/repository_url`.
            public var repository_url: Swift.String
            /// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-simple/transient_environment`.
            public var transient_environment: Swift.Bool?
            /// Specifies if the given environment is one that end-users directly interact with. Default: false.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-simple/production_environment`.
            public var production_environment: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/deployment-simple/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// Creates a new `deployment_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id: Unique identifier of the deployment
            ///   - node_id:
            ///   - task: Parameter to specify a task to execute
            ///   - original_environment:
            ///   - environment: Name for the target deployment environment.
            ///   - description:
            ///   - created_at:
            ///   - updated_at:
            ///   - statuses_url:
            ///   - repository_url:
            ///   - transient_environment: Specifies if the given environment is will no longer exist at some point in the future. Default: false.
            ///   - production_environment: Specifies if the given environment is one that end-users directly interact with. Default: false.
            ///   - performed_via_github_app:
            public init(
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                task: Swift.String,
                original_environment: Swift.String? = nil,
                environment: Swift.String,
                description: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                statuses_url: Swift.String,
                repository_url: Swift.String,
                transient_environment: Swift.Bool? = nil,
                production_environment: Swift.Bool? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.task = task
                self.original_environment = original_environment
                self.environment = environment
                self.description = description
                self.created_at = created_at
                self.updated_at = updated_at
                self.statuses_url = statuses_url
                self.repository_url = repository_url
                self.transient_environment = transient_environment
                self.production_environment = production_environment
                self.performed_via_github_app = performed_via_github_app
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case task
                case original_environment
                case environment
                case description
                case created_at
                case updated_at
                case statuses_url
                case repository_url
                case transient_environment
                case production_environment
                case performed_via_github_app
            }
        }
        /// A check performed on the code of a given code change
        ///
        /// - Remark: Generated from `#/components/schemas/check-run`.
        public struct check_hyphen_run: Codable, Hashable, Sendable {
            /// The id of the check.
            ///
            /// - Remark: Generated from `#/components/schemas/check-run/id`.
            public var id: Swift.Int
            /// The SHA of the commit that is being checked.
            ///
            /// - Remark: Generated from `#/components/schemas/check-run/head_sha`.
            public var head_sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/check-run/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/check-run/external_id`.
            public var external_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-run/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/check-run/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-run/details_url`.
            public var details_url: Swift.String?
            /// The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
            ///
            /// - Remark: Generated from `#/components/schemas/check-run/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case queued = "queued"
                case in_progress = "in_progress"
                case completed = "completed"
                case waiting = "waiting"
                case requested = "requested"
                case pending = "pending"
            }
            /// The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
            ///
            /// - Remark: Generated from `#/components/schemas/check-run/status`.
            public var status: Components.Schemas.check_hyphen_run.statusPayload
            /// - Remark: Generated from `#/components/schemas/check-run/conclusion`.
            @frozen public enum conclusionPayload: String, Codable, Hashable, Sendable {
                case success = "success"
                case failure = "failure"
                case neutral = "neutral"
                case cancelled = "cancelled"
                case skipped = "skipped"
                case timed_out = "timed_out"
                case action_required = "action_required"
            }
            /// - Remark: Generated from `#/components/schemas/check-run/conclusion`.
            public var conclusion: Components.Schemas.check_hyphen_run.conclusionPayload?
            /// - Remark: Generated from `#/components/schemas/check-run/started_at`.
            public var started_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/check-run/completed_at`.
            public var completed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/check-run/output`.
            public struct outputPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/check-run/output/title`.
                public var title: Swift.String?
                /// - Remark: Generated from `#/components/schemas/check-run/output/summary`.
                public var summary: Swift.String?
                /// - Remark: Generated from `#/components/schemas/check-run/output/text`.
                public var text: Swift.String?
                /// - Remark: Generated from `#/components/schemas/check-run/output/annotations_count`.
                public var annotations_count: Swift.Int
                /// - Remark: Generated from `#/components/schemas/check-run/output/annotations_url`.
                public var annotations_url: Swift.String
                /// Creates a new `outputPayload`.
                ///
                /// - Parameters:
                ///   - title:
                ///   - summary:
                ///   - text:
                ///   - annotations_count:
                ///   - annotations_url:
                public init(
                    title: Swift.String? = nil,
                    summary: Swift.String? = nil,
                    text: Swift.String? = nil,
                    annotations_count: Swift.Int,
                    annotations_url: Swift.String
                ) {
                    self.title = title
                    self.summary = summary
                    self.text = text
                    self.annotations_count = annotations_count
                    self.annotations_url = annotations_url
                }
                public enum CodingKeys: String, CodingKey {
                    case title
                    case summary
                    case text
                    case annotations_count
                    case annotations_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/check-run/output`.
            public var output: Components.Schemas.check_hyphen_run.outputPayload
            /// The name of the check.
            ///
            /// - Remark: Generated from `#/components/schemas/check-run/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/check-run/check_suite`.
            public struct check_suitePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/check-run/check_suite/id`.
                public var id: Swift.Int
                /// Creates a new `check_suitePayload`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// - Remark: Generated from `#/components/schemas/check-run/check_suite`.
            public var check_suite: Components.Schemas.check_hyphen_run.check_suitePayload?
            /// - Remark: Generated from `#/components/schemas/check-run/app`.
            public var app: Components.Schemas.nullable_hyphen_integration?
            /// Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.
            ///
            /// - Remark: Generated from `#/components/schemas/check-run/pull_requests`.
            public var pull_requests: [Components.Schemas.pull_hyphen_request_hyphen_minimal]
            /// - Remark: Generated from `#/components/schemas/check-run/deployment`.
            public var deployment: Components.Schemas.deployment_hyphen_simple?
            /// Creates a new `check_hyphen_run`.
            ///
            /// - Parameters:
            ///   - id: The id of the check.
            ///   - head_sha: The SHA of the commit that is being checked.
            ///   - node_id:
            ///   - external_id:
            ///   - url:
            ///   - html_url:
            ///   - details_url:
            ///   - status: The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
            ///   - conclusion:
            ///   - started_at:
            ///   - completed_at:
            ///   - output:
            ///   - name: The name of the check.
            ///   - check_suite:
            ///   - app:
            ///   - pull_requests: Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.
            ///   - deployment:
            public init(
                id: Swift.Int,
                head_sha: Swift.String,
                node_id: Swift.String,
                external_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String? = nil,
                details_url: Swift.String? = nil,
                status: Components.Schemas.check_hyphen_run.statusPayload,
                conclusion: Components.Schemas.check_hyphen_run.conclusionPayload? = nil,
                started_at: Foundation.Date? = nil,
                completed_at: Foundation.Date? = nil,
                output: Components.Schemas.check_hyphen_run.outputPayload,
                name: Swift.String,
                check_suite: Components.Schemas.check_hyphen_run.check_suitePayload? = nil,
                app: Components.Schemas.nullable_hyphen_integration? = nil,
                pull_requests: [Components.Schemas.pull_hyphen_request_hyphen_minimal],
                deployment: Components.Schemas.deployment_hyphen_simple? = nil
            ) {
                self.id = id
                self.head_sha = head_sha
                self.node_id = node_id
                self.external_id = external_id
                self.url = url
                self.html_url = html_url
                self.details_url = details_url
                self.status = status
                self.conclusion = conclusion
                self.started_at = started_at
                self.completed_at = completed_at
                self.output = output
                self.name = name
                self.check_suite = check_suite
                self.app = app
                self.pull_requests = pull_requests
                self.deployment = deployment
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case head_sha
                case node_id
                case external_id
                case url
                case html_url
                case details_url
                case status
                case conclusion
                case started_at
                case completed_at
                case output
                case name
                case check_suite
                case app
                case pull_requests
                case deployment
            }
        }
        /// Check Annotation
        ///
        /// - Remark: Generated from `#/components/schemas/check-annotation`.
        public struct check_hyphen_annotation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/check-annotation/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/check-annotation/start_line`.
            public var start_line: Swift.Int
            /// - Remark: Generated from `#/components/schemas/check-annotation/end_line`.
            public var end_line: Swift.Int
            /// - Remark: Generated from `#/components/schemas/check-annotation/start_column`.
            public var start_column: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/check-annotation/end_column`.
            public var end_column: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/check-annotation/annotation_level`.
            public var annotation_level: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-annotation/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-annotation/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-annotation/raw_details`.
            public var raw_details: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-annotation/blob_href`.
            public var blob_href: Swift.String
            /// Creates a new `check_hyphen_annotation`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - start_line:
            ///   - end_line:
            ///   - start_column:
            ///   - end_column:
            ///   - annotation_level:
            ///   - title:
            ///   - message:
            ///   - raw_details:
            ///   - blob_href:
            public init(
                path: Swift.String,
                start_line: Swift.Int,
                end_line: Swift.Int,
                start_column: Swift.Int? = nil,
                end_column: Swift.Int? = nil,
                annotation_level: Swift.String? = nil,
                title: Swift.String? = nil,
                message: Swift.String? = nil,
                raw_details: Swift.String? = nil,
                blob_href: Swift.String
            ) {
                self.path = path
                self.start_line = start_line
                self.end_line = end_line
                self.start_column = start_column
                self.end_column = end_column
                self.annotation_level = annotation_level
                self.title = title
                self.message = message
                self.raw_details = raw_details
                self.blob_href = blob_href
            }
            public enum CodingKeys: String, CodingKey {
                case path
                case start_line
                case end_line
                case start_column
                case end_column
                case annotation_level
                case title
                case message
                case raw_details
                case blob_href
            }
        }
        /// A commit.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-commit`.
        public struct simple_hyphen_commit: Codable, Hashable, Sendable {
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/id`.
            public var id: Swift.String
            /// SHA for the commit's tree
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/tree_id`.
            public var tree_id: Swift.String
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/message`.
            public var message: Swift.String
            /// Timestamp of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/timestamp`.
            public var timestamp: Foundation.Date
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            public struct authorPayload: Codable, Hashable, Sendable {
                /// Name of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/name`.
                public var name: Swift.String
                /// Git email address of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/email`.
                public var email: Swift.String
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's author
                ///   - email: Git email address of the commit's author
                public init(
                    name: Swift.String,
                    email: Swift.String
                ) {
                    self.name = name
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            public var author: Components.Schemas.simple_hyphen_commit.authorPayload?
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            public struct committerPayload: Codable, Hashable, Sendable {
                /// Name of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/name`.
                public var name: Swift.String
                /// Git email address of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/email`.
                public var email: Swift.String
                /// Creates a new `committerPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's committer
                ///   - email: Git email address of the commit's committer
                public init(
                    name: Swift.String,
                    email: Swift.String
                ) {
                    self.name = name
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            public var committer: Components.Schemas.simple_hyphen_commit.committerPayload?
            /// Creates a new `simple_hyphen_commit`.
            ///
            /// - Parameters:
            ///   - id: SHA for the commit
            ///   - tree_id: SHA for the commit's tree
            ///   - message: Message describing the purpose of the commit
            ///   - timestamp: Timestamp of the commit
            ///   - author: Information about the Git author
            ///   - committer: Information about the Git committer
            public init(
                id: Swift.String,
                tree_id: Swift.String,
                message: Swift.String,
                timestamp: Foundation.Date,
                author: Components.Schemas.simple_hyphen_commit.authorPayload? = nil,
                committer: Components.Schemas.simple_hyphen_commit.committerPayload? = nil
            ) {
                self.id = id
                self.tree_id = tree_id
                self.message = message
                self.timestamp = timestamp
                self.author = author
                self.committer = committer
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case tree_id
                case message
                case timestamp
                case author
                case committer
            }
        }
        /// A suite of checks performed on the code of a given code change
        ///
        /// - Remark: Generated from `#/components/schemas/check-suite`.
        public struct check_hyphen_suite: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/check-suite/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/check-suite/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/check-suite/head_branch`.
            public var head_branch: Swift.String?
            /// The SHA of the head commit that is being checked.
            ///
            /// - Remark: Generated from `#/components/schemas/check-suite/head_sha`.
            public var head_sha: Swift.String
            /// The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
            ///
            /// - Remark: Generated from `#/components/schemas/check-suite/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case queued = "queued"
                case in_progress = "in_progress"
                case completed = "completed"
                case waiting = "waiting"
                case requested = "requested"
                case pending = "pending"
            }
            /// The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
            ///
            /// - Remark: Generated from `#/components/schemas/check-suite/status`.
            public var status: Components.Schemas.check_hyphen_suite.statusPayload?
            /// - Remark: Generated from `#/components/schemas/check-suite/conclusion`.
            @frozen public enum conclusionPayload: String, Codable, Hashable, Sendable {
                case success = "success"
                case failure = "failure"
                case neutral = "neutral"
                case cancelled = "cancelled"
                case skipped = "skipped"
                case timed_out = "timed_out"
                case action_required = "action_required"
                case startup_failure = "startup_failure"
                case stale = "stale"
                case _empty = ""
            }
            /// - Remark: Generated from `#/components/schemas/check-suite/conclusion`.
            public var conclusion: Components.Schemas.check_hyphen_suite.conclusionPayload?
            /// - Remark: Generated from `#/components/schemas/check-suite/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-suite/before`.
            public var before: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-suite/after`.
            public var after: Swift.String?
            /// - Remark: Generated from `#/components/schemas/check-suite/pull_requests`.
            public var pull_requests: [Components.Schemas.pull_hyphen_request_hyphen_minimal]?
            /// - Remark: Generated from `#/components/schemas/check-suite/app`.
            public var app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/check-suite/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/check-suite/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/check-suite/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/check-suite/head_commit`.
            public var head_commit: Components.Schemas.simple_hyphen_commit
            /// - Remark: Generated from `#/components/schemas/check-suite/latest_check_runs_count`.
            public var latest_check_runs_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/check-suite/check_runs_url`.
            public var check_runs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/check-suite/rerequestable`.
            public var rerequestable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/check-suite/runs_rerequestable`.
            public var runs_rerequestable: Swift.Bool?
            /// Creates a new `check_hyphen_suite`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - head_branch:
            ///   - head_sha: The SHA of the head commit that is being checked.
            ///   - status: The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
            ///   - conclusion:
            ///   - url:
            ///   - before:
            ///   - after:
            ///   - pull_requests:
            ///   - app:
            ///   - repository:
            ///   - created_at:
            ///   - updated_at:
            ///   - head_commit:
            ///   - latest_check_runs_count:
            ///   - check_runs_url:
            ///   - rerequestable:
            ///   - runs_rerequestable:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                head_branch: Swift.String? = nil,
                head_sha: Swift.String,
                status: Components.Schemas.check_hyphen_suite.statusPayload? = nil,
                conclusion: Components.Schemas.check_hyphen_suite.conclusionPayload? = nil,
                url: Swift.String? = nil,
                before: Swift.String? = nil,
                after: Swift.String? = nil,
                pull_requests: [Components.Schemas.pull_hyphen_request_hyphen_minimal]? = nil,
                app: Components.Schemas.nullable_hyphen_integration? = nil,
                repository: Components.Schemas.minimal_hyphen_repository,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                head_commit: Components.Schemas.simple_hyphen_commit,
                latest_check_runs_count: Swift.Int,
                check_runs_url: Swift.String,
                rerequestable: Swift.Bool? = nil,
                runs_rerequestable: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.head_branch = head_branch
                self.head_sha = head_sha
                self.status = status
                self.conclusion = conclusion
                self.url = url
                self.before = before
                self.after = after
                self.pull_requests = pull_requests
                self.app = app
                self.repository = repository
                self.created_at = created_at
                self.updated_at = updated_at
                self.head_commit = head_commit
                self.latest_check_runs_count = latest_check_runs_count
                self.check_runs_url = check_runs_url
                self.rerequestable = rerequestable
                self.runs_rerequestable = runs_rerequestable
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case head_branch
                case head_sha
                case status
                case conclusion
                case url
                case before
                case after
                case pull_requests
                case app
                case repository
                case created_at
                case updated_at
                case head_commit
                case latest_check_runs_count
                case check_runs_url
                case rerequestable
                case runs_rerequestable
            }
        }
        /// Check suite configuration preferences for a repository.
        ///
        /// - Remark: Generated from `#/components/schemas/check-suite-preference`.
        public struct check_hyphen_suite_hyphen_preference: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/check-suite-preference/preferences`.
            public struct preferencesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/check-suite-preference/preferences/auto_trigger_checksPayload`.
                public struct auto_trigger_checksPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/check-suite-preference/preferences/auto_trigger_checksPayload/app_id`.
                    public var app_id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/check-suite-preference/preferences/auto_trigger_checksPayload/setting`.
                    public var setting: Swift.Bool
                    /// Creates a new `auto_trigger_checksPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - app_id:
                    ///   - setting:
                    public init(
                        app_id: Swift.Int,
                        setting: Swift.Bool
                    ) {
                        self.app_id = app_id
                        self.setting = setting
                    }
                    public enum CodingKeys: String, CodingKey {
                        case app_id
                        case setting
                    }
                }
                /// - Remark: Generated from `#/components/schemas/check-suite-preference/preferences/auto_trigger_checks`.
                public typealias auto_trigger_checksPayload = [Components.Schemas.check_hyphen_suite_hyphen_preference.preferencesPayload.auto_trigger_checksPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/check-suite-preference/preferences/auto_trigger_checks`.
                public var auto_trigger_checks: Components.Schemas.check_hyphen_suite_hyphen_preference.preferencesPayload.auto_trigger_checksPayload?
                /// Creates a new `preferencesPayload`.
                ///
                /// - Parameters:
                ///   - auto_trigger_checks:
                public init(auto_trigger_checks: Components.Schemas.check_hyphen_suite_hyphen_preference.preferencesPayload.auto_trigger_checksPayload? = nil) {
                    self.auto_trigger_checks = auto_trigger_checks
                }
                public enum CodingKeys: String, CodingKey {
                    case auto_trigger_checks
                }
            }
            /// - Remark: Generated from `#/components/schemas/check-suite-preference/preferences`.
            public var preferences: Components.Schemas.check_hyphen_suite_hyphen_preference.preferencesPayload
            /// - Remark: Generated from `#/components/schemas/check-suite-preference/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// Creates a new `check_hyphen_suite_hyphen_preference`.
            ///
            /// - Parameters:
            ///   - preferences:
            ///   - repository:
            public init(
                preferences: Components.Schemas.check_hyphen_suite_hyphen_preference.preferencesPayload,
                repository: Components.Schemas.minimal_hyphen_repository
            ) {
                self.preferences = preferences
                self.repository = repository
            }
            public enum CodingKeys: String, CodingKey {
                case preferences
                case repository
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The unique identifier of the check run.
        ///
        /// - Remark: Generated from `#/components/parameters/check-run-id`.
        public typealias check_hyphen_run_hyphen_id = Swift.Int
        /// The unique identifier of the check suite.
        ///
        /// - Remark: Generated from `#/components/parameters/check-suite-id`.
        public typealias check_hyphen_suite_hyphen_id = Swift.Int
        /// Returns check runs with the specified `name`.
        ///
        /// - Remark: Generated from `#/components/parameters/check-name`.
        public typealias check_hyphen_name = Swift.String
        /// Returns check runs with the specified `status`.
        ///
        /// - Remark: Generated from `#/components/parameters/status`.
        @frozen public enum status: String, Codable, Hashable, Sendable {
            case queued = "queued"
            case in_progress = "in_progress"
            case completed = "completed"
        }
        /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-ref`.
        public typealias commit_hyphen_ref = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Create a check run
    ///
    /// Creates a new check run for a specific commit in a repository.
    ///
    /// To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.
    ///
    /// In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/post(checks/create)`.
    public enum checks_sol_create {
        public static let id: Swift.String = "checks/create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.checks_sol_create.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_create.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/json/case1/status`.
                        public var status: OpenAPIRuntime.OpenAPIValueContainer
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - status:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(
                            status: OpenAPIRuntime.OpenAPIValueContainer,
                            additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                        ) {
                            self.status = status
                            self.additionalProperties = additionalProperties
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            status = try container.decode(
                                OpenAPIRuntime.OpenAPIValueContainer.self,
                                forKey: .status
                            )
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                                "status"
                            ])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)
                            try container.encode(
                                status,
                                forKey: .status
                            )
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/json/case1`.
                    case case1(Operations.checks_sol_create.Input.Body.jsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/json/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/json/case2/status`.
                        public var status: OpenAPIRuntime.OpenAPIValueContainer?
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(
                            status: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                            additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                        ) {
                            self.status = status
                            self.additionalProperties = additionalProperties
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            status = try container.decodeIfPresent(
                                OpenAPIRuntime.OpenAPIValueContainer.self,
                                forKey: .status
                            )
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                                "status"
                            ])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)
                            try container.encodeIfPresent(
                                status,
                                forKey: .status
                            )
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/json/case2`.
                    case case2(Operations.checks_sol_create.Input.Body.jsonPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/requestBody/content/application\/json`.
                case json(Operations.checks_sol_create.Input.Body.jsonPayload)
            }
            public var body: Operations.checks_sol_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.checks_sol_create.Input.Path,
                headers: Operations.checks_sol_create.Input.Headers = .init(),
                body: Operations.checks_sol_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_run)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_run {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/post(checks/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.checks_sol_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.checks_sol_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a check run
    ///
    /// Gets a single check run using its `id`.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-runs/{check_run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/get(checks/get)`.
    public enum checks_sol_get {
        public static let id: Swift.String = "checks/get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the check run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/GET/path/check_run_id`.
                public var check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - check_run_id: The unique identifier of the check run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.check_run_id = check_run_id
                }
            }
            public var path: Operations.checks_sol_get.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.checks_sol_get.Input.Path,
                headers: Operations.checks_sol_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_run)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_run {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/get(checks/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a check run
    ///
    /// Updates a check run for a specific commit in a repository.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/patch(checks/update)`.
    public enum checks_sol_update {
        public static let id: Swift.String = "checks/update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the check run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/path/check_run_id`.
                public var check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - check_run_id: The unique identifier of the check run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.check_run_id = check_run_id
                }
            }
            public var path: Operations.checks_sol_update.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_update.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/json/value1`.
                    public struct Value1Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/json/value1/status`.
                        public var status: OpenAPIRuntime.OpenAPIValueContainer?
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `Value1Payload`.
                        ///
                        /// - Parameters:
                        ///   - status:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(
                            status: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                            additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                        ) {
                            self.status = status
                            self.additionalProperties = additionalProperties
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            status = try container.decodeIfPresent(
                                OpenAPIRuntime.OpenAPIValueContainer.self,
                                forKey: .status
                            )
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                                "status"
                            ])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)
                            try container.encodeIfPresent(
                                status,
                                forKey: .status
                            )
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/json/value1`.
                    public var value1: Operations.checks_sol_update.Input.Body.jsonPayload.Value1Payload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/json/value2/status`.
                        public var status: OpenAPIRuntime.OpenAPIValueContainer?
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(
                            status: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                            additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                        ) {
                            self.status = status
                            self.additionalProperties = additionalProperties
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            status = try container.decodeIfPresent(
                                OpenAPIRuntime.OpenAPIValueContainer.self,
                                forKey: .status
                            )
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                                "status"
                            ])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)
                            try container.encodeIfPresent(
                                status,
                                forKey: .status
                            )
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/json/value2`.
                    public var value2: Operations.checks_sol_update.Input.Body.jsonPayload.Value2Payload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Operations.checks_sol_update.Input.Body.jsonPayload.Value1Payload? = nil,
                        value2: Operations.checks_sol_update.Input.Body.jsonPayload.Value2Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.checks_sol_update.Input.Body.jsonPayload)
            }
            public var body: Operations.checks_sol_update.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.checks_sol_update.Input.Path,
                headers: Operations.checks_sol_update.Input.Headers = .init(),
                body: Operations.checks_sol_update.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_run)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_run {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/patch(checks/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List check run annotations
    ///
    /// Lists annotations for a check run using the annotation `id`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/get(checks/list-annotations)`.
    public enum checks_sol_list_hyphen_annotations {
        public static let id: Swift.String = "checks/list-annotations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the check run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/path/check_run_id`.
                public var check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - check_run_id: The unique identifier of the check run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.check_run_id = check_run_id
                }
            }
            public var path: Operations.checks_sol_list_hyphen_annotations.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.checks_sol_list_hyphen_annotations.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_annotations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_annotations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_list_hyphen_annotations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.checks_sol_list_hyphen_annotations.Input.Path,
                query: Operations.checks_sol_list_hyphen_annotations.Input.Query = .init(),
                headers: Operations.checks_sol_list_hyphen_annotations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.checks_sol_list_hyphen_annotations.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.check_hyphen_annotation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.check_hyphen_annotation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_list_hyphen_annotations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.checks_sol_list_hyphen_annotations.Output.Ok.Headers = .init(),
                    body: Operations.checks_sol_list_hyphen_annotations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/annotations/get(checks/list-annotations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_list_hyphen_annotations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_list_hyphen_annotations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Rerequest a check run
    ///
    /// Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    ///
    /// For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/post(checks/rerequest-run)`.
    public enum checks_sol_rerequest_hyphen_run {
        public static let id: Swift.String = "checks/rerequest-run"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the check run.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/path/check_run_id`.
                public var check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - check_run_id: The unique identifier of the check run.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    check_run_id: Components.Parameters.check_hyphen_run_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.check_run_id = check_run_id
                }
            }
            public var path: Operations.checks_sol_rerequest_hyphen_run.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_rerequest_hyphen_run.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_rerequest_hyphen_run.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_rerequest_hyphen_run.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.checks_sol_rerequest_hyphen_run.Input.Path,
                headers: Operations.checks_sol_rerequest_hyphen_run.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_rerequest_hyphen_run.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_rerequest_hyphen_run.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/post(checks/rerequest-run)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.checks_sol_rerequest_hyphen_run.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.checks_sol_rerequest_hyphen_run.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_rerequest_hyphen_run.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_rerequest_hyphen_run.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden if the check run is not rerequestable or doesn't belong to the authenticated GitHub App
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/post(checks/rerequest-run)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.checks_sol_rerequest_hyphen_run.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.checks_sol_rerequest_hyphen_run.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_rerequest_hyphen_run.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_rerequest_hyphen_run.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Validation error if the check run is not rerequestable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/post(checks/rerequest-run)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.checks_sol_rerequest_hyphen_run.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.checks_sol_rerequest_hyphen_run.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest/post(checks/rerequest-run)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a check suite
    ///
    /// Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/post(checks/create-suite)`.
    public enum checks_sol_create_hyphen_suite {
        public static let id: Swift.String = "checks/create-suite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.checks_sol_create_hyphen_suite.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_create_hyphen_suite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_create_hyphen_suite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_create_hyphen_suite.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The sha of the head commit.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/requestBody/json/head_sha`.
                    public var head_sha: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - head_sha: The sha of the head commit.
                    public init(head_sha: Swift.String) {
                        self.head_sha = head_sha
                    }
                    public enum CodingKeys: String, CodingKey {
                        case head_sha
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/requestBody/content/application\/json`.
                case json(Operations.checks_sol_create_hyphen_suite.Input.Body.jsonPayload)
            }
            public var body: Operations.checks_sol_create_hyphen_suite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.checks_sol_create_hyphen_suite.Input.Path,
                headers: Operations.checks_sol_create_hyphen_suite.Input.Headers = .init(),
                body: Operations.checks_sol_create_hyphen_suite.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_suite)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_suite {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_create_hyphen_suite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_create_hyphen_suite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response when the suite already exists
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/post(checks/create-suite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_create_hyphen_suite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_create_hyphen_suite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_suite)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_suite {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_create_hyphen_suite.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_create_hyphen_suite.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when the suite was created
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/post(checks/create-suite)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.checks_sol_create_hyphen_suite.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.checks_sol_create_hyphen_suite.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update repository preferences for check suites
    ///
    /// Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
    /// You must have admin permissions in the repository to set preferences for check suites.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/check-suites/preferences`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/preferences/patch(checks/set-suites-preferences)`.
    public enum checks_sol_set_hyphen_suites_hyphen_preferences {
        public static let id: Swift.String = "checks/set-suites-preferences"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_set_hyphen_suites_hyphen_preferences.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_set_hyphen_suites_hyphen_preferences.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody/json/auto_trigger_checksPayload`.
                    public struct auto_trigger_checksPayloadPayload: Codable, Hashable, Sendable {
                        /// The `id` of the GitHub App.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody/json/auto_trigger_checksPayload/app_id`.
                        public var app_id: Swift.Int
                        /// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody/json/auto_trigger_checksPayload/setting`.
                        public var setting: Swift.Bool
                        /// Creates a new `auto_trigger_checksPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - app_id: The `id` of the GitHub App.
                        ///   - setting: Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
                        public init(
                            app_id: Swift.Int,
                            setting: Swift.Bool
                        ) {
                            self.app_id = app_id
                            self.setting = setting
                        }
                        public enum CodingKeys: String, CodingKey {
                            case app_id
                            case setting
                        }
                    }
                    /// Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody/json/auto_trigger_checks`.
                    public typealias auto_trigger_checksPayload = [Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Body.jsonPayload.auto_trigger_checksPayloadPayload]
                    /// Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody/json/auto_trigger_checks`.
                    public var auto_trigger_checks: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Body.jsonPayload.auto_trigger_checksPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - auto_trigger_checks: Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
                    public init(auto_trigger_checks: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Body.jsonPayload.auto_trigger_checksPayload? = nil) {
                        self.auto_trigger_checks = auto_trigger_checks
                    }
                    public enum CodingKeys: String, CodingKey {
                        case auto_trigger_checks
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/requestBody/content/application\/json`.
                case json(Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Body.jsonPayload)
            }
            public var body: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Path,
                headers: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Headers = .init(),
                body: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/preferences/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_suite_hyphen_preference)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_suite_hyphen_preference {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/preferences/patch(checks/set-suites-preferences)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_set_hyphen_suites_hyphen_preferences.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a check suite
    ///
    /// Gets a single check suite using its `id`.
    ///
    /// > [!NOTE]
    /// > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-suites/{check_suite_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/get(checks/get-suite)`.
    public enum checks_sol_get_hyphen_suite {
        public static let id: Swift.String = "checks/get-suite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the check suite.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/GET/path/check_suite_id`.
                public var check_suite_id: Components.Parameters.check_hyphen_suite_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - check_suite_id: The unique identifier of the check suite.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    check_suite_id: Components.Parameters.check_hyphen_suite_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.check_suite_id = check_suite_id
                }
            }
            public var path: Operations.checks_sol_get_hyphen_suite.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_get_hyphen_suite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_get_hyphen_suite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_get_hyphen_suite.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.checks_sol_get_hyphen_suite.Input.Path,
                headers: Operations.checks_sol_get_hyphen_suite.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_suite)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_suite {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_get_hyphen_suite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_get_hyphen_suite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/get(checks/get-suite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_get_hyphen_suite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_get_hyphen_suite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List check runs in a check suite
    ///
    /// Lists check runs for a check suite using its `id`.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/get(checks/list-for-suite)`.
    public enum checks_sol_list_hyphen_for_hyphen_suite {
        public static let id: Swift.String = "checks/list-for-suite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the check suite.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/path/check_suite_id`.
                public var check_suite_id: Components.Parameters.check_hyphen_suite_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - check_suite_id: The unique identifier of the check suite.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    check_suite_id: Components.Parameters.check_hyphen_suite_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.check_suite_id = check_suite_id
                }
            }
            public var path: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Returns check runs with the specified `name`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/query/check_name`.
                public var check_name: Components.Parameters.check_hyphen_name?
                /// - Remark: Generated from `#/components/parameters/status`.
                @frozen public enum status: String, Codable, Hashable, Sendable {
                    case queued = "queued"
                    case in_progress = "in_progress"
                    case completed = "completed"
                }
                /// Returns check runs with the specified `status`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/query/status`.
                public var status: Components.Parameters.status?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case latest = "latest"
                    case all = "all"
                }
                /// Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/query/filter`.
                public var filter: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Query.filterPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - check_name: Returns check runs with the specified `name`.
                ///   - status: Returns check runs with the specified `status`.
                ///   - filter: Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    check_name: Components.Parameters.check_hyphen_name? = nil,
                    status: Components.Parameters.status? = nil,
                    filter: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Query.filterPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.check_name = check_name
                    self.status = status
                    self.filter = filter
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_for_hyphen_suite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_for_hyphen_suite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Path,
                query: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Query = .init(),
                headers: Operations.checks_sol_list_hyphen_for_hyphen_suite.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/responses/200/content/json/check_runs`.
                        public var check_runs: [Components.Schemas.check_hyphen_run]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - check_runs:
                        public init(
                            total_count: Swift.Int,
                            check_runs: [Components.Schemas.check_hyphen_run]
                        ) {
                            self.total_count = total_count
                            self.check_runs = check_runs
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case check_runs
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/GET/responses/200/content/application\/json`.
                    case json(Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok.Headers = .init(),
                    body: Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs/get(checks/list-for-suite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_list_hyphen_for_hyphen_suite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Rerequest a check suite
    ///
    /// Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    ///
    /// OAuth apps and personal access tokens (classic) cannot use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/post(checks/rerequest-suite)`.
    public enum checks_sol_rerequest_hyphen_suite {
        public static let id: Swift.String = "checks/rerequest-suite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the check suite.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/POST/path/check_suite_id`.
                public var check_suite_id: Components.Parameters.check_hyphen_suite_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - check_suite_id: The unique identifier of the check suite.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    check_suite_id: Components.Parameters.check_hyphen_suite_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.check_suite_id = check_suite_id
                }
            }
            public var path: Operations.checks_sol_rerequest_hyphen_suite.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_rerequest_hyphen_suite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_rerequest_hyphen_suite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_rerequest_hyphen_suite.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.checks_sol_rerequest_hyphen_suite.Input.Path,
                headers: Operations.checks_sol_rerequest_hyphen_suite.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_rerequest_hyphen_suite.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checks_sol_rerequest_hyphen_suite.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest/post(checks/rerequest-suite)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.checks_sol_rerequest_hyphen_suite.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.checks_sol_rerequest_hyphen_suite.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List check runs for a Git reference
    ///
    /// Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    ///
    /// If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/check-runs`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-runs/get(checks/list-for-ref)`.
    public enum checks_sol_list_hyphen_for_hyphen_ref {
        public static let id: Swift.String = "checks/list-for-ref"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/path/ref`.
                public var ref: Components.Parameters.commit_hyphen_ref
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ref: The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ref: Components.Parameters.commit_hyphen_ref
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ref = ref
                }
            }
            public var path: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Returns check runs with the specified `name`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query/check_name`.
                public var check_name: Components.Parameters.check_hyphen_name?
                /// - Remark: Generated from `#/components/parameters/status`.
                @frozen public enum status: String, Codable, Hashable, Sendable {
                    case queued = "queued"
                    case in_progress = "in_progress"
                    case completed = "completed"
                }
                /// Returns check runs with the specified `status`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query/status`.
                public var status: Components.Parameters.status?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case latest = "latest"
                    case all = "all"
                }
                /// Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query/filter`.
                public var filter: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Query.filterPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/query/app_id`.
                public var app_id: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - check_name: Returns check runs with the specified `name`.
                ///   - status: Returns check runs with the specified `status`.
                ///   - filter: Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - app_id:
                public init(
                    check_name: Components.Parameters.check_hyphen_name? = nil,
                    status: Components.Parameters.status? = nil,
                    filter: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Query.filterPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    app_id: Swift.Int? = nil
                ) {
                    self.check_name = check_name
                    self.status = status
                    self.filter = filter
                    self.per_page = per_page
                    self.page = page
                    self.app_id = app_id
                }
            }
            public var query: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_for_hyphen_ref.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_for_hyphen_ref.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Path,
                query: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Query = .init(),
                headers: Operations.checks_sol_list_hyphen_for_hyphen_ref.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/responses/200/content/json/check_runs`.
                        public var check_runs: [Components.Schemas.check_hyphen_run]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - check_runs:
                        public init(
                            total_count: Swift.Int,
                            check_runs: [Components.Schemas.check_hyphen_run]
                        ) {
                            self.total_count = total_count
                            self.check_runs = check_runs
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case check_runs
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-runs/GET/responses/200/content/application\/json`.
                    case json(Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok.Headers = .init(),
                    body: Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-runs/get(checks/list-for-ref)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_list_hyphen_for_hyphen_ref.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List check suites for a Git reference
    ///
    /// Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.
    ///
    /// > [!NOTE]
    /// > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/check-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-suites/get(checks/list-suites-for-ref)`.
    public enum checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref {
        public static let id: Swift.String = "checks/list-suites-for-ref"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/path/ref`.
                public var ref: Components.Parameters.commit_hyphen_ref
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ref: The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ref: Components.Parameters.commit_hyphen_ref
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ref = ref
                }
            }
            public var path: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filters check suites by GitHub App `id`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/query/app_id`.
                public var app_id: Swift.Int?
                /// Returns check runs with the specified `name`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/query/check_name`.
                public var check_name: Components.Parameters.check_hyphen_name?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - app_id: Filters check suites by GitHub App `id`.
                ///   - check_name: Returns check runs with the specified `name`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    app_id: Swift.Int? = nil,
                    check_name: Components.Parameters.check_hyphen_name? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.app_id = app_id
                    self.check_name = check_name
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Path,
                query: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Query = .init(),
                headers: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/responses/200/content/json/check_suites`.
                        public var check_suites: [Components.Schemas.check_hyphen_suite]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - check_suites:
                        public init(
                            total_count: Swift.Int,
                            check_suites: [Components.Schemas.check_hyphen_suite]
                        ) {
                            self.total_count = total_count
                            self.check_suites = check_suites
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case check_suites
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/check-suites/GET/responses/200/content/application\/json`.
                    case json(Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok.Headers = .init(),
                    body: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/check-suites/get(checks/list-suites-for-ref)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checks_sol_list_hyphen_suites_hyphen_for_hyphen_ref.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
