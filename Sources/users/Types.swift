// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
    ///
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get(users/get-authenticated)`.
    func users_sol_get_hyphen_authenticated(_ input: Operations.users_sol_get_hyphen_authenticated.Input) async throws -> Operations.users_sol_get_hyphen_authenticated.Output
    /// Update the authenticated user
    ///
    /// **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
    ///
    /// - Remark: HTTP `PATCH /user`.
    /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)`.
    func users_sol_update_hyphen_authenticated(_ input: Operations.users_sol_update_hyphen_authenticated.Input) async throws -> Operations.users_sol_update_hyphen_authenticated.Output
    /// List users blocked by the authenticated user
    ///
    /// List the users you've blocked on your personal account.
    ///
    /// - Remark: HTTP `GET /user/blocks`.
    /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)`.
    func users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Output
    /// Check if a user is blocked by the authenticated user
    ///
    /// Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
    ///
    /// - Remark: HTTP `GET /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)`.
    func users_sol_check_hyphen_blocked(_ input: Operations.users_sol_check_hyphen_blocked.Input) async throws -> Operations.users_sol_check_hyphen_blocked.Output
    /// Block a user
    ///
    /// Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
    ///
    /// - Remark: HTTP `PUT /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)`.
    func users_sol_block(_ input: Operations.users_sol_block.Input) async throws -> Operations.users_sol_block.Output
    /// Unblock a user
    ///
    /// Unblocks the given user and returns a 204.
    ///
    /// - Remark: HTTP `DELETE /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)`.
    func users_sol_unblock(_ input: Operations.users_sol_unblock.Input) async throws -> Operations.users_sol_unblock.Output
    /// Set primary email visibility for the authenticated user
    ///
    /// Sets the visibility for your primary email addresses.
    ///
    /// - Remark: HTTP `PATCH /user/email/visibility`.
    /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)`.
    func users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List email addresses for the authenticated user
    ///
    /// Lists all of your email addresses, and specifies which one is visible
    /// to the public.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)`.
    func users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Add an email address for the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)`.
    func users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete an email address for the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)`.
    func users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List followers of the authenticated user
    ///
    /// Lists the people following the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/followers`.
    /// - Remark: Generated from `#/paths//user/followers/get(users/list-followers-for-authenticated-user)`.
    func users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List the people the authenticated user follows
    ///
    /// Lists the people who the authenticated user follows.
    ///
    /// - Remark: HTTP `GET /user/following`.
    /// - Remark: Generated from `#/paths//user/following/get(users/list-followed-by-authenticated-user)`.
    func users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output
    /// Check if a person is followed by the authenticated user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)`.
    func users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated(_ input: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input) async throws -> Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output
    /// Follow a user
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)`.
    func users_sol_follow(_ input: Operations.users_sol_follow.Input) async throws -> Operations.users_sol_follow.Output
    /// Unfollow a user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)`.
    func users_sol_unfollow(_ input: Operations.users_sol_unfollow.Input) async throws -> Operations.users_sol_unfollow.Output
    /// List GPG keys for the authenticated user
    ///
    /// Lists the current user's GPG keys.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/gpg_keys`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)`.
    func users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create a GPG key for the authenticated user
    ///
    /// Adds a GPG key to the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/gpg_keys`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)`.
    func users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get a GPG key for the authenticated user
    ///
    /// View extended details for a single GPG key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/gpg_keys/{gpg_key_id}`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)`.
    func users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete a GPG key for the authenticated user
    ///
    /// Removes a GPG key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/gpg_keys/{gpg_key_id}`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)`.
    func users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List public SSH keys for the authenticated user
    ///
    /// Lists the public SSH keys for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/keys`.
    /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)`.
    func users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create a public SSH key for the authenticated user
    ///
    /// Adds a public SSH key to the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/keys`.
    /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)`.
    func users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get a public SSH key for the authenticated user
    ///
    /// View extended details for a single public SSH key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)`.
    func users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete a public SSH key for the authenticated user
    ///
    /// Removes a public SSH key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)`.
    func users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List public email addresses for the authenticated user
    ///
    /// Lists your publicly visible email address, which you can set with the
    /// [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
    /// endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/public_emails`.
    /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)`.
    func users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List social accounts for the authenticated user
    ///
    /// Lists all of your social accounts.
    ///
    /// - Remark: HTTP `GET /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)`.
    func users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Add social accounts for the authenticated user
    ///
    /// Add one or more social accounts to the authenticated user's profile.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)`.
    func users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete social accounts for the authenticated user
    ///
    /// Deletes one or more social accounts from the authenticated user's profile.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)`.
    func users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List SSH signing keys for the authenticated user
    ///
    /// Lists the SSH signing keys for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)`.
    func users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create a SSH signing key for the authenticated user
    ///
    /// Creates an SSH signing key for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)`.
    func users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get an SSH signing key for the authenticated user
    ///
    /// Gets extended details for an SSH signing key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/ssh_signing_keys/{ssh_signing_key_id}`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)`.
    func users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete an SSH signing key for the authenticated user
    ///
    /// Deletes an SSH signing key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/ssh_signing_keys/{ssh_signing_key_id}`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)`.
    func users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List users
    ///
    /// Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
    ///
    /// Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
    ///
    /// - Remark: HTTP `GET /users`.
    /// - Remark: Generated from `#/paths//users/get(users/list)`.
    func users_sol_list(_ input: Operations.users_sol_list.Input) async throws -> Operations.users_sol_list.Output
    /// Get a user
    ///
    /// Provides publicly available information about someone with a GitHub account.
    ///
    /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
    ///
    /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".
    ///
    /// - Remark: HTTP `GET /users/{username}`.
    /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)`.
    func users_sol_get_hyphen_by_hyphen_username(_ input: Operations.users_sol_get_hyphen_by_hyphen_username.Input) async throws -> Operations.users_sol_get_hyphen_by_hyphen_username.Output
    /// List attestations
    ///
    /// List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.
    ///
    /// The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
    ///
    /// **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `GET /users/{username}/attestations/{subject_digest}`.
    /// - Remark: Generated from `#/paths//users/{username}/attestations/{subject_digest}/get(users/list-attestations)`.
    func users_sol_list_hyphen_attestations(_ input: Operations.users_sol_list_hyphen_attestations.Input) async throws -> Operations.users_sol_list_hyphen_attestations.Output
    /// List followers of a user
    ///
    /// Lists the people following the specified user.
    ///
    /// - Remark: HTTP `GET /users/{username}/followers`.
    /// - Remark: Generated from `#/paths//users/{username}/followers/get(users/list-followers-for-user)`.
    func users_sol_list_hyphen_followers_hyphen_for_hyphen_user(_ input: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output
    /// List the people a user follows
    ///
    /// Lists the people who the specified user follows.
    ///
    /// - Remark: HTTP `GET /users/{username}/following`.
    /// - Remark: Generated from `#/paths//users/{username}/following/get(users/list-following-for-user)`.
    func users_sol_list_hyphen_following_hyphen_for_hyphen_user(_ input: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output
    /// Check if a user follows another user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/following/{target_user}`.
    /// - Remark: Generated from `#/paths//users/{username}/following/{target_user}/get(users/check-following-for-user)`.
    func users_sol_check_hyphen_following_hyphen_for_hyphen_user(_ input: Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Output
    /// List GPG keys for a user
    ///
    /// Lists the GPG keys for a user. This information is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/gpg_keys`.
    /// - Remark: Generated from `#/paths//users/{username}/gpg_keys/get(users/list-gpg-keys-for-user)`.
    func users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user(_ input: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output
    /// Get contextual information for a user
    ///
    /// Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
    ///
    ///   The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/hovercard`.
    /// - Remark: Generated from `#/paths//users/{username}/hovercard/get(users/get-context-for-user)`.
    func users_sol_get_hyphen_context_hyphen_for_hyphen_user(_ input: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Output
    /// List public keys for a user
    ///
    /// Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/keys`.
    /// - Remark: Generated from `#/paths//users/{username}/keys/get(users/list-public-keys-for-user)`.
    func users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user(_ input: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output
    /// List social accounts for a user
    ///
    /// Lists social media accounts for a user. This endpoint is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/social_accounts`.
    /// - Remark: Generated from `#/paths//users/{username}/social_accounts/get(users/list-social-accounts-for-user)`.
    func users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user(_ input: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output
    /// List SSH signing keys for a user
    ///
    /// Lists the SSH signing keys for a user. This operation is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//users/{username}/ssh_signing_keys/get(users/list-ssh-signing-keys-for-user)`.
    func users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user(_ input: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input) async throws -> Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
    ///
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get(users/get-authenticated)`.
    public func users_sol_get_hyphen_authenticated(headers: Operations.users_sol_get_hyphen_authenticated.Input.Headers = .init()) async throws -> Operations.users_sol_get_hyphen_authenticated.Output {
        try await users_sol_get_hyphen_authenticated(Operations.users_sol_get_hyphen_authenticated.Input(headers: headers))
    }
    /// Update the authenticated user
    ///
    /// **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
    ///
    /// - Remark: HTTP `PATCH /user`.
    /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)`.
    public func users_sol_update_hyphen_authenticated(
        headers: Operations.users_sol_update_hyphen_authenticated.Input.Headers = .init(),
        body: Operations.users_sol_update_hyphen_authenticated.Input.Body? = nil
    ) async throws -> Operations.users_sol_update_hyphen_authenticated.Output {
        try await users_sol_update_hyphen_authenticated(Operations.users_sol_update_hyphen_authenticated.Input(
            headers: headers,
            body: body
        ))
    }
    /// List users blocked by the authenticated user
    ///
    /// List the users you've blocked on your personal account.
    ///
    /// - Remark: HTTP `GET /user/blocks`.
    /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)`.
    public func users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Check if a user is blocked by the authenticated user
    ///
    /// Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
    ///
    /// - Remark: HTTP `GET /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)`.
    public func users_sol_check_hyphen_blocked(
        path: Operations.users_sol_check_hyphen_blocked.Input.Path,
        headers: Operations.users_sol_check_hyphen_blocked.Input.Headers = .init()
    ) async throws -> Operations.users_sol_check_hyphen_blocked.Output {
        try await users_sol_check_hyphen_blocked(Operations.users_sol_check_hyphen_blocked.Input(
            path: path,
            headers: headers
        ))
    }
    /// Block a user
    ///
    /// Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
    ///
    /// - Remark: HTTP `PUT /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)`.
    public func users_sol_block(
        path: Operations.users_sol_block.Input.Path,
        headers: Operations.users_sol_block.Input.Headers = .init()
    ) async throws -> Operations.users_sol_block.Output {
        try await users_sol_block(Operations.users_sol_block.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unblock a user
    ///
    /// Unblocks the given user and returns a 204.
    ///
    /// - Remark: HTTP `DELETE /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)`.
    public func users_sol_unblock(
        path: Operations.users_sol_unblock.Input.Path,
        headers: Operations.users_sol_unblock.Input.Headers = .init()
    ) async throws -> Operations.users_sol_unblock.Output {
        try await users_sol_unblock(Operations.users_sol_unblock.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set primary email visibility for the authenticated user
    ///
    /// Sets the visibility for your primary email addresses.
    ///
    /// - Remark: HTTP `PATCH /user/email/visibility`.
    /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)`.
    public func users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// List email addresses for the authenticated user
    ///
    /// Lists all of your email addresses, and specifies which one is visible
    /// to the public.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)`.
    public func users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Add an email address for the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)`.
    public func users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body? = nil
    ) async throws -> Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete an email address for the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)`.
    public func users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body? = nil
    ) async throws -> Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// List followers of the authenticated user
    ///
    /// Lists the people following the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/followers`.
    /// - Remark: Generated from `#/paths//user/followers/get(users/list-followers-for-authenticated-user)`.
    public func users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// List the people the authenticated user follows
    ///
    /// Lists the people who the authenticated user follows.
    ///
    /// - Remark: HTTP `GET /user/following`.
    /// - Remark: Generated from `#/paths//user/following/get(users/list-followed-by-authenticated-user)`.
    public func users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Check if a person is followed by the authenticated user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)`.
    public func users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated(
        path: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input.Path,
        headers: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input.Headers = .init()
    ) async throws -> Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output {
        try await users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated(Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input(
            path: path,
            headers: headers
        ))
    }
    /// Follow a user
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)`.
    public func users_sol_follow(
        path: Operations.users_sol_follow.Input.Path,
        headers: Operations.users_sol_follow.Input.Headers = .init()
    ) async throws -> Operations.users_sol_follow.Output {
        try await users_sol_follow(Operations.users_sol_follow.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unfollow a user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)`.
    public func users_sol_unfollow(
        path: Operations.users_sol_unfollow.Input.Path,
        headers: Operations.users_sol_unfollow.Input.Headers = .init()
    ) async throws -> Operations.users_sol_unfollow.Output {
        try await users_sol_unfollow(Operations.users_sol_unfollow.Input(
            path: path,
            headers: headers
        ))
    }
    /// List GPG keys for the authenticated user
    ///
    /// Lists the current user's GPG keys.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/gpg_keys`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)`.
    public func users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a GPG key for the authenticated user
    ///
    /// Adds a GPG key to the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/gpg_keys`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)`.
    public func users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a GPG key for the authenticated user
    ///
    /// View extended details for a single GPG key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/gpg_keys/{gpg_key_id}`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)`.
    public func users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a GPG key for the authenticated user
    ///
    /// Removes a GPG key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/gpg_keys/{gpg_key_id}`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)`.
    public func users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List public SSH keys for the authenticated user
    ///
    /// Lists the public SSH keys for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/keys`.
    /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)`.
    public func users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a public SSH key for the authenticated user
    ///
    /// Adds a public SSH key to the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/keys`.
    /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)`.
    public func users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a public SSH key for the authenticated user
    ///
    /// View extended details for a single public SSH key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)`.
    public func users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a public SSH key for the authenticated user
    ///
    /// Removes a public SSH key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)`.
    public func users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List public email addresses for the authenticated user
    ///
    /// Lists your publicly visible email address, which you can set with the
    /// [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
    /// endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/public_emails`.
    /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)`.
    public func users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// List social accounts for the authenticated user
    ///
    /// Lists all of your social accounts.
    ///
    /// - Remark: HTTP `GET /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)`.
    public func users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Add social accounts for the authenticated user
    ///
    /// Add one or more social accounts to the authenticated user's profile.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)`.
    public func users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete social accounts for the authenticated user
    ///
    /// Deletes one or more social accounts from the authenticated user's profile.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)`.
    public func users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// List SSH signing keys for the authenticated user
    ///
    /// Lists the SSH signing keys for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)`.
    public func users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a SSH signing key for the authenticated user
    ///
    /// Creates an SSH signing key for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)`.
    public func users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get an SSH signing key for the authenticated user
    ///
    /// Gets extended details for an SSH signing key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/ssh_signing_keys/{ssh_signing_key_id}`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)`.
    public func users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an SSH signing key for the authenticated user
    ///
    /// Deletes an SSH signing key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/ssh_signing_keys/{ssh_signing_key_id}`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)`.
    public func users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List users
    ///
    /// Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
    ///
    /// Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
    ///
    /// - Remark: HTTP `GET /users`.
    /// - Remark: Generated from `#/paths//users/get(users/list)`.
    public func users_sol_list(
        query: Operations.users_sol_list.Input.Query = .init(),
        headers: Operations.users_sol_list.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list.Output {
        try await users_sol_list(Operations.users_sol_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get a user
    ///
    /// Provides publicly available information about someone with a GitHub account.
    ///
    /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
    ///
    /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".
    ///
    /// - Remark: HTTP `GET /users/{username}`.
    /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)`.
    public func users_sol_get_hyphen_by_hyphen_username(
        path: Operations.users_sol_get_hyphen_by_hyphen_username.Input.Path,
        headers: Operations.users_sol_get_hyphen_by_hyphen_username.Input.Headers = .init()
    ) async throws -> Operations.users_sol_get_hyphen_by_hyphen_username.Output {
        try await users_sol_get_hyphen_by_hyphen_username(Operations.users_sol_get_hyphen_by_hyphen_username.Input(
            path: path,
            headers: headers
        ))
    }
    /// List attestations
    ///
    /// List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.
    ///
    /// The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
    ///
    /// **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `GET /users/{username}/attestations/{subject_digest}`.
    /// - Remark: Generated from `#/paths//users/{username}/attestations/{subject_digest}/get(users/list-attestations)`.
    public func users_sol_list_hyphen_attestations(
        path: Operations.users_sol_list_hyphen_attestations.Input.Path,
        query: Operations.users_sol_list_hyphen_attestations.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_attestations.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_attestations.Output {
        try await users_sol_list_hyphen_attestations(Operations.users_sol_list_hyphen_attestations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List followers of a user
    ///
    /// Lists the people following the specified user.
    ///
    /// - Remark: HTTP `GET /users/{username}/followers`.
    /// - Remark: Generated from `#/paths//users/{username}/followers/get(users/list-followers-for-user)`.
    public func users_sol_list_hyphen_followers_hyphen_for_hyphen_user(
        path: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Path,
        query: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output {
        try await users_sol_list_hyphen_followers_hyphen_for_hyphen_user(Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List the people a user follows
    ///
    /// Lists the people who the specified user follows.
    ///
    /// - Remark: HTTP `GET /users/{username}/following`.
    /// - Remark: Generated from `#/paths//users/{username}/following/get(users/list-following-for-user)`.
    public func users_sol_list_hyphen_following_hyphen_for_hyphen_user(
        path: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Path,
        query: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output {
        try await users_sol_list_hyphen_following_hyphen_for_hyphen_user(Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check if a user follows another user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/following/{target_user}`.
    /// - Remark: Generated from `#/paths//users/{username}/following/{target_user}/get(users/check-following-for-user)`.
    public func users_sol_check_hyphen_following_hyphen_for_hyphen_user(path: Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Input.Path) async throws -> Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Output {
        try await users_sol_check_hyphen_following_hyphen_for_hyphen_user(Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Input(path: path))
    }
    /// List GPG keys for a user
    ///
    /// Lists the GPG keys for a user. This information is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/gpg_keys`.
    /// - Remark: Generated from `#/paths//users/{username}/gpg_keys/get(users/list-gpg-keys-for-user)`.
    public func users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user(
        path: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Path,
        query: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output {
        try await users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user(Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get contextual information for a user
    ///
    /// Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
    ///
    ///   The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/hovercard`.
    /// - Remark: Generated from `#/paths//users/{username}/hovercard/get(users/get-context-for-user)`.
    public func users_sol_get_hyphen_context_hyphen_for_hyphen_user(
        path: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Path,
        query: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Output {
        try await users_sol_get_hyphen_context_hyphen_for_hyphen_user(Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List public keys for a user
    ///
    /// Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/keys`.
    /// - Remark: Generated from `#/paths//users/{username}/keys/get(users/list-public-keys-for-user)`.
    public func users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user(
        path: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Path,
        query: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output {
        try await users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user(Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List social accounts for a user
    ///
    /// Lists social media accounts for a user. This endpoint is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/social_accounts`.
    /// - Remark: Generated from `#/paths//users/{username}/social_accounts/get(users/list-social-accounts-for-user)`.
    public func users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user(
        path: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Path,
        query: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output {
        try await users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user(Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List SSH signing keys for a user
    ///
    /// Lists the SSH signing keys for a user. This operation is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//users/{username}/ssh_signing_keys/get(users/list-ssh-signing-keys-for-user)`.
    public func users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user(
        path: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Path,
        query: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output {
        try await users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user(Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Public User
        ///
        /// - Remark: Generated from `#/components/schemas/public-user`.
        public struct public_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/public-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/public-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/company`.
            public var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/location`.
            public var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/notification_email`.
            public var notification_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/hireable`.
            public var hireable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/public-user/bio`.
            public var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/twitter_username`.
            public var twitter_username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/public_repos`.
            public var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/public_gists`.
            public var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/followers`.
            public var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/following`.
            public var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/public-user/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/public-user/plan`.
            public struct planPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/public-user/plan/collaborators`.
                public var collaborators: Swift.Int
                /// - Remark: Generated from `#/components/schemas/public-user/plan/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/public-user/plan/space`.
                public var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/public-user/plan/private_repos`.
                public var private_repos: Swift.Int
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - collaborators:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                public init(
                    collaborators: Swift.Int,
                    name: Swift.String,
                    space: Swift.Int,
                    private_repos: Swift.Int
                ) {
                    self.collaborators = collaborators
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                }
                public enum CodingKeys: String, CodingKey {
                    case collaborators
                    case name
                    case space
                    case private_repos
                }
            }
            /// - Remark: Generated from `#/components/schemas/public-user/plan`.
            public var plan: Components.Schemas.public_hyphen_user.planPayload?
            /// - Remark: Generated from `#/components/schemas/public-user/suspended_at`.
            public var suspended_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/public-user/private_gists`.
            public var private_gists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/total_private_repos`.
            public var total_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/owned_private_repos`.
            public var owned_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/disk_usage`.
            public var disk_usage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/collaborators`.
            public var collaborators: Swift.Int?
            /// Creates a new `public_hyphen_user`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - notification_email:
            ///   - hireable:
            ///   - bio:
            ///   - twitter_username:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - created_at:
            ///   - updated_at:
            ///   - plan:
            ///   - suspended_at:
            ///   - private_gists:
            ///   - total_private_repos:
            ///   - owned_private_repos:
            ///   - disk_usage:
            ///   - collaborators:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                notification_email: Swift.String? = nil,
                hireable: Swift.Bool? = nil,
                bio: Swift.String? = nil,
                twitter_username: Swift.String? = nil,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                plan: Components.Schemas.public_hyphen_user.planPayload? = nil,
                suspended_at: Foundation.Date? = nil,
                private_gists: Swift.Int? = nil,
                total_private_repos: Swift.Int? = nil,
                owned_private_repos: Swift.Int? = nil,
                disk_usage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.notification_email = notification_email
                self.hireable = hireable
                self.bio = bio
                self.twitter_username = twitter_username
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.created_at = created_at
                self.updated_at = updated_at
                self.plan = plan
                self.suspended_at = suspended_at
                self.private_gists = private_gists
                self.total_private_repos = total_private_repos
                self.owned_private_repos = owned_private_repos
                self.disk_usage = disk_usage
                self.collaborators = collaborators
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case name
                case company
                case blog
                case location
                case email
                case notification_email
                case hireable
                case bio
                case twitter_username
                case public_repos
                case public_gists
                case followers
                case following
                case created_at
                case updated_at
                case plan
                case suspended_at
                case private_gists
                case total_private_repos
                case owned_private_repos
                case disk_usage
                case collaborators
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                login = try container.decode(
                    Swift.String.self,
                    forKey: .login
                )
                id = try container.decode(
                    Swift.Int.self,
                    forKey: .id
                )
                node_id = try container.decode(
                    Swift.String.self,
                    forKey: .node_id
                )
                avatar_url = try container.decode(
                    Swift.String.self,
                    forKey: .avatar_url
                )
                gravatar_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .gravatar_id
                )
                url = try container.decode(
                    Swift.String.self,
                    forKey: .url
                )
                html_url = try container.decode(
                    Swift.String.self,
                    forKey: .html_url
                )
                followers_url = try container.decode(
                    Swift.String.self,
                    forKey: .followers_url
                )
                following_url = try container.decode(
                    Swift.String.self,
                    forKey: .following_url
                )
                gists_url = try container.decode(
                    Swift.String.self,
                    forKey: .gists_url
                )
                starred_url = try container.decode(
                    Swift.String.self,
                    forKey: .starred_url
                )
                subscriptions_url = try container.decode(
                    Swift.String.self,
                    forKey: .subscriptions_url
                )
                organizations_url = try container.decode(
                    Swift.String.self,
                    forKey: .organizations_url
                )
                repos_url = try container.decode(
                    Swift.String.self,
                    forKey: .repos_url
                )
                events_url = try container.decode(
                    Swift.String.self,
                    forKey: .events_url
                )
                received_events_url = try container.decode(
                    Swift.String.self,
                    forKey: .received_events_url
                )
                _type = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                site_admin = try container.decode(
                    Swift.Bool.self,
                    forKey: .site_admin
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                company = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .company
                )
                blog = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .blog
                )
                location = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .location
                )
                email = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .email
                )
                notification_email = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .notification_email
                )
                hireable = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .hireable
                )
                bio = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .bio
                )
                twitter_username = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .twitter_username
                )
                public_repos = try container.decode(
                    Swift.Int.self,
                    forKey: .public_repos
                )
                public_gists = try container.decode(
                    Swift.Int.self,
                    forKey: .public_gists
                )
                followers = try container.decode(
                    Swift.Int.self,
                    forKey: .followers
                )
                following = try container.decode(
                    Swift.Int.self,
                    forKey: .following
                )
                created_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .created_at
                )
                updated_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                plan = try container.decodeIfPresent(
                    Components.Schemas.public_hyphen_user.planPayload.self,
                    forKey: .plan
                )
                suspended_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .suspended_at
                )
                private_gists = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .private_gists
                )
                total_private_repos = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_private_repos
                )
                owned_private_repos = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .owned_private_repos
                )
                disk_usage = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .disk_usage
                )
                collaborators = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .collaborators
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "login",
                    "id",
                    "node_id",
                    "avatar_url",
                    "gravatar_id",
                    "url",
                    "html_url",
                    "followers_url",
                    "following_url",
                    "gists_url",
                    "starred_url",
                    "subscriptions_url",
                    "organizations_url",
                    "repos_url",
                    "events_url",
                    "received_events_url",
                    "type",
                    "site_admin",
                    "name",
                    "company",
                    "blog",
                    "location",
                    "email",
                    "notification_email",
                    "hireable",
                    "bio",
                    "twitter_username",
                    "public_repos",
                    "public_gists",
                    "followers",
                    "following",
                    "created_at",
                    "updated_at",
                    "plan",
                    "suspended_at",
                    "private_gists",
                    "total_private_repos",
                    "owned_private_repos",
                    "disk_usage",
                    "collaborators"
                ])
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        public struct empty_hyphen_object: Codable, Hashable, Sendable {
            /// Creates a new `empty_hyphen_object`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// Private User
        ///
        /// - Remark: Generated from `#/components/schemas/private-user`.
        public struct private_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/private-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/private-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/company`.
            public var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/location`.
            public var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/notification_email`.
            public var notification_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/hireable`.
            public var hireable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/private-user/bio`.
            public var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/twitter_username`.
            public var twitter_username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/public_repos`.
            public var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/public_gists`.
            public var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/followers`.
            public var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/following`.
            public var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/private-user/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/private-user/private_gists`.
            public var private_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/total_private_repos`.
            public var total_private_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/owned_private_repos`.
            public var owned_private_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/disk_usage`.
            public var disk_usage: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/collaborators`.
            public var collaborators: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/two_factor_authentication`.
            public var two_factor_authentication: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/private-user/plan`.
            public struct planPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/private-user/plan/collaborators`.
                public var collaborators: Swift.Int
                /// - Remark: Generated from `#/components/schemas/private-user/plan/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/private-user/plan/space`.
                public var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/private-user/plan/private_repos`.
                public var private_repos: Swift.Int
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - collaborators:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                public init(
                    collaborators: Swift.Int,
                    name: Swift.String,
                    space: Swift.Int,
                    private_repos: Swift.Int
                ) {
                    self.collaborators = collaborators
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                }
                public enum CodingKeys: String, CodingKey {
                    case collaborators
                    case name
                    case space
                    case private_repos
                }
            }
            /// - Remark: Generated from `#/components/schemas/private-user/plan`.
            public var plan: Components.Schemas.private_hyphen_user.planPayload?
            /// - Remark: Generated from `#/components/schemas/private-user/suspended_at`.
            public var suspended_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/private-user/business_plus`.
            public var business_plus: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/private-user/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `private_hyphen_user`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - notification_email:
            ///   - hireable:
            ///   - bio:
            ///   - twitter_username:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - created_at:
            ///   - updated_at:
            ///   - private_gists:
            ///   - total_private_repos:
            ///   - owned_private_repos:
            ///   - disk_usage:
            ///   - collaborators:
            ///   - two_factor_authentication:
            ///   - plan:
            ///   - suspended_at:
            ///   - business_plus:
            ///   - ldap_dn:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                notification_email: Swift.String? = nil,
                hireable: Swift.Bool? = nil,
                bio: Swift.String? = nil,
                twitter_username: Swift.String? = nil,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                private_gists: Swift.Int,
                total_private_repos: Swift.Int,
                owned_private_repos: Swift.Int,
                disk_usage: Swift.Int,
                collaborators: Swift.Int,
                two_factor_authentication: Swift.Bool,
                plan: Components.Schemas.private_hyphen_user.planPayload? = nil,
                suspended_at: Foundation.Date? = nil,
                business_plus: Swift.Bool? = nil,
                ldap_dn: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.notification_email = notification_email
                self.hireable = hireable
                self.bio = bio
                self.twitter_username = twitter_username
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.created_at = created_at
                self.updated_at = updated_at
                self.private_gists = private_gists
                self.total_private_repos = total_private_repos
                self.owned_private_repos = owned_private_repos
                self.disk_usage = disk_usage
                self.collaborators = collaborators
                self.two_factor_authentication = two_factor_authentication
                self.plan = plan
                self.suspended_at = suspended_at
                self.business_plus = business_plus
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case name
                case company
                case blog
                case location
                case email
                case notification_email
                case hireable
                case bio
                case twitter_username
                case public_repos
                case public_gists
                case followers
                case following
                case created_at
                case updated_at
                case private_gists
                case total_private_repos
                case owned_private_repos
                case disk_usage
                case collaborators
                case two_factor_authentication
                case plan
                case suspended_at
                case business_plus
                case ldap_dn
            }
        }
        /// Email
        ///
        /// - Remark: Generated from `#/components/schemas/email`.
        public struct email: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/email/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/email/primary`.
            public var primary: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/email/verified`.
            public var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/email/visibility`.
            public var visibility: Swift.String?
            /// Creates a new `email`.
            ///
            /// - Parameters:
            ///   - email:
            ///   - primary:
            ///   - verified:
            ///   - visibility:
            public init(
                email: Swift.String,
                primary: Swift.Bool,
                verified: Swift.Bool,
                visibility: Swift.String? = nil
            ) {
                self.email = email
                self.primary = primary
                self.verified = verified
                self.visibility = visibility
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case primary
                case verified
                case visibility
            }
        }
        /// A unique encryption key
        ///
        /// - Remark: Generated from `#/components/schemas/gpg-key`.
        public struct gpg_hyphen_key: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/gpg-key/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/gpg-key/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gpg-key/primary_key_id`.
            public var primary_key_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/gpg-key/key_id`.
            public var key_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/gpg-key/public_key`.
            public var public_key: Swift.String
            /// - Remark: Generated from `#/components/schemas/gpg-key/emailsPayload`.
            public struct emailsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/gpg-key/emailsPayload/email`.
                public var email: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gpg-key/emailsPayload/verified`.
                public var verified: Swift.Bool?
                /// Creates a new `emailsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - email:
                ///   - verified:
                public init(
                    email: Swift.String? = nil,
                    verified: Swift.Bool? = nil
                ) {
                    self.email = email
                    self.verified = verified
                }
                public enum CodingKeys: String, CodingKey {
                    case email
                    case verified
                }
            }
            /// - Remark: Generated from `#/components/schemas/gpg-key/emails`.
            public typealias emailsPayload = [Components.Schemas.gpg_hyphen_key.emailsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/gpg-key/emails`.
            public var emails: Components.Schemas.gpg_hyphen_key.emailsPayload
            /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload`.
            public struct subkeysPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/primary_key_id`.
                public var primary_key_id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/key_id`.
                public var key_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/public_key`.
                public var public_key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/emailsPayload`.
                public struct emailsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/emailsPayload/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/emailsPayload/verified`.
                    public var verified: Swift.Bool?
                    /// Creates a new `emailsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    ///   - verified:
                    public init(
                        email: Swift.String? = nil,
                        verified: Swift.Bool? = nil
                    ) {
                        self.email = email
                        self.verified = verified
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case verified
                    }
                }
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/emails`.
                public typealias emailsPayload = [Components.Schemas.gpg_hyphen_key.subkeysPayloadPayload.emailsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/emails`.
                public var emails: Components.Schemas.gpg_hyphen_key.subkeysPayloadPayload.emailsPayload?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/subkeys`.
                public var subkeys: [OpenAPIRuntime.OpenAPIValueContainer]?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/can_sign`.
                public var can_sign: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/can_encrypt_comms`.
                public var can_encrypt_comms: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/can_encrypt_storage`.
                public var can_encrypt_storage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/can_certify`.
                public var can_certify: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/created_at`.
                public var created_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/expires_at`.
                public var expires_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/raw_key`.
                public var raw_key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gpg-key/subkeysPayload/revoked`.
                public var revoked: Swift.Bool?
                /// Creates a new `subkeysPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - primary_key_id:
                ///   - key_id:
                ///   - public_key:
                ///   - emails:
                ///   - subkeys:
                ///   - can_sign:
                ///   - can_encrypt_comms:
                ///   - can_encrypt_storage:
                ///   - can_certify:
                ///   - created_at:
                ///   - expires_at:
                ///   - raw_key:
                ///   - revoked:
                public init(
                    id: Swift.Int? = nil,
                    primary_key_id: Swift.Int? = nil,
                    key_id: Swift.String? = nil,
                    public_key: Swift.String? = nil,
                    emails: Components.Schemas.gpg_hyphen_key.subkeysPayloadPayload.emailsPayload? = nil,
                    subkeys: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                    can_sign: Swift.Bool? = nil,
                    can_encrypt_comms: Swift.Bool? = nil,
                    can_encrypt_storage: Swift.Bool? = nil,
                    can_certify: Swift.Bool? = nil,
                    created_at: Swift.String? = nil,
                    expires_at: Swift.String? = nil,
                    raw_key: Swift.String? = nil,
                    revoked: Swift.Bool? = nil
                ) {
                    self.id = id
                    self.primary_key_id = primary_key_id
                    self.key_id = key_id
                    self.public_key = public_key
                    self.emails = emails
                    self.subkeys = subkeys
                    self.can_sign = can_sign
                    self.can_encrypt_comms = can_encrypt_comms
                    self.can_encrypt_storage = can_encrypt_storage
                    self.can_certify = can_certify
                    self.created_at = created_at
                    self.expires_at = expires_at
                    self.raw_key = raw_key
                    self.revoked = revoked
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case primary_key_id
                    case key_id
                    case public_key
                    case emails
                    case subkeys
                    case can_sign
                    case can_encrypt_comms
                    case can_encrypt_storage
                    case can_certify
                    case created_at
                    case expires_at
                    case raw_key
                    case revoked
                }
            }
            /// - Remark: Generated from `#/components/schemas/gpg-key/subkeys`.
            public typealias subkeysPayload = [Components.Schemas.gpg_hyphen_key.subkeysPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/gpg-key/subkeys`.
            public var subkeys: Components.Schemas.gpg_hyphen_key.subkeysPayload
            /// - Remark: Generated from `#/components/schemas/gpg-key/can_sign`.
            public var can_sign: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/gpg-key/can_encrypt_comms`.
            public var can_encrypt_comms: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/gpg-key/can_encrypt_storage`.
            public var can_encrypt_storage: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/gpg-key/can_certify`.
            public var can_certify: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/gpg-key/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/gpg-key/expires_at`.
            public var expires_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/gpg-key/revoked`.
            public var revoked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/gpg-key/raw_key`.
            public var raw_key: Swift.String?
            /// Creates a new `gpg_hyphen_key`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - primary_key_id:
            ///   - key_id:
            ///   - public_key:
            ///   - emails:
            ///   - subkeys:
            ///   - can_sign:
            ///   - can_encrypt_comms:
            ///   - can_encrypt_storage:
            ///   - can_certify:
            ///   - created_at:
            ///   - expires_at:
            ///   - revoked:
            ///   - raw_key:
            public init(
                id: Swift.Int,
                name: Swift.String? = nil,
                primary_key_id: Swift.Int? = nil,
                key_id: Swift.String,
                public_key: Swift.String,
                emails: Components.Schemas.gpg_hyphen_key.emailsPayload,
                subkeys: Components.Schemas.gpg_hyphen_key.subkeysPayload,
                can_sign: Swift.Bool,
                can_encrypt_comms: Swift.Bool,
                can_encrypt_storage: Swift.Bool,
                can_certify: Swift.Bool,
                created_at: Foundation.Date,
                expires_at: Foundation.Date? = nil,
                revoked: Swift.Bool,
                raw_key: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.primary_key_id = primary_key_id
                self.key_id = key_id
                self.public_key = public_key
                self.emails = emails
                self.subkeys = subkeys
                self.can_sign = can_sign
                self.can_encrypt_comms = can_encrypt_comms
                self.can_encrypt_storage = can_encrypt_storage
                self.can_certify = can_certify
                self.created_at = created_at
                self.expires_at = expires_at
                self.revoked = revoked
                self.raw_key = raw_key
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case primary_key_id
                case key_id
                case public_key
                case emails
                case subkeys
                case can_sign
                case can_encrypt_comms
                case can_encrypt_storage
                case can_certify
                case created_at
                case expires_at
                case revoked
                case raw_key
            }
        }
        /// Key
        ///
        /// - Remark: Generated from `#/components/schemas/key`.
        public struct key: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/key/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/key/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/key/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/key/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/key/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/key/verified`.
            public var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/key/read_only`.
            public var read_only: Swift.Bool
            /// Creates a new `key`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - id:
            ///   - url:
            ///   - title:
            ///   - created_at:
            ///   - verified:
            ///   - read_only:
            public init(
                key: Swift.String,
                id: Swift.Int,
                url: Swift.String,
                title: Swift.String,
                created_at: Foundation.Date,
                verified: Swift.Bool,
                read_only: Swift.Bool
            ) {
                self.key = key
                self.id = id
                self.url = url
                self.title = title
                self.created_at = created_at
                self.verified = verified
                self.read_only = read_only
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case id
                case url
                case title
                case created_at
                case verified
                case read_only
            }
        }
        /// Social media account
        ///
        /// - Remark: Generated from `#/components/schemas/social-account`.
        public struct social_hyphen_account: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/social-account/provider`.
            public var provider: Swift.String
            /// - Remark: Generated from `#/components/schemas/social-account/url`.
            public var url: Swift.String
            /// Creates a new `social_hyphen_account`.
            ///
            /// - Parameters:
            ///   - provider:
            ///   - url:
            public init(
                provider: Swift.String,
                url: Swift.String
            ) {
                self.provider = provider
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case provider
                case url
            }
        }
        /// A public SSH key used to sign Git commits
        ///
        /// - Remark: Generated from `#/components/schemas/ssh-signing-key`.
        public struct ssh_hyphen_signing_hyphen_key: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ssh-signing-key/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/ssh-signing-key/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ssh-signing-key/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/ssh-signing-key/created_at`.
            public var created_at: Foundation.Date
            /// Creates a new `ssh_hyphen_signing_hyphen_key`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - id:
            ///   - title:
            ///   - created_at:
            public init(
                key: Swift.String,
                id: Swift.Int,
                title: Swift.String,
                created_at: Foundation.Date
            ) {
                self.key = key
                self.id = id
                self.title = title
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case id
                case title
                case created_at
            }
        }
        /// Sigstore Bundle v0.1
        ///
        /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0`.
        public struct sigstore_hyphen_bundle_hyphen_0: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/mediaType`.
            public var mediaType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial`.
            public struct verificationMaterialPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/x509CertificateChain`.
                public struct x509CertificateChainPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/x509CertificateChain/certificatesPayload`.
                    public struct certificatesPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/x509CertificateChain/certificatesPayload/rawBytes`.
                        public var rawBytes: Swift.String?
                        /// Creates a new `certificatesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - rawBytes:
                        public init(rawBytes: Swift.String? = nil) {
                            self.rawBytes = rawBytes
                        }
                        public enum CodingKeys: String, CodingKey {
                            case rawBytes
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/x509CertificateChain/certificates`.
                    public typealias certificatesPayload = [Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.x509CertificateChainPayload.certificatesPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/x509CertificateChain/certificates`.
                    public var certificates: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.x509CertificateChainPayload.certificatesPayload?
                    /// Creates a new `x509CertificateChainPayload`.
                    ///
                    /// - Parameters:
                    ///   - certificates:
                    public init(certificates: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.x509CertificateChainPayload.certificatesPayload? = nil) {
                        self.certificates = certificates
                    }
                    public enum CodingKeys: String, CodingKey {
                        case certificates
                    }
                }
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/x509CertificateChain`.
                public var x509CertificateChain: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.x509CertificateChainPayload?
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload`.
                public struct tlogEntriesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/logIndex`.
                    public var logIndex: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/logId`.
                    public struct logIdPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/logId/keyId`.
                        public var keyId: Swift.String?
                        /// Creates a new `logIdPayload`.
                        ///
                        /// - Parameters:
                        ///   - keyId:
                        public init(keyId: Swift.String? = nil) {
                            self.keyId = keyId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case keyId
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/logId`.
                    public var logId: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayloadPayload.logIdPayload?
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/kindVersion`.
                    public struct kindVersionPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/kindVersion/kind`.
                        public var kind: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/kindVersion/version`.
                        public var version: Swift.String?
                        /// Creates a new `kindVersionPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - version:
                        public init(
                            kind: Swift.String? = nil,
                            version: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.version = version
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case version
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/kindVersion`.
                    public var kindVersion: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayloadPayload.kindVersionPayload?
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/integratedTime`.
                    public var integratedTime: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/inclusionPromise`.
                    public struct inclusionPromisePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/inclusionPromise/signedEntryTimestamp`.
                        public var signedEntryTimestamp: Swift.String?
                        /// Creates a new `inclusionPromisePayload`.
                        ///
                        /// - Parameters:
                        ///   - signedEntryTimestamp:
                        public init(signedEntryTimestamp: Swift.String? = nil) {
                            self.signedEntryTimestamp = signedEntryTimestamp
                        }
                        public enum CodingKeys: String, CodingKey {
                            case signedEntryTimestamp
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/inclusionPromise`.
                    public var inclusionPromise: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayloadPayload.inclusionPromisePayload?
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/inclusionProof`.
                    public var inclusionProof: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntriesPayload/canonicalizedBody`.
                    public var canonicalizedBody: Swift.String?
                    /// Creates a new `tlogEntriesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - logIndex:
                    ///   - logId:
                    ///   - kindVersion:
                    ///   - integratedTime:
                    ///   - inclusionPromise:
                    ///   - inclusionProof:
                    ///   - canonicalizedBody:
                    public init(
                        logIndex: Swift.String? = nil,
                        logId: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayloadPayload.logIdPayload? = nil,
                        kindVersion: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayloadPayload.kindVersionPayload? = nil,
                        integratedTime: Swift.String? = nil,
                        inclusionPromise: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayloadPayload.inclusionPromisePayload? = nil,
                        inclusionProof: Swift.String? = nil,
                        canonicalizedBody: Swift.String? = nil
                    ) {
                        self.logIndex = logIndex
                        self.logId = logId
                        self.kindVersion = kindVersion
                        self.integratedTime = integratedTime
                        self.inclusionPromise = inclusionPromise
                        self.inclusionProof = inclusionProof
                        self.canonicalizedBody = canonicalizedBody
                    }
                    public enum CodingKeys: String, CodingKey {
                        case logIndex
                        case logId
                        case kindVersion
                        case integratedTime
                        case inclusionPromise
                        case inclusionProof
                        case canonicalizedBody
                    }
                }
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntries`.
                public typealias tlogEntriesPayload = [Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/tlogEntries`.
                public var tlogEntries: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayload?
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial/timestampVerificationData`.
                public var timestampVerificationData: Swift.String?
                /// Creates a new `verificationMaterialPayload`.
                ///
                /// - Parameters:
                ///   - x509CertificateChain:
                ///   - tlogEntries:
                ///   - timestampVerificationData:
                public init(
                    x509CertificateChain: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.x509CertificateChainPayload? = nil,
                    tlogEntries: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload.tlogEntriesPayload? = nil,
                    timestampVerificationData: Swift.String? = nil
                ) {
                    self.x509CertificateChain = x509CertificateChain
                    self.tlogEntries = tlogEntries
                    self.timestampVerificationData = timestampVerificationData
                }
                public enum CodingKeys: String, CodingKey {
                    case x509CertificateChain
                    case tlogEntries
                    case timestampVerificationData
                }
            }
            /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/verificationMaterial`.
            public var verificationMaterial: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload?
            /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope`.
            public struct dsseEnvelopePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope/payload`.
                public var payload: Swift.String?
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope/payloadType`.
                public var payloadType: Swift.String?
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope/signaturesPayload`.
                public struct signaturesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope/signaturesPayload/sig`.
                    public var sig: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope/signaturesPayload/keyid`.
                    public var keyid: Swift.String?
                    /// Creates a new `signaturesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - sig:
                    ///   - keyid:
                    public init(
                        sig: Swift.String? = nil,
                        keyid: Swift.String? = nil
                    ) {
                        self.sig = sig
                        self.keyid = keyid
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sig
                        case keyid
                    }
                }
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope/signatures`.
                public typealias signaturesPayload = [Components.Schemas.sigstore_hyphen_bundle_hyphen_0.dsseEnvelopePayload.signaturesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope/signatures`.
                public var signatures: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.dsseEnvelopePayload.signaturesPayload?
                /// Creates a new `dsseEnvelopePayload`.
                ///
                /// - Parameters:
                ///   - payload:
                ///   - payloadType:
                ///   - signatures:
                public init(
                    payload: Swift.String? = nil,
                    payloadType: Swift.String? = nil,
                    signatures: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.dsseEnvelopePayload.signaturesPayload? = nil
                ) {
                    self.payload = payload
                    self.payloadType = payloadType
                    self.signatures = signatures
                }
                public enum CodingKeys: String, CodingKey {
                    case payload
                    case payloadType
                    case signatures
                }
            }
            /// - Remark: Generated from `#/components/schemas/sigstore-bundle-0/dsseEnvelope`.
            public var dsseEnvelope: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.dsseEnvelopePayload?
            /// Creates a new `sigstore_hyphen_bundle_hyphen_0`.
            ///
            /// - Parameters:
            ///   - mediaType:
            ///   - verificationMaterial:
            ///   - dsseEnvelope:
            public init(
                mediaType: Swift.String? = nil,
                verificationMaterial: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.verificationMaterialPayload? = nil,
                dsseEnvelope: Components.Schemas.sigstore_hyphen_bundle_hyphen_0.dsseEnvelopePayload? = nil
            ) {
                self.mediaType = mediaType
                self.verificationMaterial = verificationMaterial
                self.dsseEnvelope = dsseEnvelope
            }
            public enum CodingKeys: String, CodingKey {
                case mediaType
                case verificationMaterial
                case dsseEnvelope
            }
        }
        /// Hovercard
        ///
        /// - Remark: Generated from `#/components/schemas/hovercard`.
        public struct hovercard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/hovercard/contextsPayload`.
            public struct contextsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/hovercard/contextsPayload/message`.
                public var message: Swift.String
                /// - Remark: Generated from `#/components/schemas/hovercard/contextsPayload/octicon`.
                public var octicon: Swift.String
                /// Creates a new `contextsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - message:
                ///   - octicon:
                public init(
                    message: Swift.String,
                    octicon: Swift.String
                ) {
                    self.message = message
                    self.octicon = octicon
                }
                public enum CodingKeys: String, CodingKey {
                    case message
                    case octicon
                }
            }
            /// - Remark: Generated from `#/components/schemas/hovercard/contexts`.
            public typealias contextsPayload = [Components.Schemas.hovercard.contextsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/hovercard/contexts`.
            public var contexts: Components.Schemas.hovercard.contextsPayload
            /// Creates a new `hovercard`.
            ///
            /// - Parameters:
            ///   - contexts:
            public init(contexts: Components.Schemas.hovercard.contextsPayload) {
                self.contexts = contexts
            }
            public enum CodingKeys: String, CodingKey {
                case contexts
            }
        }
        /// Key Simple
        ///
        /// - Remark: Generated from `#/components/schemas/key-simple`.
        public struct key_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/key-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/key-simple/key`.
            public var key: Swift.String
            /// Creates a new `key_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - key:
            public init(
                id: Swift.Int,
                key: Swift.String
            ) {
                self.id = id
                self.key = key
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case key
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        public typealias pagination_hyphen_before = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        public typealias pagination_hyphen_after = Swift.String
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// A user ID. Only return users with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-user`.
        public typealias since_hyphen_user = Swift.Int
        /// The unique identifier of the key.
        ///
        /// - Remark: Generated from `#/components/parameters/key-id`.
        public typealias key_hyphen_id = Swift.Int
        /// The unique identifier of the GPG key.
        ///
        /// - Remark: Generated from `#/components/parameters/gpg-key-id`.
        public typealias gpg_hyphen_key_hyphen_id = Swift.Int
        /// The unique identifier of the SSH signing key.
        ///
        /// - Remark: Generated from `#/components/parameters/ssh-signing-key-id`.
        public typealias ssh_hyphen_signing_hyphen_key_hyphen_id = Swift.Int
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
    ///
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get(users/get-authenticated)`.
    public enum users_sol_get_hyphen_authenticated {
        public static let id: Swift.String = "users/get-authenticated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_authenticated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_authenticated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_get_hyphen_authenticated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.users_sol_get_hyphen_authenticated.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/GET/responses/200/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/GET/responses/200/content/json/case1`.
                        case private_hyphen_user(Components.Schemas.private_hyphen_user)
                        /// - Remark: Generated from `#/paths/user/GET/responses/200/content/json/case2`.
                        case public_hyphen_user(Components.Schemas.public_hyphen_user)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .private_hyphen_user(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .public_hyphen_user(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .private_hyphen_user(value):
                                try value.encode(to: encoder)
                            case let .public_hyphen_user(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/GET/responses/200/content/application\/json`.
                    case json(Operations.users_sol_get_hyphen_authenticated.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.users_sol_get_hyphen_authenticated.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_get_hyphen_authenticated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_get_hyphen_authenticated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/get(users/get-authenticated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_get_hyphen_authenticated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_get_hyphen_authenticated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/get(users/get-authenticated)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/get(users/get-authenticated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/get(users/get-authenticated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update the authenticated user
    ///
    /// **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
    ///
    /// - Remark: HTTP `PATCH /user`.
    /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)`.
    public enum users_sol_update_hyphen_authenticated {
        public static let id: Swift.String = "users/update-authenticated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_update_hyphen_authenticated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_update_hyphen_authenticated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_update_hyphen_authenticated.Input.Headers
            /// - Remark: Generated from `#/paths/user/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The new name of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The publicly visible email address of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/email`.
                    public var email: Swift.String?
                    /// The new blog URL of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/blog`.
                    public var blog: Swift.String?
                    /// The new Twitter username of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/twitter_username`.
                    public var twitter_username: Swift.String?
                    /// The new company of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/company`.
                    public var company: Swift.String?
                    /// The new location of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/location`.
                    public var location: Swift.String?
                    /// The new hiring availability of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/hireable`.
                    public var hireable: Swift.Bool?
                    /// The new short biography of the user.
                    ///
                    /// - Remark: Generated from `#/paths/user/PATCH/requestBody/json/bio`.
                    public var bio: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The new name of the user.
                    ///   - email: The publicly visible email address of the user.
                    ///   - blog: The new blog URL of the user.
                    ///   - twitter_username: The new Twitter username of the user.
                    ///   - company: The new company of the user.
                    ///   - location: The new location of the user.
                    ///   - hireable: The new hiring availability of the user.
                    ///   - bio: The new short biography of the user.
                    public init(
                        name: Swift.String? = nil,
                        email: Swift.String? = nil,
                        blog: Swift.String? = nil,
                        twitter_username: Swift.String? = nil,
                        company: Swift.String? = nil,
                        location: Swift.String? = nil,
                        hireable: Swift.Bool? = nil,
                        bio: Swift.String? = nil
                    ) {
                        self.name = name
                        self.email = email
                        self.blog = blog
                        self.twitter_username = twitter_username
                        self.company = company
                        self.location = location
                        self.hireable = hireable
                        self.bio = bio
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case email
                        case blog
                        case twitter_username
                        case company
                        case location
                        case hireable
                        case bio
                    }
                }
                /// - Remark: Generated from `#/paths/user/PATCH/requestBody/content/application\/json`.
                case json(Operations.users_sol_update_hyphen_authenticated.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_update_hyphen_authenticated.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_update_hyphen_authenticated.Input.Headers = .init(),
                body: Operations.users_sol_update_hyphen_authenticated.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.private_hyphen_user)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.private_hyphen_user {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_update_hyphen_authenticated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_update_hyphen_authenticated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_update_hyphen_authenticated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_update_hyphen_authenticated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/patch(users/update-authenticated)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List users blocked by the authenticated user
    ///
    /// List the users you've blocked on your personal account.
    ///
    /// - Remark: HTTP `GET /user/blocks`.
    /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)`.
    public enum users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-blocked-by-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/blocks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/blocks/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/blocks/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/blocks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/blocks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/blocks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_blocked_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/blocks/get(users/list-blocked-by-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a user is blocked by the authenticated user
    ///
    /// Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
    ///
    /// - Remark: HTTP `GET /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)`.
    public enum users_sol_check_hyphen_blocked {
        public static let id: Swift.String = "users/check-blocked"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/blocks/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/user/blocks/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_check_hyphen_blocked.Input.Path
            /// - Remark: Generated from `#/paths/user/blocks/{username}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_check_hyphen_blocked.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_check_hyphen_blocked.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_check_hyphen_blocked.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_check_hyphen_blocked.Input.Path,
                headers: Operations.users_sol_check_hyphen_blocked.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// If the user is blocked
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_check_hyphen_blocked.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_check_hyphen_blocked.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/blocks/{username}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/blocks/{username}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_check_hyphen_blocked.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_check_hyphen_blocked.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// If the user is not blocked
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.users_sol_check_hyphen_blocked.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.users_sol_check_hyphen_blocked.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/get(users/check-blocked)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Block a user
    ///
    /// Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
    ///
    /// - Remark: HTTP `PUT /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)`.
    public enum users_sol_block {
        public static let id: Swift.String = "users/block"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/blocks/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/user/blocks/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_block.Input.Path
            /// - Remark: Generated from `#/paths/user/blocks/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_block.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_block.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_block.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_block.Input.Path,
                headers: Operations.users_sol_block.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_block.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_block.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/put(users/block)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unblock a user
    ///
    /// Unblocks the given user and returns a 204.
    ///
    /// - Remark: HTTP `DELETE /user/blocks/{username}`.
    /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)`.
    public enum users_sol_unblock {
        public static let id: Swift.String = "users/unblock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/blocks/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/user/blocks/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_unblock.Input.Path
            /// - Remark: Generated from `#/paths/user/blocks/{username}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_unblock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_unblock.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_unblock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_unblock.Input.Path,
                headers: Operations.users_sol_unblock.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_unblock.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_unblock.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/blocks/{username}/delete(users/unblock)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set primary email visibility for the authenticated user
    ///
    /// Sets the visibility for your primary email addresses.
    ///
    /// - Remark: HTTP `PATCH /user/email/visibility`.
    /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)`.
    public enum users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/set-primary-email-visibility-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Denotes whether an email is publicly visible.
                    ///
                    /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case _public = "public"
                        case _private = "private"
                    }
                    /// Denotes whether an email is publicly visible.
                    ///
                    /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/requestBody/json/visibility`.
                    public var visibility: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.visibilityPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - visibility: Denotes whether an email is publicly visible.
                    public init(visibility: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.visibilityPayload) {
                        self.visibility = visibility
                    }
                    public enum CodingKeys: String, CodingKey {
                        case visibility
                    }
                }
                /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/requestBody/content/application\/json`.
                case json(Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/email/visibility/PATCH/responses/200/content/application\/json`.
                    case json([Components.Schemas.email])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.email] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_set_hyphen_primary_hyphen_email_hyphen_visibility_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/email/visibility/patch(users/set-primary-email-visibility-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List email addresses for the authenticated user
    ///
    /// Lists all of your email addresses, and specifies which one is visible
    /// to the public.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)`.
    public enum users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-emails-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/emails/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/emails/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/emails/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/emails/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/emails/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/emails/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/emails/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/emails/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.email])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.email] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/emails/get(users/list-emails-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add an email address for the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)`.
    public enum users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/add-email-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/emails/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/emails/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/emails/POST/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/user/emails/POST/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
                        ///
                        /// - Remark: Generated from `#/paths/user/emails/POST/requestBody/json/case1/emails`.
                        public var emails: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - emails: Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
                        public init(emails: [Swift.String]) {
                            self.emails = emails
                        }
                        public enum CodingKeys: String, CodingKey {
                            case emails
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/emails/POST/requestBody/json/case1`.
                    case case1(Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/user/emails/POST/requestBody/json/case2`.
                    case case2([Swift.String])
                    /// - Remark: Generated from `#/paths/user/emails/POST/requestBody/json/case3`.
                    case case3(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/user/emails/POST/requestBody/content/application\/json`.
                case json(Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/emails/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/emails/POST/responses/201/content/application\/json`.
                    case json([Components.Schemas.email])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.email] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.users_sol_add_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/emails/post(users/add-email-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an email address for the authenticated user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/emails`.
    /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)`.
    public enum users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/delete-email-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/emails/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
                    ///
                    /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Email addresses associated with the GitHub user account.
                        ///
                        /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody/json/case1/emails`.
                        public var emails: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - emails: Email addresses associated with the GitHub user account.
                        public init(emails: [Swift.String]) {
                            self.emails = emails
                        }
                        public enum CodingKeys: String, CodingKey {
                            case emails
                        }
                    }
                    /// Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
                    ///
                    /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody/json/case1`.
                    case case1(Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody/json/case2`.
                    case case2([Swift.String])
                    /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody/json/case3`.
                    case case3(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/user/emails/DELETE/requestBody/content/application\/json`.
                case json(Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_delete_hyphen_email_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/emails/delete(users/delete-email-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List followers of the authenticated user
    ///
    /// Lists the people following the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/followers`.
    /// - Remark: Generated from `#/paths//user/followers/get(users/list-followers-for-authenticated-user)`.
    public enum users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-followers-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/followers/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/followers/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/followers/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/followers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/followers/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/followers/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/followers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/followers/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/followers/get(users/list-followers-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/followers/get(users/list-followers-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/followers/get(users/list-followers-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/followers/get(users/list-followers-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List the people the authenticated user follows
    ///
    /// Lists the people who the authenticated user follows.
    ///
    /// - Remark: HTTP `GET /user/following`.
    /// - Remark: Generated from `#/paths//user/following/get(users/list-followed-by-authenticated-user)`.
    public enum users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-followed-by-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/following/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/following/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/following/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/following/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/following/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/following/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/following/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/following/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/following/get(users/list-followed-by-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_followed_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/following/get(users/list-followed-by-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/following/get(users/list-followed-by-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/following/get(users/list-followed-by-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a person is followed by the authenticated user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)`.
    public enum users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated {
        public static let id: Swift.String = "users/check-person-is-followed-by-authenticated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/following/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/user/following/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input.Path
            /// - Remark: Generated from `#/paths/user/following/{username}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input.Path,
                headers: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// if the person is followed by the authenticated user
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/following/{username}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/following/{username}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// if the person is not followed by the authenticated user
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.users_sol_check_hyphen_person_hyphen_is_hyphen_followed_hyphen_by_hyphen_authenticated.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/get(users/check-person-is-followed-by-authenticated)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Follow a user
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)`.
    public enum users_sol_follow {
        public static let id: Swift.String = "users/follow"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/following/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/user/following/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_follow.Input.Path
            /// - Remark: Generated from `#/paths/user/following/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_follow.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_follow.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_follow.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_follow.Input.Path,
                headers: Operations.users_sol_follow.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_follow.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_follow.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/put(users/follow)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unfollow a user
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/following/{username}`.
    /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)`.
    public enum users_sol_unfollow {
        public static let id: Swift.String = "users/unfollow"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/following/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/user/following/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_unfollow.Input.Path
            /// - Remark: Generated from `#/paths/user/following/{username}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_unfollow.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_unfollow.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_unfollow.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_unfollow.Input.Path,
                headers: Operations.users_sol_unfollow.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_unfollow.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_unfollow.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/following/{username}/delete(users/unfollow)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List GPG keys for the authenticated user
    ///
    /// Lists the current user's GPG keys.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/gpg_keys`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)`.
    public enum users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-gpg-keys-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/gpg_keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/gpg_keys/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/gpg_keys/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/gpg_keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/gpg_keys/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/gpg_keys/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/gpg_keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/gpg_keys/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.gpg_hyphen_key])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.gpg_hyphen_key] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/get(users/list-gpg-keys-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a GPG key for the authenticated user
    ///
    /// Adds a GPG key to the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/gpg_keys`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)`.
    public enum users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/create-gpg-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/gpg_keys/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/gpg_keys/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/gpg_keys/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A descriptive name for the new key.
                    ///
                    /// - Remark: Generated from `#/paths/user/gpg_keys/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// A GPG key in ASCII-armored format.
                    ///
                    /// - Remark: Generated from `#/paths/user/gpg_keys/POST/requestBody/json/armored_public_key`.
                    public var armored_public_key: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: A descriptive name for the new key.
                    ///   - armored_public_key: A GPG key in ASCII-armored format.
                    public init(
                        name: Swift.String? = nil,
                        armored_public_key: Swift.String
                    ) {
                        self.name = name
                        self.armored_public_key = armored_public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case armored_public_key
                    }
                }
                /// - Remark: Generated from `#/paths/user/gpg_keys/POST/requestBody/content/application\/json`.
                case json(Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/gpg_keys/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/gpg_keys/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.gpg_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gpg_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.users_sol_create_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/post(users/create-gpg-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a GPG key for the authenticated user
    ///
    /// View extended details for a single GPG key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/gpg_keys/{gpg_key_id}`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)`.
    public enum users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/get-gpg-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the GPG key.
                ///
                /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/GET/path/gpg_key_id`.
                public var gpg_key_id: Components.Parameters.gpg_hyphen_key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gpg_key_id: The unique identifier of the GPG key.
                public init(gpg_key_id: Components.Parameters.gpg_hyphen_key_hyphen_id) {
                    self.gpg_key_id = gpg_key_id
                }
            }
            public var path: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.gpg_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gpg_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_get_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/get(users/get-gpg-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a GPG key for the authenticated user
    ///
    /// Removes a GPG key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/gpg_keys/{gpg_key_id}`.
    /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)`.
    public enum users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/delete-gpg-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the GPG key.
                ///
                /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/DELETE/path/gpg_key_id`.
                public var gpg_key_id: Components.Parameters.gpg_hyphen_key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gpg_key_id: The unique identifier of the GPG key.
                public init(gpg_key_id: Components.Parameters.gpg_hyphen_key_hyphen_id) {
                    self.gpg_key_id = gpg_key_id
                }
            }
            public var path: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/gpg_keys/{gpg_key_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_delete_hyphen_gpg_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/gpg_keys/{gpg_key_id}/delete(users/delete-gpg-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public SSH keys for the authenticated user
    ///
    /// Lists the public SSH keys for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/keys`.
    /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)`.
    public enum users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-public-ssh-keys-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/keys/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/keys/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/keys/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/keys/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/keys/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.key])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.key] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_public_hyphen_ssh_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/keys/get(users/list-public-ssh-keys-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a public SSH key for the authenticated user
    ///
    /// Adds a public SSH key to the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/keys`.
    /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)`.
    public enum users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/create-public-ssh-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/keys/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/keys/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/keys/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A descriptive name for the new key.
                    ///
                    /// - Remark: Generated from `#/paths/user/keys/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The public SSH key to add to your GitHub account.
                    ///
                    /// - Remark: Generated from `#/paths/user/keys/POST/requestBody/json/key`.
                    public var key: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: A descriptive name for the new key.
                    ///   - key: The public SSH key to add to your GitHub account.
                    public init(
                        title: Swift.String? = nil,
                        key: Swift.String
                    ) {
                        self.title = title
                        self.key = key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case key
                    }
                }
                /// - Remark: Generated from `#/paths/user/keys/POST/requestBody/content/application\/json`.
                case json(Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/keys/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/keys/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.users_sol_create_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/keys/post(users/create-public-ssh-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a public SSH key for the authenticated user
    ///
    /// View extended details for a single public SSH key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)`.
    public enum users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/get-public-ssh-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/keys/{key_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the key.
                ///
                /// - Remark: Generated from `#/paths/user/keys/{key_id}/GET/path/key_id`.
                public var key_id: Components.Parameters.key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key_id: The unique identifier of the key.
                public init(key_id: Components.Parameters.key_hyphen_id) {
                    self.key_id = key_id
                }
            }
            public var path: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/keys/{key_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/keys/{key_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/keys/{key_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_get_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/get(users/get-public-ssh-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a public SSH key for the authenticated user
    ///
    /// Removes a public SSH key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)`.
    public enum users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/delete-public-ssh-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/keys/{key_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the key.
                ///
                /// - Remark: Generated from `#/paths/user/keys/{key_id}/DELETE/path/key_id`.
                public var key_id: Components.Parameters.key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key_id: The unique identifier of the key.
                public init(key_id: Components.Parameters.key_hyphen_id) {
                    self.key_id = key_id
                }
            }
            public var path: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/keys/{key_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_delete_hyphen_public_hyphen_ssh_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/keys/{key_id}/delete(users/delete-public-ssh-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public email addresses for the authenticated user
    ///
    /// Lists your publicly visible email address, which you can set with the
    /// [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
    /// endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/public_emails`.
    /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)`.
    public enum users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-public-emails-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/public_emails/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/public_emails/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/public_emails/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/public_emails/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/public_emails/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/public_emails/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/public_emails/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/public_emails/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.email])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.email] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_public_hyphen_emails_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/public_emails/get(users/list-public-emails-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List social accounts for the authenticated user
    ///
    /// Lists all of your social accounts.
    ///
    /// - Remark: HTTP `GET /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)`.
    public enum users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-social-accounts-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/social_accounts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/social_accounts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/social_accounts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/social_accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/social_accounts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/social_accounts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/social_accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/social_accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.social_hyphen_account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.social_hyphen_account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/get(users/list-social-accounts-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add social accounts for the authenticated user
    ///
    /// Add one or more social accounts to the authenticated user's profile.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)`.
    public enum users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/add-social-account-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/social_accounts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/social_accounts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/social_accounts/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Full URLs for the social media profiles to add.
                    ///
                    /// - Remark: Generated from `#/paths/user/social_accounts/POST/requestBody/json/account_urls`.
                    public var account_urls: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_urls: Full URLs for the social media profiles to add.
                    public init(account_urls: [Swift.String]) {
                        self.account_urls = account_urls
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_urls
                    }
                }
                /// - Remark: Generated from `#/paths/user/social_accounts/POST/requestBody/content/application\/json`.
                case json(Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/social_accounts/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/social_accounts/POST/responses/201/content/application\/json`.
                    case json([Components.Schemas.social_hyphen_account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.social_hyphen_account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.users_sol_add_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/post(users/add-social-account-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete social accounts for the authenticated user
    ///
    /// Deletes one or more social accounts from the authenticated user's profile.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/social_accounts`.
    /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)`.
    public enum users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/delete-social-account-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/social_accounts/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/social_accounts/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/social_accounts/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Full URLs for the social media profiles to delete.
                    ///
                    /// - Remark: Generated from `#/paths/user/social_accounts/DELETE/requestBody/json/account_urls`.
                    public var account_urls: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_urls: Full URLs for the social media profiles to delete.
                    public init(account_urls: [Swift.String]) {
                        self.account_urls = account_urls
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_urls
                    }
                }
                /// - Remark: Generated from `#/paths/user/social_accounts/DELETE/requestBody/content/application\/json`.
                case json(Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_delete_hyphen_social_hyphen_account_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/social_accounts/delete(users/delete-social-account-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List SSH signing keys for the authenticated user
    ///
    /// Lists the SSH signing keys for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)`.
    public enum users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/list-ssh-signing-keys-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/ssh_signing_keys/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ssh_hyphen_signing_hyphen_key])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ssh_hyphen_signing_hyphen_key] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/get(users/list-ssh-signing-keys-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a SSH signing key for the authenticated user
    ///
    /// Creates an SSH signing key for the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)`.
    public enum users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/create-ssh-signing-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A descriptive name for the new key.
                    ///
                    /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
                    ///
                    /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/requestBody/json/key`.
                    public var key: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: A descriptive name for the new key.
                    ///   - key: The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
                    public init(
                        title: Swift.String? = nil,
                        key: Swift.String
                    ) {
                        self.title = title
                        self.key = key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case key
                    }
                }
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/requestBody/content/application\/json`.
                case json(Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/ssh_signing_keys/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ssh_hyphen_signing_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ssh_hyphen_signing_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.users_sol_create_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/post(users/create-ssh-signing-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an SSH signing key for the authenticated user
    ///
    /// Gets extended details for an SSH signing key.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/ssh_signing_keys/{ssh_signing_key_id}`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)`.
    public enum users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/get-ssh-signing-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the SSH signing key.
                ///
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/GET/path/ssh_signing_key_id`.
                public var ssh_signing_key_id: Components.Parameters.ssh_hyphen_signing_hyphen_key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - ssh_signing_key_id: The unique identifier of the SSH signing key.
                public init(ssh_signing_key_id: Components.Parameters.ssh_hyphen_signing_hyphen_key_hyphen_id) {
                    self.ssh_signing_key_id = ssh_signing_key_id
                }
            }
            public var path: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ssh_hyphen_signing_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ssh_hyphen_signing_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_get_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/get(users/get-ssh-signing-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an SSH signing key for the authenticated user
    ///
    /// Deletes an SSH signing key from the authenticated user's GitHub account.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/ssh_signing_keys/{ssh_signing_key_id}`.
    /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)`.
    public enum users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "users/delete-ssh-signing-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the SSH signing key.
                ///
                /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/DELETE/path/ssh_signing_key_id`.
                public var ssh_signing_key_id: Components.Parameters.ssh_hyphen_signing_hyphen_key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - ssh_signing_key_id: The unique identifier of the SSH signing key.
                public init(ssh_signing_key_id: Components.Parameters.ssh_hyphen_signing_hyphen_key_hyphen_id) {
                    self.ssh_signing_key_id = ssh_signing_key_id
                }
            }
            public var path: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/ssh_signing_keys/{ssh_signing_key_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_delete_hyphen_ssh_hyphen_signing_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/ssh_signing_keys/{ssh_signing_key_id}/delete(users/delete-ssh-signing-key-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List users
    ///
    /// Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
    ///
    /// Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
    ///
    /// - Remark: HTTP `GET /users`.
    /// - Remark: Generated from `#/paths//users/get(users/list)`.
    public enum users_sol_list {
        public static let id: Swift.String = "users/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A user ID. Only return users with an ID greater than this ID.
                ///
                /// - Remark: Generated from `#/paths/users/GET/query/since`.
                public var since: Components.Parameters.since_hyphen_user?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: A user ID. Only return users with an ID greater than this ID.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Components.Parameters.since_hyphen_user? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.since = since
                    self.per_page = per_page
                }
            }
            public var query: Operations.users_sol_list.Input.Query
            /// - Remark: Generated from `#/paths/users/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.users_sol_list.Input.Query = .init(),
                headers: Operations.users_sol_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/GET/responses/200/headers/Link`.
                    public var Link: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Swift.String? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/get(users/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//users/get(users/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a user
    ///
    /// Provides publicly available information about someone with a GitHub account.
    ///
    /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
    ///
    /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".
    ///
    /// - Remark: HTTP `GET /users/{username}`.
    /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)`.
    public enum users_sol_get_hyphen_by_hyphen_username {
        public static let id: Swift.String = "users/get-by-username"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_get_hyphen_by_hyphen_username.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_by_hyphen_username.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_by_hyphen_username.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_get_hyphen_by_hyphen_username.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.users_sol_get_hyphen_by_hyphen_username.Input.Path,
                headers: Operations.users_sol_get_hyphen_by_hyphen_username.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/json/case1`.
                        case private_hyphen_user(Components.Schemas.private_hyphen_user)
                        /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/json/case2`.
                        case public_hyphen_user(Components.Schemas.public_hyphen_user)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .private_hyphen_user(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .public_hyphen_user(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .private_hyphen_user(value):
                                try value.encode(to: encoder)
                            case let .public_hyphen_user(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/application\/json`.
                    case json(Operations.users_sol_get_hyphen_by_hyphen_username.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.users_sol_get_hyphen_by_hyphen_username.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_get_hyphen_by_hyphen_username.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_get_hyphen_by_hyphen_username.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_get_hyphen_by_hyphen_username.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_get_hyphen_by_hyphen_username.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List attestations
    ///
    /// List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.
    ///
    /// The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
    ///
    /// **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `GET /users/{username}/attestations/{subject_digest}`.
    /// - Remark: Generated from `#/paths//users/{username}/attestations/{subject_digest}/get(users/list-attestations)`.
    public enum users_sol_list_hyphen_attestations {
        public static let id: Swift.String = "users/list-attestations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Subject Digest
                ///
                /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/path/subject_digest`.
                public var subject_digest: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                ///   - subject_digest: Subject Digest
                public init(
                    username: Components.Parameters.username,
                    subject_digest: Swift.String
                ) {
                    self.username = username
                    self.subject_digest = subject_digest
                }
            }
            public var path: Operations.users_sol_list_hyphen_attestations.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil
                ) {
                    self.per_page = per_page
                    self.before = before
                    self.after = after
                }
            }
            public var query: Operations.users_sol_list_hyphen_attestations.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_attestations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_attestations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_attestations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_list_hyphen_attestations.Input.Path,
                query: Operations.users_sol_list_hyphen_attestations.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_attestations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload`.
                        public struct attestationsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle`.
                            public var bundle: Components.Schemas.sigstore_hyphen_bundle_hyphen_0?
                            /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/repository_id`.
                            public var repository_id: Swift.Int?
                            /// Creates a new `attestationsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - bundle:
                            ///   - repository_id:
                            public init(
                                bundle: Components.Schemas.sigstore_hyphen_bundle_hyphen_0? = nil,
                                repository_id: Swift.Int? = nil
                            ) {
                                self.bundle = bundle
                                self.repository_id = repository_id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case bundle
                                case repository_id
                            }
                        }
                        /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content/json/attestations`.
                        public typealias attestationsPayload = [Operations.users_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload]
                        /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content/json/attestations`.
                        public var attestations: Operations.users_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - attestations:
                        public init(attestations: Operations.users_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayload? = nil) {
                            self.attestations = attestations
                        }
                        public enum CodingKeys: String, CodingKey {
                            case attestations
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/200/content/application\/json`.
                    case json(Operations.users_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.users_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_attestations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_list_hyphen_attestations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/attestations/{subject_digest}/get(users/list-attestations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_attestations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_attestations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/attestations/{subject_digest}/GET/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_attestations.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_list_hyphen_attestations.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/attestations/{subject_digest}/get(users/list-attestations)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.users_sol_list_hyphen_attestations.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.users_sol_list_hyphen_attestations.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/attestations/{subject_digest}/get(users/list-attestations)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_list_hyphen_attestations.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_list_hyphen_attestations.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/attestations/{subject_digest}/get(users/list-attestations)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List followers of a user
    ///
    /// Lists the people following the specified user.
    ///
    /// - Remark: HTTP `GET /users/{username}/followers`.
    /// - Remark: Generated from `#/paths//users/{username}/followers/get(users/list-followers-for-user)`.
    public enum users_sol_list_hyphen_followers_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/list-followers-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/followers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/followers/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/followers/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/followers/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/followers/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/followers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Path,
                query: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/followers/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/followers/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/followers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/followers/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/followers/get(users/list-followers-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_followers_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List the people a user follows
    ///
    /// Lists the people who the specified user follows.
    ///
    /// - Remark: HTTP `GET /users/{username}/following`.
    /// - Remark: Generated from `#/paths//users/{username}/following/get(users/list-following-for-user)`.
    public enum users_sol_list_hyphen_following_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/list-following-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/following/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/following/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/following/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/following/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/following/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/following/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Path,
                query: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/following/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/following/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/following/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/following/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/following/get(users/list-following-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_following_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a user follows another user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/following/{target_user}`.
    /// - Remark: Generated from `#/paths//users/{username}/following/{target_user}/get(users/check-following-for-user)`.
    public enum users_sol_check_hyphen_following_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/check-following-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/following/{target_user}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/following/{target_user}/GET/path/username`.
                public var username: Components.Parameters.username
                /// - Remark: Generated from `#/paths/users/{username}/following/{target_user}/GET/path/target_user`.
                public var target_user: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                ///   - target_user:
                public init(
                    username: Components.Parameters.username,
                    target_user: Swift.String
                ) {
                    self.username = username
                    self.target_user = target_user
                }
            }
            public var path: Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// if the user follows the target user
            ///
            /// - Remark: Generated from `#/paths//users/{username}/following/{target_user}/get(users/check-following-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// if the user does not follow the target user
            ///
            /// - Remark: Generated from `#/paths//users/{username}/following/{target_user}/get(users/check-following-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.users_sol_check_hyphen_following_hyphen_for_hyphen_user.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List GPG keys for a user
    ///
    /// Lists the GPG keys for a user. This information is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/gpg_keys`.
    /// - Remark: Generated from `#/paths//users/{username}/gpg_keys/get(users/list-gpg-keys-for-user)`.
    public enum users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/list-gpg-keys-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Path,
                query: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/gpg_keys/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.gpg_hyphen_key])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.gpg_hyphen_key] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/gpg_keys/get(users/list-gpg-keys-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_gpg_hyphen_keys_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get contextual information for a user
    ///
    /// Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
    ///
    ///   The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/hovercard`.
    /// - Remark: Generated from `#/paths//users/{username}/hovercard/get(users/get-context-for-user)`.
    public enum users_sol_get_hyphen_context_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/get-context-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/query/subject_type`.
                @frozen public enum subject_typePayload: String, Codable, Hashable, Sendable {
                    case organization = "organization"
                    case repository = "repository"
                    case issue = "issue"
                    case pull_request = "pull_request"
                }
                /// Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/query/subject_type`.
                public var subject_type: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Query.subject_typePayload?
                /// Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/query/subject_id`.
                public var subject_id: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - subject_type: Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
                ///   - subject_id: Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
                public init(
                    subject_type: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Query.subject_typePayload? = nil,
                    subject_id: Swift.String? = nil
                ) {
                    self.subject_type = subject_type
                    self.subject_id = subject_id
                }
            }
            public var query: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Path,
                query: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/hovercard/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.hovercard)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.hovercard {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/hovercard/get(users/get-context-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_get_hyphen_context_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/hovercard/get(users/get-context-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//users/{username}/hovercard/get(users/get-context-for-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public keys for a user
    ///
    /// Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/keys`.
    /// - Remark: Generated from `#/paths//users/{username}/keys/get(users/list-public-keys-for-user)`.
    public enum users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/list-public-keys-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/keys/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/keys/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/keys/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/keys/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Path,
                query: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/keys/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/keys/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/keys/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.key_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.key_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/keys/get(users/list-public-keys-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_public_hyphen_keys_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List social accounts for a user
    ///
    /// Lists social media accounts for a user. This endpoint is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/social_accounts`.
    /// - Remark: Generated from `#/paths//users/{username}/social_accounts/get(users/list-social-accounts-for-user)`.
    public enum users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/list-social-accounts-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Path,
                query: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/social_accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.social_hyphen_account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.social_hyphen_account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/social_accounts/get(users/list-social-accounts-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_social_hyphen_accounts_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List SSH signing keys for a user
    ///
    /// Lists the SSH signing keys for a user. This operation is accessible by anyone.
    ///
    /// - Remark: HTTP `GET /users/{username}/ssh_signing_keys`.
    /// - Remark: Generated from `#/paths//users/{username}/ssh_signing_keys/get(users/list-ssh-signing-keys-for-user)`.
    public enum users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user {
        public static let id: Swift.String = "users/list-ssh-signing-keys-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Path,
                query: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/ssh_signing_keys/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ssh_hyphen_signing_hyphen_key])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ssh_hyphen_signing_hyphen_key] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/ssh_signing_keys/get(users/list-ssh-signing-keys-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.users_sol_list_hyphen_ssh_hyphen_signing_hyphen_keys_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
