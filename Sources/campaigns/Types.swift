// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List campaigns for an organization
    ///
    /// Lists campaigns in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/campaigns`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/get(campaigns/list-org-campaigns)`.
    func campaigns_sol_list_hyphen_org_hyphen_campaigns(_ input: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input) async throws -> Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output
    /// Create a campaign for an organization
    ///
    /// Create a campaign for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// Fine-grained tokens must have the "Code scanning alerts" repository permissions (read) on all repositories included
    /// in the campaign.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/campaigns`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)`.
    func campaigns_sol_create_hyphen_campaign(_ input: Operations.campaigns_sol_create_hyphen_campaign.Input) async throws -> Operations.campaigns_sol_create_hyphen_campaign.Output
    /// Get a campaign for an organization
    ///
    /// Gets a campaign for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/get(campaigns/get-campaign-summary)`.
    func campaigns_sol_get_hyphen_campaign_hyphen_summary(_ input: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input) async throws -> Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output
    /// Update a campaign
    ///
    /// Updates a campaign in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)`.
    func campaigns_sol_update_hyphen_campaign(_ input: Operations.campaigns_sol_update_hyphen_campaign.Input) async throws -> Operations.campaigns_sol_update_hyphen_campaign.Output
    /// Delete a campaign for an organization
    ///
    /// Deletes a campaign in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/delete(campaigns/delete-campaign)`.
    func campaigns_sol_delete_hyphen_campaign(_ input: Operations.campaigns_sol_delete_hyphen_campaign.Input) async throws -> Operations.campaigns_sol_delete_hyphen_campaign.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List campaigns for an organization
    ///
    /// Lists campaigns in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/campaigns`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/get(campaigns/list-org-campaigns)`.
    public func campaigns_sol_list_hyphen_org_hyphen_campaigns(
        path: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Path,
        query: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Query = .init(),
        headers: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Headers = .init()
    ) async throws -> Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output {
        try await campaigns_sol_list_hyphen_org_hyphen_campaigns(Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a campaign for an organization
    ///
    /// Create a campaign for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// Fine-grained tokens must have the "Code scanning alerts" repository permissions (read) on all repositories included
    /// in the campaign.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/campaigns`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)`.
    public func campaigns_sol_create_hyphen_campaign(
        path: Operations.campaigns_sol_create_hyphen_campaign.Input.Path,
        headers: Operations.campaigns_sol_create_hyphen_campaign.Input.Headers = .init(),
        body: Operations.campaigns_sol_create_hyphen_campaign.Input.Body
    ) async throws -> Operations.campaigns_sol_create_hyphen_campaign.Output {
        try await campaigns_sol_create_hyphen_campaign(Operations.campaigns_sol_create_hyphen_campaign.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a campaign for an organization
    ///
    /// Gets a campaign for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/get(campaigns/get-campaign-summary)`.
    public func campaigns_sol_get_hyphen_campaign_hyphen_summary(
        path: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input.Path,
        headers: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input.Headers = .init()
    ) async throws -> Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output {
        try await campaigns_sol_get_hyphen_campaign_hyphen_summary(Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a campaign
    ///
    /// Updates a campaign in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)`.
    public func campaigns_sol_update_hyphen_campaign(
        path: Operations.campaigns_sol_update_hyphen_campaign.Input.Path,
        headers: Operations.campaigns_sol_update_hyphen_campaign.Input.Headers = .init(),
        body: Operations.campaigns_sol_update_hyphen_campaign.Input.Body
    ) async throws -> Operations.campaigns_sol_update_hyphen_campaign.Output {
        try await campaigns_sol_update_hyphen_campaign(Operations.campaigns_sol_update_hyphen_campaign.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a campaign for an organization
    ///
    /// Deletes a campaign in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/delete(campaigns/delete-campaign)`.
    public func campaigns_sol_delete_hyphen_campaign(
        path: Operations.campaigns_sol_delete_hyphen_campaign.Input.Path,
        headers: Operations.campaigns_sol_delete_hyphen_campaign.Input.Headers = .init()
    ) async throws -> Operations.campaigns_sol_delete_hyphen_campaign.Output {
        try await campaigns_sol_delete_hyphen_campaign(Operations.campaigns_sol_delete_hyphen_campaign.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Indicates whether a campaign is open or closed
        ///
        /// - Remark: Generated from `#/components/schemas/campaign-state`.
        @frozen public enum campaign_hyphen_state: String, Codable, Hashable, Sendable {
            case open = "open"
            case closed = "closed"
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// The campaign metadata and alert stats.
        ///
        /// - Remark: Generated from `#/components/schemas/campaign-summary`.
        public struct campaign_hyphen_summary: Codable, Hashable, Sendable {
            /// The number of the newly created campaign
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/number`.
            public var number: Swift.Int
            /// The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/created_at`.
            public var created_at: Foundation.Date
            /// The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/updated_at`.
            public var updated_at: Foundation.Date
            /// The campaign name
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/name`.
            public var name: Swift.String?
            /// The campaign description
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/description`.
            public var description: Swift.String
            /// The campaign managers
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/managers`.
            public var managers: [Components.Schemas.simple_hyphen_user]
            /// The campaign team managers
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/team_managers`.
            public var team_managers: [Components.Schemas.team]?
            /// The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/published_at`.
            public var published_at: Foundation.Date?
            /// The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/ends_at`.
            public var ends_at: Foundation.Date
            /// The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/campaign-summary/state`.
            public var state: Components.Schemas.campaign_hyphen_state
            /// The contact link of the campaign.
            ///
            /// - Remark: Generated from `#/components/schemas/campaign-summary/contact_link`.
            public var contact_link: Swift.String?
            /// - Remark: Generated from `#/components/schemas/campaign-summary/alert_stats`.
            public struct alert_statsPayload: Codable, Hashable, Sendable {
                /// The number of open alerts
                ///
                /// - Remark: Generated from `#/components/schemas/campaign-summary/alert_stats/open_count`.
                public var open_count: Swift.Int
                /// The number of closed alerts
                ///
                /// - Remark: Generated from `#/components/schemas/campaign-summary/alert_stats/closed_count`.
                public var closed_count: Swift.Int
                /// The number of in-progress alerts
                ///
                /// - Remark: Generated from `#/components/schemas/campaign-summary/alert_stats/in_progress_count`.
                public var in_progress_count: Swift.Int
                /// Creates a new `alert_statsPayload`.
                ///
                /// - Parameters:
                ///   - open_count: The number of open alerts
                ///   - closed_count: The number of closed alerts
                ///   - in_progress_count: The number of in-progress alerts
                public init(
                    open_count: Swift.Int,
                    closed_count: Swift.Int,
                    in_progress_count: Swift.Int
                ) {
                    self.open_count = open_count
                    self.closed_count = closed_count
                    self.in_progress_count = in_progress_count
                }
                public enum CodingKeys: String, CodingKey {
                    case open_count
                    case closed_count
                    case in_progress_count
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    open_count = try container.decode(
                        Swift.Int.self,
                        forKey: .open_count
                    )
                    closed_count = try container.decode(
                        Swift.Int.self,
                        forKey: .closed_count
                    )
                    in_progress_count = try container.decode(
                        Swift.Int.self,
                        forKey: .in_progress_count
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "open_count",
                        "closed_count",
                        "in_progress_count"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/campaign-summary/alert_stats`.
            public var alert_stats: Components.Schemas.campaign_hyphen_summary.alert_statsPayload?
            /// Creates a new `campaign_hyphen_summary`.
            ///
            /// - Parameters:
            ///   - number: The number of the newly created campaign
            ///   - created_at: The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - updated_at: The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - name: The campaign name
            ///   - description: The campaign description
            ///   - managers: The campaign managers
            ///   - team_managers: The campaign team managers
            ///   - published_at: The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - ends_at: The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - closed_at: The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
            ///   - state:
            ///   - contact_link: The contact link of the campaign.
            ///   - alert_stats:
            public init(
                number: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                name: Swift.String? = nil,
                description: Swift.String,
                managers: [Components.Schemas.simple_hyphen_user],
                team_managers: [Components.Schemas.team]? = nil,
                published_at: Foundation.Date? = nil,
                ends_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                state: Components.Schemas.campaign_hyphen_state,
                contact_link: Swift.String? = nil,
                alert_stats: Components.Schemas.campaign_hyphen_summary.alert_statsPayload? = nil
            ) {
                self.number = number
                self.created_at = created_at
                self.updated_at = updated_at
                self.name = name
                self.description = description
                self.managers = managers
                self.team_managers = team_managers
                self.published_at = published_at
                self.ends_at = ends_at
                self.closed_at = closed_at
                self.state = state
                self.contact_link = contact_link
                self.alert_stats = alert_stats
            }
            public enum CodingKeys: String, CodingKey {
                case number
                case created_at
                case updated_at
                case name
                case description
                case managers
                case team_managers
                case published_at
                case ends_at
                case closed_at
                case state
                case contact_link
                case alert_stats
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List campaigns for an organization
    ///
    /// Lists campaigns in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/campaigns`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/get(campaigns/list-org-campaigns)`.
    public enum campaigns_sol_list_hyphen_org_hyphen_campaigns {
        public static let id: Swift.String = "campaigns/list-org-campaigns"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// If specified, only campaigns with this state will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/query/state`.
                public var state: Components.Schemas.campaign_hyphen_state?
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case ends_at = "ends_at"
                    case published = "published"
                }
                /// The property by which to sort the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/query/sort`.
                public var sort: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Query.sortPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - direction: The direction to sort the results by.
                ///   - state: If specified, only campaigns with this state will be returned.
                ///   - sort: The property by which to sort the results.
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    direction: Components.Parameters.direction? = nil,
                    state: Components.Schemas.campaign_hyphen_state? = nil,
                    sort: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Query.sortPayload? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                    self.direction = direction
                    self.state = state
                    self.sort = sort
                }
            }
            public var query: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Path,
                query: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Query = .init(),
                headers: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.campaign_hyphen_summary])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.campaign_hyphen_summary] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output.Ok.Headers = .init(),
                    body: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/get(campaigns/list-org-campaigns)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.campaigns_sol_list_hyphen_org_hyphen_campaigns.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/get(campaigns/list-org-campaigns)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/get(campaigns/list-org-campaigns)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a campaign for an organization
    ///
    /// Create a campaign for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// Fine-grained tokens must have the "Code scanning alerts" repository permissions (read) on all repositories included
    /// in the campaign.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/campaigns`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)`.
    public enum campaigns_sol_create_hyphen_campaign {
        public static let id: Swift.String = "campaigns/create-campaign"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.campaigns_sol_create_hyphen_campaign.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_create_hyphen_campaign.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_create_hyphen_campaign.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.campaigns_sol_create_hyphen_campaign.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the campaign
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// A description for the campaign
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/description`.
                    public var description: Swift.String
                    /// The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/managers`.
                    public var managers: [Swift.String]?
                    /// The slugs of the teams to set as the campaign managers.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/team_managers`.
                    public var team_managers: [Swift.String]?
                    /// The end date and time of the campaign. The date must be in the future.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/ends_at`.
                    public var ends_at: Foundation.Date
                    /// The contact link of the campaign. Must be a URI.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/contact_link`.
                    public var contact_link: Swift.String?
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/code_scanning_alertsPayload`.
                    public struct code_scanning_alertsPayloadPayload: Codable, Hashable, Sendable {
                        /// The repository id
                        ///
                        /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/code_scanning_alertsPayload/repository_id`.
                        public var repository_id: Swift.Int
                        /// The alert numbers
                        ///
                        /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/code_scanning_alertsPayload/alert_numbers`.
                        public var alert_numbers: [Swift.Int]
                        /// Creates a new `code_scanning_alertsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - repository_id: The repository id
                        ///   - alert_numbers: The alert numbers
                        public init(
                            repository_id: Swift.Int,
                            alert_numbers: [Swift.Int]
                        ) {
                            self.repository_id = repository_id
                            self.alert_numbers = alert_numbers
                        }
                        public enum CodingKeys: String, CodingKey {
                            case repository_id
                            case alert_numbers
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            repository_id = try container.decode(
                                Swift.Int.self,
                                forKey: .repository_id
                            )
                            alert_numbers = try container.decode(
                                [Swift.Int].self,
                                forKey: .alert_numbers
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "repository_id",
                                "alert_numbers"
                            ])
                        }
                    }
                    /// The code scanning alerts to include in this campaign
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/code_scanning_alerts`.
                    public typealias code_scanning_alertsPayload = [Operations.campaigns_sol_create_hyphen_campaign.Input.Body.jsonPayload.code_scanning_alertsPayloadPayload]
                    /// The code scanning alerts to include in this campaign
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/code_scanning_alerts`.
                    public var code_scanning_alerts: Operations.campaigns_sol_create_hyphen_campaign.Input.Body.jsonPayload.code_scanning_alertsPayload
                    /// If true, will automatically generate issues for the campaign. The default is false.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/json/generate_issues`.
                    public var generate_issues: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the campaign
                    ///   - description: A description for the campaign
                    ///   - managers: The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
                    ///   - team_managers: The slugs of the teams to set as the campaign managers.
                    ///   - ends_at: The end date and time of the campaign. The date must be in the future.
                    ///   - contact_link: The contact link of the campaign. Must be a URI.
                    ///   - code_scanning_alerts: The code scanning alerts to include in this campaign
                    ///   - generate_issues: If true, will automatically generate issues for the campaign. The default is false.
                    public init(
                        name: Swift.String,
                        description: Swift.String,
                        managers: [Swift.String]? = nil,
                        team_managers: [Swift.String]? = nil,
                        ends_at: Foundation.Date,
                        contact_link: Swift.String? = nil,
                        code_scanning_alerts: Operations.campaigns_sol_create_hyphen_campaign.Input.Body.jsonPayload.code_scanning_alertsPayload,
                        generate_issues: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.managers = managers
                        self.team_managers = team_managers
                        self.ends_at = ends_at
                        self.contact_link = contact_link
                        self.code_scanning_alerts = code_scanning_alerts
                        self.generate_issues = generate_issues
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case managers
                        case team_managers
                        case ends_at
                        case contact_link
                        case code_scanning_alerts
                        case generate_issues
                    }
                    public init(from decoder: any Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)
                        name = try container.decode(
                            Swift.String.self,
                            forKey: .name
                        )
                        description = try container.decode(
                            Swift.String.self,
                            forKey: .description
                        )
                        managers = try container.decodeIfPresent(
                            [Swift.String].self,
                            forKey: .managers
                        )
                        team_managers = try container.decodeIfPresent(
                            [Swift.String].self,
                            forKey: .team_managers
                        )
                        ends_at = try container.decode(
                            Foundation.Date.self,
                            forKey: .ends_at
                        )
                        contact_link = try container.decodeIfPresent(
                            Swift.String.self,
                            forKey: .contact_link
                        )
                        code_scanning_alerts = try container.decode(
                            Operations.campaigns_sol_create_hyphen_campaign.Input.Body.jsonPayload.code_scanning_alertsPayload.self,
                            forKey: .code_scanning_alerts
                        )
                        generate_issues = try container.decodeIfPresent(
                            Swift.Bool.self,
                            forKey: .generate_issues
                        )
                        try decoder.ensureNoAdditionalProperties(knownKeys: [
                            "name",
                            "description",
                            "managers",
                            "team_managers",
                            "ends_at",
                            "contact_link",
                            "code_scanning_alerts",
                            "generate_issues"
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/requestBody/content/application\/json`.
                case json(Operations.campaigns_sol_create_hyphen_campaign.Input.Body.jsonPayload)
            }
            public var body: Operations.campaigns_sol_create_hyphen_campaign.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.campaigns_sol_create_hyphen_campaign.Input.Path,
                headers: Operations.campaigns_sol_create_hyphen_campaign.Input.Headers = .init(),
                body: Operations.campaigns_sol_create_hyphen_campaign.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.campaign_hyphen_summary)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.campaign_hyphen_summary {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_create_hyphen_campaign.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_create_hyphen_campaign.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.campaigns_sol_create_hyphen_campaign.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.campaigns_sol_create_hyphen_campaign.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_create_hyphen_campaign.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_create_hyphen_campaign.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.campaigns_sol_create_hyphen_campaign.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.campaigns_sol_create_hyphen_campaign.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_create_hyphen_campaign.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_create_hyphen_campaign.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable Entity
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.campaigns_sol_create_hyphen_campaign.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.campaigns_sol_create_hyphen_campaign.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// Creates a new `TooManyRequests`.
                public init() {}
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.campaigns_sol_create_hyphen_campaign.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.campaigns_sol_create_hyphen_campaign.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/post(campaigns/create-campaign)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a campaign for an organization
    ///
    /// Gets a campaign for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/get(campaigns/get-campaign-summary)`.
    public enum campaigns_sol_get_hyphen_campaign_hyphen_summary {
        public static let id: Swift.String = "campaigns/get-campaign-summary"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The campaign number.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/path/campaign_number`.
                public var campaign_number: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - campaign_number: The campaign number.
                public init(
                    org: Components.Parameters.org,
                    campaign_number: Swift.Int
                ) {
                    self.org = org
                    self.campaign_number = campaign_number
                }
            }
            public var path: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input.Path,
                headers: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.campaign_hyphen_summary)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.campaign_hyphen_summary {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/get(campaigns/get-campaign-summary)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/get(campaigns/get-campaign-summary)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/GET/responses/422/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable Entity
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/get(campaigns/get-campaign-summary)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.campaigns_sol_get_hyphen_campaign_hyphen_summary.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/get(campaigns/get-campaign-summary)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a campaign
    ///
    /// Updates a campaign in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)`.
    public enum campaigns_sol_update_hyphen_campaign {
        public static let id: Swift.String = "campaigns/update-campaign"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The campaign number.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/path/campaign_number`.
                public var campaign_number: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - campaign_number: The campaign number.
                public init(
                    org: Components.Parameters.org,
                    campaign_number: Swift.Int
                ) {
                    self.org = org
                    self.campaign_number = campaign_number
                }
            }
            public var path: Operations.campaigns_sol_update_hyphen_campaign.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_update_hyphen_campaign.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_update_hyphen_campaign.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.campaigns_sol_update_hyphen_campaign.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the campaign
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// A description for the campaign
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json/managers`.
                    public var managers: [Swift.String]?
                    /// The slugs of the teams to set as the campaign managers.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json/team_managers`.
                    public var team_managers: [Swift.String]?
                    /// The end date and time of the campaign, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json/ends_at`.
                    public var ends_at: Foundation.Date?
                    /// The contact link of the campaign. Must be a URI.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json/contact_link`.
                    public var contact_link: Swift.String?
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/json/state`.
                    public var state: Components.Schemas.campaign_hyphen_state?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the campaign
                    ///   - description: A description for the campaign
                    ///   - managers: The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
                    ///   - team_managers: The slugs of the teams to set as the campaign managers.
                    ///   - ends_at: The end date and time of the campaign, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
                    ///   - contact_link: The contact link of the campaign. Must be a URI.
                    ///   - state:
                    public init(
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        managers: [Swift.String]? = nil,
                        team_managers: [Swift.String]? = nil,
                        ends_at: Foundation.Date? = nil,
                        contact_link: Swift.String? = nil,
                        state: Components.Schemas.campaign_hyphen_state? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.managers = managers
                        self.team_managers = team_managers
                        self.ends_at = ends_at
                        self.contact_link = contact_link
                        self.state = state
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case managers
                        case team_managers
                        case ends_at
                        case contact_link
                        case state
                    }
                    public init(from decoder: any Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)
                        name = try container.decodeIfPresent(
                            Swift.String.self,
                            forKey: .name
                        )
                        description = try container.decodeIfPresent(
                            Swift.String.self,
                            forKey: .description
                        )
                        managers = try container.decodeIfPresent(
                            [Swift.String].self,
                            forKey: .managers
                        )
                        team_managers = try container.decodeIfPresent(
                            [Swift.String].self,
                            forKey: .team_managers
                        )
                        ends_at = try container.decodeIfPresent(
                            Foundation.Date.self,
                            forKey: .ends_at
                        )
                        contact_link = try container.decodeIfPresent(
                            Swift.String.self,
                            forKey: .contact_link
                        )
                        state = try container.decodeIfPresent(
                            Components.Schemas.campaign_hyphen_state.self,
                            forKey: .state
                        )
                        try decoder.ensureNoAdditionalProperties(knownKeys: [
                            "name",
                            "description",
                            "managers",
                            "team_managers",
                            "ends_at",
                            "contact_link",
                            "state"
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.campaigns_sol_update_hyphen_campaign.Input.Body.jsonPayload)
            }
            public var body: Operations.campaigns_sol_update_hyphen_campaign.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.campaigns_sol_update_hyphen_campaign.Input.Path,
                headers: Operations.campaigns_sol_update_hyphen_campaign.Input.Headers = .init(),
                body: Operations.campaigns_sol_update_hyphen_campaign.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.campaign_hyphen_summary)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.campaign_hyphen_summary {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_update_hyphen_campaign.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_update_hyphen_campaign.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.campaigns_sol_update_hyphen_campaign.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.campaigns_sol_update_hyphen_campaign.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_update_hyphen_campaign.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_update_hyphen_campaign.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.campaigns_sol_update_hyphen_campaign.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.campaigns_sol_update_hyphen_campaign.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.campaigns_sol_update_hyphen_campaign.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.campaigns_sol_update_hyphen_campaign.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable Entity
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.campaigns_sol_update_hyphen_campaign.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.campaigns_sol_update_hyphen_campaign.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/patch(campaigns/update-campaign)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a campaign for an organization
    ///
    /// Deletes a campaign in an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/campaigns/{campaign_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/delete(campaigns/delete-campaign)`.
    public enum campaigns_sol_delete_hyphen_campaign {
        public static let id: Swift.String = "campaigns/delete-campaign"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The campaign number.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/DELETE/path/campaign_number`.
                public var campaign_number: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - campaign_number: The campaign number.
                public init(
                    org: Components.Parameters.org,
                    campaign_number: Swift.Int
                ) {
                    self.org = org
                    self.campaign_number = campaign_number
                }
            }
            public var path: Operations.campaigns_sol_delete_hyphen_campaign.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/campaigns/{campaign_number}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_delete_hyphen_campaign.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.campaigns_sol_delete_hyphen_campaign.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.campaigns_sol_delete_hyphen_campaign.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.campaigns_sol_delete_hyphen_campaign.Input.Path,
                headers: Operations.campaigns_sol_delete_hyphen_campaign.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Deletion successful
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/delete(campaigns/delete-campaign)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.campaigns_sol_delete_hyphen_campaign.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.campaigns_sol_delete_hyphen_campaign.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/delete(campaigns/delete-campaign)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/campaigns/{campaign_number}/delete(campaigns/delete-campaign)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
