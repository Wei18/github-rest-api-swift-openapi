// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get all gitignore templates
    ///
    /// List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
    ///
    /// - Remark: HTTP `GET /gitignore/templates`.
    /// - Remark: Generated from `#/paths//gitignore/templates/get(gitignore/get-all-templates)`.
    func gitignoreGetAllTemplates(_ input: Operations.GitignoreGetAllTemplates.Input) async throws -> Operations.GitignoreGetAllTemplates.Output
    /// Get a gitignore template
    ///
    /// Get the content of a gitignore template.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
    ///
    /// - Remark: HTTP `GET /gitignore/templates/{name}`.
    /// - Remark: Generated from `#/paths//gitignore/templates/{name}/get(gitignore/get-template)`.
    func gitignoreGetTemplate(_ input: Operations.GitignoreGetTemplate.Input) async throws -> Operations.GitignoreGetTemplate.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get all gitignore templates
    ///
    /// List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
    ///
    /// - Remark: HTTP `GET /gitignore/templates`.
    /// - Remark: Generated from `#/paths//gitignore/templates/get(gitignore/get-all-templates)`.
    public func gitignoreGetAllTemplates(headers: Operations.GitignoreGetAllTemplates.Input.Headers = .init()) async throws -> Operations.GitignoreGetAllTemplates.Output {
        try await gitignoreGetAllTemplates(Operations.GitignoreGetAllTemplates.Input(headers: headers))
    }
    /// Get a gitignore template
    ///
    /// Get the content of a gitignore template.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
    ///
    /// - Remark: HTTP `GET /gitignore/templates/{name}`.
    /// - Remark: Generated from `#/paths//gitignore/templates/{name}/get(gitignore/get-template)`.
    public func gitignoreGetTemplate(
        path: Operations.GitignoreGetTemplate.Input.Path,
        headers: Operations.GitignoreGetTemplate.Input.Headers = .init()
    ) async throws -> Operations.GitignoreGetTemplate.Output {
        try await gitignoreGetTemplate(Operations.GitignoreGetTemplate.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Gitignore Template
        ///
        /// - Remark: Generated from `#/components/schemas/gitignore-template`.
        public struct GitignoreTemplate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/gitignore-template/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/gitignore-template/source`.
            public var source: Swift.String
            /// Creates a new `GitignoreTemplate`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - source:
            public init(
                name: Swift.String,
                source: Swift.String
            ) {
                self.name = name
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case source
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct NotModified: Sendable, Hashable {
            /// Creates a new `NotModified`.
            public init() {}
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get all gitignore templates
    ///
    /// List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
    ///
    /// - Remark: HTTP `GET /gitignore/templates`.
    /// - Remark: Generated from `#/paths//gitignore/templates/get(gitignore/get-all-templates)`.
    public enum GitignoreGetAllTemplates {
        public static let id: Swift.String = "gitignore/get-all-templates"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gitignore/templates/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GitignoreGetAllTemplates.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GitignoreGetAllTemplates.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GitignoreGetAllTemplates.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GitignoreGetAllTemplates.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gitignore/templates/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gitignore/templates/GET/responses/200/content/application\/json`.
                    case json([Swift.String])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Swift.String] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GitignoreGetAllTemplates.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GitignoreGetAllTemplates.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gitignore/templates/get(gitignore/get-all-templates)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GitignoreGetAllTemplates.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GitignoreGetAllTemplates.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gitignore/templates/get(gitignore/get-all-templates)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gitignore/templates/get(gitignore/get-all-templates)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a gitignore template
    ///
    /// Get the content of a gitignore template.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
    ///
    /// - Remark: HTTP `GET /gitignore/templates/{name}`.
    /// - Remark: Generated from `#/paths//gitignore/templates/{name}/get(gitignore/get-template)`.
    public enum GitignoreGetTemplate {
        public static let id: Swift.String = "gitignore/get-template"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gitignore/templates/{name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gitignore/templates/{name}/GET/path/name`.
                public var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var path: Operations.GitignoreGetTemplate.Input.Path
            /// - Remark: Generated from `#/paths/gitignore/templates/{name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GitignoreGetTemplate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GitignoreGetTemplate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GitignoreGetTemplate.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GitignoreGetTemplate.Input.Path,
                headers: Operations.GitignoreGetTemplate.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gitignore/templates/{name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gitignore/templates/{name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GitignoreTemplate)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.GitignoreTemplate {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GitignoreGetTemplate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GitignoreGetTemplate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gitignore/templates/{name}/get(gitignore/get-template)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GitignoreGetTemplate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GitignoreGetTemplate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gitignore/templates/{name}/get(gitignore/get-template)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gitignore/templates/{name}/get(gitignore/get-template)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
