// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List public events
    ///
    /// We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(activity/list-public-events)`.
    func activity_sol_list_hyphen_public_hyphen_events(_ input: Operations.activity_sol_list_hyphen_public_hyphen_events.Input) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_events.Output
    /// Get feeds
    ///
    /// Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.
    ///
    /// *   **Timeline**: The GitHub global public timeline
    /// *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
    /// *   **Current user public**: The public timeline for the authenticated user
    /// *   **Current user**: The private timeline for the authenticated user
    /// *   **Current user actor**: The private timeline for activity created by the authenticated user
    /// *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
    /// *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
    ///
    /// By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.
    ///
    /// - Remark: HTTP `GET /feeds`.
    /// - Remark: Generated from `#/paths//feeds/get(activity/get-feeds)`.
    func activity_sol_get_hyphen_feeds(_ input: Operations.activity_sol_get_hyphen_feeds.Input) async throws -> Operations.activity_sol_get_hyphen_feeds.Output
    /// List public events for a network of repositories
    ///
    ///
    ///
    /// - Remark: HTTP `GET /networks/{owner}/{repo}/events`.
    /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)`.
    func activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network(_ input: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Output
    /// List notifications for the authenticated user
    ///
    /// List all notifications for the current user, sorted by most recently updated.
    ///
    /// - Remark: HTTP `GET /notifications`.
    /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)`.
    func activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Mark notifications as read
    ///
    /// Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
    ///
    /// - Remark: HTTP `PUT /notifications`.
    /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)`.
    func activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read(_ input: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input) async throws -> Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output
    /// Get a thread
    ///
    /// Gets information about a notification thread.
    ///
    /// - Remark: HTTP `GET /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/get(activity/get-thread)`.
    func activity_sol_get_hyphen_thread(_ input: Operations.activity_sol_get_hyphen_thread.Input) async throws -> Operations.activity_sol_get_hyphen_thread.Output
    /// Mark a thread as read
    ///
    /// Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
    ///
    /// - Remark: HTTP `PATCH /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/patch(activity/mark-thread-as-read)`.
    func activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read(_ input: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input) async throws -> Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Output
    /// Mark a thread as done
    ///
    /// Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
    ///
    /// - Remark: HTTP `DELETE /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/delete(activity/mark-thread-as-done)`.
    func activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done(_ input: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Input) async throws -> Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Output
    /// Get a thread subscription for the authenticated user
    ///
    /// This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
    ///
    /// Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
    ///
    /// - Remark: HTTP `GET /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/get(activity/get-thread-subscription-for-authenticated-user)`.
    func activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Set a thread subscription
    ///
    /// If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
    ///
    /// You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
    ///
    /// Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
    ///
    /// - Remark: HTTP `PUT /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/put(activity/set-thread-subscription)`.
    func activity_sol_set_hyphen_thread_hyphen_subscription(_ input: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input) async throws -> Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Output
    /// Delete a thread subscription
    ///
    /// Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
    ///
    /// - Remark: HTTP `DELETE /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/delete(activity/delete-thread-subscription)`.
    func activity_sol_delete_hyphen_thread_hyphen_subscription(_ input: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input) async throws -> Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Output
    /// List public organization events
    ///
    ///
    ///
    /// - Remark: HTTP `GET /orgs/{org}/events`.
    /// - Remark: Generated from `#/paths//orgs/{org}/events/get(activity/list-public-org-events)`.
    func activity_sol_list_hyphen_public_hyphen_org_hyphen_events(_ input: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Output
    /// List repository events
    ///
    /// **Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/events/get(activity/list-repo-events)`.
    func activity_sol_list_hyphen_repo_hyphen_events(_ input: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input) async throws -> Operations.activity_sol_list_hyphen_repo_hyphen_events.Output
    /// List repository notifications for the authenticated user
    ///
    /// Lists all notifications for the current user in the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/notifications`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/get(activity/list-repo-notifications-for-authenticated-user)`.
    func activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Mark repository notifications as read
    ///
    /// Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/notifications`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/put(activity/mark-repo-notifications-as-read)`.
    func activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read(_ input: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input) async throws -> Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output
    /// List stargazers
    ///
    /// Lists the people that have starred the repository.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stargazers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stargazers/get(activity/list-stargazers-for-repo)`.
    func activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo(_ input: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input) async throws -> Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output
    /// List watchers
    ///
    /// Lists the people watching the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/subscribers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscribers/get(activity/list-watchers-for-repo)`.
    func activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo(_ input: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input) async throws -> Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output
    /// Get a repository subscription
    ///
    /// Gets information about whether the authenticated user is subscribed to the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/get(activity/get-repo-subscription)`.
    func activity_sol_get_hyphen_repo_hyphen_subscription(_ input: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input) async throws -> Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output
    /// Set a repository subscription
    ///
    /// If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/put(activity/set-repo-subscription)`.
    func activity_sol_set_hyphen_repo_hyphen_subscription(_ input: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input) async throws -> Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Output
    /// Delete a repository subscription
    ///
    /// This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/delete(activity/delete-repo-subscription)`.
    func activity_sol_delete_hyphen_repo_hyphen_subscription(_ input: Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Input) async throws -> Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Output
    /// List repositories starred by the authenticated user
    ///
    /// Lists repositories the authenticated user has starred.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /user/starred`.
    /// - Remark: Generated from `#/paths//user/starred/get(activity/list-repos-starred-by-authenticated-user)`.
    func activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output
    /// Check if a repository is starred by the authenticated user
    ///
    /// Whether the authenticated user has starred the repository.
    ///
    /// - Remark: HTTP `GET /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)`.
    func activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output
    /// Star a repository for the authenticated user
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)`.
    func activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Unstar a repository for the authenticated user
    ///
    /// Unstar a repository that the authenticated user has previously starred.
    ///
    /// - Remark: HTTP `DELETE /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)`.
    func activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List repositories watched by the authenticated user
    ///
    /// Lists repositories the authenticated user is watching.
    ///
    /// - Remark: HTTP `GET /user/subscriptions`.
    /// - Remark: Generated from `#/paths//user/subscriptions/get(activity/list-watched-repos-for-authenticated-user)`.
    func activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List events for the authenticated user
    ///
    /// If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
    ///
    /// - Remark: HTTP `GET /users/{username}/events`.
    /// - Remark: Generated from `#/paths//users/{username}/events/get(activity/list-events-for-authenticated-user)`.
    func activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List organization events for the authenticated user
    ///
    /// This is the user's organization dashboard. You must be authenticated as the user to view this.
    ///
    /// - Remark: HTTP `GET /users/{username}/events/orgs/{org}`.
    /// - Remark: Generated from `#/paths//users/{username}/events/orgs/{org}/get(activity/list-org-events-for-authenticated-user)`.
    func activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List public events for a user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/events/public`.
    /// - Remark: Generated from `#/paths//users/{username}/events/public/get(activity/list-public-events-for-user)`.
    func activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user(_ input: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output
    /// List events received by the authenticated user
    ///
    /// These are events that you've received by watching repositories and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
    ///
    /// - Remark: HTTP `GET /users/{username}/received_events`.
    /// - Remark: Generated from `#/paths//users/{username}/received_events/get(activity/list-received-events-for-user)`.
    func activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user(_ input: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Output
    /// List public events received by a user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/received_events/public`.
    /// - Remark: Generated from `#/paths//users/{username}/received_events/public/get(activity/list-received-public-events-for-user)`.
    func activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user(_ input: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output
    /// List repositories starred by a user
    ///
    /// Lists repositories a user has starred.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /users/{username}/starred`.
    /// - Remark: Generated from `#/paths//users/{username}/starred/get(activity/list-repos-starred-by-user)`.
    func activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user(_ input: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output
    /// List repositories watched by a user
    ///
    /// Lists repositories a user is watching.
    ///
    /// - Remark: HTTP `GET /users/{username}/subscriptions`.
    /// - Remark: Generated from `#/paths//users/{username}/subscriptions/get(activity/list-repos-watched-by-user)`.
    func activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user(_ input: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input) async throws -> Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List public events
    ///
    /// We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(activity/list-public-events)`.
    public func activity_sol_list_hyphen_public_hyphen_events(
        query: Operations.activity_sol_list_hyphen_public_hyphen_events.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_public_hyphen_events.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_events.Output {
        try await activity_sol_list_hyphen_public_hyphen_events(Operations.activity_sol_list_hyphen_public_hyphen_events.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get feeds
    ///
    /// Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.
    ///
    /// *   **Timeline**: The GitHub global public timeline
    /// *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
    /// *   **Current user public**: The public timeline for the authenticated user
    /// *   **Current user**: The private timeline for the authenticated user
    /// *   **Current user actor**: The private timeline for activity created by the authenticated user
    /// *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
    /// *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
    ///
    /// By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.
    ///
    /// - Remark: HTTP `GET /feeds`.
    /// - Remark: Generated from `#/paths//feeds/get(activity/get-feeds)`.
    public func activity_sol_get_hyphen_feeds(headers: Operations.activity_sol_get_hyphen_feeds.Input.Headers = .init()) async throws -> Operations.activity_sol_get_hyphen_feeds.Output {
        try await activity_sol_get_hyphen_feeds(Operations.activity_sol_get_hyphen_feeds.Input(headers: headers))
    }
    /// List public events for a network of repositories
    ///
    ///
    ///
    /// - Remark: HTTP `GET /networks/{owner}/{repo}/events`.
    /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)`.
    public func activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network(
        path: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Path,
        query: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Output {
        try await activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network(Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List notifications for the authenticated user
    ///
    /// List all notifications for the current user, sorted by most recently updated.
    ///
    /// - Remark: HTTP `GET /notifications`.
    /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)`.
    public func activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Mark notifications as read
    ///
    /// Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
    ///
    /// - Remark: HTTP `PUT /notifications`.
    /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)`.
    public func activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read(
        headers: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input.Headers = .init(),
        body: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input.Body? = nil
    ) async throws -> Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output {
        try await activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read(Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a thread
    ///
    /// Gets information about a notification thread.
    ///
    /// - Remark: HTTP `GET /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/get(activity/get-thread)`.
    public func activity_sol_get_hyphen_thread(
        path: Operations.activity_sol_get_hyphen_thread.Input.Path,
        headers: Operations.activity_sol_get_hyphen_thread.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_get_hyphen_thread.Output {
        try await activity_sol_get_hyphen_thread(Operations.activity_sol_get_hyphen_thread.Input(
            path: path,
            headers: headers
        ))
    }
    /// Mark a thread as read
    ///
    /// Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
    ///
    /// - Remark: HTTP `PATCH /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/patch(activity/mark-thread-as-read)`.
    public func activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read(
        path: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input.Path,
        headers: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Output {
        try await activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read(Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input(
            path: path,
            headers: headers
        ))
    }
    /// Mark a thread as done
    ///
    /// Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
    ///
    /// - Remark: HTTP `DELETE /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/delete(activity/mark-thread-as-done)`.
    public func activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done(path: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Input.Path) async throws -> Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Output {
        try await activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done(Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Input(path: path))
    }
    /// Get a thread subscription for the authenticated user
    ///
    /// This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
    ///
    /// Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
    ///
    /// - Remark: HTTP `GET /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/get(activity/get-thread-subscription-for-authenticated-user)`.
    public func activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set a thread subscription
    ///
    /// If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
    ///
    /// You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
    ///
    /// Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
    ///
    /// - Remark: HTTP `PUT /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/put(activity/set-thread-subscription)`.
    public func activity_sol_set_hyphen_thread_hyphen_subscription(
        path: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Path,
        headers: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Headers = .init(),
        body: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Body? = nil
    ) async throws -> Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Output {
        try await activity_sol_set_hyphen_thread_hyphen_subscription(Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a thread subscription
    ///
    /// Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
    ///
    /// - Remark: HTTP `DELETE /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/delete(activity/delete-thread-subscription)`.
    public func activity_sol_delete_hyphen_thread_hyphen_subscription(
        path: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input.Path,
        headers: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Output {
        try await activity_sol_delete_hyphen_thread_hyphen_subscription(Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input(
            path: path,
            headers: headers
        ))
    }
    /// List public organization events
    ///
    ///
    ///
    /// - Remark: HTTP `GET /orgs/{org}/events`.
    /// - Remark: Generated from `#/paths//orgs/{org}/events/get(activity/list-public-org-events)`.
    public func activity_sol_list_hyphen_public_hyphen_org_hyphen_events(
        path: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Path,
        query: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Output {
        try await activity_sol_list_hyphen_public_hyphen_org_hyphen_events(Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository events
    ///
    /// **Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/events/get(activity/list-repo-events)`.
    public func activity_sol_list_hyphen_repo_hyphen_events(
        path: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Path,
        query: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_repo_hyphen_events.Output {
        try await activity_sol_list_hyphen_repo_hyphen_events(Operations.activity_sol_list_hyphen_repo_hyphen_events.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository notifications for the authenticated user
    ///
    /// Lists all notifications for the current user in the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/notifications`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/get(activity/list-repo-notifications-for-authenticated-user)`.
    public func activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Mark repository notifications as read
    ///
    /// Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/notifications`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/put(activity/mark-repo-notifications-as-read)`.
    public func activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read(
        path: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Path,
        headers: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Headers = .init(),
        body: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Body? = nil
    ) async throws -> Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output {
        try await activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read(Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List stargazers
    ///
    /// Lists the people that have starred the repository.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stargazers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stargazers/get(activity/list-stargazers-for-repo)`.
    public func activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo(
        path: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output {
        try await activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo(Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List watchers
    ///
    /// Lists the people watching the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/subscribers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscribers/get(activity/list-watchers-for-repo)`.
    public func activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo(
        path: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output {
        try await activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo(Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a repository subscription
    ///
    /// Gets information about whether the authenticated user is subscribed to the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/get(activity/get-repo-subscription)`.
    public func activity_sol_get_hyphen_repo_hyphen_subscription(
        path: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input.Path,
        headers: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output {
        try await activity_sol_get_hyphen_repo_hyphen_subscription(Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set a repository subscription
    ///
    /// If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/put(activity/set-repo-subscription)`.
    public func activity_sol_set_hyphen_repo_hyphen_subscription(
        path: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Path,
        headers: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Headers = .init(),
        body: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Body? = nil
    ) async throws -> Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Output {
        try await activity_sol_set_hyphen_repo_hyphen_subscription(Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository subscription
    ///
    /// This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/delete(activity/delete-repo-subscription)`.
    public func activity_sol_delete_hyphen_repo_hyphen_subscription(path: Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Input.Path) async throws -> Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Output {
        try await activity_sol_delete_hyphen_repo_hyphen_subscription(Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Input(path: path))
    }
    /// List repositories starred by the authenticated user
    ///
    /// Lists repositories the authenticated user has starred.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /user/starred`.
    /// - Remark: Generated from `#/paths//user/starred/get(activity/list-repos-starred-by-authenticated-user)`.
    public func activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user(
        query: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user(Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Check if a repository is starred by the authenticated user
    ///
    /// Whether the authenticated user has starred the repository.
    ///
    /// - Remark: HTTP `GET /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)`.
    public func activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user(
        path: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user(Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Star a repository for the authenticated user
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)`.
    public func activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unstar a repository for the authenticated user
    ///
    /// Unstar a repository that the authenticated user has previously starred.
    ///
    /// - Remark: HTTP `DELETE /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)`.
    public func activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repositories watched by the authenticated user
    ///
    /// Lists repositories the authenticated user is watching.
    ///
    /// - Remark: HTTP `GET /user/subscriptions`.
    /// - Remark: Generated from `#/paths//user/subscriptions/get(activity/list-watched-repos-for-authenticated-user)`.
    public func activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// List events for the authenticated user
    ///
    /// If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
    ///
    /// - Remark: HTTP `GET /users/{username}/events`.
    /// - Remark: Generated from `#/paths//users/{username}/events/get(activity/list-events-for-authenticated-user)`.
    public func activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List organization events for the authenticated user
    ///
    /// This is the user's organization dashboard. You must be authenticated as the user to view this.
    ///
    /// - Remark: HTTP `GET /users/{username}/events/orgs/{org}`.
    /// - Remark: Generated from `#/paths//users/{username}/events/orgs/{org}/get(activity/list-org-events-for-authenticated-user)`.
    public func activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user(Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List public events for a user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/events/public`.
    /// - Remark: Generated from `#/paths//users/{username}/events/public/get(activity/list-public-events-for-user)`.
    public func activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user(
        path: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output {
        try await activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user(Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List events received by the authenticated user
    ///
    /// These are events that you've received by watching repositories and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
    ///
    /// - Remark: HTTP `GET /users/{username}/received_events`.
    /// - Remark: Generated from `#/paths//users/{username}/received_events/get(activity/list-received-events-for-user)`.
    public func activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user(
        path: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Output {
        try await activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user(Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List public events received by a user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/received_events/public`.
    /// - Remark: Generated from `#/paths//users/{username}/received_events/public/get(activity/list-received-public-events-for-user)`.
    public func activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user(
        path: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output {
        try await activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user(Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repositories starred by a user
    ///
    /// Lists repositories a user has starred.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /users/{username}/starred`.
    /// - Remark: Generated from `#/paths//users/{username}/starred/get(activity/list-repos-starred-by-user)`.
    public func activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user(
        path: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output {
        try await activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user(Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repositories watched by a user
    ///
    /// Lists repositories a user is watching.
    ///
    /// - Remark: HTTP `GET /users/{username}/subscriptions`.
    /// - Remark: Generated from `#/paths//users/{username}/subscriptions/get(activity/list-repos-watched-by-user)`.
    public func activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user(
        path: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Path,
        query: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Query = .init(),
        headers: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output {
        try await activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user(Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// Actor
        ///
        /// - Remark: Generated from `#/components/schemas/actor`.
        public struct actor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/actor/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/actor/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/actor/display_login`.
            public var display_login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/actor/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/actor/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/actor/avatar_url`.
            public var avatar_url: Swift.String
            /// Creates a new `actor`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - login:
            ///   - display_login:
            ///   - gravatar_id:
            ///   - url:
            ///   - avatar_url:
            public init(
                id: Swift.Int,
                login: Swift.String,
                display_login: Swift.String? = nil,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                avatar_url: Swift.String
            ) {
                self.id = id
                self.login = login
                self.display_login = display_login
                self.gravatar_id = gravatar_id
                self.url = url
                self.avatar_url = avatar_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case login
                case display_login
                case gravatar_id
                case url
                case avatar_url
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        public struct nullable_hyphen_milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            public var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            public var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            public var state: Components.Schemas.nullable_hyphen_milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            public var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            public var due_on: Foundation.Date?
            /// Creates a new `nullable_hyphen_milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.nullable_hyphen_milestone.statePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                due_on: Foundation.Date? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct nullable_hyphen_integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `nullable_hyphen_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_id:
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_id = client_id
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_id
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen public enum author_hyphen_association: String, Codable, Hashable, Sendable {
            case COLLABORATOR = "COLLABORATOR"
            case CONTRIBUTOR = "CONTRIBUTOR"
            case FIRST_TIMER = "FIRST_TIMER"
            case FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
            case MANNEQUIN = "MANNEQUIN"
            case MEMBER = "MEMBER"
            case NONE = "NONE"
            case OWNER = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        public struct reaction_hyphen_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            public var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            public var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            public var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            public var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            public var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            public var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            public var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            public var rocket: Swift.Int
            /// Creates a new `reaction_hyphen_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            public init(
                url: Swift.String,
                total_count: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        ///
        /// - Remark: Generated from `#/components/schemas/issue`.
        public struct issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue/node_id`.
            public var node_id: Swift.String
            /// URL for the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/repository_url`.
            public var repository_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/html_url`.
            public var html_url: Swift.String
            /// Number uniquely identifying the issue within its repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/number`.
            public var number: Swift.Int
            /// State of the issue; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state`.
            public var state: Swift.String
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            @frozen public enum state_reasonPayload: String, Codable, Hashable, Sendable {
                case completed = "completed"
                case reopened = "reopened"
                case not_planned = "not_planned"
            }
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            public var state_reason: Components.Schemas.issue.state_reasonPayload?
            /// Title of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/title`.
            public var title: Swift.String
            /// Contents of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue/labelsPayload`.
            @frozen public enum labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/id`.
                    public var id: Swift.Int64?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/color`.
                    public var color: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/default`.
                    public var _default: Swift.Bool?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - url:
                    ///   - name:
                    ///   - description:
                    ///   - color:
                    ///   - _default:
                    public init(
                        id: Swift.Int64? = nil,
                        node_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        color: Swift.String? = nil,
                        _default: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self.url = url
                        self.name = name
                        self.description = description
                        self.color = color
                        self._default = _default
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case url
                        case name
                        case description
                        case color
                        case _default = "default"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                case case2(Components.Schemas.issue.labelsPayloadPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            public typealias labelsPayload = [Components.Schemas.issue.labelsPayloadPayload]
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            public var labels: Components.Schemas.issue.labelsPayload
            /// - Remark: Generated from `#/components/schemas/issue/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue/assignees`.
            public var assignees: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/issue/milestone`.
            public var milestone: Components.Schemas.nullable_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/issue/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/issue/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/comments`.
            public var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            public struct pull_requestPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/merged_at`.
                public var merged_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/diff_url`.
                public var diff_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/patch_url`.
                public var patch_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/url`.
                public var url: Swift.String?
                /// Creates a new `pull_requestPayload`.
                ///
                /// - Parameters:
                ///   - merged_at:
                ///   - diff_url:
                ///   - html_url:
                ///   - patch_url:
                ///   - url:
                public init(
                    merged_at: Foundation.Date? = nil,
                    diff_url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    patch_url: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.merged_at = merged_at
                    self.diff_url = diff_url
                    self.html_url = html_url
                    self.patch_url = patch_url
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case merged_at
                    case diff_url
                    case html_url
                    case patch_url
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            public var pull_request: Components.Schemas.issue.pull_requestPayload?
            /// - Remark: Generated from `#/components/schemas/issue/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/issue/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/draft`.
            public var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/issue/closed_by`.
            public var closed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/timeline_url`.
            public var timeline_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/repository`.
            public var repository: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/issue/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/issue/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/issue/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `issue`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url: URL for the issue
            ///   - repository_url:
            ///   - labels_url:
            ///   - comments_url:
            ///   - events_url:
            ///   - html_url:
            ///   - number: Number uniquely identifying the issue within its repository
            ///   - state: State of the issue; either 'open' or 'closed'
            ///   - state_reason: The reason for the current state
            ///   - title: Title of the issue
            ///   - body: Contents of the issue
            ///   - user:
            ///   - labels: Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///   - assignee:
            ///   - assignees:
            ///   - milestone:
            ///   - locked:
            ///   - active_lock_reason:
            ///   - comments:
            ///   - pull_request:
            ///   - closed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - draft:
            ///   - closed_by:
            ///   - body_html:
            ///   - body_text:
            ///   - timeline_url:
            ///   - repository:
            ///   - performed_via_github_app:
            ///   - author_association:
            ///   - reactions:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                repository_url: Swift.String,
                labels_url: Swift.String,
                comments_url: Swift.String,
                events_url: Swift.String,
                html_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                state_reason: Components.Schemas.issue.state_reasonPayload? = nil,
                title: Swift.String,
                body: Swift.String? = nil,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                labels: Components.Schemas.issue.labelsPayload,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                assignees: [Components.Schemas.simple_hyphen_user]? = nil,
                milestone: Components.Schemas.nullable_hyphen_milestone? = nil,
                locked: Swift.Bool,
                active_lock_reason: Swift.String? = nil,
                comments: Swift.Int,
                pull_request: Components.Schemas.issue.pull_requestPayload? = nil,
                closed_at: Foundation.Date? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                draft: Swift.Bool? = nil,
                closed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                timeline_url: Swift.String? = nil,
                repository: Components.Schemas.repository? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                author_association: Components.Schemas.author_hyphen_association,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repository_url = repository_url
                self.labels_url = labels_url
                self.comments_url = comments_url
                self.events_url = events_url
                self.html_url = html_url
                self.number = number
                self.state = state
                self.state_reason = state_reason
                self.title = title
                self.body = body
                self.user = user
                self.labels = labels
                self.assignee = assignee
                self.assignees = assignees
                self.milestone = milestone
                self.locked = locked
                self.active_lock_reason = active_lock_reason
                self.comments = comments
                self.pull_request = pull_request
                self.closed_at = closed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.draft = draft
                self.closed_by = closed_by
                self.body_html = body_html
                self.body_text = body_text
                self.timeline_url = timeline_url
                self.repository = repository
                self.performed_via_github_app = performed_via_github_app
                self.author_association = author_association
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case repository_url
                case labels_url
                case comments_url
                case events_url
                case html_url
                case number
                case state
                case state_reason
                case title
                case body
                case user
                case labels
                case assignee
                case assignees
                case milestone
                case locked
                case active_lock_reason
                case comments
                case pull_request
                case closed_at
                case created_at
                case updated_at
                case draft
                case closed_by
                case body_html
                case body_text
                case timeline_url
                case repository
                case performed_via_github_app
                case author_association
                case reactions
            }
        }
        /// Comments provide a way for people to collaborate on an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/issue-comment`.
        public struct issue_hyphen_comment: Codable, Hashable, Sendable {
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue-comment/node_id`.
            public var node_id: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/url`.
            public var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/issue-comment/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/issue-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `issue_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the issue comment
            ///   - node_id:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - body_text:
            ///   - body_html:
            ///   - html_url:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - issue_url:
            ///   - author_association:
            ///   - performed_via_github_app:
            ///   - reactions:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                body_text: Swift.String? = nil,
                body_html: Swift.String? = nil,
                html_url: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                issue_url: Swift.String,
                author_association: Components.Schemas.author_hyphen_association,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.body = body
                self.body_text = body_text
                self.body_html = body_html
                self.html_url = html_url
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.issue_url = issue_url
                self.author_association = author_association
                self.performed_via_github_app = performed_via_github_app
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case body
                case body_text
                case body_html
                case html_url
                case user
                case created_at
                case updated_at
                case issue_url
                case author_association
                case performed_via_github_app
                case reactions
            }
        }
        /// Event
        ///
        /// - Remark: Generated from `#/components/schemas/event`.
        public struct event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/event/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/event/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/event/actor`.
            public var actor: Components.Schemas.actor
            /// - Remark: Generated from `#/components/schemas/event/repo`.
            public struct repoPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/event/repo/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/event/repo/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/event/repo/url`.
                public var url: Swift.String
                /// Creates a new `repoPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - name:
                ///   - url:
                public init(
                    id: Swift.Int,
                    name: Swift.String,
                    url: Swift.String
                ) {
                    self.id = id
                    self.name = name
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case name
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/event/repo`.
            public var repo: Components.Schemas.event.repoPayload
            /// - Remark: Generated from `#/components/schemas/event/org`.
            public var org: Components.Schemas.actor?
            /// - Remark: Generated from `#/components/schemas/event/payload`.
            public struct payloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/event/payload/action`.
                public var action: Swift.String?
                /// - Remark: Generated from `#/components/schemas/event/payload/issue`.
                public var issue: Components.Schemas.issue?
                /// - Remark: Generated from `#/components/schemas/event/payload/comment`.
                public var comment: Components.Schemas.issue_hyphen_comment?
                /// - Remark: Generated from `#/components/schemas/event/payload/pagesPayload`.
                public struct pagesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/event/payload/pagesPayload/page_name`.
                    public var page_name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/event/payload/pagesPayload/title`.
                    public var title: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/event/payload/pagesPayload/summary`.
                    public var summary: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/event/payload/pagesPayload/action`.
                    public var action: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/event/payload/pagesPayload/sha`.
                    public var sha: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/event/payload/pagesPayload/html_url`.
                    public var html_url: Swift.String?
                    /// Creates a new `pagesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - page_name:
                    ///   - title:
                    ///   - summary:
                    ///   - action:
                    ///   - sha:
                    ///   - html_url:
                    public init(
                        page_name: Swift.String? = nil,
                        title: Swift.String? = nil,
                        summary: Swift.String? = nil,
                        action: Swift.String? = nil,
                        sha: Swift.String? = nil,
                        html_url: Swift.String? = nil
                    ) {
                        self.page_name = page_name
                        self.title = title
                        self.summary = summary
                        self.action = action
                        self.sha = sha
                        self.html_url = html_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case page_name
                        case title
                        case summary
                        case action
                        case sha
                        case html_url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/event/payload/pages`.
                public typealias pagesPayload = [Components.Schemas.event.payloadPayload.pagesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/event/payload/pages`.
                public var pages: Components.Schemas.event.payloadPayload.pagesPayload?
                /// Creates a new `payloadPayload`.
                ///
                /// - Parameters:
                ///   - action:
                ///   - issue:
                ///   - comment:
                ///   - pages:
                public init(
                    action: Swift.String? = nil,
                    issue: Components.Schemas.issue? = nil,
                    comment: Components.Schemas.issue_hyphen_comment? = nil,
                    pages: Components.Schemas.event.payloadPayload.pagesPayload? = nil
                ) {
                    self.action = action
                    self.issue = issue
                    self.comment = comment
                    self.pages = pages
                }
                public enum CodingKeys: String, CodingKey {
                    case action
                    case issue
                    case comment
                    case pages
                }
            }
            /// - Remark: Generated from `#/components/schemas/event/payload`.
            public var payload: Components.Schemas.event.payloadPayload
            /// - Remark: Generated from `#/components/schemas/event/public`.
            public var _public: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/event/created_at`.
            public var created_at: Foundation.Date?
            /// Creates a new `event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - _type:
            ///   - actor:
            ///   - repo:
            ///   - org:
            ///   - payload:
            ///   - _public:
            ///   - created_at:
            public init(
                id: Swift.String,
                _type: Swift.String? = nil,
                actor: Components.Schemas.actor,
                repo: Components.Schemas.event.repoPayload,
                org: Components.Schemas.actor? = nil,
                payload: Components.Schemas.event.payloadPayload,
                _public: Swift.Bool,
                created_at: Foundation.Date? = nil
            ) {
                self.id = id
                self._type = _type
                self.actor = actor
                self.repo = repo
                self.org = org
                self.payload = payload
                self._public = _public
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case actor
                case repo
                case org
                case payload
                case _public = "public"
                case created_at
            }
        }
        /// Hypermedia Link with Type
        ///
        /// - Remark: Generated from `#/components/schemas/link-with-type`.
        public struct link_hyphen_with_hyphen_type: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/link-with-type/href`.
            public var href: Swift.String
            /// - Remark: Generated from `#/components/schemas/link-with-type/type`.
            public var _type: Swift.String
            /// Creates a new `link_hyphen_with_hyphen_type`.
            ///
            /// - Parameters:
            ///   - href:
            ///   - _type:
            public init(
                href: Swift.String,
                _type: Swift.String
            ) {
                self.href = href
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case href
                case _type = "type"
            }
        }
        /// Feed
        ///
        /// - Remark: Generated from `#/components/schemas/feed`.
        public struct feed: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/feed/timeline_url`.
            public var timeline_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/feed/user_url`.
            public var user_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/feed/current_user_public_url`.
            public var current_user_public_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/feed/current_user_url`.
            public var current_user_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/feed/current_user_actor_url`.
            public var current_user_actor_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/feed/current_user_organization_url`.
            public var current_user_organization_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/feed/current_user_organization_urls`.
            public var current_user_organization_urls: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/feed/security_advisories_url`.
            public var security_advisories_url: Swift.String?
            /// A feed of discussions for a given repository.
            ///
            /// - Remark: Generated from `#/components/schemas/feed/repository_discussions_url`.
            public var repository_discussions_url: Swift.String?
            /// A feed of discussions for a given repository and category.
            ///
            /// - Remark: Generated from `#/components/schemas/feed/repository_discussions_category_url`.
            public var repository_discussions_category_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/feed/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/feed/_links/timeline`.
                public var timeline: Components.Schemas.link_hyphen_with_hyphen_type
                /// - Remark: Generated from `#/components/schemas/feed/_links/user`.
                public var user: Components.Schemas.link_hyphen_with_hyphen_type
                /// - Remark: Generated from `#/components/schemas/feed/_links/security_advisories`.
                public var security_advisories: Components.Schemas.link_hyphen_with_hyphen_type?
                /// - Remark: Generated from `#/components/schemas/feed/_links/current_user`.
                public var current_user: Components.Schemas.link_hyphen_with_hyphen_type?
                /// - Remark: Generated from `#/components/schemas/feed/_links/current_user_public`.
                public var current_user_public: Components.Schemas.link_hyphen_with_hyphen_type?
                /// - Remark: Generated from `#/components/schemas/feed/_links/current_user_actor`.
                public var current_user_actor: Components.Schemas.link_hyphen_with_hyphen_type?
                /// - Remark: Generated from `#/components/schemas/feed/_links/current_user_organization`.
                public var current_user_organization: Components.Schemas.link_hyphen_with_hyphen_type?
                /// - Remark: Generated from `#/components/schemas/feed/_links/current_user_organizations`.
                public var current_user_organizations: [Components.Schemas.link_hyphen_with_hyphen_type]?
                /// - Remark: Generated from `#/components/schemas/feed/_links/repository_discussions`.
                public var repository_discussions: Components.Schemas.link_hyphen_with_hyphen_type?
                /// - Remark: Generated from `#/components/schemas/feed/_links/repository_discussions_category`.
                public var repository_discussions_category: Components.Schemas.link_hyphen_with_hyphen_type?
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - timeline:
                ///   - user:
                ///   - security_advisories:
                ///   - current_user:
                ///   - current_user_public:
                ///   - current_user_actor:
                ///   - current_user_organization:
                ///   - current_user_organizations:
                ///   - repository_discussions:
                ///   - repository_discussions_category:
                public init(
                    timeline: Components.Schemas.link_hyphen_with_hyphen_type,
                    user: Components.Schemas.link_hyphen_with_hyphen_type,
                    security_advisories: Components.Schemas.link_hyphen_with_hyphen_type? = nil,
                    current_user: Components.Schemas.link_hyphen_with_hyphen_type? = nil,
                    current_user_public: Components.Schemas.link_hyphen_with_hyphen_type? = nil,
                    current_user_actor: Components.Schemas.link_hyphen_with_hyphen_type? = nil,
                    current_user_organization: Components.Schemas.link_hyphen_with_hyphen_type? = nil,
                    current_user_organizations: [Components.Schemas.link_hyphen_with_hyphen_type]? = nil,
                    repository_discussions: Components.Schemas.link_hyphen_with_hyphen_type? = nil,
                    repository_discussions_category: Components.Schemas.link_hyphen_with_hyphen_type? = nil
                ) {
                    self.timeline = timeline
                    self.user = user
                    self.security_advisories = security_advisories
                    self.current_user = current_user
                    self.current_user_public = current_user_public
                    self.current_user_actor = current_user_actor
                    self.current_user_organization = current_user_organization
                    self.current_user_organizations = current_user_organizations
                    self.repository_discussions = repository_discussions
                    self.repository_discussions_category = repository_discussions_category
                }
                public enum CodingKeys: String, CodingKey {
                    case timeline
                    case user
                    case security_advisories
                    case current_user
                    case current_user_public
                    case current_user_actor
                    case current_user_organization
                    case current_user_organizations
                    case repository_discussions
                    case repository_discussions_category
                }
            }
            /// - Remark: Generated from `#/components/schemas/feed/_links`.
            public var _links: Components.Schemas.feed._linksPayload
            /// Creates a new `feed`.
            ///
            /// - Parameters:
            ///   - timeline_url:
            ///   - user_url:
            ///   - current_user_public_url:
            ///   - current_user_url:
            ///   - current_user_actor_url:
            ///   - current_user_organization_url:
            ///   - current_user_organization_urls:
            ///   - security_advisories_url:
            ///   - repository_discussions_url: A feed of discussions for a given repository.
            ///   - repository_discussions_category_url: A feed of discussions for a given repository and category.
            ///   - _links:
            public init(
                timeline_url: Swift.String,
                user_url: Swift.String,
                current_user_public_url: Swift.String? = nil,
                current_user_url: Swift.String? = nil,
                current_user_actor_url: Swift.String? = nil,
                current_user_organization_url: Swift.String? = nil,
                current_user_organization_urls: [Swift.String]? = nil,
                security_advisories_url: Swift.String? = nil,
                repository_discussions_url: Swift.String? = nil,
                repository_discussions_category_url: Swift.String? = nil,
                _links: Components.Schemas.feed._linksPayload
            ) {
                self.timeline_url = timeline_url
                self.user_url = user_url
                self.current_user_public_url = current_user_public_url
                self.current_user_url = current_user_url
                self.current_user_actor_url = current_user_actor_url
                self.current_user_organization_url = current_user_organization_url
                self.current_user_organization_urls = current_user_organization_urls
                self.security_advisories_url = security_advisories_url
                self.repository_discussions_url = repository_discussions_url
                self.repository_discussions_category_url = repository_discussions_category_url
                self._links = _links
            }
            public enum CodingKeys: String, CodingKey {
                case timeline_url
                case user_url
                case current_user_public_url
                case current_user_url
                case current_user_actor_url
                case current_user_organization_url
                case current_user_organization_urls
                case security_advisories_url
                case repository_discussions_url
                case repository_discussions_category_url
                case _links
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public struct secret_scanning_non_provider_patternsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload?
                /// Creates a new `secret_scanning_non_provider_patternsPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public var secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            ///   - secret_scanning_non_provider_patterns:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil,
                secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
                self.secret_scanning_non_provider_patterns = secret_scanning_non_provider_patterns
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
                case secret_scanning_non_provider_patterns
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// Thread
        ///
        /// - Remark: Generated from `#/components/schemas/thread`.
        public struct thread: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/thread/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/thread/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/thread/subject`.
            public struct subjectPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/thread/subject/title`.
                public var title: Swift.String
                /// - Remark: Generated from `#/components/schemas/thread/subject/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/thread/subject/latest_comment_url`.
                public var latest_comment_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/thread/subject/type`.
                public var _type: Swift.String
                /// Creates a new `subjectPayload`.
                ///
                /// - Parameters:
                ///   - title:
                ///   - url:
                ///   - latest_comment_url:
                ///   - _type:
                public init(
                    title: Swift.String,
                    url: Swift.String,
                    latest_comment_url: Swift.String,
                    _type: Swift.String
                ) {
                    self.title = title
                    self.url = url
                    self.latest_comment_url = latest_comment_url
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case title
                    case url
                    case latest_comment_url
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/thread/subject`.
            public var subject: Components.Schemas.thread.subjectPayload
            /// - Remark: Generated from `#/components/schemas/thread/reason`.
            public var reason: Swift.String
            /// - Remark: Generated from `#/components/schemas/thread/unread`.
            public var unread: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/thread/updated_at`.
            public var updated_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/thread/last_read_at`.
            public var last_read_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/thread/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/thread/subscription_url`.
            public var subscription_url: Swift.String
            /// Creates a new `thread`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - repository:
            ///   - subject:
            ///   - reason:
            ///   - unread:
            ///   - updated_at:
            ///   - last_read_at:
            ///   - url:
            ///   - subscription_url:
            public init(
                id: Swift.String,
                repository: Components.Schemas.minimal_hyphen_repository,
                subject: Components.Schemas.thread.subjectPayload,
                reason: Swift.String,
                unread: Swift.Bool,
                updated_at: Swift.String,
                last_read_at: Swift.String? = nil,
                url: Swift.String,
                subscription_url: Swift.String
            ) {
                self.id = id
                self.repository = repository
                self.subject = subject
                self.reason = reason
                self.unread = unread
                self.updated_at = updated_at
                self.last_read_at = last_read_at
                self.url = url
                self.subscription_url = subscription_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case repository
                case subject
                case reason
                case unread
                case updated_at
                case last_read_at
                case url
                case subscription_url
            }
        }
        /// Thread Subscription
        ///
        /// - Remark: Generated from `#/components/schemas/thread-subscription`.
        public struct thread_hyphen_subscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/thread-subscription/subscribed`.
            public var subscribed: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/thread-subscription/ignored`.
            public var ignored: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/thread-subscription/reason`.
            public var reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/thread-subscription/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/thread-subscription/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/thread-subscription/thread_url`.
            public var thread_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/thread-subscription/repository_url`.
            public var repository_url: Swift.String?
            /// Creates a new `thread_hyphen_subscription`.
            ///
            /// - Parameters:
            ///   - subscribed:
            ///   - ignored:
            ///   - reason:
            ///   - created_at:
            ///   - url:
            ///   - thread_url:
            ///   - repository_url:
            public init(
                subscribed: Swift.Bool,
                ignored: Swift.Bool,
                reason: Swift.String? = nil,
                created_at: Foundation.Date? = nil,
                url: Swift.String,
                thread_url: Swift.String? = nil,
                repository_url: Swift.String? = nil
            ) {
                self.subscribed = subscribed
                self.ignored = ignored
                self.reason = reason
                self.created_at = created_at
                self.url = url
                self.thread_url = thread_url
                self.repository_url = repository_url
            }
            public enum CodingKeys: String, CodingKey {
                case subscribed
                case ignored
                case reason
                case created_at
                case url
                case thread_url
                case repository_url
            }
        }
        /// Stargazer
        ///
        /// - Remark: Generated from `#/components/schemas/stargazer`.
        public struct stargazer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/stargazer/starred_at`.
            public var starred_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/stargazer/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// Creates a new `stargazer`.
            ///
            /// - Parameters:
            ///   - starred_at:
            ///   - user:
            public init(
                starred_at: Foundation.Date,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
            ) {
                self.starred_at = starred_at
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case starred_at
                case user
            }
        }
        /// Repository invitations let you manage who you collaborate with.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-subscription`.
        public struct repository_hyphen_subscription: Codable, Hashable, Sendable {
            /// Determines if notifications should be received from this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-subscription/subscribed`.
            public var subscribed: Swift.Bool
            /// Determines if all notifications should be blocked from this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-subscription/ignored`.
            public var ignored: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository-subscription/reason`.
            public var reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository-subscription/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repository-subscription/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository-subscription/repository_url`.
            public var repository_url: Swift.String
            /// Creates a new `repository_hyphen_subscription`.
            ///
            /// - Parameters:
            ///   - subscribed: Determines if notifications should be received from this repository.
            ///   - ignored: Determines if all notifications should be blocked from this repository.
            ///   - reason:
            ///   - created_at:
            ///   - url:
            ///   - repository_url:
            public init(
                subscribed: Swift.Bool,
                ignored: Swift.Bool,
                reason: Swift.String? = nil,
                created_at: Foundation.Date,
                url: Swift.String,
                repository_url: Swift.String
            ) {
                self.subscribed = subscribed
                self.ignored = ignored
                self.reason = reason
                self.created_at = created_at
                self.url = url
                self.repository_url = repository_url
            }
            public enum CodingKeys: String, CodingKey {
                case subscribed
                case ignored
                case reason
                case created_at
                case url
                case repository_url
            }
        }
        /// Starred Repository
        ///
        /// - Remark: Generated from `#/components/schemas/starred-repository`.
        public struct starred_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/starred-repository/starred_at`.
            public var starred_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/starred-repository/repo`.
            public var repo: Components.Schemas.repository
            /// Creates a new `starred_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - starred_at:
            ///   - repo:
            public init(
                starred_at: Foundation.Date,
                repo: Components.Schemas.repository
            ) {
                self.starred_at = starred_at
                self.repo = repo
            }
            public enum CodingKeys: String, CodingKey {
                case starred_at
                case repo
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        public typealias since = Foundation.Date
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// If `true`, show notifications marked as read.
        ///
        /// - Remark: Generated from `#/components/parameters/all`.
        public typealias all = Swift.Bool
        /// If `true`, only shows notifications in which the user is directly participating or mentioned.
        ///
        /// - Remark: Generated from `#/components/parameters/participating`.
        public typealias participating = Swift.Bool
        /// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before`.
        public typealias before = Foundation.Date
        /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
        ///
        /// - Remark: Generated from `#/components/parameters/thread-id`.
        public typealias thread_hyphen_id = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
        ///
        /// - Remark: Generated from `#/components/parameters/sort-starred`.
        @frozen public enum sort_hyphen_starred: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
        public struct moved_permanently: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/moved_permanently/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/moved_permanently/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.moved_permanently.Body
            /// Creates a new `moved_permanently`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.moved_permanently.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List public events
    ///
    /// We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
    ///
    /// - Remark: HTTP `GET /events`.
    /// - Remark: Generated from `#/paths//events/get(activity/list-public-events)`.
    public enum activity_sol_list_hyphen_public_hyphen_events {
        public static let id: Swift.String = "activity/list-public-events"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_public_hyphen_events.Input.Query
            /// - Remark: Generated from `#/paths/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_events.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_events.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_public_hyphen_events.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.activity_sol_list_hyphen_public_hyphen_events.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_public_hyphen_events.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_public_hyphen_events.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_public_hyphen_events.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//events/get(activity/list-public-events)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_public_hyphen_events.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_public_hyphen_events.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//events/get(activity/list-public-events)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//events/get(activity/list-public-events)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//events/get(activity/list-public-events)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get feeds
    ///
    /// Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.
    ///
    /// *   **Timeline**: The GitHub global public timeline
    /// *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
    /// *   **Current user public**: The public timeline for the authenticated user
    /// *   **Current user**: The private timeline for the authenticated user
    /// *   **Current user actor**: The private timeline for activity created by the authenticated user
    /// *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
    /// *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
    ///
    /// By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.
    ///
    /// - Remark: HTTP `GET /feeds`.
    /// - Remark: Generated from `#/paths//feeds/get(activity/get-feeds)`.
    public enum activity_sol_get_hyphen_feeds {
        public static let id: Swift.String = "activity/get-feeds"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/feeds/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_feeds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_feeds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_get_hyphen_feeds.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.activity_sol_get_hyphen_feeds.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/feeds/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/feeds/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.feed)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.feed {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_get_hyphen_feeds.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_get_hyphen_feeds.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//feeds/get(activity/get-feeds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_get_hyphen_feeds.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_get_hyphen_feeds.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public events for a network of repositories
    ///
    ///
    ///
    /// - Remark: HTTP `GET /networks/{owner}/{repo}/events`.
    /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)`.
    public enum activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network {
        public static let id: Swift.String = "activity/list-public-events-for-repo-network"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Path
            /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Query
            /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Path,
                query: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/networks/{owner}/{repo}/events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_repo_hyphen_network.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//networks/{owner}/{repo}/events/get(activity/list-public-events-for-repo-network)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List notifications for the authenticated user
    ///
    /// List all notifications for the current user, sorted by most recently updated.
    ///
    /// - Remark: HTTP `GET /notifications`.
    /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)`.
    public enum activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/list-notifications-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If `true`, show notifications marked as read.
                ///
                /// - Remark: Generated from `#/paths/notifications/GET/query/all`.
                public var all: Components.Parameters.all?
                /// If `true`, only shows notifications in which the user is directly participating or mentioned.
                ///
                /// - Remark: Generated from `#/paths/notifications/GET/query/participating`.
                public var participating: Components.Parameters.participating?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/notifications/GET/query/since`.
                public var since: Components.Parameters.since?
                /// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/notifications/GET/query/before`.
                public var before: Components.Parameters.before?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/notifications/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 50). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/notifications/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: If `true`, show notifications marked as read.
                ///   - participating: If `true`, only shows notifications in which the user is directly participating or mentioned.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - before: Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 50). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    all: Components.Parameters.all? = nil,
                    participating: Components.Parameters.participating? = nil,
                    since: Components.Parameters.since? = nil,
                    before: Components.Parameters.before? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.all = all
                    self.participating = participating
                    self.since = since
                    self.before = before
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/notifications/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/notifications/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/notifications/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/notifications/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/notifications/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.thread])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.thread] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//notifications/get(activity/list-notifications-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Mark notifications as read
    ///
    /// Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
    ///
    /// - Remark: HTTP `PUT /notifications`.
    /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)`.
    public enum activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read {
        public static let id: Swift.String = "activity/mark-notifications-as-read"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input.Headers
            /// - Remark: Generated from `#/paths/notifications/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/notifications/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/notifications/PUT/requestBody/json/last_read_at`.
                    public var last_read_at: Foundation.Date?
                    /// Whether the notification has been read.
                    ///
                    /// - Remark: Generated from `#/paths/notifications/PUT/requestBody/json/read`.
                    public var read: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - last_read_at: Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
                    ///   - read: Whether the notification has been read.
                    public init(
                        last_read_at: Foundation.Date? = nil,
                        read: Swift.Bool? = nil
                    ) {
                        self.last_read_at = last_read_at
                        self.read = read
                    }
                    public enum CodingKeys: String, CodingKey {
                        case last_read_at
                        case read
                    }
                }
                /// - Remark: Generated from `#/paths/notifications/PUT/requestBody/content/application\/json`.
                case json(Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input.Body.jsonPayload)
            }
            public var body: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input.Headers = .init(),
                body: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/notifications/PUT/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/notifications/PUT/responses/202/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/notifications/PUT/responses/202/content/json/message`.
                        public var message: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        public init(message: Swift.String? = nil) {
                            self.message = message
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                        }
                    }
                    /// - Remark: Generated from `#/paths/notifications/PUT/responses/202/content/application\/json`.
                    case json(Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            public struct ResetContent: Sendable, Hashable {
                /// Creates a new `ResetContent`.
                public init() {}
            }
            /// Reset Content
            ///
            /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)/responses/205`.
            ///
            /// HTTP response code: `205 resetContent`.
            case resetContent(Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.ResetContent)
            /// The associated value of the enum case if `self` is `.resetContent`.
            ///
            /// - Throws: An error if `self` is not `.resetContent`.
            /// - SeeAlso: `.resetContent`.
            public var resetContent: Operations.activity_sol_mark_hyphen_notifications_hyphen_as_hyphen_read.Output.ResetContent {
                get throws {
                    switch self {
                    case let .resetContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "resetContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//notifications/put(activity/mark-notifications-as-read)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a thread
    ///
    /// Gets information about a notification thread.
    ///
    /// - Remark: HTTP `GET /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/get(activity/get-thread)`.
    public enum activity_sol_get_hyphen_thread {
        public static let id: Swift.String = "activity/get-thread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                ///
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/GET/path/thread_id`.
                public var thread_id: Components.Parameters.thread_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                public init(thread_id: Components.Parameters.thread_hyphen_id) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.activity_sol_get_hyphen_thread.Input.Path
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_thread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_thread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_get_hyphen_thread.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_get_hyphen_thread.Input.Path,
                headers: Operations.activity_sol_get_hyphen_thread.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.thread)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.thread {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_get_hyphen_thread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_get_hyphen_thread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/get(activity/get-thread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_get_hyphen_thread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_get_hyphen_thread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/get(activity/get-thread)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/get(activity/get-thread)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/get(activity/get-thread)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Mark a thread as read
    ///
    /// Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
    ///
    /// - Remark: HTTP `PATCH /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/patch(activity/mark-thread-as-read)`.
    public enum activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read {
        public static let id: Swift.String = "activity/mark-thread-as-read"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                ///
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/PATCH/path/thread_id`.
                public var thread_id: Components.Parameters.thread_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                public init(thread_id: Components.Parameters.thread_hyphen_id) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input.Path
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input.Path,
                headers: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct ResetContent: Sendable, Hashable {
                /// Creates a new `ResetContent`.
                public init() {}
            }
            /// Reset Content
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/patch(activity/mark-thread-as-read)/responses/205`.
            ///
            /// HTTP response code: `205 resetContent`.
            case resetContent(Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Output.ResetContent)
            /// The associated value of the enum case if `self` is `.resetContent`.
            ///
            /// - Throws: An error if `self` is not `.resetContent`.
            /// - SeeAlso: `.resetContent`.
            public var resetContent: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_read.Output.ResetContent {
                get throws {
                    switch self {
                    case let .resetContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "resetContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/patch(activity/mark-thread-as-read)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/patch(activity/mark-thread-as-read)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Mark a thread as done
    ///
    /// Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
    ///
    /// - Remark: HTTP `DELETE /notifications/threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/delete(activity/mark-thread-as-done)`.
    public enum activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done {
        public static let id: Swift.String = "activity/mark-thread-as-done"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                ///
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/DELETE/path/thread_id`.
                public var thread_id: Components.Parameters.thread_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                public init(thread_id: Components.Parameters.thread_hyphen_id) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No content
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/delete(activity/mark-thread-as-done)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.activity_sol_mark_hyphen_thread_hyphen_as_hyphen_done.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get a thread subscription for the authenticated user
    ///
    /// This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
    ///
    /// Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
    ///
    /// - Remark: HTTP `GET /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/get(activity/get-thread-subscription-for-authenticated-user)`.
    public enum activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/get-thread-subscription-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                ///
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/GET/path/thread_id`.
                public var thread_id: Components.Parameters.thread_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                public init(thread_id: Components.Parameters.thread_hyphen_id) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.thread_hyphen_subscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.thread_hyphen_subscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/get(activity/get-thread-subscription-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_get_hyphen_thread_hyphen_subscription_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/get(activity/get-thread-subscription-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/get(activity/get-thread-subscription-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/get(activity/get-thread-subscription-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set a thread subscription
    ///
    /// If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
    ///
    /// You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
    ///
    /// Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
    ///
    /// - Remark: HTTP `PUT /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/put(activity/set-thread-subscription)`.
    public enum activity_sol_set_hyphen_thread_hyphen_subscription {
        public static let id: Swift.String = "activity/set-thread-subscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                ///
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/path/thread_id`.
                public var thread_id: Components.Parameters.thread_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                public init(thread_id: Components.Parameters.thread_hyphen_id) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Path
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_set_hyphen_thread_hyphen_subscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_set_hyphen_thread_hyphen_subscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Headers
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Whether to block all notifications from a thread.
                    ///
                    /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/requestBody/json/ignored`.
                    public var ignored: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ignored: Whether to block all notifications from a thread.
                    public init(ignored: Swift.Bool? = nil) {
                        self.ignored = ignored
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ignored
                    }
                }
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/requestBody/content/application\/json`.
                case json(Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Body.jsonPayload)
            }
            public var body: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Path,
                headers: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Headers = .init(),
                body: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.thread_hyphen_subscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.thread_hyphen_subscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/put(activity/set-thread-subscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_set_hyphen_thread_hyphen_subscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/put(activity/set-thread-subscription)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/put(activity/set-thread-subscription)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/put(activity/set-thread-subscription)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a thread subscription
    ///
    /// Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
    ///
    /// - Remark: HTTP `DELETE /notifications/threads/{thread_id}/subscription`.
    /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/delete(activity/delete-thread-subscription)`.
    public enum activity_sol_delete_hyphen_thread_hyphen_subscription {
        public static let id: Swift.String = "activity/delete-thread-subscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                ///
                /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/DELETE/path/thread_id`.
                public var thread_id: Components.Parameters.thread_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
                public init(thread_id: Components.Parameters.thread_hyphen_id) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input.Path
            /// - Remark: Generated from `#/paths/notifications/threads/{thread_id}/subscription/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input.Path,
                headers: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/delete(activity/delete-thread-subscription)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.activity_sol_delete_hyphen_thread_hyphen_subscription.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/delete(activity/delete-thread-subscription)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/delete(activity/delete-thread-subscription)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//notifications/threads/{thread_id}/subscription/delete(activity/delete-thread-subscription)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public organization events
    ///
    ///
    ///
    /// - Remark: HTTP `GET /orgs/{org}/events`.
    /// - Remark: Generated from `#/paths//orgs/{org}/events/get(activity/list-public-org-events)`.
    public enum activity_sol_list_hyphen_public_hyphen_org_hyphen_events {
        public static let id: Swift.String = "activity/list-public-org-events"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Path,
                query: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/events/get(activity/list-public-org-events)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_public_hyphen_org_hyphen_events.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository events
    ///
    /// **Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/events/get(activity/list-repo-events)`.
    public enum activity_sol_list_hyphen_repo_hyphen_events {
        public static let id: Swift.String = "activity/list-repo-events"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repo_hyphen_events.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repo_hyphen_events.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Path,
                query: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_repo_hyphen_events.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_repo_hyphen_events.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_repo_hyphen_events.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/events/get(activity/list-repo-events)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_repo_hyphen_events.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_repo_hyphen_events.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository notifications for the authenticated user
    ///
    /// Lists all notifications for the current user in the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/notifications`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/get(activity/list-repo-notifications-for-authenticated-user)`.
    public enum activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/list-repo-notifications-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If `true`, show notifications marked as read.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/query/all`.
                public var all: Components.Parameters.all?
                /// If `true`, only shows notifications in which the user is directly participating or mentioned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/query/participating`.
                public var participating: Components.Parameters.participating?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/query/since`.
                public var since: Components.Parameters.since?
                /// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/query/before`.
                public var before: Components.Parameters.before?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - all: If `true`, show notifications marked as read.
                ///   - participating: If `true`, only shows notifications in which the user is directly participating or mentioned.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - before: Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    all: Components.Parameters.all? = nil,
                    participating: Components.Parameters.participating? = nil,
                    since: Components.Parameters.since? = nil,
                    before: Components.Parameters.before? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.all = all
                    self.participating = participating
                    self.since = since
                    self.before = before
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.thread])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.thread] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/get(activity/list-repo-notifications-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_repo_hyphen_notifications_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Mark repository notifications as read
    ///
    /// Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/notifications`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/put(activity/mark-repo-notifications-as-read)`.
    public enum activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read {
        public static let id: Swift.String = "activity/mark-repo-notifications-as-read"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/requestBody/json/last_read_at`.
                    public var last_read_at: Foundation.Date?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - last_read_at: Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
                    public init(last_read_at: Foundation.Date? = nil) {
                        self.last_read_at = last_read_at
                    }
                    public enum CodingKeys: String, CodingKey {
                        case last_read_at
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/requestBody/content/application\/json`.
                case json(Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Body.jsonPayload)
            }
            public var body: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Path,
                headers: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Headers = .init(),
                body: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/responses/202/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/responses/202/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/responses/202/content/json/url`.
                        public var url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - url:
                        public init(
                            message: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/notifications/PUT/responses/202/content/application\/json`.
                    case json(Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/put(activity/mark-repo-notifications-as-read)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            public struct ResetContent: Sendable, Hashable {
                /// Creates a new `ResetContent`.
                public init() {}
            }
            /// Reset Content
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/notifications/put(activity/mark-repo-notifications-as-read)/responses/205`.
            ///
            /// HTTP response code: `205 resetContent`.
            case resetContent(Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.ResetContent)
            /// The associated value of the enum case if `self` is `.resetContent`.
            ///
            /// - Throws: An error if `self` is not `.resetContent`.
            /// - SeeAlso: `.resetContent`.
            public var resetContent: Operations.activity_sol_mark_hyphen_repo_hyphen_notifications_hyphen_as_hyphen_read.Output.ResetContent {
                get throws {
                    switch self {
                    case let .resetContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "resetContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List stargazers
    ///
    /// Lists the people that have starred the repository.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stargazers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stargazers/get(activity/list-stargazers-for-repo)`.
    public enum activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "activity/list-stargazers-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/responses/200/content/json/value1`.
                        public var value1: [Components.Schemas.simple_hyphen_user]?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/responses/200/content/json/value2`.
                        public var value2: [Components.Schemas.stargazer]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: [Components.Schemas.simple_hyphen_user]? = nil,
                            value2: [Components.Schemas.stargazer]? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    value1,
                                    value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                value1,
                                value2
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stargazers/GET/responses/200/content/application\/json`.
                    case json(Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stargazers/get(activity/list-stargazers-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_stargazers_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stargazers/get(activity/list-stargazers-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List watchers
    ///
    /// Lists the people watching the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/subscribers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscribers/get(activity/list-watchers-for-repo)`.
    public enum activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "activity/list-watchers-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscribers/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscribers/get(activity/list-watchers-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_watchers_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository subscription
    ///
    /// Gets information about whether the authenticated user is subscribed to the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/get(activity/get-repo-subscription)`.
    public enum activity_sol_get_hyphen_repo_hyphen_subscription {
        public static let id: Swift.String = "activity/get-repo-subscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_repo_hyphen_subscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_get_hyphen_repo_hyphen_subscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input.Path,
                headers: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_subscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_subscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// if you subscribe to the repository
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/get(activity/get-repo-subscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if you don't subscribe to the repository
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/get(activity/get-repo-subscription)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.activity_sol_get_hyphen_repo_hyphen_subscription.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/get(activity/get-repo-subscription)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set a repository subscription
    ///
    /// If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/put(activity/set-repo-subscription)`.
    public enum activity_sol_set_hyphen_repo_hyphen_subscription {
        public static let id: Swift.String = "activity/set-repo-subscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_set_hyphen_repo_hyphen_subscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_set_hyphen_repo_hyphen_subscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Determines if notifications should be received from this repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/requestBody/json/subscribed`.
                    public var subscribed: Swift.Bool?
                    /// Determines if all notifications should be blocked from this repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/requestBody/json/ignored`.
                    public var ignored: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - subscribed: Determines if notifications should be received from this repository.
                    ///   - ignored: Determines if all notifications should be blocked from this repository.
                    public init(
                        subscribed: Swift.Bool? = nil,
                        ignored: Swift.Bool? = nil
                    ) {
                        self.subscribed = subscribed
                        self.ignored = ignored
                    }
                    public enum CodingKeys: String, CodingKey {
                        case subscribed
                        case ignored
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/requestBody/content/application\/json`.
                case json(Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Body.jsonPayload)
            }
            public var body: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Path,
                headers: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Headers = .init(),
                body: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_subscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_subscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/put(activity/set-repo-subscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_set_hyphen_repo_hyphen_subscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository subscription
    ///
    /// This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/subscription`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/delete(activity/delete-repo-subscription)`.
    public enum activity_sol_delete_hyphen_repo_hyphen_subscription {
        public static let id: Swift.String = "activity/delete-repo-subscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/subscription/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/subscription/delete(activity/delete-repo-subscription)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.activity_sol_delete_hyphen_repo_hyphen_subscription.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List repositories starred by the authenticated user
    ///
    /// Lists repositories the authenticated user has starred.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /user/starred`.
    /// - Remark: Generated from `#/paths//user/starred/get(activity/list-repos-starred-by-authenticated-user)`.
    public enum activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/list-repos-starred-by-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/starred/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort-starred`.
                @frozen public enum sort_hyphen_starred: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
                ///
                /// - Remark: Generated from `#/paths/user/starred/GET/query/sort`.
                public var sort: Components.Parameters.sort_hyphen_starred?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/user/starred/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/starred/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/starred/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Components.Parameters.sort_hyphen_starred? = nil,
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/starred/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/starred/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/starred/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/starred/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/starred/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/starred/GET/responses/200/content/application\/vnd.github.v3.star+json`.
                    case application_vnd_period_github_period_v3_period_star_plus_json([Components.Schemas.starred_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.application_vnd_period_github_period_v3_period_star_plus_json`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_github_period_v3_period_star_plus_json`.
                    /// - SeeAlso: `.application_vnd_period_github_period_v3_period_star_plus_json`.
                    public var application_vnd_period_github_period_v3_period_star_plus_json: [Components.Schemas.starred_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .application_vnd_period_github_period_v3_period_star_plus_json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.github.v3.star+json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/starred/get(activity/list-repos-starred-by-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/starred/get(activity/list-repos-starred-by-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/starred/get(activity/list-repos-starred-by-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/starred/get(activity/list-repos-starred-by-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_vnd_period_github_period_v3_period_star_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/vnd.github.v3.star+json":
                    self = .application_vnd_period_github_period_v3_period_star_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_vnd_period_github_period_v3_period_star_plus_json:
                    return "application/vnd.github.v3.star+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_vnd_period_github_period_v3_period_star_plus_json
                ]
            }
        }
    }
    /// Check if a repository is starred by the authenticated user
    ///
    /// Whether the authenticated user has starred the repository.
    ///
    /// - Remark: HTTP `GET /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)`.
    public enum activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/check-repo-is-starred-by-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if this repository is starred by you
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found if this repository is not starred by you
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.activity_sol_check_hyphen_repo_hyphen_is_hyphen_starred_hyphen_by_hyphen_authenticated_hyphen_user.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/get(activity/check-repo-is-starred-by-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Star a repository for the authenticated user
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)`.
    public enum activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/star-repo-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.activity_sol_star_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/put(activity/star-repo-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unstar a repository for the authenticated user
    ///
    /// Unstar a repository that the authenticated user has previously starred.
    ///
    /// - Remark: HTTP `DELETE /user/starred/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)`.
    public enum activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/unstar-repo-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/starred/{owner}/{repo}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.activity_sol_unstar_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/starred/{owner}/{repo}/delete(activity/unstar-repo-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories watched by the authenticated user
    ///
    /// Lists repositories the authenticated user is watching.
    ///
    /// - Remark: HTTP `GET /user/subscriptions`.
    /// - Remark: Generated from `#/paths//user/subscriptions/get(activity/list-watched-repos-for-authenticated-user)`.
    public enum activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/list-watched-repos-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/subscriptions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/subscriptions/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/subscriptions/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/subscriptions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/subscriptions/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/subscriptions/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/subscriptions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/subscriptions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/subscriptions/get(activity/list-watched-repos-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_watched_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/subscriptions/get(activity/list-watched-repos-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/subscriptions/get(activity/list-watched-repos-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/subscriptions/get(activity/list-watched-repos-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List events for the authenticated user
    ///
    /// If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
    ///
    /// - Remark: HTTP `GET /users/{username}/events`.
    /// - Remark: Generated from `#/paths//users/{username}/events/get(activity/list-events-for-authenticated-user)`.
    public enum activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/list-events-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/events/get(activity/list-events-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization events for the authenticated user
    ///
    /// This is the user's organization dashboard. You must be authenticated as the user to view this.
    ///
    /// - Remark: HTTP `GET /users/{username}/events/orgs/{org}`.
    /// - Remark: Generated from `#/paths//users/{username}/events/orgs/{org}/get(activity/list-org-events-for-authenticated-user)`.
    public enum activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "activity/list-org-events-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/path/username`.
                public var username: Components.Parameters.username
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                ///   - org: The organization name. The name is not case sensitive.
                public init(
                    username: Components.Parameters.username,
                    org: Components.Parameters.org
                ) {
                    self.username = username
                    self.org = org
                }
            }
            public var path: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/events/orgs/{org}/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/events/orgs/{org}/get(activity/list-org-events-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_org_hyphen_events_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public events for a user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/events/public`.
    /// - Remark: Generated from `#/paths//users/{username}/events/public/get(activity/list-public-events-for-user)`.
    public enum activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user {
        public static let id: Swift.String = "activity/list-public-events-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/events/public/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/events/public/get(activity/list-public-events-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List events received by the authenticated user
    ///
    /// These are events that you've received by watching repositories and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
    ///
    /// - Remark: HTTP `GET /users/{username}/received_events`.
    /// - Remark: Generated from `#/paths//users/{username}/received_events/get(activity/list-received-events-for-user)`.
    public enum activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user {
        public static let id: Swift.String = "activity/list-received-events-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/received_events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/received_events/get(activity/list-received-events-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_received_hyphen_events_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public events received by a user
    ///
    ///
    ///
    /// - Remark: HTTP `GET /users/{username}/received_events/public`.
    /// - Remark: Generated from `#/paths//users/{username}/received_events/public/get(activity/list-received-public-events-for-user)`.
    public enum activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user {
        public static let id: Swift.String = "activity/list-received-public-events-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/received_events/public/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/received_events/public/get(activity/list-received-public-events-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_received_hyphen_public_hyphen_events_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories starred by a user
    ///
    /// Lists repositories a user has starred.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
    ///
    /// - Remark: HTTP `GET /users/{username}/starred`.
    /// - Remark: Generated from `#/paths//users/{username}/starred/get(activity/list-repos-starred-by-user)`.
    public enum activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user {
        public static let id: Swift.String = "activity/list-repos-starred-by-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/starred/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/starred/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/starred/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort-starred`.
                @frozen public enum sort_hyphen_starred: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/starred/GET/query/sort`.
                public var sort: Components.Parameters.sort_hyphen_starred?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/starred/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/starred/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/starred/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Components.Parameters.sort_hyphen_starred? = nil,
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/starred/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/starred/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/starred/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/starred/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/starred/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/{username}/starred/GET/responses/200/content/json/value1`.
                        public var value1: [Components.Schemas.starred_hyphen_repository]?
                        /// - Remark: Generated from `#/paths/users/{username}/starred/GET/responses/200/content/json/value2`.
                        public var value2: [Components.Schemas.repository]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: [Components.Schemas.starred_hyphen_repository]? = nil,
                            value2: [Components.Schemas.repository]? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    value1,
                                    value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                value1,
                                value2
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/{username}/starred/GET/responses/200/content/application\/json`.
                    case json(Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/starred/get(activity/list-repos-starred-by-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_repos_hyphen_starred_hyphen_by_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories watched by a user
    ///
    /// Lists repositories a user is watching.
    ///
    /// - Remark: HTTP `GET /users/{username}/subscriptions`.
    /// - Remark: Generated from `#/paths//users/{username}/subscriptions/get(activity/list-repos-watched-by-user)`.
    public enum activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user {
        public static let id: Swift.String = "activity/list-repos-watched-by-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Path,
                query: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Query = .init(),
                headers: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/subscriptions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/subscriptions/get(activity/list-repos-watched-by-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activity_sol_list_hyphen_repos_hyphen_watched_hyphen_by_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
