// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List organization repositories
    ///
    /// Lists repositories for the specified organization.
    ///
    /// > [!NOTE]
    /// > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/repos/get(repos/list-for-org)`.
    func repos_sol_list_hyphen_for_hyphen_org(_ input: Operations.repos_sol_list_hyphen_for_hyphen_org.Input) async throws -> Operations.repos_sol_list_hyphen_for_hyphen_org.Output
    /// Create an organization repository
    ///
    /// Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/repos/post(repos/create-in-org)`.
    func repos_sol_create_hyphen_in_hyphen_org(_ input: Operations.repos_sol_create_hyphen_in_hyphen_org.Input) async throws -> Operations.repos_sol_create_hyphen_in_hyphen_org.Output
    /// Get all organization repository rulesets
    ///
    /// Get all the repository rulesets for an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/get(repos/get-org-rulesets)`.
    func repos_sol_get_hyphen_org_hyphen_rulesets(_ input: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Output
    /// Create an organization repository ruleset
    ///
    /// Create a repository ruleset for an organization.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/rulesets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/post(repos/create-org-ruleset)`.
    func repos_sol_create_hyphen_org_hyphen_ruleset(_ input: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input) async throws -> Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Output
    /// List organization rule suites
    ///
    /// Lists suites of rule evaluations at the organization level.
    /// For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/rule-suites`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/get(repos/get-org-rule-suites)`.
    func repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites(_ input: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Output
    /// Get an organization rule suite
    ///
    /// Gets information about a suite of rule evaluations from within an organization.
    /// For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-org-rule-suite)`.
    func repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite(_ input: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Output
    /// Get an organization repository ruleset
    ///
    /// Get a repository ruleset for an organization.
    ///
    /// **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
    /// making the API request has write access to the ruleset.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/get(repos/get-org-ruleset)`.
    func repos_sol_get_hyphen_org_hyphen_ruleset(_ input: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Output
    /// Update an organization repository ruleset
    ///
    /// Update a ruleset for an organization.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/put(repos/update-org-ruleset)`.
    func repos_sol_update_hyphen_org_hyphen_ruleset(_ input: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input) async throws -> Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Output
    /// Delete an organization repository ruleset
    ///
    /// Delete a ruleset for an organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/delete(repos/delete-org-ruleset)`.
    func repos_sol_delete_hyphen_org_hyphen_ruleset(_ input: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input) async throws -> Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Output
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// > [!NOTE]
    /// > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    func repos_sol_get(_ input: Operations.repos_sol_get.Input) async throws -> Operations.repos_sol_get.Output
    /// Update a repository
    ///
    /// **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)`.
    func repos_sol_update(_ input: Operations.repos_sol_update.Input) async throws -> Operations.repos_sol_update.Output
    /// Delete a repository
    ///
    /// Deleting a repository requires admin access.
    ///
    /// If an organization owner has configured the organization to prevent members from deleting organization-owned
    /// repositories, you will get a `403 Forbidden` response.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/delete(repos/delete)`.
    func repos_sol_delete(_ input: Operations.repos_sol_delete.Input) async throws -> Operations.repos_sol_delete.Output
    /// List repository activities
    ///
    /// Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.
    ///
    /// For more information about viewing repository activity,
    /// see "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/activity`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/activity/get(repos/list-activities)`.
    func repos_sol_list_hyphen_activities(_ input: Operations.repos_sol_list_hyphen_activities.Input) async throws -> Operations.repos_sol_list_hyphen_activities.Output
    /// Create an attestation
    ///
    /// Store an artifact attestation and associate it with a repository.
    ///
    /// The authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.
    ///
    /// Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/attestations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/post(repos/create-attestation)`.
    func repos_sol_create_hyphen_attestation(_ input: Operations.repos_sol_create_hyphen_attestation.Input) async throws -> Operations.repos_sol_create_hyphen_attestation.Output
    /// List attestations
    ///
    /// List a collection of artifact attestations with a given subject digest that are associated with a repository.
    ///
    /// The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.
    ///
    /// **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/attestations/{subject_digest}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/{subject_digest}/get(repos/list-attestations)`.
    func repos_sol_list_hyphen_attestations(_ input: Operations.repos_sol_list_hyphen_attestations.Input) async throws -> Operations.repos_sol_list_hyphen_attestations.Output
    /// Get all autolinks of a repository
    ///
    /// Gets all autolinks that are configured for a repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/autolinks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/get(repos/list-autolinks)`.
    func repos_sol_list_hyphen_autolinks(_ input: Operations.repos_sol_list_hyphen_autolinks.Input) async throws -> Operations.repos_sol_list_hyphen_autolinks.Output
    /// Create an autolink reference for a repository
    ///
    /// Users with admin access to the repository can create an autolink.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/autolinks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/post(repos/create-autolink)`.
    func repos_sol_create_hyphen_autolink(_ input: Operations.repos_sol_create_hyphen_autolink.Input) async throws -> Operations.repos_sol_create_hyphen_autolink.Output
    /// Get an autolink reference of a repository
    ///
    /// This returns a single autolink reference by ID that was configured for the given repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/autolinks/{autolink_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/get(repos/get-autolink)`.
    func repos_sol_get_hyphen_autolink(_ input: Operations.repos_sol_get_hyphen_autolink.Input) async throws -> Operations.repos_sol_get_hyphen_autolink.Output
    /// Delete an autolink reference from a repository
    ///
    /// This deletes a single autolink reference by ID that was configured for the given repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/delete(repos/delete-autolink)`.
    func repos_sol_delete_hyphen_autolink(_ input: Operations.repos_sol_delete_hyphen_autolink.Input) async throws -> Operations.repos_sol_delete_hyphen_autolink.Output
    /// Check if automated security fixes are enabled for a repository
    ///
    /// Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/get(repos/check-automated-security-fixes)`.
    func repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes(_ input: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input) async throws -> Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output
    /// Enable automated security fixes
    ///
    /// Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/put(repos/enable-automated-security-fixes)`.
    func repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes(_ input: Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Input) async throws -> Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Output
    /// Disable automated security fixes
    ///
    /// Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/delete(repos/disable-automated-security-fixes)`.
    func repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes(_ input: Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Input) async throws -> Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Output
    /// List branches
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/get(repos/list-branches)`.
    func repos_sol_list_hyphen_branches(_ input: Operations.repos_sol_list_hyphen_branches.Input) async throws -> Operations.repos_sol_list_hyphen_branches.Output
    /// Get a branch
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/get(repos/get-branch)`.
    func repos_sol_get_hyphen_branch(_ input: Operations.repos_sol_get_hyphen_branch.Input) async throws -> Operations.repos_sol_get_hyphen_branch.Output
    /// Get branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/get(repos/get-branch-protection)`.
    func repos_sol_get_hyphen_branch_hyphen_protection(_ input: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input) async throws -> Operations.repos_sol_get_hyphen_branch_hyphen_protection.Output
    /// Update branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Protecting a branch requires admin or owner permissions to the repository.
    ///
    /// > [!NOTE]
    /// > Passing new arrays of `users` and `teams` replaces their previous values.
    ///
    /// > [!NOTE]
    /// > The list of users, apps, and teams in total is limited to 100 items.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/put(repos/update-branch-protection)`.
    func repos_sol_update_hyphen_branch_hyphen_protection(_ input: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input) async throws -> Operations.repos_sol_update_hyphen_branch_hyphen_protection.Output
    /// Delete branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/delete(repos/delete-branch-protection)`.
    func repos_sol_delete_hyphen_branch_hyphen_protection(_ input: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input) async throws -> Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Output
    /// Get admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/get(repos/get-admin-branch-protection)`.
    func repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection(_ input: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input) async throws -> Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Output
    /// Set admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/post(repos/set-admin-branch-protection)`.
    func repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection(_ input: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input) async throws -> Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Output
    /// Delete admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/delete(repos/delete-admin-branch-protection)`.
    func repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection(_ input: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input) async throws -> Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Output
    /// Get pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/get(repos/get-pull-request-review-protection)`.
    func repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(_ input: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input) async throws -> Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output
    /// Update pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// > [!NOTE]
    /// > Passing new arrays of `users` and `teams` replaces their previous values.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/patch(repos/update-pull-request-review-protection)`.
    func repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(_ input: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input) async throws -> Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output
    /// Delete pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/delete(repos/delete-pull-request-review-protection)`.
    func repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(_ input: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input) async throws -> Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output
    /// Get commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
    ///
    /// > [!NOTE]
    /// > You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/get(repos/get-commit-signature-protection)`.
    func repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection(_ input: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input) async throws -> Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Output
    /// Create commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/post(repos/create-commit-signature-protection)`.
    func repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection(_ input: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input) async throws -> Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Output
    /// Delete commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/delete(repos/delete-commit-signature-protection)`.
    func repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection(_ input: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input) async throws -> Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Output
    /// Get status checks protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/get(repos/get-status-checks-protection)`.
    func repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection(_ input: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input) async throws -> Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Output
    /// Update status check protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/patch(repos/update-status-check-protection)`.
    func repos_sol_update_hyphen_status_hyphen_check_hyphen_protection(_ input: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input) async throws -> Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Output
    /// Remove status check protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/delete(repos/remove-status-check-protection)`.
    func repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection(_ input: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Input) async throws -> Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Output
    /// Get all status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/get(repos/get-all-status-check-contexts)`.
    func repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts(_ input: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Output
    /// Add status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/post(repos/add-status-check-contexts)`.
    func repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts(_ input: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input) async throws -> Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Output
    /// Set status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/put(repos/set-status-check-contexts)`.
    func repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts(_ input: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input) async throws -> Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Output
    /// Remove status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/delete(repos/remove-status-check-contexts)`.
    func repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts(_ input: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input) async throws -> Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Output
    /// Get access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists who has access to this protected branch.
    ///
    /// > [!NOTE]
    /// > Users, apps, and teams `restrictions` are only available for organization-owned repositories.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/get(repos/get-access-restrictions)`.
    func repos_sol_get_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Output
    /// Delete access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Disables the ability to restrict who can push to this branch.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/delete(repos/delete-access-restrictions)`.
    func repos_sol_delete_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Output
    /// Get apps with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/get(repos/get-apps-with-access-to-protected-branch)`.
    func repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(_ input: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input) async throws -> Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output
    /// Add app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/post(repos/add-app-access-restrictions)`.
    func repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Output
    /// Set app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/put(repos/set-app-access-restrictions)`.
    func repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Output
    /// Remove app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/delete(repos/remove-app-access-restrictions)`.
    func repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Output
    /// Get teams with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the teams who have push access to this branch. The list includes child teams.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/get(repos/get-teams-with-access-to-protected-branch)`.
    func repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(_ input: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input) async throws -> Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output
    /// Add team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified teams push access for this branch. You can also give push access to child teams.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/post(repos/add-team-access-restrictions)`.
    func repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Output
    /// Set team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/put(repos/set-team-access-restrictions)`.
    func repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Output
    /// Remove team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of a team to push to this branch. You can also remove push access for child teams.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/delete(repos/remove-team-access-restrictions)`.
    func repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Output
    /// Get users with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the people who have push access to this branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/get(repos/get-users-with-access-to-protected-branch)`.
    func repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(_ input: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input) async throws -> Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output
    /// Add user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified people push access for this branch.
    ///
    /// | Type    | Description                                                                                                                   |
    /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/post(repos/add-user-access-restrictions)`.
    func repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Output
    /// Set user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
    ///
    /// | Type    | Description                                                                                                                   |
    /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/put(repos/set-user-access-restrictions)`.
    func repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Output
    /// Remove user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of a user to push to this branch.
    ///
    /// | Type    | Description                                                                                                                                   |
    /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/delete(repos/remove-user-access-restrictions)`.
    func repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions(_ input: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input) async throws -> Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Output
    /// Rename a branch
    ///
    /// Renames a branch in a repository.
    ///
    /// > [!NOTE]
    /// > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
    ///
    /// The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
    ///
    /// In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/rename`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/rename/post(repos/rename-branch)`.
    func repos_sol_rename_hyphen_branch(_ input: Operations.repos_sol_rename_hyphen_branch.Input) async throws -> Operations.repos_sol_rename_hyphen_branch.Output
    /// List CODEOWNERS errors
    ///
    /// List any syntax errors that are detected in the CODEOWNERS
    /// file.
    ///
    /// For more information about the correct CODEOWNERS syntax,
    /// see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codeowners/errors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codeowners/errors/get(repos/codeowners-errors)`.
    func repos_sol_codeowners_hyphen_errors(_ input: Operations.repos_sol_codeowners_hyphen_errors.Input) async throws -> Operations.repos_sol_codeowners_hyphen_errors.Output
    /// List repository collaborators
    ///
    /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    /// Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// The authenticated user must have push access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/get(repos/list-collaborators)`.
    func repos_sol_list_hyphen_collaborators(_ input: Operations.repos_sol_list_hyphen_collaborators.Input) async throws -> Operations.repos_sol_list_hyphen_collaborators.Output
    /// Check if a user is a repository collaborator
    ///
    /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    ///
    /// Team members will include the members of child teams.
    ///
    /// The authenticated user must have push access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/get(repos/check-collaborator)`.
    func repos_sol_check_hyphen_collaborator(_ input: Operations.repos_sol_check_hyphen_collaborator.Input) async throws -> Operations.repos_sol_check_hyphen_collaborator.Output
    /// Add a repository collaborator
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    ///
    /// For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
    ///
    /// ```
    /// Cannot assign {member} permission of {role name}
    /// ```
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).
    ///
    /// **Updating an existing collaborator's permission level**
    ///
    /// The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
    ///
    /// **Rate limits**
    ///
    /// You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/put(repos/add-collaborator)`.
    func repos_sol_add_hyphen_collaborator(_ input: Operations.repos_sol_add_hyphen_collaborator.Input) async throws -> Operations.repos_sol_add_hyphen_collaborator.Output
    /// Remove a repository collaborator
    ///
    /// Removes a collaborator from a repository.
    ///
    /// To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.
    ///
    /// This endpoint also:
    /// - Cancels any outstanding invitations
    /// - Unasigns the user from any issues
    /// - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
    /// - Unstars the repository
    /// - Updates access permissions to packages
    ///
    /// Removing a user as a collaborator has the following effects on forks:
    ///  - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
    ///  - If the user had their own fork of the repository, the fork will be deleted.
    ///  - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.
    ///
    /// > [!NOTE]
    /// > A user can still have access to the repository through organization permissions like base repository permissions.
    ///
    /// Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.
    ///
    /// For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/delete(repos/remove-collaborator)`.
    func repos_sol_remove_hyphen_collaborator(_ input: Operations.repos_sol_remove_hyphen_collaborator.Input) async throws -> Operations.repos_sol_remove_hyphen_collaborator.Output
    /// Get repository permissions for a user
    ///
    /// Checks the repository permission of a collaborator. The possible repository
    /// permissions are `admin`, `write`, `read`, and `none`.
    ///
    /// *Note*: The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the
    /// `maintain` role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role assigned to the
    /// collaborator, see the `role_name` attribute, which will provide the full role name, including custom roles. The
    /// `permissions` hash can also be used to determine which base level of access the collaborator has to the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/permission/get(repos/get-collaborator-permission-level)`.
    func repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level(_ input: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input) async throws -> Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Output
    /// List commit comments for a repository
    ///
    /// Lists the commit comments for a specified repository. Comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/get(repos/list-commit-comments-for-repo)`.
    func repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo(_ input: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input) async throws -> Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output
    /// Get a commit comment
    ///
    /// Gets a specified commit comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/get(repos/get-commit-comment)`.
    func repos_sol_get_hyphen_commit_hyphen_comment(_ input: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input) async throws -> Operations.repos_sol_get_hyphen_commit_hyphen_comment.Output
    /// Update a commit comment
    ///
    /// Updates the contents of a specified commit comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/patch(repos/update-commit-comment)`.
    func repos_sol_update_hyphen_commit_hyphen_comment(_ input: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input) async throws -> Operations.repos_sol_update_hyphen_commit_hyphen_comment.Output
    /// Delete a commit comment
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/delete(repos/delete-commit-comment)`.
    func repos_sol_delete_hyphen_commit_hyphen_comment(_ input: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input) async throws -> Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Output
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    func repos_sol_list_hyphen_commits(_ input: Operations.repos_sol_list_hyphen_commits.Input) async throws -> Operations.repos_sol_list_hyphen_commits.Output
    /// List branches for HEAD commit
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/get(repos/list-branches-for-head-commit)`.
    func repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit(_ input: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input) async throws -> Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Output
    /// List commit comments
    ///
    /// Lists the comments for a specified commit.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/get(repos/list-comments-for-commit)`.
    func repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit(_ input: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input) async throws -> Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output
    /// Create a commit comment
    ///
    /// Create a comment for a commit using its `:commit_sha`.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/commits/{commit_sha}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/post(repos/create-commit-comment)`.
    func repos_sol_create_hyphen_commit_hyphen_comment(_ input: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input) async throws -> Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    func repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit(_ input: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input) async throws -> Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output
    /// Get a commit
    ///
    /// Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
    ///
    /// > [!NOTE]
    /// > If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types.
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.
    /// - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)`.
    func repos_sol_get_hyphen_commit(_ input: Operations.repos_sol_get_hyphen_commit.Input) async throws -> Operations.repos_sol_get_hyphen_commit.Output
    /// Get the combined status for a specific reference
    ///
    /// Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
    ///
    ///
    /// Additionally, a combined `state` is returned. The `state` is one of:
    ///
    /// *   **failure** if any of the contexts report as `error` or `failure`
    /// *   **pending** if there are no statuses or a context is `pending`
    /// *   **success** if the latest status for all contexts is `success`
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/status`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/status/get(repos/get-combined-status-for-ref)`.
    func repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref(_ input: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input) async throws -> Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Output
    /// List commit statuses for a reference
    ///
    /// Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
    ///
    /// This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/statuses/get(repos/list-commit-statuses-for-ref)`.
    func repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref(_ input: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input) async throws -> Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output
    /// Get community profile metrics
    ///
    /// Returns all community profile metrics for a repository. The repository cannot be a fork.
    ///
    /// The returned metrics include an overall health score, the repository description, the presence of documentation, the
    /// detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
    /// README, and CONTRIBUTING files.
    ///
    /// The `health_percentage` score is defined as a percentage of how many of
    /// the recommended community health files are present. For more information, see
    /// "[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."
    ///
    /// `content_reports_enabled` is only returned for organization-owned repositories.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/community/profile`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/community/profile/get(repos/get-community-profile-metrics)`.
    func repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics(_ input: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input) async throws -> Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Output
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    func repos_sol_compare_hyphen_commits(_ input: Operations.repos_sol_compare_hyphen_commits.Input) async throws -> Operations.repos_sol_compare_hyphen_commits.Output
    /// Get repository content
    ///
    /// Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
    /// - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    /// - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
    ///
    /// If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
    ///
    /// If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.
    ///
    /// If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
    ///
    /// **Notes**:
    ///
    /// - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
    /// - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
    /// more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
    /// - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
    /// - If the requested file's size is:
    ///   - 1 MB or smaller: All features of this endpoint are supported.
    ///   - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
    /// string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
    ///   - Greater than 100 MB: This endpoint is not supported.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)`.
    func repos_sol_get_hyphen_content(_ input: Operations.repos_sol_get_hyphen_content.Input) async throws -> Operations.repos_sol_get_hyphen_content.Output
    /// Create or update file contents
    ///
    /// Creates a new file or replaces an existing file in a repository.
    ///
    /// > [!NOTE]
    /// > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)`.
    func repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents(_ input: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input) async throws -> Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output
    /// Delete a file
    ///
    /// Deletes a file in a repository.
    ///
    /// You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
    ///
    /// The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
    ///
    /// You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
    ///
    /// > [!NOTE]
    /// > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)`.
    func repos_sol_delete_hyphen_file(_ input: Operations.repos_sol_delete_hyphen_file.Input) async throws -> Operations.repos_sol_delete_hyphen_file.Output
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    func repos_sol_list_hyphen_contributors(_ input: Operations.repos_sol_list_hyphen_contributors.Input) async throws -> Operations.repos_sol_list_hyphen_contributors.Output
    /// List deployments
    ///
    /// Simple filtering of deployments is available via query parameters:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/get(repos/list-deployments)`.
    func repos_sol_list_hyphen_deployments(_ input: Operations.repos_sol_list_hyphen_deployments.Input) async throws -> Operations.repos_sol_list_hyphen_deployments.Output
    /// Create a deployment
    ///
    /// Deployments offer a few configurable parameters with certain defaults.
    ///
    /// The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
    /// before we merge a pull request.
    ///
    /// The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
    /// multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
    /// makes it easier to track which environments have requested deployments. The default environment is `production`.
    ///
    /// The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
    /// the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
    /// the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
    /// return a failure response.
    ///
    /// By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
    /// state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
    /// specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
    /// not require any contexts or create any commit statuses, the deployment will always succeed.
    ///
    /// The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
    /// field that will be passed on when a deployment event is dispatched.
    ///
    /// The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
    /// be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
    /// application with debugging enabled.
    ///
    /// Merged branch response:
    ///
    /// You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
    /// a deployment. This auto-merge happens when:
    /// *   Auto-merge option is enabled in the repository
    /// *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
    /// *   There are no merge conflicts
    ///
    /// If there are no new commits in the base branch, a new request to create a deployment should give a successful
    /// response.
    ///
    /// Merge conflict response:
    ///
    /// This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
    /// be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
    ///
    /// Failed commit status checks:
    ///
    /// This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
    /// status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/post(repos/create-deployment)`.
    func repos_sol_create_hyphen_deployment(_ input: Operations.repos_sol_create_hyphen_deployment.Input) async throws -> Operations.repos_sol_create_hyphen_deployment.Output
    /// Get a deployment
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/get(repos/get-deployment)`.
    func repos_sol_get_hyphen_deployment(_ input: Operations.repos_sol_get_hyphen_deployment.Input) async throws -> Operations.repos_sol_get_hyphen_deployment.Output
    /// Delete a deployment
    ///
    /// If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.
    ///
    /// To set a deployment as inactive, you must:
    ///
    /// *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
    /// *   Mark the active deployment as inactive by adding any non-successful deployment status.
    ///
    /// For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/deployments/{deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/delete(repos/delete-deployment)`.
    func repos_sol_delete_hyphen_deployment(_ input: Operations.repos_sol_delete_hyphen_deployment.Input) async throws -> Operations.repos_sol_delete_hyphen_deployment.Output
    /// List deployment statuses
    ///
    /// Users with pull access can view deployment statuses for a deployment:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/get(repos/list-deployment-statuses)`.
    func repos_sol_list_hyphen_deployment_hyphen_statuses(_ input: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input) async throws -> Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output
    /// Create a deployment status
    ///
    /// Users with `push` access can create deployment statuses for a given deployment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/post(repos/create-deployment-status)`.
    func repos_sol_create_hyphen_deployment_hyphen_status(_ input: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input) async throws -> Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output
    /// Get a deployment status
    ///
    /// Users with pull access can view a deployment status for a deployment:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/get(repos/get-deployment-status)`.
    func repos_sol_get_hyphen_deployment_hyphen_status(_ input: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input) async throws -> Operations.repos_sol_get_hyphen_deployment_hyphen_status.Output
    /// Create a repository dispatch event
    ///
    /// You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
    ///
    /// The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
    ///
    /// This input example shows how you can use the `client_payload` as a test to debug your workflow.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/dispatches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dispatches/post(repos/create-dispatch-event)`.
    func repos_sol_create_hyphen_dispatch_hyphen_event(_ input: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input) async throws -> Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Output
    /// List environments
    ///
    /// Lists the environments for a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/get(repos/get-all-environments)`.
    func repos_sol_get_hyphen_all_hyphen_environments(_ input: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_environments.Output
    /// Get an environment
    ///
    /// > [!NOTE]
    /// > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/get(repos/get-environment)`.
    func repos_sol_get_hyphen_environment(_ input: Operations.repos_sol_get_hyphen_environment.Input) async throws -> Operations.repos_sol_get_hyphen_environment.Output
    /// Create or update an environment
    ///
    /// Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
    ///
    /// > [!NOTE]
    /// > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
    ///
    /// > [!NOTE]
    /// > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/put(repos/create-or-update-environment)`.
    func repos_sol_create_hyphen_or_hyphen_update_hyphen_environment(_ input: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input) async throws -> Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output
    /// Delete an environment
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/delete(repos/delete-an-environment)`.
    func repos_sol_delete_hyphen_an_hyphen_environment(_ input: Operations.repos_sol_delete_hyphen_an_hyphen_environment.Input) async throws -> Operations.repos_sol_delete_hyphen_an_hyphen_environment.Output
    /// List deployment branch policies
    ///
    /// Lists the deployment branch policies for an environment.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/get(repos/list-deployment-branch-policies)`.
    func repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies(_ input: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input) async throws -> Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output
    /// Create a deployment branch policy
    ///
    /// Creates a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/post(repos/create-deployment-branch-policy)`.
    func repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy(_ input: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input) async throws -> Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output
    /// Get a deployment branch policy
    ///
    /// Gets a deployment branch or tag policy for an environment.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/get(repos/get-deployment-branch-policy)`.
    func repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy(_ input: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input) async throws -> Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Output
    /// Update a deployment branch policy
    ///
    /// Updates a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/put(repos/update-deployment-branch-policy)`.
    func repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy(_ input: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input) async throws -> Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Output
    /// Delete a deployment branch policy
    ///
    /// Deletes a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/delete(repos/delete-deployment-branch-policy)`.
    func repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy(_ input: Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Input) async throws -> Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Output
    /// Get all deployment protection rules for an environment
    ///
    /// Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/get(repos/get-all-deployment-protection-rules)`.
    func repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules(_ input: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output
    /// Create a custom deployment protection rule on an environment
    ///
    /// Enable a custom deployment protection rule for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/post(repos/create-deployment-protection-rule)`.
    func repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule(_ input: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input) async throws -> Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Output
    /// List custom deployment rule integrations available for an environment
    ///
    /// Gets all custom deployment protection rule integrations that are available for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/get(repos/list-custom-deployment-rule-integrations)`.
    func repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations(_ input: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input) async throws -> Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output
    /// Get a custom deployment protection rule
    ///
    /// Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/get(repos/get-custom-deployment-protection-rule)`.
    func repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule(_ input: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input) async throws -> Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Output
    /// Disable a custom protection rule for an environment
    ///
    /// Disables a custom deployment protection rule for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/delete(repos/disable-deployment-protection-rule)`.
    func repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule(_ input: Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Input) async throws -> Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Output
    /// List forks
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/get(repos/list-forks)`.
    func repos_sol_list_hyphen_forks(_ input: Operations.repos_sol_list_hyphen_forks.Input) async throws -> Operations.repos_sol_list_hyphen_forks.Output
    /// Create a fork
    ///
    /// Create a fork for the authenticated user.
    ///
    /// > [!NOTE]
    /// > Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    ///
    /// > [!NOTE]
    /// > Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)`.
    func repos_sol_create_hyphen_fork(_ input: Operations.repos_sol_create_hyphen_fork.Input) async throws -> Operations.repos_sol_create_hyphen_fork.Output
    /// List repository webhooks
    ///
    /// Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/get(repos/list-webhooks)`.
    func repos_sol_list_hyphen_webhooks(_ input: Operations.repos_sol_list_hyphen_webhooks.Input) async throws -> Operations.repos_sol_list_hyphen_webhooks.Output
    /// Create a repository webhook
    ///
    /// Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
    /// share the same `config` as long as those webhooks do not have any `events` that overlap.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/post(repos/create-webhook)`.
    func repos_sol_create_hyphen_webhook(_ input: Operations.repos_sol_create_hyphen_webhook.Input) async throws -> Operations.repos_sol_create_hyphen_webhook.Output
    /// Get a repository webhook
    ///
    /// Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/get(repos/get-webhook)`.
    func repos_sol_get_hyphen_webhook(_ input: Operations.repos_sol_get_hyphen_webhook.Input) async throws -> Operations.repos_sol_get_hyphen_webhook.Output
    /// Update a repository webhook
    ///
    /// Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/patch(repos/update-webhook)`.
    func repos_sol_update_hyphen_webhook(_ input: Operations.repos_sol_update_hyphen_webhook.Input) async throws -> Operations.repos_sol_update_hyphen_webhook.Output
    /// Delete a repository webhook
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/delete(repos/delete-webhook)`.
    func repos_sol_delete_hyphen_webhook(_ input: Operations.repos_sol_delete_hyphen_webhook.Input) async throws -> Operations.repos_sol_delete_hyphen_webhook.Output
    /// Get a webhook configuration for a repository
    ///
    /// Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/get(repos/get-webhook-config-for-repo)`.
    func repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo(_ input: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input) async throws -> Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output
    /// Update a webhook configuration for a repository
    ///
    /// Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/patch(repos/update-webhook-config-for-repo)`.
    func repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo(_ input: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input) async throws -> Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output
    /// List deliveries for a repository webhook
    ///
    /// Returns a list of webhook deliveries for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/get(repos/list-webhook-deliveries)`.
    func repos_sol_list_hyphen_webhook_hyphen_deliveries(_ input: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input) async throws -> Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Output
    /// Get a delivery for a repository webhook
    ///
    /// Returns a delivery for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/get(repos/get-webhook-delivery)`.
    func repos_sol_get_hyphen_webhook_hyphen_delivery(_ input: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input) async throws -> Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Output
    /// Redeliver a delivery for a repository webhook
    ///
    /// Redeliver a webhook delivery for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(repos/redeliver-webhook-delivery)`.
    func repos_sol_redeliver_hyphen_webhook_hyphen_delivery(_ input: Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input) async throws -> Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Output
    /// Ping a repository webhook
    ///
    /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/pings`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/pings/post(repos/ping-webhook)`.
    func repos_sol_ping_hyphen_webhook(_ input: Operations.repos_sol_ping_hyphen_webhook.Input) async throws -> Operations.repos_sol_ping_hyphen_webhook.Output
    /// Test the push repository webhook
    ///
    /// This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
    ///
    /// > [!NOTE]
    /// > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/tests`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/tests/post(repos/test-push-webhook)`.
    func repos_sol_test_hyphen_push_hyphen_webhook(_ input: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input) async throws -> Operations.repos_sol_test_hyphen_push_hyphen_webhook.Output
    /// List repository invitations
    ///
    /// When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/invitations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/get(repos/list-invitations)`.
    func repos_sol_list_hyphen_invitations(_ input: Operations.repos_sol_list_hyphen_invitations.Input) async throws -> Operations.repos_sol_list_hyphen_invitations.Output
    /// Update a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/patch(repos/update-invitation)`.
    func repos_sol_update_hyphen_invitation(_ input: Operations.repos_sol_update_hyphen_invitation.Input) async throws -> Operations.repos_sol_update_hyphen_invitation.Output
    /// Delete a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/delete(repos/delete-invitation)`.
    func repos_sol_delete_hyphen_invitation(_ input: Operations.repos_sol_delete_hyphen_invitation.Input) async throws -> Operations.repos_sol_delete_hyphen_invitation.Output
    /// List deploy keys
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/keys`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/get(repos/list-deploy-keys)`.
    func repos_sol_list_hyphen_deploy_hyphen_keys(_ input: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input) async throws -> Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output
    /// Create a deploy key
    ///
    /// You can create a read-only deploy key.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/keys`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/post(repos/create-deploy-key)`.
    func repos_sol_create_hyphen_deploy_hyphen_key(_ input: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input) async throws -> Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output
    /// Get a deploy key
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/get(repos/get-deploy-key)`.
    func repos_sol_get_hyphen_deploy_hyphen_key(_ input: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input) async throws -> Operations.repos_sol_get_hyphen_deploy_hyphen_key.Output
    /// Delete a deploy key
    ///
    /// Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/delete(repos/delete-deploy-key)`.
    func repos_sol_delete_hyphen_deploy_hyphen_key(_ input: Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Input) async throws -> Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Output
    /// List repository languages
    ///
    /// Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/languages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/languages/get(repos/list-languages)`.
    func repos_sol_list_hyphen_languages(_ input: Operations.repos_sol_list_hyphen_languages.Input) async throws -> Operations.repos_sol_list_hyphen_languages.Output
    /// Sync a fork branch with the upstream repository
    ///
    /// Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/merge-upstream`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merge-upstream/post(repos/merge-upstream)`.
    func repos_sol_merge_hyphen_upstream(_ input: Operations.repos_sol_merge_hyphen_upstream.Input) async throws -> Operations.repos_sol_merge_hyphen_upstream.Output
    /// Merge a branch
    ///
    ///
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/merges`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)`.
    func repos_sol_merge(_ input: Operations.repos_sol_merge.Input) async throws -> Operations.repos_sol_merge.Output
    /// Get a GitHub Pages site
    ///
    /// Gets information about a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/get(repos/get-pages)`.
    func repos_sol_get_hyphen_pages(_ input: Operations.repos_sol_get_hyphen_pages.Input) async throws -> Operations.repos_sol_get_hyphen_pages.Output
    /// Create a GitHub Pages site
    ///
    /// Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/post(repos/create-pages-site)`.
    func repos_sol_create_hyphen_pages_hyphen_site(_ input: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input) async throws -> Operations.repos_sol_create_hyphen_pages_hyphen_site.Output
    /// Update information about a GitHub Pages site
    ///
    /// Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/put(repos/update-information-about-pages-site)`.
    func repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site(_ input: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input) async throws -> Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Output
    /// Delete a GitHub Pages site
    ///
    /// Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/delete(repos/delete-pages-site)`.
    func repos_sol_delete_hyphen_pages_hyphen_site(_ input: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input) async throws -> Operations.repos_sol_delete_hyphen_pages_hyphen_site.Output
    /// List GitHub Pages builds
    ///
    /// Lists builts of a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/get(repos/list-pages-builds)`.
    func repos_sol_list_hyphen_pages_hyphen_builds(_ input: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input) async throws -> Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output
    /// Request a GitHub Pages build
    ///
    /// You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
    ///
    /// Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/builds`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/post(repos/request-pages-build)`.
    func repos_sol_request_hyphen_pages_hyphen_build(_ input: Operations.repos_sol_request_hyphen_pages_hyphen_build.Input) async throws -> Operations.repos_sol_request_hyphen_pages_hyphen_build.Output
    /// Get latest Pages build
    ///
    /// Gets information about the single most recent build of a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/latest/get(repos/get-latest-pages-build)`.
    func repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build(_ input: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input) async throws -> Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Output
    /// Get GitHub Pages build
    ///
    /// Gets information about a GitHub Pages build.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds/{build_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/{build_id}/get(repos/get-pages-build)`.
    func repos_sol_get_hyphen_pages_hyphen_build(_ input: Operations.repos_sol_get_hyphen_pages_hyphen_build.Input) async throws -> Operations.repos_sol_get_hyphen_pages_hyphen_build.Output
    /// Create a GitHub Pages deployment
    ///
    /// Create a GitHub Pages deployment for a repository.
    ///
    /// The authenticated user must have write permission to the repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/post(repos/create-pages-deployment)`.
    func repos_sol_create_hyphen_pages_hyphen_deployment(_ input: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input) async throws -> Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Output
    /// Get the status of a GitHub Pages deployment
    ///
    /// Gets the current status of a GitHub Pages deployment.
    ///
    /// The authenticated user must have read permission for the GitHub Pages site.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/get(repos/get-pages-deployment)`.
    func repos_sol_get_hyphen_pages_hyphen_deployment(_ input: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input) async throws -> Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Output
    /// Cancel a GitHub Pages deployment
    ///
    /// Cancels a GitHub Pages deployment.
    ///
    /// The authenticated user must have write permissions for the GitHub Pages site.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/post(repos/cancel-pages-deployment)`.
    func repos_sol_cancel_hyphen_pages_hyphen_deployment(_ input: Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input) async throws -> Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Output
    /// Get a DNS health check for GitHub Pages
    ///
    /// Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
    ///
    /// The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/health`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)`.
    func repos_sol_get_hyphen_pages_hyphen_health_hyphen_check(_ input: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input) async throws -> Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output
    /// Check if private vulnerability reporting is enabled for a repository
    ///
    /// Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/get(repos/check-private-vulnerability-reporting)`.
    func repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting(_ input: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input) async throws -> Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output
    /// Enable private vulnerability reporting for a repository
    ///
    /// Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/put(repos/enable-private-vulnerability-reporting)`.
    func repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting(_ input: Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input) async throws -> Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output
    /// Disable private vulnerability reporting for a repository
    ///
    /// Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/delete(repos/disable-private-vulnerability-reporting)`.
    func repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting(_ input: Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input) async throws -> Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output
    /// Get all custom property values for a repository
    ///
    /// Gets all custom property values that are set for a repository.
    /// Users with read access to the repository can use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/properties/values`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/get(repos/get-custom-properties-values)`.
    func repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values(_ input: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input) async throws -> Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Output
    /// Create or update custom property values for a repository
    ///
    /// Create new or update existing custom property values for a repository.
    /// Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
    ///
    /// Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/properties/values`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/patch(repos/create-or-update-custom-properties-values)`.
    func repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values(_ input: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input) async throws -> Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Output
    /// Get a repository README
    ///
    /// Gets the preferred README for a repository.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
    /// - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/readme`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/get(repos/get-readme)`.
    func repos_sol_get_hyphen_readme(_ input: Operations.repos_sol_get_hyphen_readme.Input) async throws -> Operations.repos_sol_get_hyphen_readme.Output
    /// Get a repository README for a directory
    ///
    /// Gets the README from a repository directory.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
    /// - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/readme/{dir}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/{dir}/get(repos/get-readme-in-directory)`.
    func repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory(_ input: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input) async throws -> Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Output
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    func repos_sol_list_hyphen_releases(_ input: Operations.repos_sol_list_hyphen_releases.Input) async throws -> Operations.repos_sol_list_hyphen_releases.Output
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    func repos_sol_create_hyphen_release(_ input: Operations.repos_sol_create_hyphen_release.Input) async throws -> Operations.repos_sol_create_hyphen_release.Output
    /// Get a release asset
    ///
    /// To download the asset's binary content:
    ///
    /// - If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.
    /// - Alternatively, set the `Accept` header of the request to 
    ///   [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). 
    ///   The API will either redirect the client to the location, or stream it directly if possible.
    ///   API clients should handle both a `200` or `302` response.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/get(repos/get-release-asset)`.
    func repos_sol_get_hyphen_release_hyphen_asset(_ input: Operations.repos_sol_get_hyphen_release_hyphen_asset.Input) async throws -> Operations.repos_sol_get_hyphen_release_hyphen_asset.Output
    /// Update a release asset
    ///
    /// Users with push access to the repository can edit a release asset.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/patch(repos/update-release-asset)`.
    func repos_sol_update_hyphen_release_hyphen_asset(_ input: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input) async throws -> Operations.repos_sol_update_hyphen_release_hyphen_asset.Output
    /// Delete a release asset
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/delete(repos/delete-release-asset)`.
    func repos_sol_delete_hyphen_release_hyphen_asset(_ input: Operations.repos_sol_delete_hyphen_release_hyphen_asset.Input) async throws -> Operations.repos_sol_delete_hyphen_release_hyphen_asset.Output
    /// Generate release notes content for a release
    ///
    /// Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases/generate-notes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/generate-notes/post(repos/generate-release-notes)`.
    func repos_sol_generate_hyphen_release_hyphen_notes(_ input: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input) async throws -> Operations.repos_sol_generate_hyphen_release_hyphen_notes.Output
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    func repos_sol_get_hyphen_latest_hyphen_release(_ input: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input) async throws -> Operations.repos_sol_get_hyphen_latest_hyphen_release.Output
    /// Get a release by tag name
    ///
    /// Get a published release with the specified tag.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/tags/{tag}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/tags/{tag}/get(repos/get-release-by-tag)`.
    func repos_sol_get_hyphen_release_hyphen_by_hyphen_tag(_ input: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input) async throws -> Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Output
    /// Get a release
    ///
    /// Gets a public release with the specified release ID.
    ///
    /// > [!NOTE]
    /// > This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/get(repos/get-release)`.
    func repos_sol_get_hyphen_release(_ input: Operations.repos_sol_get_hyphen_release.Input) async throws -> Operations.repos_sol_get_hyphen_release.Output
    /// Update a release
    ///
    /// Users with push access to the repository can edit a release.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/patch(repos/update-release)`.
    func repos_sol_update_hyphen_release(_ input: Operations.repos_sol_update_hyphen_release.Input) async throws -> Operations.repos_sol_update_hyphen_release.Output
    /// Delete a release
    ///
    /// Users with push access to the repository can delete a release.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/delete(repos/delete-release)`.
    func repos_sol_delete_hyphen_release(_ input: Operations.repos_sol_delete_hyphen_release.Input) async throws -> Operations.repos_sol_delete_hyphen_release.Output
    /// List release assets
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/{release_id}/assets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/get(repos/list-release-assets)`.
    func repos_sol_list_hyphen_release_hyphen_assets(_ input: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input) async throws -> Operations.repos_sol_list_hyphen_release_hyphen_assets.Output
    /// Upload a release asset
    ///
    /// This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
    /// the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
    ///
    /// You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
    ///
    /// Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 
    ///
    /// `application/zip`
    ///
    /// GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
    /// you'll still need to pass your authentication to be able to upload an asset.
    ///
    /// When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
    ///
    /// **Notes:**
    /// *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
    /// endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    /// *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). 
    /// *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases/{release_id}/assets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/post(repos/upload-release-asset)`.
    func repos_sol_upload_hyphen_release_hyphen_asset(_ input: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input) async throws -> Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output
    /// Get rules for a branch
    ///
    /// Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply
    /// to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level
    /// at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled"
    /// enforcement statuses are not returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rules/branches/{branch}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rules/branches/{branch}/get(repos/get-branch-rules)`.
    func repos_sol_get_hyphen_branch_hyphen_rules(_ input: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input) async throws -> Operations.repos_sol_get_hyphen_branch_hyphen_rules.Output
    /// Get all repository rulesets
    ///
    /// Get all the rulesets for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/get(repos/get-repo-rulesets)`.
    func repos_sol_get_hyphen_repo_hyphen_rulesets(_ input: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Output
    /// Create a repository ruleset
    ///
    /// Create a ruleset for a repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/rulesets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/post(repos/create-repo-ruleset)`.
    func repos_sol_create_hyphen_repo_hyphen_ruleset(_ input: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input) async throws -> Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Output
    /// List repository rule suites
    ///
    /// Lists suites of rule evaluations at the repository level.
    /// For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/rule-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/get(repos/get-repo-rule-suites)`.
    func repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites(_ input: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Output
    /// Get a repository rule suite
    ///
    /// Gets information about a suite of rule evaluations from within a repository.
    /// For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-repo-rule-suite)`.
    func repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite(_ input: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Output
    /// Get a repository ruleset
    ///
    /// Get a ruleset for a repository.
    ///
    /// **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
    /// making the API request has write access to the ruleset.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/get(repos/get-repo-ruleset)`.
    func repos_sol_get_hyphen_repo_hyphen_ruleset(_ input: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Output
    /// Update a repository ruleset
    ///
    /// Update a ruleset for a repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/put(repos/update-repo-ruleset)`.
    func repos_sol_update_hyphen_repo_hyphen_ruleset(_ input: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input) async throws -> Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Output
    /// Delete a repository ruleset
    ///
    /// Delete a ruleset for a repository.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/delete(repos/delete-repo-ruleset)`.
    func repos_sol_delete_hyphen_repo_hyphen_ruleset(_ input: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input) async throws -> Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Output
    /// Get the weekly commit activity
    ///
    /// Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
    ///
    /// > [!NOTE]
    /// > This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/code_frequency`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/code_frequency/get(repos/get-code-frequency-stats)`.
    func repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats(_ input: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input) async throws -> Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output
    /// Get the last year of commit activity
    ///
    /// Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/commit_activity`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/commit_activity/get(repos/get-commit-activity-stats)`.
    func repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats(_ input: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input) async throws -> Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Output
    /// Get all contributor commit activity
    ///
    ///
    /// Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
    ///
    /// *   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
    /// *   `a` - Number of additions
    /// *   `d` - Number of deletions
    /// *   `c` - Number of commits
    ///
    /// > [!NOTE]
    /// > This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/contributors/get(repos/get-contributors-stats)`.
    func repos_sol_get_hyphen_contributors_hyphen_stats(_ input: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input) async throws -> Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Output
    /// Get the weekly commit count
    ///
    /// Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
    ///
    /// The array order is oldest week (index 0) to most recent week.
    ///
    /// The most recent week is seven days ago at UTC midnight to today at UTC midnight.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/participation`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/participation/get(repos/get-participation-stats)`.
    func repos_sol_get_hyphen_participation_hyphen_stats(_ input: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input) async throws -> Operations.repos_sol_get_hyphen_participation_hyphen_stats.Output
    /// Get the hourly commit count for each day
    ///
    /// Each array contains the day number, hour number, and number of commits:
    ///
    /// *   `0-6`: Sunday - Saturday
    /// *   `0-23`: Hour of day
    /// *   Number of commits
    ///
    /// For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/punch_card`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/punch_card/get(repos/get-punch-card-stats)`.
    func repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats(_ input: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input) async throws -> Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Output
    /// Create a commit status
    ///
    /// Users with push access in a repository can create commit statuses for a given SHA.
    ///
    /// Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/statuses/{sha}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/statuses/{sha}/post(repos/create-commit-status)`.
    func repos_sol_create_hyphen_commit_hyphen_status(_ input: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input) async throws -> Operations.repos_sol_create_hyphen_commit_hyphen_status.Output
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    func repos_sol_list_hyphen_tags(_ input: Operations.repos_sol_list_hyphen_tags.Input) async throws -> Operations.repos_sol_list_hyphen_tags.Output
    /// Closing down - List tag protection states for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)" endpoint instead.
    ///
    /// This returns the tag protection states of a repository.
    ///
    /// This information is only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/get(repos/list-tag-protection)`.
    @available(*, deprecated)
    func repos_sol_list_hyphen_tag_hyphen_protection(_ input: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input) async throws -> Operations.repos_sol_list_hyphen_tag_hyphen_protection.Output
    /// Closing down - Create a tag protection state for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)" endpoint instead.
    ///
    /// This creates a tag protection state for a repository.
    /// This endpoint is only available to repository administrators.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/tags/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/post(repos/create-tag-protection)`.
    @available(*, deprecated)
    func repos_sol_create_hyphen_tag_hyphen_protection(_ input: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input) async throws -> Operations.repos_sol_create_hyphen_tag_hyphen_protection.Output
    /// Closing down - Delete a tag protection state for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)" endpoint instead.
    ///
    /// This deletes a tag protection state for a repository.
    /// This endpoint is only available to repository administrators.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/{tag_protection_id}/delete(repos/delete-tag-protection)`.
    @available(*, deprecated)
    func repos_sol_delete_hyphen_tag_hyphen_protection(_ input: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input) async throws -> Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Output
    /// Download a repository archive (tar)
    ///
    /// Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    /// `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    /// the `Location` header to make a second `GET` request.
    ///
    /// > [!NOTE]
    /// > For private repositories, these links are temporary and expire after five minutes.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tarball/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tarball/{ref}/get(repos/download-tarball-archive)`.
    func repos_sol_download_hyphen_tarball_hyphen_archive(_ input: Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Input) async throws -> Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Output
    /// List repository teams
    ///
    /// Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
    ///
    /// For a public repository, a team is listed only if that team added the public repository explicitly.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/teams/get(repos/list-teams)`.
    func repos_sol_list_hyphen_teams(_ input: Operations.repos_sol_list_hyphen_teams.Input) async throws -> Operations.repos_sol_list_hyphen_teams.Output
    /// Get all repository topics
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/topics`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/get(repos/get-all-topics)`.
    func repos_sol_get_hyphen_all_hyphen_topics(_ input: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_topics.Output
    /// Replace all repository topics
    ///
    ///
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/topics`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/put(repos/replace-all-topics)`.
    func repos_sol_replace_hyphen_all_hyphen_topics(_ input: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input) async throws -> Operations.repos_sol_replace_hyphen_all_hyphen_topics.Output
    /// Get repository clones
    ///
    /// Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/clones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/clones/get(repos/get-clones)`.
    func repos_sol_get_hyphen_clones(_ input: Operations.repos_sol_get_hyphen_clones.Input) async throws -> Operations.repos_sol_get_hyphen_clones.Output
    /// Get top referral paths
    ///
    /// Get the top 10 popular contents over the last 14 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/popular/paths`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/paths/get(repos/get-top-paths)`.
    func repos_sol_get_hyphen_top_hyphen_paths(_ input: Operations.repos_sol_get_hyphen_top_hyphen_paths.Input) async throws -> Operations.repos_sol_get_hyphen_top_hyphen_paths.Output
    /// Get top referral sources
    ///
    /// Get the top 10 referrers over the last 14 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/popular/referrers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/referrers/get(repos/get-top-referrers)`.
    func repos_sol_get_hyphen_top_hyphen_referrers(_ input: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input) async throws -> Operations.repos_sol_get_hyphen_top_hyphen_referrers.Output
    /// Get page views
    ///
    /// Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/views`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/views/get(repos/get-views)`.
    func repos_sol_get_hyphen_views(_ input: Operations.repos_sol_get_hyphen_views.Input) async throws -> Operations.repos_sol_get_hyphen_views.Output
    /// Transfer a repository
    ///
    /// A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/transfer`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/transfer/post(repos/transfer)`.
    func repos_sol_transfer(_ input: Operations.repos_sol_transfer.Input) async throws -> Operations.repos_sol_transfer.Output
    /// Check if vulnerability alerts are enabled for a repository
    ///
    /// Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/get(repos/check-vulnerability-alerts)`.
    func repos_sol_check_hyphen_vulnerability_hyphen_alerts(_ input: Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Input) async throws -> Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Output
    /// Enable vulnerability alerts
    ///
    /// Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/put(repos/enable-vulnerability-alerts)`.
    func repos_sol_enable_hyphen_vulnerability_hyphen_alerts(_ input: Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Input) async throws -> Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Output
    /// Disable vulnerability alerts
    ///
    /// Disables dependency alerts and the dependency graph for a repository.
    /// The authenticated user must have admin access to the repository. For more information,
    /// see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/delete(repos/disable-vulnerability-alerts)`.
    func repos_sol_disable_hyphen_vulnerability_hyphen_alerts(_ input: Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Input) async throws -> Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Output
    /// Download a repository archive (zip)
    ///
    /// Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    /// `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    /// the `Location` header to make a second `GET` request.
    ///
    /// > [!NOTE]
    /// > For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/zipball/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/zipball/{ref}/get(repos/download-zipball-archive)`.
    func repos_sol_download_hyphen_zipball_hyphen_archive(_ input: Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Input) async throws -> Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Output
    /// Create a repository using a template
    ///
    /// Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /repos/{template_owner}/{template_repo}/generate`.
    /// - Remark: Generated from `#/paths//repos/{template_owner}/{template_repo}/generate/post(repos/create-using-template)`.
    func repos_sol_create_hyphen_using_hyphen_template(_ input: Operations.repos_sol_create_hyphen_using_hyphen_template.Input) async throws -> Operations.repos_sol_create_hyphen_using_hyphen_template.Output
    /// List public repositories
    ///
    /// Lists all public repositories in the order that they were created.
    ///
    /// Note:
    /// - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
    /// - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
    ///
    /// - Remark: HTTP `GET /repositories`.
    /// - Remark: Generated from `#/paths//repositories/get(repos/list-public)`.
    func repos_sol_list_hyphen_public(_ input: Operations.repos_sol_list_hyphen_public.Input) async throws -> Operations.repos_sol_list_hyphen_public.Output
    /// List repositories for the authenticated user
    ///
    /// Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// - Remark: HTTP `GET /user/repos`.
    /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)`.
    func repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create a repository for the authenticated user
    ///
    /// Creates a new repository for the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /user/repos`.
    /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)`.
    func repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List repository invitations for the authenticated user
    ///
    /// When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
    ///
    /// - Remark: HTTP `GET /user/repository_invitations`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)`.
    func repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Accept a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /user/repository_invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)`.
    func repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Decline a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /user/repository_invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)`.
    func repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List repositories for a user
    ///
    /// Lists public repositories for the specified user.
    ///
    /// - Remark: HTTP `GET /users/{username}/repos`.
    /// - Remark: Generated from `#/paths//users/{username}/repos/get(repos/list-for-user)`.
    func repos_sol_list_hyphen_for_hyphen_user(_ input: Operations.repos_sol_list_hyphen_for_hyphen_user.Input) async throws -> Operations.repos_sol_list_hyphen_for_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List organization repositories
    ///
    /// Lists repositories for the specified organization.
    ///
    /// > [!NOTE]
    /// > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/repos/get(repos/list-for-org)`.
    public func repos_sol_list_hyphen_for_hyphen_org(
        path: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Path,
        query: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_for_hyphen_org.Output {
        try await repos_sol_list_hyphen_for_hyphen_org(Operations.repos_sol_list_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an organization repository
    ///
    /// Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/repos/post(repos/create-in-org)`.
    public func repos_sol_create_hyphen_in_hyphen_org(
        path: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_in_hyphen_org.Output {
        try await repos_sol_create_hyphen_in_hyphen_org(Operations.repos_sol_create_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get all organization repository rulesets
    ///
    /// Get all the repository rulesets for an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/get(repos/get-org-rulesets)`.
    public func repos_sol_get_hyphen_org_hyphen_rulesets(
        path: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Path,
        query: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Output {
        try await repos_sol_get_hyphen_org_hyphen_rulesets(Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an organization repository ruleset
    ///
    /// Create a repository ruleset for an organization.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/rulesets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/post(repos/create-org-ruleset)`.
    public func repos_sol_create_hyphen_org_hyphen_ruleset(
        path: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Path,
        headers: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Output {
        try await repos_sol_create_hyphen_org_hyphen_ruleset(Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List organization rule suites
    ///
    /// Lists suites of rule evaluations at the organization level.
    /// For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/rule-suites`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/get(repos/get-org-rule-suites)`.
    public func repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites(
        path: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Path,
        query: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Output {
        try await repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites(Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an organization rule suite
    ///
    /// Gets information about a suite of rule evaluations from within an organization.
    /// For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-org-rule-suite)`.
    public func repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite(
        path: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input.Path,
        headers: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Output {
        try await repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite(Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get an organization repository ruleset
    ///
    /// Get a repository ruleset for an organization.
    ///
    /// **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
    /// making the API request has write access to the ruleset.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/get(repos/get-org-ruleset)`.
    public func repos_sol_get_hyphen_org_hyphen_ruleset(
        path: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input.Path,
        headers: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Output {
        try await repos_sol_get_hyphen_org_hyphen_ruleset(Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an organization repository ruleset
    ///
    /// Update a ruleset for an organization.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/put(repos/update-org-ruleset)`.
    public func repos_sol_update_hyphen_org_hyphen_ruleset(
        path: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Path,
        headers: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Output {
        try await repos_sol_update_hyphen_org_hyphen_ruleset(Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an organization repository ruleset
    ///
    /// Delete a ruleset for an organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/delete(repos/delete-org-ruleset)`.
    public func repos_sol_delete_hyphen_org_hyphen_ruleset(
        path: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Output {
        try await repos_sol_delete_hyphen_org_hyphen_ruleset(Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// > [!NOTE]
    /// > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    public func repos_sol_get(
        path: Operations.repos_sol_get.Input.Path,
        headers: Operations.repos_sol_get.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get.Output {
        try await repos_sol_get(Operations.repos_sol_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a repository
    ///
    /// **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)`.
    public func repos_sol_update(
        path: Operations.repos_sol_update.Input.Path,
        headers: Operations.repos_sol_update.Input.Headers = .init(),
        body: Operations.repos_sol_update.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update.Output {
        try await repos_sol_update(Operations.repos_sol_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository
    ///
    /// Deleting a repository requires admin access.
    ///
    /// If an organization owner has configured the organization to prevent members from deleting organization-owned
    /// repositories, you will get a `403 Forbidden` response.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/delete(repos/delete)`.
    public func repos_sol_delete(
        path: Operations.repos_sol_delete.Input.Path,
        headers: Operations.repos_sol_delete.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete.Output {
        try await repos_sol_delete(Operations.repos_sol_delete.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository activities
    ///
    /// Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.
    ///
    /// For more information about viewing repository activity,
    /// see "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/activity`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/activity/get(repos/list-activities)`.
    public func repos_sol_list_hyphen_activities(
        path: Operations.repos_sol_list_hyphen_activities.Input.Path,
        query: Operations.repos_sol_list_hyphen_activities.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_activities.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_activities.Output {
        try await repos_sol_list_hyphen_activities(Operations.repos_sol_list_hyphen_activities.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an attestation
    ///
    /// Store an artifact attestation and associate it with a repository.
    ///
    /// The authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.
    ///
    /// Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/attestations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/post(repos/create-attestation)`.
    public func repos_sol_create_hyphen_attestation(
        path: Operations.repos_sol_create_hyphen_attestation.Input.Path,
        headers: Operations.repos_sol_create_hyphen_attestation.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_attestation.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_attestation.Output {
        try await repos_sol_create_hyphen_attestation(Operations.repos_sol_create_hyphen_attestation.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List attestations
    ///
    /// List a collection of artifact attestations with a given subject digest that are associated with a repository.
    ///
    /// The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.
    ///
    /// **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/attestations/{subject_digest}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/{subject_digest}/get(repos/list-attestations)`.
    public func repos_sol_list_hyphen_attestations(
        path: Operations.repos_sol_list_hyphen_attestations.Input.Path,
        query: Operations.repos_sol_list_hyphen_attestations.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_attestations.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_attestations.Output {
        try await repos_sol_list_hyphen_attestations(Operations.repos_sol_list_hyphen_attestations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get all autolinks of a repository
    ///
    /// Gets all autolinks that are configured for a repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/autolinks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/get(repos/list-autolinks)`.
    public func repos_sol_list_hyphen_autolinks(
        path: Operations.repos_sol_list_hyphen_autolinks.Input.Path,
        headers: Operations.repos_sol_list_hyphen_autolinks.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_autolinks.Output {
        try await repos_sol_list_hyphen_autolinks(Operations.repos_sol_list_hyphen_autolinks.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create an autolink reference for a repository
    ///
    /// Users with admin access to the repository can create an autolink.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/autolinks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/post(repos/create-autolink)`.
    public func repos_sol_create_hyphen_autolink(
        path: Operations.repos_sol_create_hyphen_autolink.Input.Path,
        headers: Operations.repos_sol_create_hyphen_autolink.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_autolink.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_autolink.Output {
        try await repos_sol_create_hyphen_autolink(Operations.repos_sol_create_hyphen_autolink.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an autolink reference of a repository
    ///
    /// This returns a single autolink reference by ID that was configured for the given repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/autolinks/{autolink_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/get(repos/get-autolink)`.
    public func repos_sol_get_hyphen_autolink(
        path: Operations.repos_sol_get_hyphen_autolink.Input.Path,
        headers: Operations.repos_sol_get_hyphen_autolink.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_autolink.Output {
        try await repos_sol_get_hyphen_autolink(Operations.repos_sol_get_hyphen_autolink.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an autolink reference from a repository
    ///
    /// This deletes a single autolink reference by ID that was configured for the given repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/delete(repos/delete-autolink)`.
    public func repos_sol_delete_hyphen_autolink(
        path: Operations.repos_sol_delete_hyphen_autolink.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_autolink.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_autolink.Output {
        try await repos_sol_delete_hyphen_autolink(Operations.repos_sol_delete_hyphen_autolink.Input(
            path: path,
            headers: headers
        ))
    }
    /// Check if automated security fixes are enabled for a repository
    ///
    /// Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/get(repos/check-automated-security-fixes)`.
    public func repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes(
        path: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path,
        headers: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output {
        try await repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes(Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input(
            path: path,
            headers: headers
        ))
    }
    /// Enable automated security fixes
    ///
    /// Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/put(repos/enable-automated-security-fixes)`.
    public func repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes(path: Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path) async throws -> Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Output {
        try await repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes(Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Input(path: path))
    }
    /// Disable automated security fixes
    ///
    /// Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/delete(repos/disable-automated-security-fixes)`.
    public func repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes(path: Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path) async throws -> Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Output {
        try await repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes(Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Input(path: path))
    }
    /// List branches
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/get(repos/list-branches)`.
    public func repos_sol_list_hyphen_branches(
        path: Operations.repos_sol_list_hyphen_branches.Input.Path,
        query: Operations.repos_sol_list_hyphen_branches.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_branches.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_branches.Output {
        try await repos_sol_list_hyphen_branches(Operations.repos_sol_list_hyphen_branches.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a branch
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/get(repos/get-branch)`.
    public func repos_sol_get_hyphen_branch(
        path: Operations.repos_sol_get_hyphen_branch.Input.Path,
        headers: Operations.repos_sol_get_hyphen_branch.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_branch.Output {
        try await repos_sol_get_hyphen_branch(Operations.repos_sol_get_hyphen_branch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/get(repos/get-branch-protection)`.
    public func repos_sol_get_hyphen_branch_hyphen_protection(
        path: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_branch_hyphen_protection.Output {
        try await repos_sol_get_hyphen_branch_hyphen_protection(Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Protecting a branch requires admin or owner permissions to the repository.
    ///
    /// > [!NOTE]
    /// > Passing new arrays of `users` and `teams` replaces their previous values.
    ///
    /// > [!NOTE]
    /// > The list of users, apps, and teams in total is limited to 100 items.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/put(repos/update-branch-protection)`.
    public func repos_sol_update_hyphen_branch_hyphen_protection(
        path: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body
    ) async throws -> Operations.repos_sol_update_hyphen_branch_hyphen_protection.Output {
        try await repos_sol_update_hyphen_branch_hyphen_protection(Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/delete(repos/delete-branch-protection)`.
    public func repos_sol_delete_hyphen_branch_hyphen_protection(
        path: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Output {
        try await repos_sol_delete_hyphen_branch_hyphen_protection(Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/get(repos/get-admin-branch-protection)`.
    public func repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection(
        path: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Output {
        try await repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection(Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/post(repos/set-admin-branch-protection)`.
    public func repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection(
        path: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Output {
        try await repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection(Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/delete(repos/delete-admin-branch-protection)`.
    public func repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection(
        path: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Output {
        try await repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection(Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/get(repos/get-pull-request-review-protection)`.
    public func repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(
        path: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output {
        try await repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// > [!NOTE]
    /// > Passing new arrays of `users` and `teams` replaces their previous values.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/patch(repos/update-pull-request-review-protection)`.
    public func repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(
        path: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output {
        try await repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/delete(repos/delete-pull-request-review-protection)`.
    public func repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(
        path: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output {
        try await repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection(Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
    ///
    /// > [!NOTE]
    /// > You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/get(repos/get-commit-signature-protection)`.
    public func repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection(
        path: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Output {
        try await repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection(Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/post(repos/create-commit-signature-protection)`.
    public func repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection(
        path: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Output {
        try await repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection(Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/delete(repos/delete-commit-signature-protection)`.
    public func repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection(
        path: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Output {
        try await repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection(Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get status checks protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/get(repos/get-status-checks-protection)`.
    public func repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection(
        path: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Output {
        try await repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection(Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update status check protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/patch(repos/update-status-check-protection)`.
    public func repos_sol_update_hyphen_status_hyphen_check_hyphen_protection(
        path: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Output {
        try await repos_sol_update_hyphen_status_hyphen_check_hyphen_protection(Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove status check protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/delete(repos/remove-status-check-protection)`.
    public func repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection(path: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Input.Path) async throws -> Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Output {
        try await repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection(Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Input(path: path))
    }
    /// Get all status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/get(repos/get-all-status-check-contexts)`.
    public func repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts(
        path: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
        headers: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Output {
        try await repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts(Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/post(repos/add-status-check-contexts)`.
    public func repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts(
        path: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
        headers: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init(),
        body: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Body? = nil
    ) async throws -> Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Output {
        try await repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts(Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/put(repos/set-status-check-contexts)`.
    public func repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts(
        path: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
        headers: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init(),
        body: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Body? = nil
    ) async throws -> Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Output {
        try await repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts(Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/delete(repos/remove-status-check-contexts)`.
    public func repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts(
        path: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
        headers: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init(),
        body: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Body? = nil
    ) async throws -> Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Output {
        try await repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts(Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists who has access to this protected branch.
    ///
    /// > [!NOTE]
    /// > Users, apps, and teams `restrictions` are only available for organization-owned repositories.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/get(repos/get-access-restrictions)`.
    public func repos_sol_get_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_get_hyphen_access_hyphen_restrictions(Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Disables the ability to restrict who can push to this branch.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/delete(repos/delete-access-restrictions)`.
    public func repos_sol_delete_hyphen_access_hyphen_restrictions(path: Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Input.Path) async throws -> Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_delete_hyphen_access_hyphen_restrictions(Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Input(path: path))
    }
    /// Get apps with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/get(repos/get-apps-with-access-to-protected-branch)`.
    public func repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(
        path: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path,
        headers: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output {
        try await repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/post(repos/add-app-access-restrictions)`.
    public func repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
    ) async throws -> Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions(Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/put(repos/set-app-access-restrictions)`.
    public func repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
    ) async throws -> Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions(Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/delete(repos/remove-app-access-restrictions)`.
    public func repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
    ) async throws -> Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions(Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get teams with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the teams who have push access to this branch. The list includes child teams.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/get(repos/get-teams-with-access-to-protected-branch)`.
    public func repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(
        path: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path,
        headers: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output {
        try await repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified teams push access for this branch. You can also give push access to child teams.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/post(repos/add-team-access-restrictions)`.
    public func repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body? = nil
    ) async throws -> Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions(Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/put(repos/set-team-access-restrictions)`.
    public func repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body? = nil
    ) async throws -> Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions(Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of a team to push to this branch. You can also remove push access for child teams.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/delete(repos/remove-team-access-restrictions)`.
    public func repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body? = nil
    ) async throws -> Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions(Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get users with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the people who have push access to this branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/get(repos/get-users-with-access-to-protected-branch)`.
    public func repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(
        path: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path,
        headers: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output {
        try await repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch(Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified people push access for this branch.
    ///
    /// | Type    | Description                                                                                                                   |
    /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/post(repos/add-user-access-restrictions)`.
    public func repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
    ) async throws -> Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions(Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
    ///
    /// | Type    | Description                                                                                                                   |
    /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/put(repos/set-user-access-restrictions)`.
    public func repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
    ) async throws -> Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions(Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of a user to push to this branch.
    ///
    /// | Type    | Description                                                                                                                                   |
    /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/delete(repos/remove-user-access-restrictions)`.
    public func repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions(
        path: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path,
        headers: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
        body: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
    ) async throws -> Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Output {
        try await repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions(Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Rename a branch
    ///
    /// Renames a branch in a repository.
    ///
    /// > [!NOTE]
    /// > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
    ///
    /// The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
    ///
    /// In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/rename`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/rename/post(repos/rename-branch)`.
    public func repos_sol_rename_hyphen_branch(
        path: Operations.repos_sol_rename_hyphen_branch.Input.Path,
        headers: Operations.repos_sol_rename_hyphen_branch.Input.Headers = .init(),
        body: Operations.repos_sol_rename_hyphen_branch.Input.Body
    ) async throws -> Operations.repos_sol_rename_hyphen_branch.Output {
        try await repos_sol_rename_hyphen_branch(Operations.repos_sol_rename_hyphen_branch.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List CODEOWNERS errors
    ///
    /// List any syntax errors that are detected in the CODEOWNERS
    /// file.
    ///
    /// For more information about the correct CODEOWNERS syntax,
    /// see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codeowners/errors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codeowners/errors/get(repos/codeowners-errors)`.
    public func repos_sol_codeowners_hyphen_errors(
        path: Operations.repos_sol_codeowners_hyphen_errors.Input.Path,
        query: Operations.repos_sol_codeowners_hyphen_errors.Input.Query = .init(),
        headers: Operations.repos_sol_codeowners_hyphen_errors.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_codeowners_hyphen_errors.Output {
        try await repos_sol_codeowners_hyphen_errors(Operations.repos_sol_codeowners_hyphen_errors.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository collaborators
    ///
    /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    /// Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// The authenticated user must have push access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/get(repos/list-collaborators)`.
    public func repos_sol_list_hyphen_collaborators(
        path: Operations.repos_sol_list_hyphen_collaborators.Input.Path,
        query: Operations.repos_sol_list_hyphen_collaborators.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_collaborators.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_collaborators.Output {
        try await repos_sol_list_hyphen_collaborators(Operations.repos_sol_list_hyphen_collaborators.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check if a user is a repository collaborator
    ///
    /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    ///
    /// Team members will include the members of child teams.
    ///
    /// The authenticated user must have push access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/get(repos/check-collaborator)`.
    public func repos_sol_check_hyphen_collaborator(path: Operations.repos_sol_check_hyphen_collaborator.Input.Path) async throws -> Operations.repos_sol_check_hyphen_collaborator.Output {
        try await repos_sol_check_hyphen_collaborator(Operations.repos_sol_check_hyphen_collaborator.Input(path: path))
    }
    /// Add a repository collaborator
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    ///
    /// For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
    ///
    /// ```
    /// Cannot assign {member} permission of {role name}
    /// ```
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).
    ///
    /// **Updating an existing collaborator's permission level**
    ///
    /// The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
    ///
    /// **Rate limits**
    ///
    /// You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/put(repos/add-collaborator)`.
    public func repos_sol_add_hyphen_collaborator(
        path: Operations.repos_sol_add_hyphen_collaborator.Input.Path,
        headers: Operations.repos_sol_add_hyphen_collaborator.Input.Headers = .init(),
        body: Operations.repos_sol_add_hyphen_collaborator.Input.Body? = nil
    ) async throws -> Operations.repos_sol_add_hyphen_collaborator.Output {
        try await repos_sol_add_hyphen_collaborator(Operations.repos_sol_add_hyphen_collaborator.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a repository collaborator
    ///
    /// Removes a collaborator from a repository.
    ///
    /// To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.
    ///
    /// This endpoint also:
    /// - Cancels any outstanding invitations
    /// - Unasigns the user from any issues
    /// - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
    /// - Unstars the repository
    /// - Updates access permissions to packages
    ///
    /// Removing a user as a collaborator has the following effects on forks:
    ///  - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
    ///  - If the user had their own fork of the repository, the fork will be deleted.
    ///  - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.
    ///
    /// > [!NOTE]
    /// > A user can still have access to the repository through organization permissions like base repository permissions.
    ///
    /// Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.
    ///
    /// For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/delete(repos/remove-collaborator)`.
    public func repos_sol_remove_hyphen_collaborator(
        path: Operations.repos_sol_remove_hyphen_collaborator.Input.Path,
        headers: Operations.repos_sol_remove_hyphen_collaborator.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_remove_hyphen_collaborator.Output {
        try await repos_sol_remove_hyphen_collaborator(Operations.repos_sol_remove_hyphen_collaborator.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get repository permissions for a user
    ///
    /// Checks the repository permission of a collaborator. The possible repository
    /// permissions are `admin`, `write`, `read`, and `none`.
    ///
    /// *Note*: The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the
    /// `maintain` role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role assigned to the
    /// collaborator, see the `role_name` attribute, which will provide the full role name, including custom roles. The
    /// `permissions` hash can also be used to determine which base level of access the collaborator has to the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/permission/get(repos/get-collaborator-permission-level)`.
    public func repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level(
        path: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input.Path,
        headers: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Output {
        try await repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level(Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input(
            path: path,
            headers: headers
        ))
    }
    /// List commit comments for a repository
    ///
    /// Lists the commit comments for a specified repository. Comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/get(repos/list-commit-comments-for-repo)`.
    public func repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo(
        path: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output {
        try await repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo(Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a commit comment
    ///
    /// Gets a specified commit comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/get(repos/get-commit-comment)`.
    public func repos_sol_get_hyphen_commit_hyphen_comment(
        path: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input.Path,
        headers: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_commit_hyphen_comment.Output {
        try await repos_sol_get_hyphen_commit_hyphen_comment(Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a commit comment
    ///
    /// Updates the contents of a specified commit comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/patch(repos/update-commit-comment)`.
    public func repos_sol_update_hyphen_commit_hyphen_comment(
        path: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Path,
        headers: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Body
    ) async throws -> Operations.repos_sol_update_hyphen_commit_hyphen_comment.Output {
        try await repos_sol_update_hyphen_commit_hyphen_comment(Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a commit comment
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/delete(repos/delete-commit-comment)`.
    public func repos_sol_delete_hyphen_commit_hyphen_comment(
        path: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Output {
        try await repos_sol_delete_hyphen_commit_hyphen_comment(Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input(
            path: path,
            headers: headers
        ))
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    public func repos_sol_list_hyphen_commits(
        path: Operations.repos_sol_list_hyphen_commits.Input.Path,
        query: Operations.repos_sol_list_hyphen_commits.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_commits.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_commits.Output {
        try await repos_sol_list_hyphen_commits(Operations.repos_sol_list_hyphen_commits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List branches for HEAD commit
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/get(repos/list-branches-for-head-commit)`.
    public func repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit(
        path: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input.Path,
        headers: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Output {
        try await repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit(Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input(
            path: path,
            headers: headers
        ))
    }
    /// List commit comments
    ///
    /// Lists the comments for a specified commit.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/get(repos/list-comments-for-commit)`.
    public func repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit(
        path: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Path,
        query: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output {
        try await repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit(Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a commit comment
    ///
    /// Create a comment for a commit using its `:commit_sha`.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/commits/{commit_sha}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/post(repos/create-commit-comment)`.
    public func repos_sol_create_hyphen_commit_hyphen_comment(
        path: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Path,
        headers: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output {
        try await repos_sol_create_hyphen_commit_hyphen_comment(Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    public func repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit(
        path: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Path,
        query: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output {
        try await repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit(Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a commit
    ///
    /// Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
    ///
    /// > [!NOTE]
    /// > If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types.
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.
    /// - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)`.
    public func repos_sol_get_hyphen_commit(
        path: Operations.repos_sol_get_hyphen_commit.Input.Path,
        query: Operations.repos_sol_get_hyphen_commit.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_commit.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_commit.Output {
        try await repos_sol_get_hyphen_commit(Operations.repos_sol_get_hyphen_commit.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get the combined status for a specific reference
    ///
    /// Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
    ///
    ///
    /// Additionally, a combined `state` is returned. The `state` is one of:
    ///
    /// *   **failure** if any of the contexts report as `error` or `failure`
    /// *   **pending** if there are no statuses or a context is `pending`
    /// *   **success** if the latest status for all contexts is `success`
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/status`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/status/get(repos/get-combined-status-for-ref)`.
    public func repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref(
        path: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Path,
        query: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Output {
        try await repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref(Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List commit statuses for a reference
    ///
    /// Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
    ///
    /// This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/statuses/get(repos/list-commit-statuses-for-ref)`.
    public func repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref(
        path: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Path,
        query: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output {
        try await repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref(Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get community profile metrics
    ///
    /// Returns all community profile metrics for a repository. The repository cannot be a fork.
    ///
    /// The returned metrics include an overall health score, the repository description, the presence of documentation, the
    /// detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
    /// README, and CONTRIBUTING files.
    ///
    /// The `health_percentage` score is defined as a percentage of how many of
    /// the recommended community health files are present. For more information, see
    /// "[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."
    ///
    /// `content_reports_enabled` is only returned for organization-owned repositories.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/community/profile`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/community/profile/get(repos/get-community-profile-metrics)`.
    public func repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics(
        path: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input.Path,
        headers: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Output {
        try await repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics(Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input(
            path: path,
            headers: headers
        ))
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    public func repos_sol_compare_hyphen_commits(
        path: Operations.repos_sol_compare_hyphen_commits.Input.Path,
        query: Operations.repos_sol_compare_hyphen_commits.Input.Query = .init(),
        headers: Operations.repos_sol_compare_hyphen_commits.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_compare_hyphen_commits.Output {
        try await repos_sol_compare_hyphen_commits(Operations.repos_sol_compare_hyphen_commits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get repository content
    ///
    /// Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
    /// - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    /// - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
    ///
    /// If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
    ///
    /// If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.
    ///
    /// If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
    ///
    /// **Notes**:
    ///
    /// - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
    /// - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
    /// more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
    /// - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
    /// - If the requested file's size is:
    ///   - 1 MB or smaller: All features of this endpoint are supported.
    ///   - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
    /// string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
    ///   - Greater than 100 MB: This endpoint is not supported.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)`.
    public func repos_sol_get_hyphen_content(
        path: Operations.repos_sol_get_hyphen_content.Input.Path,
        query: Operations.repos_sol_get_hyphen_content.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_content.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_content.Output {
        try await repos_sol_get_hyphen_content(Operations.repos_sol_get_hyphen_content.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create or update file contents
    ///
    /// Creates a new file or replaces an existing file in a repository.
    ///
    /// > [!NOTE]
    /// > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)`.
    public func repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents(
        path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Path,
        headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output {
        try await repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a file
    ///
    /// Deletes a file in a repository.
    ///
    /// You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
    ///
    /// The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
    ///
    /// You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
    ///
    /// > [!NOTE]
    /// > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)`.
    public func repos_sol_delete_hyphen_file(
        path: Operations.repos_sol_delete_hyphen_file.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_file.Input.Headers = .init(),
        body: Operations.repos_sol_delete_hyphen_file.Input.Body
    ) async throws -> Operations.repos_sol_delete_hyphen_file.Output {
        try await repos_sol_delete_hyphen_file(Operations.repos_sol_delete_hyphen_file.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    public func repos_sol_list_hyphen_contributors(
        path: Operations.repos_sol_list_hyphen_contributors.Input.Path,
        query: Operations.repos_sol_list_hyphen_contributors.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_contributors.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_contributors.Output {
        try await repos_sol_list_hyphen_contributors(Operations.repos_sol_list_hyphen_contributors.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List deployments
    ///
    /// Simple filtering of deployments is available via query parameters:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/get(repos/list-deployments)`.
    public func repos_sol_list_hyphen_deployments(
        path: Operations.repos_sol_list_hyphen_deployments.Input.Path,
        query: Operations.repos_sol_list_hyphen_deployments.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_deployments.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_deployments.Output {
        try await repos_sol_list_hyphen_deployments(Operations.repos_sol_list_hyphen_deployments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a deployment
    ///
    /// Deployments offer a few configurable parameters with certain defaults.
    ///
    /// The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
    /// before we merge a pull request.
    ///
    /// The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
    /// multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
    /// makes it easier to track which environments have requested deployments. The default environment is `production`.
    ///
    /// The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
    /// the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
    /// the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
    /// return a failure response.
    ///
    /// By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
    /// state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
    /// specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
    /// not require any contexts or create any commit statuses, the deployment will always succeed.
    ///
    /// The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
    /// field that will be passed on when a deployment event is dispatched.
    ///
    /// The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
    /// be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
    /// application with debugging enabled.
    ///
    /// Merged branch response:
    ///
    /// You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
    /// a deployment. This auto-merge happens when:
    /// *   Auto-merge option is enabled in the repository
    /// *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
    /// *   There are no merge conflicts
    ///
    /// If there are no new commits in the base branch, a new request to create a deployment should give a successful
    /// response.
    ///
    /// Merge conflict response:
    ///
    /// This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
    /// be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
    ///
    /// Failed commit status checks:
    ///
    /// This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
    /// status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/post(repos/create-deployment)`.
    public func repos_sol_create_hyphen_deployment(
        path: Operations.repos_sol_create_hyphen_deployment.Input.Path,
        headers: Operations.repos_sol_create_hyphen_deployment.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_deployment.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_deployment.Output {
        try await repos_sol_create_hyphen_deployment(Operations.repos_sol_create_hyphen_deployment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a deployment
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/get(repos/get-deployment)`.
    public func repos_sol_get_hyphen_deployment(
        path: Operations.repos_sol_get_hyphen_deployment.Input.Path,
        headers: Operations.repos_sol_get_hyphen_deployment.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_deployment.Output {
        try await repos_sol_get_hyphen_deployment(Operations.repos_sol_get_hyphen_deployment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a deployment
    ///
    /// If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.
    ///
    /// To set a deployment as inactive, you must:
    ///
    /// *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
    /// *   Mark the active deployment as inactive by adding any non-successful deployment status.
    ///
    /// For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/deployments/{deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/delete(repos/delete-deployment)`.
    public func repos_sol_delete_hyphen_deployment(
        path: Operations.repos_sol_delete_hyphen_deployment.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_deployment.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_deployment.Output {
        try await repos_sol_delete_hyphen_deployment(Operations.repos_sol_delete_hyphen_deployment.Input(
            path: path,
            headers: headers
        ))
    }
    /// List deployment statuses
    ///
    /// Users with pull access can view deployment statuses for a deployment:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/get(repos/list-deployment-statuses)`.
    public func repos_sol_list_hyphen_deployment_hyphen_statuses(
        path: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Path,
        query: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output {
        try await repos_sol_list_hyphen_deployment_hyphen_statuses(Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a deployment status
    ///
    /// Users with `push` access can create deployment statuses for a given deployment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/post(repos/create-deployment-status)`.
    public func repos_sol_create_hyphen_deployment_hyphen_status(
        path: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Path,
        headers: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output {
        try await repos_sol_create_hyphen_deployment_hyphen_status(Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a deployment status
    ///
    /// Users with pull access can view a deployment status for a deployment:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/get(repos/get-deployment-status)`.
    public func repos_sol_get_hyphen_deployment_hyphen_status(
        path: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input.Path,
        headers: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_deployment_hyphen_status.Output {
        try await repos_sol_get_hyphen_deployment_hyphen_status(Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a repository dispatch event
    ///
    /// You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
    ///
    /// The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
    ///
    /// This input example shows how you can use the `client_payload` as a test to debug your workflow.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/dispatches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dispatches/post(repos/create-dispatch-event)`.
    public func repos_sol_create_hyphen_dispatch_hyphen_event(
        path: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Path,
        headers: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Output {
        try await repos_sol_create_hyphen_dispatch_hyphen_event(Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List environments
    ///
    /// Lists the environments for a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/get(repos/get-all-environments)`.
    public func repos_sol_get_hyphen_all_hyphen_environments(
        path: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Path,
        query: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_environments.Output {
        try await repos_sol_get_hyphen_all_hyphen_environments(Operations.repos_sol_get_hyphen_all_hyphen_environments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an environment
    ///
    /// > [!NOTE]
    /// > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/get(repos/get-environment)`.
    public func repos_sol_get_hyphen_environment(
        path: Operations.repos_sol_get_hyphen_environment.Input.Path,
        headers: Operations.repos_sol_get_hyphen_environment.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_environment.Output {
        try await repos_sol_get_hyphen_environment(Operations.repos_sol_get_hyphen_environment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update an environment
    ///
    /// Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
    ///
    /// > [!NOTE]
    /// > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
    ///
    /// > [!NOTE]
    /// > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/put(repos/create-or-update-environment)`.
    public func repos_sol_create_hyphen_or_hyphen_update_hyphen_environment(
        path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Path,
        headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body? = nil
    ) async throws -> Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output {
        try await repos_sol_create_hyphen_or_hyphen_update_hyphen_environment(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an environment
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/delete(repos/delete-an-environment)`.
    public func repos_sol_delete_hyphen_an_hyphen_environment(path: Operations.repos_sol_delete_hyphen_an_hyphen_environment.Input.Path) async throws -> Operations.repos_sol_delete_hyphen_an_hyphen_environment.Output {
        try await repos_sol_delete_hyphen_an_hyphen_environment(Operations.repos_sol_delete_hyphen_an_hyphen_environment.Input(path: path))
    }
    /// List deployment branch policies
    ///
    /// Lists the deployment branch policies for an environment.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/get(repos/list-deployment-branch-policies)`.
    public func repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies(
        path: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Path,
        query: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output {
        try await repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies(Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a deployment branch policy
    ///
    /// Creates a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/post(repos/create-deployment-branch-policy)`.
    public func repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy(
        path: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path,
        headers: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output {
        try await repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy(Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a deployment branch policy
    ///
    /// Gets a deployment branch or tag policy for an environment.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/get(repos/get-deployment-branch-policy)`.
    public func repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy(
        path: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path,
        headers: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Output {
        try await repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy(Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a deployment branch policy
    ///
    /// Updates a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/put(repos/update-deployment-branch-policy)`.
    public func repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy(
        path: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path,
        headers: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Body
    ) async throws -> Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Output {
        try await repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy(Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a deployment branch policy
    ///
    /// Deletes a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/delete(repos/delete-deployment-branch-policy)`.
    public func repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy(path: Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path) async throws -> Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Output {
        try await repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy(Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Input(path: path))
    }
    /// Get all deployment protection rules for an environment
    ///
    /// Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/get(repos/get-all-deployment-protection-rules)`.
    public func repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules(
        path: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input.Path,
        headers: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output {
        try await repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules(Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a custom deployment protection rule on an environment
    ///
    /// Enable a custom deployment protection rule for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/post(repos/create-deployment-protection-rule)`.
    public func repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule(
        path: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path,
        headers: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Output {
        try await repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule(Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List custom deployment rule integrations available for an environment
    ///
    /// Gets all custom deployment protection rule integrations that are available for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/get(repos/list-custom-deployment-rule-integrations)`.
    public func repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations(
        path: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Path,
        query: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output {
        try await repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations(Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a custom deployment protection rule
    ///
    /// Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/get(repos/get-custom-deployment-protection-rule)`.
    public func repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule(
        path: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path,
        headers: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Output {
        try await repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule(Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input(
            path: path,
            headers: headers
        ))
    }
    /// Disable a custom protection rule for an environment
    ///
    /// Disables a custom deployment protection rule for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/delete(repos/disable-deployment-protection-rule)`.
    public func repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule(path: Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path) async throws -> Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Output {
        try await repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule(Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Input(path: path))
    }
    /// List forks
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/get(repos/list-forks)`.
    public func repos_sol_list_hyphen_forks(
        path: Operations.repos_sol_list_hyphen_forks.Input.Path,
        query: Operations.repos_sol_list_hyphen_forks.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_forks.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_forks.Output {
        try await repos_sol_list_hyphen_forks(Operations.repos_sol_list_hyphen_forks.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a fork
    ///
    /// Create a fork for the authenticated user.
    ///
    /// > [!NOTE]
    /// > Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    ///
    /// > [!NOTE]
    /// > Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)`.
    public func repos_sol_create_hyphen_fork(
        path: Operations.repos_sol_create_hyphen_fork.Input.Path,
        headers: Operations.repos_sol_create_hyphen_fork.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_fork.Input.Body? = nil
    ) async throws -> Operations.repos_sol_create_hyphen_fork.Output {
        try await repos_sol_create_hyphen_fork(Operations.repos_sol_create_hyphen_fork.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repository webhooks
    ///
    /// Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/get(repos/list-webhooks)`.
    public func repos_sol_list_hyphen_webhooks(
        path: Operations.repos_sol_list_hyphen_webhooks.Input.Path,
        query: Operations.repos_sol_list_hyphen_webhooks.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_webhooks.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_webhooks.Output {
        try await repos_sol_list_hyphen_webhooks(Operations.repos_sol_list_hyphen_webhooks.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a repository webhook
    ///
    /// Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
    /// share the same `config` as long as those webhooks do not have any `events` that overlap.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/post(repos/create-webhook)`.
    public func repos_sol_create_hyphen_webhook(
        path: Operations.repos_sol_create_hyphen_webhook.Input.Path,
        headers: Operations.repos_sol_create_hyphen_webhook.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_webhook.Input.Body? = nil
    ) async throws -> Operations.repos_sol_create_hyphen_webhook.Output {
        try await repos_sol_create_hyphen_webhook(Operations.repos_sol_create_hyphen_webhook.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a repository webhook
    ///
    /// Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/get(repos/get-webhook)`.
    public func repos_sol_get_hyphen_webhook(
        path: Operations.repos_sol_get_hyphen_webhook.Input.Path,
        headers: Operations.repos_sol_get_hyphen_webhook.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_webhook.Output {
        try await repos_sol_get_hyphen_webhook(Operations.repos_sol_get_hyphen_webhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a repository webhook
    ///
    /// Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/patch(repos/update-webhook)`.
    public func repos_sol_update_hyphen_webhook(
        path: Operations.repos_sol_update_hyphen_webhook.Input.Path,
        headers: Operations.repos_sol_update_hyphen_webhook.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_webhook.Input.Body
    ) async throws -> Operations.repos_sol_update_hyphen_webhook.Output {
        try await repos_sol_update_hyphen_webhook(Operations.repos_sol_update_hyphen_webhook.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository webhook
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/delete(repos/delete-webhook)`.
    public func repos_sol_delete_hyphen_webhook(
        path: Operations.repos_sol_delete_hyphen_webhook.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_webhook.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_webhook.Output {
        try await repos_sol_delete_hyphen_webhook(Operations.repos_sol_delete_hyphen_webhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a webhook configuration for a repository
    ///
    /// Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/get(repos/get-webhook-config-for-repo)`.
    public func repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo(
        path: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output {
        try await repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo(Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a webhook configuration for a repository
    ///
    /// Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/patch(repos/update-webhook-config-for-repo)`.
    public func repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo(
        path: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Path,
        headers: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output {
        try await repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo(Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List deliveries for a repository webhook
    ///
    /// Returns a list of webhook deliveries for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/get(repos/list-webhook-deliveries)`.
    public func repos_sol_list_hyphen_webhook_hyphen_deliveries(
        path: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Path,
        query: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Output {
        try await repos_sol_list_hyphen_webhook_hyphen_deliveries(Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a delivery for a repository webhook
    ///
    /// Returns a delivery for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/get(repos/get-webhook-delivery)`.
    public func repos_sol_get_hyphen_webhook_hyphen_delivery(
        path: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input.Path,
        headers: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Output {
        try await repos_sol_get_hyphen_webhook_hyphen_delivery(Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input(
            path: path,
            headers: headers
        ))
    }
    /// Redeliver a delivery for a repository webhook
    ///
    /// Redeliver a webhook delivery for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(repos/redeliver-webhook-delivery)`.
    public func repos_sol_redeliver_hyphen_webhook_hyphen_delivery(
        path: Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path,
        headers: Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Output {
        try await repos_sol_redeliver_hyphen_webhook_hyphen_delivery(Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input(
            path: path,
            headers: headers
        ))
    }
    /// Ping a repository webhook
    ///
    /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/pings`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/pings/post(repos/ping-webhook)`.
    public func repos_sol_ping_hyphen_webhook(
        path: Operations.repos_sol_ping_hyphen_webhook.Input.Path,
        headers: Operations.repos_sol_ping_hyphen_webhook.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_ping_hyphen_webhook.Output {
        try await repos_sol_ping_hyphen_webhook(Operations.repos_sol_ping_hyphen_webhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// Test the push repository webhook
    ///
    /// This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
    ///
    /// > [!NOTE]
    /// > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/tests`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/tests/post(repos/test-push-webhook)`.
    public func repos_sol_test_hyphen_push_hyphen_webhook(
        path: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input.Path,
        headers: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_test_hyphen_push_hyphen_webhook.Output {
        try await repos_sol_test_hyphen_push_hyphen_webhook(Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository invitations
    ///
    /// When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/invitations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/get(repos/list-invitations)`.
    public func repos_sol_list_hyphen_invitations(
        path: Operations.repos_sol_list_hyphen_invitations.Input.Path,
        query: Operations.repos_sol_list_hyphen_invitations.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_invitations.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_invitations.Output {
        try await repos_sol_list_hyphen_invitations(Operations.repos_sol_list_hyphen_invitations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Update a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/patch(repos/update-invitation)`.
    public func repos_sol_update_hyphen_invitation(
        path: Operations.repos_sol_update_hyphen_invitation.Input.Path,
        headers: Operations.repos_sol_update_hyphen_invitation.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_invitation.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_invitation.Output {
        try await repos_sol_update_hyphen_invitation(Operations.repos_sol_update_hyphen_invitation.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/delete(repos/delete-invitation)`.
    public func repos_sol_delete_hyphen_invitation(path: Operations.repos_sol_delete_hyphen_invitation.Input.Path) async throws -> Operations.repos_sol_delete_hyphen_invitation.Output {
        try await repos_sol_delete_hyphen_invitation(Operations.repos_sol_delete_hyphen_invitation.Input(path: path))
    }
    /// List deploy keys
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/keys`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/get(repos/list-deploy-keys)`.
    public func repos_sol_list_hyphen_deploy_hyphen_keys(
        path: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Path,
        query: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output {
        try await repos_sol_list_hyphen_deploy_hyphen_keys(Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a deploy key
    ///
    /// You can create a read-only deploy key.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/keys`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/post(repos/create-deploy-key)`.
    public func repos_sol_create_hyphen_deploy_hyphen_key(
        path: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Path,
        headers: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output {
        try await repos_sol_create_hyphen_deploy_hyphen_key(Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a deploy key
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/get(repos/get-deploy-key)`.
    public func repos_sol_get_hyphen_deploy_hyphen_key(
        path: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input.Path,
        headers: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_deploy_hyphen_key.Output {
        try await repos_sol_get_hyphen_deploy_hyphen_key(Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a deploy key
    ///
    /// Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/delete(repos/delete-deploy-key)`.
    public func repos_sol_delete_hyphen_deploy_hyphen_key(path: Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Input.Path) async throws -> Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Output {
        try await repos_sol_delete_hyphen_deploy_hyphen_key(Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Input(path: path))
    }
    /// List repository languages
    ///
    /// Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/languages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/languages/get(repos/list-languages)`.
    public func repos_sol_list_hyphen_languages(
        path: Operations.repos_sol_list_hyphen_languages.Input.Path,
        headers: Operations.repos_sol_list_hyphen_languages.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_languages.Output {
        try await repos_sol_list_hyphen_languages(Operations.repos_sol_list_hyphen_languages.Input(
            path: path,
            headers: headers
        ))
    }
    /// Sync a fork branch with the upstream repository
    ///
    /// Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/merge-upstream`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merge-upstream/post(repos/merge-upstream)`.
    public func repos_sol_merge_hyphen_upstream(
        path: Operations.repos_sol_merge_hyphen_upstream.Input.Path,
        headers: Operations.repos_sol_merge_hyphen_upstream.Input.Headers = .init(),
        body: Operations.repos_sol_merge_hyphen_upstream.Input.Body
    ) async throws -> Operations.repos_sol_merge_hyphen_upstream.Output {
        try await repos_sol_merge_hyphen_upstream(Operations.repos_sol_merge_hyphen_upstream.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Merge a branch
    ///
    ///
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/merges`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)`.
    public func repos_sol_merge(
        path: Operations.repos_sol_merge.Input.Path,
        headers: Operations.repos_sol_merge.Input.Headers = .init(),
        body: Operations.repos_sol_merge.Input.Body
    ) async throws -> Operations.repos_sol_merge.Output {
        try await repos_sol_merge(Operations.repos_sol_merge.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a GitHub Pages site
    ///
    /// Gets information about a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/get(repos/get-pages)`.
    public func repos_sol_get_hyphen_pages(
        path: Operations.repos_sol_get_hyphen_pages.Input.Path,
        headers: Operations.repos_sol_get_hyphen_pages.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_pages.Output {
        try await repos_sol_get_hyphen_pages(Operations.repos_sol_get_hyphen_pages.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a GitHub Pages site
    ///
    /// Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/post(repos/create-pages-site)`.
    public func repos_sol_create_hyphen_pages_hyphen_site(
        path: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Path,
        headers: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_pages_hyphen_site.Output {
        try await repos_sol_create_hyphen_pages_hyphen_site(Operations.repos_sol_create_hyphen_pages_hyphen_site.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Update information about a GitHub Pages site
    ///
    /// Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/put(repos/update-information-about-pages-site)`.
    public func repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site(
        path: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Path,
        headers: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body
    ) async throws -> Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Output {
        try await repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site(Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a GitHub Pages site
    ///
    /// Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/delete(repos/delete-pages-site)`.
    public func repos_sol_delete_hyphen_pages_hyphen_site(
        path: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_pages_hyphen_site.Output {
        try await repos_sol_delete_hyphen_pages_hyphen_site(Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input(
            path: path,
            headers: headers
        ))
    }
    /// List GitHub Pages builds
    ///
    /// Lists builts of a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/get(repos/list-pages-builds)`.
    public func repos_sol_list_hyphen_pages_hyphen_builds(
        path: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Path,
        query: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output {
        try await repos_sol_list_hyphen_pages_hyphen_builds(Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Request a GitHub Pages build
    ///
    /// You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
    ///
    /// Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/builds`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/post(repos/request-pages-build)`.
    public func repos_sol_request_hyphen_pages_hyphen_build(
        path: Operations.repos_sol_request_hyphen_pages_hyphen_build.Input.Path,
        headers: Operations.repos_sol_request_hyphen_pages_hyphen_build.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_request_hyphen_pages_hyphen_build.Output {
        try await repos_sol_request_hyphen_pages_hyphen_build(Operations.repos_sol_request_hyphen_pages_hyphen_build.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get latest Pages build
    ///
    /// Gets information about the single most recent build of a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/latest/get(repos/get-latest-pages-build)`.
    public func repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build(
        path: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input.Path,
        headers: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Output {
        try await repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build(Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get GitHub Pages build
    ///
    /// Gets information about a GitHub Pages build.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds/{build_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/{build_id}/get(repos/get-pages-build)`.
    public func repos_sol_get_hyphen_pages_hyphen_build(
        path: Operations.repos_sol_get_hyphen_pages_hyphen_build.Input.Path,
        headers: Operations.repos_sol_get_hyphen_pages_hyphen_build.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_pages_hyphen_build.Output {
        try await repos_sol_get_hyphen_pages_hyphen_build(Operations.repos_sol_get_hyphen_pages_hyphen_build.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a GitHub Pages deployment
    ///
    /// Create a GitHub Pages deployment for a repository.
    ///
    /// The authenticated user must have write permission to the repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/post(repos/create-pages-deployment)`.
    public func repos_sol_create_hyphen_pages_hyphen_deployment(
        path: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Path,
        headers: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Output {
        try await repos_sol_create_hyphen_pages_hyphen_deployment(Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get the status of a GitHub Pages deployment
    ///
    /// Gets the current status of a GitHub Pages deployment.
    ///
    /// The authenticated user must have read permission for the GitHub Pages site.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/get(repos/get-pages-deployment)`.
    public func repos_sol_get_hyphen_pages_hyphen_deployment(
        path: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input.Path,
        headers: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Output {
        try await repos_sol_get_hyphen_pages_hyphen_deployment(Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Cancel a GitHub Pages deployment
    ///
    /// Cancels a GitHub Pages deployment.
    ///
    /// The authenticated user must have write permissions for the GitHub Pages site.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/post(repos/cancel-pages-deployment)`.
    public func repos_sol_cancel_hyphen_pages_hyphen_deployment(
        path: Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input.Path,
        headers: Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Output {
        try await repos_sol_cancel_hyphen_pages_hyphen_deployment(Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a DNS health check for GitHub Pages
    ///
    /// Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
    ///
    /// The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/health`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)`.
    public func repos_sol_get_hyphen_pages_hyphen_health_hyphen_check(
        path: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input.Path,
        headers: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output {
        try await repos_sol_get_hyphen_pages_hyphen_health_hyphen_check(Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input(
            path: path,
            headers: headers
        ))
    }
    /// Check if private vulnerability reporting is enabled for a repository
    ///
    /// Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/get(repos/check-private-vulnerability-reporting)`.
    public func repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting(
        path: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path,
        headers: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output {
        try await repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting(Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input(
            path: path,
            headers: headers
        ))
    }
    /// Enable private vulnerability reporting for a repository
    ///
    /// Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/put(repos/enable-private-vulnerability-reporting)`.
    public func repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting(
        path: Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path,
        headers: Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output {
        try await repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting(Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input(
            path: path,
            headers: headers
        ))
    }
    /// Disable private vulnerability reporting for a repository
    ///
    /// Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/delete(repos/disable-private-vulnerability-reporting)`.
    public func repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting(
        path: Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path,
        headers: Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output {
        try await repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting(Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get all custom property values for a repository
    ///
    /// Gets all custom property values that are set for a repository.
    /// Users with read access to the repository can use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/properties/values`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/get(repos/get-custom-properties-values)`.
    public func repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values(
        path: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input.Path,
        headers: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Output {
        try await repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values(Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update custom property values for a repository
    ///
    /// Create new or update existing custom property values for a repository.
    /// Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
    ///
    /// Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/properties/values`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/patch(repos/create-or-update-custom-properties-values)`.
    public func repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values(
        path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Path,
        headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Output {
        try await repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a repository README
    ///
    /// Gets the preferred README for a repository.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
    /// - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/readme`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/get(repos/get-readme)`.
    public func repos_sol_get_hyphen_readme(
        path: Operations.repos_sol_get_hyphen_readme.Input.Path,
        query: Operations.repos_sol_get_hyphen_readme.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_readme.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_readme.Output {
        try await repos_sol_get_hyphen_readme(Operations.repos_sol_get_hyphen_readme.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a repository README for a directory
    ///
    /// Gets the README from a repository directory.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
    /// - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/readme/{dir}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/{dir}/get(repos/get-readme-in-directory)`.
    public func repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory(
        path: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Path,
        query: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Output {
        try await repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory(Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    public func repos_sol_list_hyphen_releases(
        path: Operations.repos_sol_list_hyphen_releases.Input.Path,
        query: Operations.repos_sol_list_hyphen_releases.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_releases.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_releases.Output {
        try await repos_sol_list_hyphen_releases(Operations.repos_sol_list_hyphen_releases.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    public func repos_sol_create_hyphen_release(
        path: Operations.repos_sol_create_hyphen_release.Input.Path,
        headers: Operations.repos_sol_create_hyphen_release.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_release.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_release.Output {
        try await repos_sol_create_hyphen_release(Operations.repos_sol_create_hyphen_release.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a release asset
    ///
    /// To download the asset's binary content:
    ///
    /// - If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.
    /// - Alternatively, set the `Accept` header of the request to 
    ///   [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). 
    ///   The API will either redirect the client to the location, or stream it directly if possible.
    ///   API clients should handle both a `200` or `302` response.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/get(repos/get-release-asset)`.
    public func repos_sol_get_hyphen_release_hyphen_asset(
        path: Operations.repos_sol_get_hyphen_release_hyphen_asset.Input.Path,
        headers: Operations.repos_sol_get_hyphen_release_hyphen_asset.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_release_hyphen_asset.Output {
        try await repos_sol_get_hyphen_release_hyphen_asset(Operations.repos_sol_get_hyphen_release_hyphen_asset.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a release asset
    ///
    /// Users with push access to the repository can edit a release asset.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/patch(repos/update-release-asset)`.
    public func repos_sol_update_hyphen_release_hyphen_asset(
        path: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Path,
        headers: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_release_hyphen_asset.Output {
        try await repos_sol_update_hyphen_release_hyphen_asset(Operations.repos_sol_update_hyphen_release_hyphen_asset.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a release asset
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/delete(repos/delete-release-asset)`.
    public func repos_sol_delete_hyphen_release_hyphen_asset(path: Operations.repos_sol_delete_hyphen_release_hyphen_asset.Input.Path) async throws -> Operations.repos_sol_delete_hyphen_release_hyphen_asset.Output {
        try await repos_sol_delete_hyphen_release_hyphen_asset(Operations.repos_sol_delete_hyphen_release_hyphen_asset.Input(path: path))
    }
    /// Generate release notes content for a release
    ///
    /// Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases/generate-notes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/generate-notes/post(repos/generate-release-notes)`.
    public func repos_sol_generate_hyphen_release_hyphen_notes(
        path: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Path,
        headers: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Headers = .init(),
        body: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Body
    ) async throws -> Operations.repos_sol_generate_hyphen_release_hyphen_notes.Output {
        try await repos_sol_generate_hyphen_release_hyphen_notes(Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    public func repos_sol_get_hyphen_latest_hyphen_release(
        path: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Path,
        headers: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_latest_hyphen_release.Output {
        try await repos_sol_get_hyphen_latest_hyphen_release(Operations.repos_sol_get_hyphen_latest_hyphen_release.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a release by tag name
    ///
    /// Get a published release with the specified tag.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/tags/{tag}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/tags/{tag}/get(repos/get-release-by-tag)`.
    public func repos_sol_get_hyphen_release_hyphen_by_hyphen_tag(
        path: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input.Path,
        headers: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Output {
        try await repos_sol_get_hyphen_release_hyphen_by_hyphen_tag(Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a release
    ///
    /// Gets a public release with the specified release ID.
    ///
    /// > [!NOTE]
    /// > This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/get(repos/get-release)`.
    public func repos_sol_get_hyphen_release(
        path: Operations.repos_sol_get_hyphen_release.Input.Path,
        headers: Operations.repos_sol_get_hyphen_release.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_release.Output {
        try await repos_sol_get_hyphen_release(Operations.repos_sol_get_hyphen_release.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a release
    ///
    /// Users with push access to the repository can edit a release.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/patch(repos/update-release)`.
    public func repos_sol_update_hyphen_release(
        path: Operations.repos_sol_update_hyphen_release.Input.Path,
        headers: Operations.repos_sol_update_hyphen_release.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_release.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_release.Output {
        try await repos_sol_update_hyphen_release(Operations.repos_sol_update_hyphen_release.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a release
    ///
    /// Users with push access to the repository can delete a release.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/delete(repos/delete-release)`.
    public func repos_sol_delete_hyphen_release(path: Operations.repos_sol_delete_hyphen_release.Input.Path) async throws -> Operations.repos_sol_delete_hyphen_release.Output {
        try await repos_sol_delete_hyphen_release(Operations.repos_sol_delete_hyphen_release.Input(path: path))
    }
    /// List release assets
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/{release_id}/assets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/get(repos/list-release-assets)`.
    public func repos_sol_list_hyphen_release_hyphen_assets(
        path: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Path,
        query: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_release_hyphen_assets.Output {
        try await repos_sol_list_hyphen_release_hyphen_assets(Operations.repos_sol_list_hyphen_release_hyphen_assets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Upload a release asset
    ///
    /// This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
    /// the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
    ///
    /// You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
    ///
    /// Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 
    ///
    /// `application/zip`
    ///
    /// GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
    /// you'll still need to pass your authentication to be able to upload an asset.
    ///
    /// When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
    ///
    /// **Notes:**
    /// *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
    /// endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    /// *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). 
    /// *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases/{release_id}/assets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/post(repos/upload-release-asset)`.
    public func repos_sol_upload_hyphen_release_hyphen_asset(
        path: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Path,
        query: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Query,
        headers: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Headers = .init(),
        body: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Body? = nil
    ) async throws -> Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output {
        try await repos_sol_upload_hyphen_release_hyphen_asset(Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Get rules for a branch
    ///
    /// Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply
    /// to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level
    /// at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled"
    /// enforcement statuses are not returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rules/branches/{branch}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rules/branches/{branch}/get(repos/get-branch-rules)`.
    public func repos_sol_get_hyphen_branch_hyphen_rules(
        path: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Path,
        query: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_branch_hyphen_rules.Output {
        try await repos_sol_get_hyphen_branch_hyphen_rules(Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get all repository rulesets
    ///
    /// Get all the rulesets for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/get(repos/get-repo-rulesets)`.
    public func repos_sol_get_hyphen_repo_hyphen_rulesets(
        path: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Path,
        query: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Output {
        try await repos_sol_get_hyphen_repo_hyphen_rulesets(Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a repository ruleset
    ///
    /// Create a ruleset for a repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/rulesets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/post(repos/create-repo-ruleset)`.
    public func repos_sol_create_hyphen_repo_hyphen_ruleset(
        path: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Path,
        headers: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Output {
        try await repos_sol_create_hyphen_repo_hyphen_ruleset(Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repository rule suites
    ///
    /// Lists suites of rule evaluations at the repository level.
    /// For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/rule-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/get(repos/get-repo-rule-suites)`.
    public func repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites(
        path: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Path,
        query: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Output {
        try await repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites(Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a repository rule suite
    ///
    /// Gets information about a suite of rule evaluations from within a repository.
    /// For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-repo-rule-suite)`.
    public func repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite(
        path: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input.Path,
        headers: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Output {
        try await repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite(Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a repository ruleset
    ///
    /// Get a ruleset for a repository.
    ///
    /// **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
    /// making the API request has write access to the ruleset.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/get(repos/get-repo-ruleset)`.
    public func repos_sol_get_hyphen_repo_hyphen_ruleset(
        path: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Path,
        query: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Output {
        try await repos_sol_get_hyphen_repo_hyphen_ruleset(Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Update a repository ruleset
    ///
    /// Update a ruleset for a repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/put(repos/update-repo-ruleset)`.
    public func repos_sol_update_hyphen_repo_hyphen_ruleset(
        path: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Path,
        headers: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Headers = .init(),
        body: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Body? = nil
    ) async throws -> Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Output {
        try await repos_sol_update_hyphen_repo_hyphen_ruleset(Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository ruleset
    ///
    /// Delete a ruleset for a repository.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/delete(repos/delete-repo-ruleset)`.
    public func repos_sol_delete_hyphen_repo_hyphen_ruleset(
        path: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Output {
        try await repos_sol_delete_hyphen_repo_hyphen_ruleset(Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the weekly commit activity
    ///
    /// Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
    ///
    /// > [!NOTE]
    /// > This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/code_frequency`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/code_frequency/get(repos/get-code-frequency-stats)`.
    public func repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats(
        path: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input.Path,
        headers: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output {
        try await repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats(Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the last year of commit activity
    ///
    /// Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/commit_activity`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/commit_activity/get(repos/get-commit-activity-stats)`.
    public func repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats(
        path: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input.Path,
        headers: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Output {
        try await repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats(Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get all contributor commit activity
    ///
    ///
    /// Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
    ///
    /// *   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
    /// *   `a` - Number of additions
    /// *   `d` - Number of deletions
    /// *   `c` - Number of commits
    ///
    /// > [!NOTE]
    /// > This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/contributors/get(repos/get-contributors-stats)`.
    public func repos_sol_get_hyphen_contributors_hyphen_stats(
        path: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input.Path,
        headers: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Output {
        try await repos_sol_get_hyphen_contributors_hyphen_stats(Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the weekly commit count
    ///
    /// Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
    ///
    /// The array order is oldest week (index 0) to most recent week.
    ///
    /// The most recent week is seven days ago at UTC midnight to today at UTC midnight.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/participation`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/participation/get(repos/get-participation-stats)`.
    public func repos_sol_get_hyphen_participation_hyphen_stats(
        path: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input.Path,
        headers: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_participation_hyphen_stats.Output {
        try await repos_sol_get_hyphen_participation_hyphen_stats(Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the hourly commit count for each day
    ///
    /// Each array contains the day number, hour number, and number of commits:
    ///
    /// *   `0-6`: Sunday - Saturday
    /// *   `0-23`: Hour of day
    /// *   Number of commits
    ///
    /// For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/punch_card`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/punch_card/get(repos/get-punch-card-stats)`.
    public func repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats(
        path: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input.Path,
        headers: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Output {
        try await repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats(Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a commit status
    ///
    /// Users with push access in a repository can create commit statuses for a given SHA.
    ///
    /// Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/statuses/{sha}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/statuses/{sha}/post(repos/create-commit-status)`.
    public func repos_sol_create_hyphen_commit_hyphen_status(
        path: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Path,
        headers: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_commit_hyphen_status.Output {
        try await repos_sol_create_hyphen_commit_hyphen_status(Operations.repos_sol_create_hyphen_commit_hyphen_status.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    public func repos_sol_list_hyphen_tags(
        path: Operations.repos_sol_list_hyphen_tags.Input.Path,
        query: Operations.repos_sol_list_hyphen_tags.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_tags.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_tags.Output {
        try await repos_sol_list_hyphen_tags(Operations.repos_sol_list_hyphen_tags.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Closing down - List tag protection states for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)" endpoint instead.
    ///
    /// This returns the tag protection states of a repository.
    ///
    /// This information is only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/get(repos/list-tag-protection)`.
    @available(*, deprecated)
    public func repos_sol_list_hyphen_tag_hyphen_protection(
        path: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_tag_hyphen_protection.Output {
        try await repos_sol_list_hyphen_tag_hyphen_protection(Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Closing down - Create a tag protection state for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)" endpoint instead.
    ///
    /// This creates a tag protection state for a repository.
    /// This endpoint is only available to repository administrators.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/tags/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/post(repos/create-tag-protection)`.
    @available(*, deprecated)
    public func repos_sol_create_hyphen_tag_hyphen_protection(
        path: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_tag_hyphen_protection.Output {
        try await repos_sol_create_hyphen_tag_hyphen_protection(Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Closing down - Delete a tag protection state for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)" endpoint instead.
    ///
    /// This deletes a tag protection state for a repository.
    /// This endpoint is only available to repository administrators.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/{tag_protection_id}/delete(repos/delete-tag-protection)`.
    @available(*, deprecated)
    public func repos_sol_delete_hyphen_tag_hyphen_protection(
        path: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input.Path,
        headers: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Output {
        try await repos_sol_delete_hyphen_tag_hyphen_protection(Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input(
            path: path,
            headers: headers
        ))
    }
    /// Download a repository archive (tar)
    ///
    /// Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    /// `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    /// the `Location` header to make a second `GET` request.
    ///
    /// > [!NOTE]
    /// > For private repositories, these links are temporary and expire after five minutes.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tarball/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tarball/{ref}/get(repos/download-tarball-archive)`.
    public func repos_sol_download_hyphen_tarball_hyphen_archive(path: Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Input.Path) async throws -> Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Output {
        try await repos_sol_download_hyphen_tarball_hyphen_archive(Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Input(path: path))
    }
    /// List repository teams
    ///
    /// Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
    ///
    /// For a public repository, a team is listed only if that team added the public repository explicitly.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/teams/get(repos/list-teams)`.
    public func repos_sol_list_hyphen_teams(
        path: Operations.repos_sol_list_hyphen_teams.Input.Path,
        query: Operations.repos_sol_list_hyphen_teams.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_teams.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_teams.Output {
        try await repos_sol_list_hyphen_teams(Operations.repos_sol_list_hyphen_teams.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get all repository topics
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/topics`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/get(repos/get-all-topics)`.
    public func repos_sol_get_hyphen_all_hyphen_topics(
        path: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Path,
        query: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_all_hyphen_topics.Output {
        try await repos_sol_get_hyphen_all_hyphen_topics(Operations.repos_sol_get_hyphen_all_hyphen_topics.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Replace all repository topics
    ///
    ///
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/topics`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/put(repos/replace-all-topics)`.
    public func repos_sol_replace_hyphen_all_hyphen_topics(
        path: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Path,
        headers: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Headers = .init(),
        body: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Body
    ) async throws -> Operations.repos_sol_replace_hyphen_all_hyphen_topics.Output {
        try await repos_sol_replace_hyphen_all_hyphen_topics(Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get repository clones
    ///
    /// Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/clones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/clones/get(repos/get-clones)`.
    public func repos_sol_get_hyphen_clones(
        path: Operations.repos_sol_get_hyphen_clones.Input.Path,
        query: Operations.repos_sol_get_hyphen_clones.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_clones.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_clones.Output {
        try await repos_sol_get_hyphen_clones(Operations.repos_sol_get_hyphen_clones.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get top referral paths
    ///
    /// Get the top 10 popular contents over the last 14 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/popular/paths`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/paths/get(repos/get-top-paths)`.
    public func repos_sol_get_hyphen_top_hyphen_paths(
        path: Operations.repos_sol_get_hyphen_top_hyphen_paths.Input.Path,
        headers: Operations.repos_sol_get_hyphen_top_hyphen_paths.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_top_hyphen_paths.Output {
        try await repos_sol_get_hyphen_top_hyphen_paths(Operations.repos_sol_get_hyphen_top_hyphen_paths.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get top referral sources
    ///
    /// Get the top 10 referrers over the last 14 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/popular/referrers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/referrers/get(repos/get-top-referrers)`.
    public func repos_sol_get_hyphen_top_hyphen_referrers(
        path: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input.Path,
        headers: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_top_hyphen_referrers.Output {
        try await repos_sol_get_hyphen_top_hyphen_referrers(Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get page views
    ///
    /// Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/views`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/views/get(repos/get-views)`.
    public func repos_sol_get_hyphen_views(
        path: Operations.repos_sol_get_hyphen_views.Input.Path,
        query: Operations.repos_sol_get_hyphen_views.Input.Query = .init(),
        headers: Operations.repos_sol_get_hyphen_views.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_get_hyphen_views.Output {
        try await repos_sol_get_hyphen_views(Operations.repos_sol_get_hyphen_views.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Transfer a repository
    ///
    /// A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/transfer`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/transfer/post(repos/transfer)`.
    public func repos_sol_transfer(
        path: Operations.repos_sol_transfer.Input.Path,
        headers: Operations.repos_sol_transfer.Input.Headers = .init(),
        body: Operations.repos_sol_transfer.Input.Body
    ) async throws -> Operations.repos_sol_transfer.Output {
        try await repos_sol_transfer(Operations.repos_sol_transfer.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Check if vulnerability alerts are enabled for a repository
    ///
    /// Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/get(repos/check-vulnerability-alerts)`.
    public func repos_sol_check_hyphen_vulnerability_hyphen_alerts(path: Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Input.Path) async throws -> Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Output {
        try await repos_sol_check_hyphen_vulnerability_hyphen_alerts(Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Input(path: path))
    }
    /// Enable vulnerability alerts
    ///
    /// Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/put(repos/enable-vulnerability-alerts)`.
    public func repos_sol_enable_hyphen_vulnerability_hyphen_alerts(path: Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Input.Path) async throws -> Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Output {
        try await repos_sol_enable_hyphen_vulnerability_hyphen_alerts(Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Input(path: path))
    }
    /// Disable vulnerability alerts
    ///
    /// Disables dependency alerts and the dependency graph for a repository.
    /// The authenticated user must have admin access to the repository. For more information,
    /// see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/delete(repos/disable-vulnerability-alerts)`.
    public func repos_sol_disable_hyphen_vulnerability_hyphen_alerts(path: Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Input.Path) async throws -> Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Output {
        try await repos_sol_disable_hyphen_vulnerability_hyphen_alerts(Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Input(path: path))
    }
    /// Download a repository archive (zip)
    ///
    /// Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    /// `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    /// the `Location` header to make a second `GET` request.
    ///
    /// > [!NOTE]
    /// > For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/zipball/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/zipball/{ref}/get(repos/download-zipball-archive)`.
    public func repos_sol_download_hyphen_zipball_hyphen_archive(path: Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Input.Path) async throws -> Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Output {
        try await repos_sol_download_hyphen_zipball_hyphen_archive(Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Input(path: path))
    }
    /// Create a repository using a template
    ///
    /// Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /repos/{template_owner}/{template_repo}/generate`.
    /// - Remark: Generated from `#/paths//repos/{template_owner}/{template_repo}/generate/post(repos/create-using-template)`.
    public func repos_sol_create_hyphen_using_hyphen_template(
        path: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Path,
        headers: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_using_hyphen_template.Output {
        try await repos_sol_create_hyphen_using_hyphen_template(Operations.repos_sol_create_hyphen_using_hyphen_template.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List public repositories
    ///
    /// Lists all public repositories in the order that they were created.
    ///
    /// Note:
    /// - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
    /// - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
    ///
    /// - Remark: HTTP `GET /repositories`.
    /// - Remark: Generated from `#/paths//repositories/get(repos/list-public)`.
    public func repos_sol_list_hyphen_public(
        query: Operations.repos_sol_list_hyphen_public.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_public.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_public.Output {
        try await repos_sol_list_hyphen_public(Operations.repos_sol_list_hyphen_public.Input(
            query: query,
            headers: headers
        ))
    }
    /// List repositories for the authenticated user
    ///
    /// Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// - Remark: HTTP `GET /user/repos`.
    /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)`.
    public func repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a repository for the authenticated user
    ///
    /// Creates a new repository for the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /user/repos`.
    /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)`.
    public func repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user(Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// List repository invitations for the authenticated user
    ///
    /// When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
    ///
    /// - Remark: HTTP `GET /user/repository_invitations`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)`.
    public func repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user(Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Accept a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /user/repository_invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)`.
    public func repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user(Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Decline a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /user/repository_invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)`.
    public func repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user(Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repositories for a user
    ///
    /// Lists public repositories for the specified user.
    ///
    /// - Remark: HTTP `GET /users/{username}/repos`.
    /// - Remark: Generated from `#/paths//users/{username}/repos/get(repos/list-for-user)`.
    public func repos_sol_list_hyphen_for_hyphen_user(
        path: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Path,
        query: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.repos_sol_list_hyphen_for_hyphen_user.Output {
        try await repos_sol_list_hyphen_for_hyphen_user(Operations.repos_sol_list_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_hyphen_error_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_hyphen_error_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/integration`.
        public struct integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            public var permissions: Components.Schemas.integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - client_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                client_id: Swift.String? = nil,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.client_id = client_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case client_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// The URL to which the payloads will be delivered.
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-url`.
        public typealias webhook_hyphen_config_hyphen_url = Swift.String
        /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-content-type`.
        public typealias webhook_hyphen_config_hyphen_content_hyphen_type = Swift.String
        /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-secret`.
        public typealias webhook_hyphen_config_hyphen_secret = Swift.String
        /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl`.
        @frozen public enum webhook_hyphen_config_hyphen_insecure_hyphen_ssl: Codable, Hashable, Sendable {
            /// Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl/case2`.
            case case2(Swift.Double)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Configuration object of the webhook
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config`.
        public struct webhook_hyphen_config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-config/url`.
            public var url: Components.Schemas.webhook_hyphen_config_hyphen_url?
            /// - Remark: Generated from `#/components/schemas/webhook-config/content_type`.
            public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
            /// - Remark: Generated from `#/components/schemas/webhook-config/secret`.
            public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
            /// - Remark: Generated from `#/components/schemas/webhook-config/insecure_ssl`.
            public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
            /// Creates a new `webhook_hyphen_config`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - content_type:
            ///   - secret:
            ///   - insecure_ssl:
            public init(
                url: Components.Schemas.webhook_hyphen_config_hyphen_url? = nil,
                content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
            ) {
                self.url = url
                self.content_type = content_type
                self.secret = secret
                self.insecure_ssl = insecure_ssl
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case content_type
                case secret
                case insecure_ssl
            }
        }
        /// Delivery made by a webhook, without request and response information.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery-item`.
        public struct hook_hyphen_delivery_hyphen_item: Codable, Hashable, Sendable {
            /// Unique identifier of the webhook delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/id`.
            public var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/guid`.
            public var guid: Swift.String
            /// Time when the webhook delivery occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/delivered_at`.
            public var delivered_at: Foundation.Date
            /// Whether the webhook delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/redelivery`.
            public var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/duration`.
            public var duration: Swift.Double
            /// Describes the response returned after attempting the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/status`.
            public var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/status_code`.
            public var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/event`.
            public var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/action`.
            public var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/installation_id`.
            public var installation_id: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/repository_id`.
            public var repository_id: Swift.Int?
            /// Time when the webhook delivery was throttled.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/throttled_at`.
            public var throttled_at: Foundation.Date?
            /// Creates a new `hook_hyphen_delivery_hyphen_item`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the webhook delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the webhook delivery occurred.
            ///   - redelivery: Whether the webhook delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Describes the response returned after attempting the delivery.
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            ///   - throttled_at: Time when the webhook delivery was throttled.
            public init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installation_id: Swift.Int? = nil,
                repository_id: Swift.Int? = nil,
                throttled_at: Foundation.Date? = nil
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
                self.throttled_at = throttled_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
                case throttled_at
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Delivery made by a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery`.
        public struct hook_hyphen_delivery: Codable, Hashable, Sendable {
            /// Unique identifier of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/id`.
            public var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/guid`.
            public var guid: Swift.String
            /// Time when the delivery was delivered.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/delivered_at`.
            public var delivered_at: Foundation.Date
            /// Whether the delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/redelivery`.
            public var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/duration`.
            public var duration: Swift.Double
            /// Description of the status of the attempted delivery
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status`.
            public var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status_code`.
            public var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/event`.
            public var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/action`.
            public var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/installation_id`.
            public var installation_id: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/repository_id`.
            public var repository_id: Swift.Int?
            /// Time when the webhook delivery was throttled.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/throttled_at`.
            public var throttled_at: Foundation.Date?
            /// The URL target of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public struct requestPayload: Codable, Hashable, Sendable {
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public var headers: Components.Schemas.hook_hyphen_delivery.requestPayload.headersPayload?
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public struct payloadPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `payloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public var payload: Components.Schemas.hook_hyphen_delivery.requestPayload.payloadPayload?
                /// Creates a new `requestPayload`.
                ///
                /// - Parameters:
                ///   - headers: The request headers sent with the webhook delivery.
                ///   - payload: The webhook payload.
                public init(
                    headers: Components.Schemas.hook_hyphen_delivery.requestPayload.headersPayload? = nil,
                    payload: Components.Schemas.hook_hyphen_delivery.requestPayload.payloadPayload? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public var request: Components.Schemas.hook_hyphen_delivery.requestPayload
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public struct responsePayload: Codable, Hashable, Sendable {
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public var headers: Components.Schemas.hook_hyphen_delivery.responsePayload.headersPayload?
                /// The response payload received.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/payload`.
                public var payload: Swift.String?
                /// Creates a new `responsePayload`.
                ///
                /// - Parameters:
                ///   - headers: The response headers received when the delivery was made.
                ///   - payload: The response payload received.
                public init(
                    headers: Components.Schemas.hook_hyphen_delivery.responsePayload.headersPayload? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public var response: Components.Schemas.hook_hyphen_delivery.responsePayload
            /// Creates a new `hook_hyphen_delivery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the delivery was delivered.
            ///   - redelivery: Whether the delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Description of the status of the attempted delivery
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            ///   - throttled_at: Time when the webhook delivery was throttled.
            ///   - url: The URL target of the delivery.
            ///   - request:
            ///   - response:
            public init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installation_id: Swift.Int? = nil,
                repository_id: Swift.Int? = nil,
                throttled_at: Foundation.Date? = nil,
                url: Swift.String? = nil,
                request: Components.Schemas.hook_hyphen_delivery.requestPayload,
                response: Components.Schemas.hook_hyphen_delivery.responsePayload
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
                self.throttled_at = throttled_at
                self.url = url
                self.request = request
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
                case throttled_at
                case url
                case request
                case response
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        public struct nullable_hyphen_milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            public var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            public var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            public var state: Components.Schemas.nullable_hyphen_milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            public var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            public var due_on: Foundation.Date?
            /// Creates a new `nullable_hyphen_milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.nullable_hyphen_milestone.statePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                due_on: Foundation.Date? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct nullable_hyphen_integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `nullable_hyphen_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - client_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                client_id: Swift.String? = nil,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.client_id = client_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case client_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen public enum author_hyphen_association: String, Codable, Hashable, Sendable {
            case COLLABORATOR = "COLLABORATOR"
            case CONTRIBUTOR = "CONTRIBUTOR"
            case FIRST_TIMER = "FIRST_TIMER"
            case FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
            case MANNEQUIN = "MANNEQUIN"
            case MEMBER = "MEMBER"
            case NONE = "NONE"
            case OWNER = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        public struct reaction_hyphen_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            public var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            public var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            public var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            public var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            public var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            public var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            public var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            public var rocket: Swift.Int
            /// Creates a new `reaction_hyphen_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            public init(
                url: Swift.String,
                total_count: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public struct secret_scanning_non_provider_patternsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload?
                /// Creates a new `secret_scanning_non_provider_patternsPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public var secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection`.
            public struct secret_scanning_ai_detectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload.statusPayload?
                /// Creates a new `secret_scanning_ai_detectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection`.
            public var secret_scanning_ai_detection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            ///   - secret_scanning_non_provider_patterns:
            ///   - secret_scanning_ai_detection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil,
                secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload? = nil,
                secret_scanning_ai_detection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
                self.secret_scanning_non_provider_patterns = secret_scanning_non_provider_patterns
                self.secret_scanning_ai_detection = secret_scanning_ai_detection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
                case secret_scanning_non_provider_patterns
                case secret_scanning_ai_detection
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        public struct empty_hyphen_object: Codable, Hashable, Sendable {
            /// Creates a new `empty_hyphen_object`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// Custom property name and associated value
        ///
        /// - Remark: Generated from `#/components/schemas/custom-property-value`.
        public struct custom_hyphen_property_hyphen_value: Codable, Hashable, Sendable {
            /// The name of the property
            ///
            /// - Remark: Generated from `#/components/schemas/custom-property-value/property_name`.
            public var property_name: Swift.String
            /// The value assigned to the property
            ///
            /// - Remark: Generated from `#/components/schemas/custom-property-value/value`.
            @frozen public enum valuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/custom-property-value/value/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/custom-property-value/value/case2`.
                case case2([Swift.String])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The value assigned to the property
            ///
            /// - Remark: Generated from `#/components/schemas/custom-property-value/value`.
            public var value: Components.Schemas.custom_hyphen_property_hyphen_value.valuePayload?
            /// Creates a new `custom_hyphen_property_hyphen_value`.
            ///
            /// - Parameters:
            ///   - property_name: The name of the property
            ///   - value: The value assigned to the property
            public init(
                property_name: Swift.String,
                value: Components.Schemas.custom_hyphen_property_hyphen_value.valuePayload? = nil
            ) {
                self.property_name = property_name
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case property_name
                case value
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-repository`.
        public struct nullable_hyphen_repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.nullable_hyphen_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.nullable_hyphen_repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `nullable_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.nullable_hyphen_repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.nullable_hyphen_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.nullable_hyphen_repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code of Conduct Simple
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple`.
        public struct code_hyphen_of_hyphen_conduct_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - key:
            ///   - name:
            ///   - html_url:
            public init(
                url: Swift.String,
                key: Swift.String,
                name: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.url = url
                self.key = key
                self.name = name
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case key
                case name
                case html_url
            }
        }
        /// Full Repository
        ///
        /// - Remark: Generated from `#/components/schemas/full-repository`.
        public struct full_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/full-repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/full-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/full-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_discussions`.
            public var has_discussions: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/pushed_at`.
            public var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public var permissions: Components.Schemas.full_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/template_repository`.
            public var template_repository: Components.Schemas.nullable_hyphen_repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/use_squash_pr_title_as_default`.
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.full_hyphen_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.full_hyphen_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.full_hyphen_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.full_hyphen_repository.merge_commit_messagePayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_count`.
            public var subscribers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/network_count`.
            public var network_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/organization`.
            public var organization: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/full-repository/parent`.
            public var parent: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/source`.
            public var source: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers`.
            public var watchers: Swift.Int
            /// Whether anonymous git access is allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/custom_properties`.
            public struct custom_propertiesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `custom_propertiesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/custom_properties`.
            public var custom_properties: Components.Schemas.full_hyphen_repository.custom_propertiesPayload?
            /// Creates a new `full_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - allow_rebase_merge:
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge:
            ///   - allow_auto_merge:
            ///   - delete_branch_on_merge:
            ///   - allow_merge_commit:
            ///   - allow_update_branch:
            ///   - use_squash_pr_title_as_default:
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - license:
            ///   - organization:
            ///   - parent:
            ///   - source:
            ///   - forks:
            ///   - master_branch:
            ///   - open_issues:
            ///   - watchers:
            ///   - anonymous_access_enabled: Whether anonymous git access is allowed.
            ///   - code_of_conduct:
            ///   - security_and_analysis:
            ///   - custom_properties: The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.full_hyphen_repository.permissionsPayload? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.nullable_hyphen_repository? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.full_hyphen_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.full_hyphen_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.full_hyphen_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.full_hyphen_repository.merge_commit_messagePayload? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int,
                network_count: Swift.Int,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                organization: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                parent: Components.Schemas.repository? = nil,
                source: Components.Schemas.repository? = nil,
                forks: Swift.Int,
                master_branch: Swift.String? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                anonymous_access_enabled: Swift.Bool? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct_hyphen_simple? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil,
                custom_properties: Components.Schemas.full_hyphen_repository.custom_propertiesPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_merge_commit = allow_merge_commit
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.license = license
                self.organization = organization
                self.parent = parent
                self.source = source
                self.forks = forks
                self.master_branch = master_branch
                self.open_issues = open_issues
                self.watchers = watchers
                self.anonymous_access_enabled = anonymous_access_enabled
                self.code_of_conduct = code_of_conduct
                self.security_and_analysis = security_and_analysis
                self.custom_properties = custom_properties
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_merge_commit
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case license
                case organization
                case parent
                case source
                case forks
                case master_branch
                case open_issues
                case watchers
                case anonymous_access_enabled
                case code_of_conduct
                case security_and_analysis
                case custom_properties
            }
        }
        /// The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-enforcement`.
        @frozen public enum repository_hyphen_rule_hyphen_enforcement: String, Codable, Hashable, Sendable {
            case disabled = "disabled"
            case active = "active"
            case evaluate = "evaluate"
        }
        /// An actor that can bypass rules in a ruleset
        ///
        /// - Remark: Generated from `#/components/schemas/repository-ruleset-bypass-actor`.
        public struct repository_hyphen_ruleset_hyphen_bypass_hyphen_actor: Codable, Hashable, Sendable {
            /// The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-bypass-actor/actor_id`.
            public var actor_id: Swift.Int?
            /// The type of actor that can bypass a ruleset.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-bypass-actor/actor_type`.
            @frozen public enum actor_typePayload: String, Codable, Hashable, Sendable {
                case Integration = "Integration"
                case OrganizationAdmin = "OrganizationAdmin"
                case RepositoryRole = "RepositoryRole"
                case Team = "Team"
                case DeployKey = "DeployKey"
            }
            /// The type of actor that can bypass a ruleset.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-bypass-actor/actor_type`.
            public var actor_type: Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor.actor_typePayload
            /// When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-bypass-actor/bypass_mode`.
            @frozen public enum bypass_modePayload: String, Codable, Hashable, Sendable {
                case always = "always"
                case pull_request = "pull_request"
            }
            /// When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-bypass-actor/bypass_mode`.
            public var bypass_mode: Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor.bypass_modePayload?
            /// Creates a new `repository_hyphen_ruleset_hyphen_bypass_hyphen_actor`.
            ///
            /// - Parameters:
            ///   - actor_id: The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories.
            ///   - actor_type: The type of actor that can bypass a ruleset.
            ///   - bypass_mode: When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
            public init(
                actor_id: Swift.Int? = nil,
                actor_type: Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor.actor_typePayload,
                bypass_mode: Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor.bypass_modePayload? = nil
            ) {
                self.actor_id = actor_id
                self.actor_type = actor_type
                self.bypass_mode = bypass_mode
            }
            public enum CodingKeys: String, CodingKey {
                case actor_id
                case actor_type
                case bypass_mode
            }
        }
        /// Parameters for a repository ruleset ref name condition
        ///
        /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions`.
        public struct repository_hyphen_ruleset_hyphen_conditions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions/ref_name`.
            public struct ref_namePayload: Codable, Hashable, Sendable {
                /// Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions/ref_name/include`.
                public var include: [Swift.String]?
                /// Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions/ref_name/exclude`.
                public var exclude: [Swift.String]?
                /// Creates a new `ref_namePayload`.
                ///
                /// - Parameters:
                ///   - include: Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
                ///   - exclude: Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
                public init(
                    include: [Swift.String]? = nil,
                    exclude: [Swift.String]? = nil
                ) {
                    self.include = include
                    self.exclude = exclude
                }
                public enum CodingKeys: String, CodingKey {
                    case include
                    case exclude
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions/ref_name`.
            public var ref_name: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions.ref_namePayload?
            /// Creates a new `repository_hyphen_ruleset_hyphen_conditions`.
            ///
            /// - Parameters:
            ///   - ref_name:
            public init(ref_name: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions.ref_namePayload? = nil) {
                self.ref_name = ref_name
            }
            public enum CodingKeys: String, CodingKey {
                case ref_name
            }
        }
        /// Parameters for a repository name condition
        ///
        /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-name-target`.
        public struct repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_name_hyphen_target: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-name-target/repository_name`.
            public struct repository_namePayload: Codable, Hashable, Sendable {
                /// Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-name-target/repository_name/include`.
                public var include: [Swift.String]?
                /// Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-name-target/repository_name/exclude`.
                public var exclude: [Swift.String]?
                /// Whether renaming of target repositories is prevented.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-name-target/repository_name/protected`.
                public var protected: Swift.Bool?
                /// Creates a new `repository_namePayload`.
                ///
                /// - Parameters:
                ///   - include: Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
                ///   - exclude: Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
                ///   - protected: Whether renaming of target repositories is prevented.
                public init(
                    include: [Swift.String]? = nil,
                    exclude: [Swift.String]? = nil,
                    protected: Swift.Bool? = nil
                ) {
                    self.include = include
                    self.exclude = exclude
                    self.protected = protected
                }
                public enum CodingKeys: String, CodingKey {
                    case include
                    case exclude
                    case protected
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-name-target/repository_name`.
            public var repository_name: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_name_hyphen_target.repository_namePayload
            /// Creates a new `repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_name_hyphen_target`.
            ///
            /// - Parameters:
            ///   - repository_name:
            public init(repository_name: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_name_hyphen_target.repository_namePayload) {
                self.repository_name = repository_name
            }
            public enum CodingKeys: String, CodingKey {
                case repository_name
            }
        }
        /// Parameters for a repository ID condition
        ///
        /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-id-target`.
        public struct repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_id_hyphen_target: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-id-target/repository_id`.
            public struct repository_idPayload: Codable, Hashable, Sendable {
                /// The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-id-target/repository_id/repository_ids`.
                public var repository_ids: [Swift.Int]?
                /// Creates a new `repository_idPayload`.
                ///
                /// - Parameters:
                ///   - repository_ids: The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.
                public init(repository_ids: [Swift.Int]? = nil) {
                    self.repository_ids = repository_ids
                }
                public enum CodingKeys: String, CodingKey {
                    case repository_ids
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-id-target/repository_id`.
            public var repository_id: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_id_hyphen_target.repository_idPayload
            /// Creates a new `repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_id_hyphen_target`.
            ///
            /// - Parameters:
            ///   - repository_id:
            public init(repository_id: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_id_hyphen_target.repository_idPayload) {
                self.repository_id = repository_id
            }
            public enum CodingKeys: String, CodingKey {
                case repository_id
            }
        }
        /// Parameters for a targeting a repository property
        ///
        /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-spec`.
        public struct repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec: Codable, Hashable, Sendable {
            /// The name of the repository property to target
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-spec/name`.
            public var name: Swift.String
            /// The values to match for the repository property
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-spec/property_values`.
            public var property_values: [Swift.String]
            /// The source of the repository property. Defaults to 'custom' if not specified.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-spec/source`.
            @frozen public enum sourcePayload: String, Codable, Hashable, Sendable {
                case custom = "custom"
                case system = "system"
            }
            /// The source of the repository property. Defaults to 'custom' if not specified.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-spec/source`.
            public var source: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec.sourcePayload?
            /// Creates a new `repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec`.
            ///
            /// - Parameters:
            ///   - name: The name of the repository property to target
            ///   - property_values: The values to match for the repository property
            ///   - source: The source of the repository property. Defaults to 'custom' if not specified.
            public init(
                name: Swift.String,
                property_values: [Swift.String],
                source: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec.sourcePayload? = nil
            ) {
                self.name = name
                self.property_values = property_values
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case property_values
                case source
            }
        }
        /// Parameters for a repository property condition
        ///
        /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-target`.
        public struct repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_target: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-target/repository_property`.
            public struct repository_propertyPayload: Codable, Hashable, Sendable {
                /// The repository properties and values to include. All of these properties must match for the condition to pass.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-target/repository_property/include`.
                public var include: [Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec]?
                /// The repository properties and values to exclude. The condition will not pass if any of these properties match.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-target/repository_property/exclude`.
                public var exclude: [Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec]?
                /// Creates a new `repository_propertyPayload`.
                ///
                /// - Parameters:
                ///   - include: The repository properties and values to include. All of these properties must match for the condition to pass.
                ///   - exclude: The repository properties and values to exclude. The condition will not pass if any of these properties match.
                public init(
                    include: [Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec]? = nil,
                    exclude: [Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_spec]? = nil
                ) {
                    self.include = include
                    self.exclude = exclude
                }
                public enum CodingKeys: String, CodingKey {
                    case include
                    case exclude
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-ruleset-conditions-repository-property-target/repository_property`.
            public var repository_property: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_target.repository_propertyPayload
            /// Creates a new `repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_target`.
            ///
            /// - Parameters:
            ///   - repository_property:
            public init(repository_property: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_target.repository_propertyPayload) {
                self.repository_property = repository_property
            }
            public enum CodingKeys: String, CodingKey {
                case repository_property
            }
        }
        /// Conditions for an organization ruleset.
        /// The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
        /// The push rulesets conditions object does not require the `ref_name` property.
        ///
        /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions`.
        @frozen public enum org_hyphen_ruleset_hyphen_conditions: Codable, Hashable, Sendable {
            /// Conditions to target repositories by name and refs by name
            ///
            /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case1/value1`.
                public var value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions
                /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case1/value2`.
                public var value2: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_name_hyphen_target
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions,
                    value2: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_name_hyphen_target
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// Conditions to target repositories by name and refs by name
            ///
            /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case1`.
            case case1(Components.Schemas.org_hyphen_ruleset_hyphen_conditions.Case1Payload)
            /// Conditions to target repositories by id and refs by name
            ///
            /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case2/value1`.
                public var value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions
                /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case2/value2`.
                public var value2: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_id_hyphen_target
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions,
                    value2: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_id_hyphen_target
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// Conditions to target repositories by id and refs by name
            ///
            /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case2`.
            case case2(Components.Schemas.org_hyphen_ruleset_hyphen_conditions.Case2Payload)
            /// Conditions to target repositories by property and refs by name
            ///
            /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case3/value1`.
                public var value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions
                /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case3/value2`.
                public var value2: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_target
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions,
                    value2: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions_hyphen_repository_hyphen_property_hyphen_target
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// Conditions to target repositories by property and refs by name
            ///
            /// - Remark: Generated from `#/components/schemas/org-ruleset-conditions/case3`.
            case case3(Components.Schemas.org_hyphen_ruleset_hyphen_conditions.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Only allow users with bypass permission to create matching refs.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-creation`.
        public struct repository_hyphen_rule_hyphen_creation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-creation/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case creation = "creation"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-creation/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_creation._typePayload
            /// Creates a new `repository_hyphen_rule_hyphen_creation`.
            ///
            /// - Parameters:
            ///   - _type:
            public init(_type: Components.Schemas.repository_hyphen_rule_hyphen_creation._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Only allow users with bypass permission to update matching refs.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-update`.
        public struct repository_hyphen_rule_hyphen_update: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-update/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case update = "update"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-update/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_update._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-update/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// Branch can pull changes from its upstream repository
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-update/parameters/update_allows_fetch_and_merge`.
                public var update_allows_fetch_and_merge: Swift.Bool
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - update_allows_fetch_and_merge: Branch can pull changes from its upstream repository
                public init(update_allows_fetch_and_merge: Swift.Bool) {
                    self.update_allows_fetch_and_merge = update_allows_fetch_and_merge
                }
                public enum CodingKeys: String, CodingKey {
                    case update_allows_fetch_and_merge
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-update/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_update.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_update`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_update._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_update.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Only allow users with bypass permissions to delete matching refs.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-deletion`.
        public struct repository_hyphen_rule_hyphen_deletion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-deletion/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case deletion = "deletion"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-deletion/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_deletion._typePayload
            /// Creates a new `repository_hyphen_rule_hyphen_deletion`.
            ///
            /// - Parameters:
            ///   - _type:
            public init(_type: Components.Schemas.repository_hyphen_rule_hyphen_deletion._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Prevent merge commits from being pushed to matching refs.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-required-linear-history`.
        public struct repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-linear-history/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case required_linear_history = "required_linear_history"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-linear-history/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history._typePayload
            /// Creates a new `repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history`.
            ///
            /// - Parameters:
            ///   - _type:
            public init(_type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Merges must be performed via a merge queue.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue`.
        public struct repository_hyphen_rule_hyphen_merge_hyphen_queue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case merge_queue = "merge_queue"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/check_response_timeout_minutes`.
                public var check_response_timeout_minutes: Swift.Int
                /// When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/grouping_strategy`.
                @frozen public enum grouping_strategyPayload: String, Codable, Hashable, Sendable {
                    case ALLGREEN = "ALLGREEN"
                    case HEADGREEN = "HEADGREEN"
                }
                /// When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/grouping_strategy`.
                public var grouping_strategy: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue.parametersPayload.grouping_strategyPayload
                /// Limit the number of queued pull requests requesting checks and workflow runs at the same time.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/max_entries_to_build`.
                public var max_entries_to_build: Swift.Int
                /// The maximum number of PRs that will be merged together in a group.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/max_entries_to_merge`.
                public var max_entries_to_merge: Swift.Int
                /// Method to use when merging changes from queued pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/merge_method`.
                @frozen public enum merge_methodPayload: String, Codable, Hashable, Sendable {
                    case MERGE = "MERGE"
                    case SQUASH = "SQUASH"
                    case REBASE = "REBASE"
                }
                /// Method to use when merging changes from queued pull requests.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/merge_method`.
                public var merge_method: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue.parametersPayload.merge_methodPayload
                /// The minimum number of PRs that will be merged together in a group.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/min_entries_to_merge`.
                public var min_entries_to_merge: Swift.Int
                /// The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters/min_entries_to_merge_wait_minutes`.
                public var min_entries_to_merge_wait_minutes: Swift.Int
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - check_response_timeout_minutes: Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
                ///   - grouping_strategy: When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
                ///   - max_entries_to_build: Limit the number of queued pull requests requesting checks and workflow runs at the same time.
                ///   - max_entries_to_merge: The maximum number of PRs that will be merged together in a group.
                ///   - merge_method: Method to use when merging changes from queued pull requests.
                ///   - min_entries_to_merge: The minimum number of PRs that will be merged together in a group.
                ///   - min_entries_to_merge_wait_minutes: The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
                public init(
                    check_response_timeout_minutes: Swift.Int,
                    grouping_strategy: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue.parametersPayload.grouping_strategyPayload,
                    max_entries_to_build: Swift.Int,
                    max_entries_to_merge: Swift.Int,
                    merge_method: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue.parametersPayload.merge_methodPayload,
                    min_entries_to_merge: Swift.Int,
                    min_entries_to_merge_wait_minutes: Swift.Int
                ) {
                    self.check_response_timeout_minutes = check_response_timeout_minutes
                    self.grouping_strategy = grouping_strategy
                    self.max_entries_to_build = max_entries_to_build
                    self.max_entries_to_merge = max_entries_to_merge
                    self.merge_method = merge_method
                    self.min_entries_to_merge = min_entries_to_merge
                    self.min_entries_to_merge_wait_minutes = min_entries_to_merge_wait_minutes
                }
                public enum CodingKeys: String, CodingKey {
                    case check_response_timeout_minutes
                    case grouping_strategy
                    case max_entries_to_build
                    case max_entries_to_merge
                    case merge_method
                    case min_entries_to_merge
                    case min_entries_to_merge_wait_minutes
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-merge-queue/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_merge_hyphen_queue`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-required-deployments`.
        public struct repository_hyphen_rule_hyphen_required_hyphen_deployments: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-deployments/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case required_deployments = "required_deployments"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-deployments/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_deployments._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-deployments/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// The environments that must be successfully deployed to before branches can be merged.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-required-deployments/parameters/required_deployment_environments`.
                public var required_deployment_environments: [Swift.String]
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - required_deployment_environments: The environments that must be successfully deployed to before branches can be merged.
                public init(required_deployment_environments: [Swift.String]) {
                    self.required_deployment_environments = required_deployment_environments
                }
                public enum CodingKeys: String, CodingKey {
                    case required_deployment_environments
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-deployments/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_deployments.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_required_hyphen_deployments`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_deployments._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_deployments.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Commits pushed to matching refs must have verified signatures.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-required-signatures`.
        public struct repository_hyphen_rule_hyphen_required_hyphen_signatures: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-signatures/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case required_signatures = "required_signatures"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-signatures/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_signatures._typePayload
            /// Creates a new `repository_hyphen_rule_hyphen_required_hyphen_signatures`.
            ///
            /// - Parameters:
            ///   - _type:
            public init(_type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_signatures._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request`.
        public struct repository_hyphen_rule_hyphen_pull_hyphen_request: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case pull_request = "pull_request"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_pull_hyphen_request._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// New, reviewable commits pushed will dismiss previous pull request review approvals.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/parameters/dismiss_stale_reviews_on_push`.
                public var dismiss_stale_reviews_on_push: Swift.Bool
                /// Require an approving review in pull requests that modify files that have a designated code owner.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/parameters/require_code_owner_review`.
                public var require_code_owner_review: Swift.Bool
                /// Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/parameters/require_last_push_approval`.
                public var require_last_push_approval: Swift.Bool
                /// The number of approving reviews that are required before a pull request can be merged.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/parameters/required_approving_review_count`.
                public var required_approving_review_count: Swift.Int
                /// All conversations on code must be resolved before a pull request can be merged.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/parameters/required_review_thread_resolution`.
                public var required_review_thread_resolution: Swift.Bool
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - dismiss_stale_reviews_on_push: New, reviewable commits pushed will dismiss previous pull request review approvals.
                ///   - require_code_owner_review: Require an approving review in pull requests that modify files that have a designated code owner.
                ///   - require_last_push_approval: Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
                ///   - required_approving_review_count: The number of approving reviews that are required before a pull request can be merged.
                ///   - required_review_thread_resolution: All conversations on code must be resolved before a pull request can be merged.
                public init(
                    dismiss_stale_reviews_on_push: Swift.Bool,
                    require_code_owner_review: Swift.Bool,
                    require_last_push_approval: Swift.Bool,
                    required_approving_review_count: Swift.Int,
                    required_review_thread_resolution: Swift.Bool
                ) {
                    self.dismiss_stale_reviews_on_push = dismiss_stale_reviews_on_push
                    self.require_code_owner_review = require_code_owner_review
                    self.require_last_push_approval = require_last_push_approval
                    self.required_approving_review_count = required_approving_review_count
                    self.required_review_thread_resolution = required_review_thread_resolution
                }
                public enum CodingKeys: String, CodingKey {
                    case dismiss_stale_reviews_on_push
                    case require_code_owner_review
                    case require_last_push_approval
                    case required_approving_review_count
                    case required_review_thread_resolution
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-pull-request/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_pull_hyphen_request.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_pull_hyphen_request`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_pull_hyphen_request._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_pull_hyphen_request.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Required status check
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-params-status-check-configuration`.
        public struct repository_hyphen_rule_hyphen_params_hyphen_status_hyphen_check_hyphen_configuration: Codable, Hashable, Sendable {
            /// The status check context name that must be present on the commit.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-status-check-configuration/context`.
            public var context: Swift.String
            /// The optional integration ID that this status check must originate from.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-status-check-configuration/integration_id`.
            public var integration_id: Swift.Int?
            /// Creates a new `repository_hyphen_rule_hyphen_params_hyphen_status_hyphen_check_hyphen_configuration`.
            ///
            /// - Parameters:
            ///   - context: The status check context name that must be present on the commit.
            ///   - integration_id: The optional integration ID that this status check must originate from.
            public init(
                context: Swift.String,
                integration_id: Swift.Int? = nil
            ) {
                self.context = context
                self.integration_id = integration_id
            }
            public enum CodingKeys: String, CodingKey {
                case context
                case integration_id
            }
        }
        /// Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks`.
        public struct repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case required_status_checks = "required_status_checks"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// Allow repositories and branches to be created if a check would otherwise prohibit it.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks/parameters/do_not_enforce_on_create`.
                public var do_not_enforce_on_create: Swift.Bool?
                /// Status checks that are required.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks/parameters/required_status_checks`.
                public var required_status_checks: [Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_status_hyphen_check_hyphen_configuration]
                /// Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks/parameters/strict_required_status_checks_policy`.
                public var strict_required_status_checks_policy: Swift.Bool
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - do_not_enforce_on_create: Allow repositories and branches to be created if a check would otherwise prohibit it.
                ///   - required_status_checks: Status checks that are required.
                ///   - strict_required_status_checks_policy: Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
                public init(
                    do_not_enforce_on_create: Swift.Bool? = nil,
                    required_status_checks: [Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_status_hyphen_check_hyphen_configuration],
                    strict_required_status_checks_policy: Swift.Bool
                ) {
                    self.do_not_enforce_on_create = do_not_enforce_on_create
                    self.required_status_checks = required_status_checks
                    self.strict_required_status_checks_policy = strict_required_status_checks_policy
                }
                public enum CodingKeys: String, CodingKey {
                    case do_not_enforce_on_create
                    case required_status_checks
                    case strict_required_status_checks_policy
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-required-status-checks/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Prevent users with push access from force pushing to refs.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-non-fast-forward`.
        public struct repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-non-fast-forward/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case non_fast_forward = "non_fast_forward"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-non-fast-forward/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward._typePayload
            /// Creates a new `repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward`.
            ///
            /// - Parameters:
            ///   - _type:
            public init(_type: Components.Schemas.repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Parameters to be used for the commit_message_pattern rule
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern`.
        public struct repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case commit_message_pattern = "commit_message_pattern"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// How this rule will appear to users.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/parameters/name`.
                public var name: Swift.String?
                /// If true, the rule will fail if the pattern matches.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/parameters/negate`.
                public var negate: Swift.Bool?
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/parameters/operator`.
                @frozen public enum _operatorPayload: String, Codable, Hashable, Sendable {
                    case starts_with = "starts_with"
                    case ends_with = "ends_with"
                    case contains = "contains"
                    case regex = "regex"
                }
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/parameters/operator`.
                public var _operator: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern.parametersPayload._operatorPayload
                /// The pattern to match with.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/parameters/pattern`.
                public var pattern: Swift.String
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - name: How this rule will appear to users.
                ///   - negate: If true, the rule will fail if the pattern matches.
                ///   - _operator: The operator to use for matching.
                ///   - pattern: The pattern to match with.
                public init(
                    name: Swift.String? = nil,
                    negate: Swift.Bool? = nil,
                    _operator: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern.parametersPayload._operatorPayload,
                    pattern: Swift.String
                ) {
                    self.name = name
                    self.negate = negate
                    self._operator = _operator
                    self.pattern = pattern
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case negate
                    case _operator = "operator"
                    case pattern
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-message-pattern/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Parameters to be used for the commit_author_email_pattern rule
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern`.
        public struct repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case commit_author_email_pattern = "commit_author_email_pattern"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// How this rule will appear to users.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/parameters/name`.
                public var name: Swift.String?
                /// If true, the rule will fail if the pattern matches.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/parameters/negate`.
                public var negate: Swift.Bool?
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/parameters/operator`.
                @frozen public enum _operatorPayload: String, Codable, Hashable, Sendable {
                    case starts_with = "starts_with"
                    case ends_with = "ends_with"
                    case contains = "contains"
                    case regex = "regex"
                }
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/parameters/operator`.
                public var _operator: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern.parametersPayload._operatorPayload
                /// The pattern to match with.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/parameters/pattern`.
                public var pattern: Swift.String
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - name: How this rule will appear to users.
                ///   - negate: If true, the rule will fail if the pattern matches.
                ///   - _operator: The operator to use for matching.
                ///   - pattern: The pattern to match with.
                public init(
                    name: Swift.String? = nil,
                    negate: Swift.Bool? = nil,
                    _operator: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern.parametersPayload._operatorPayload,
                    pattern: Swift.String
                ) {
                    self.name = name
                    self.negate = negate
                    self._operator = _operator
                    self.pattern = pattern
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case negate
                    case _operator = "operator"
                    case pattern
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-commit-author-email-pattern/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Parameters to be used for the committer_email_pattern rule
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern`.
        public struct repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case committer_email_pattern = "committer_email_pattern"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// How this rule will appear to users.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/parameters/name`.
                public var name: Swift.String?
                /// If true, the rule will fail if the pattern matches.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/parameters/negate`.
                public var negate: Swift.Bool?
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/parameters/operator`.
                @frozen public enum _operatorPayload: String, Codable, Hashable, Sendable {
                    case starts_with = "starts_with"
                    case ends_with = "ends_with"
                    case contains = "contains"
                    case regex = "regex"
                }
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/parameters/operator`.
                public var _operator: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern.parametersPayload._operatorPayload
                /// The pattern to match with.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/parameters/pattern`.
                public var pattern: Swift.String
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - name: How this rule will appear to users.
                ///   - negate: If true, the rule will fail if the pattern matches.
                ///   - _operator: The operator to use for matching.
                ///   - pattern: The pattern to match with.
                public init(
                    name: Swift.String? = nil,
                    negate: Swift.Bool? = nil,
                    _operator: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern.parametersPayload._operatorPayload,
                    pattern: Swift.String
                ) {
                    self.name = name
                    self.negate = negate
                    self._operator = _operator
                    self.pattern = pattern
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case negate
                    case _operator = "operator"
                    case pattern
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-committer-email-pattern/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Parameters to be used for the branch_name_pattern rule
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern`.
        public struct repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case branch_name_pattern = "branch_name_pattern"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// How this rule will appear to users.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/parameters/name`.
                public var name: Swift.String?
                /// If true, the rule will fail if the pattern matches.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/parameters/negate`.
                public var negate: Swift.Bool?
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/parameters/operator`.
                @frozen public enum _operatorPayload: String, Codable, Hashable, Sendable {
                    case starts_with = "starts_with"
                    case ends_with = "ends_with"
                    case contains = "contains"
                    case regex = "regex"
                }
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/parameters/operator`.
                public var _operator: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern.parametersPayload._operatorPayload
                /// The pattern to match with.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/parameters/pattern`.
                public var pattern: Swift.String
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - name: How this rule will appear to users.
                ///   - negate: If true, the rule will fail if the pattern matches.
                ///   - _operator: The operator to use for matching.
                ///   - pattern: The pattern to match with.
                public init(
                    name: Swift.String? = nil,
                    negate: Swift.Bool? = nil,
                    _operator: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern.parametersPayload._operatorPayload,
                    pattern: Swift.String
                ) {
                    self.name = name
                    self.negate = negate
                    self._operator = _operator
                    self.pattern = pattern
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case negate
                    case _operator = "operator"
                    case pattern
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-branch-name-pattern/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// Parameters to be used for the tag_name_pattern rule
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern`.
        public struct repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case tag_name_pattern = "tag_name_pattern"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// How this rule will appear to users.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/parameters/name`.
                public var name: Swift.String?
                /// If true, the rule will fail if the pattern matches.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/parameters/negate`.
                public var negate: Swift.Bool?
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/parameters/operator`.
                @frozen public enum _operatorPayload: String, Codable, Hashable, Sendable {
                    case starts_with = "starts_with"
                    case ends_with = "ends_with"
                    case contains = "contains"
                    case regex = "regex"
                }
                /// The operator to use for matching.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/parameters/operator`.
                public var _operator: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern.parametersPayload._operatorPayload
                /// The pattern to match with.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/parameters/pattern`.
                public var pattern: Swift.String
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - name: How this rule will appear to users.
                ///   - negate: If true, the rule will fail if the pattern matches.
                ///   - _operator: The operator to use for matching.
                ///   - pattern: The pattern to match with.
                public init(
                    name: Swift.String? = nil,
                    negate: Swift.Bool? = nil,
                    _operator: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern.parametersPayload._operatorPayload,
                    pattern: Swift.String
                ) {
                    self.name = name
                    self.negate = negate
                    self._operator = _operator
                    self.pattern = pattern
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case negate
                    case _operator = "operator"
                    case pattern
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-tag-name-pattern/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// A workflow that must run for this rule to pass
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-params-workflow-file-reference`.
        public struct repository_hyphen_rule_hyphen_params_hyphen_workflow_hyphen_file_hyphen_reference: Codable, Hashable, Sendable {
            /// The path to the workflow file
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-workflow-file-reference/path`.
            public var path: Swift.String
            /// The ref (branch or tag) of the workflow file to use
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-workflow-file-reference/ref`.
            public var ref: Swift.String?
            /// The ID of the repository where the workflow is defined
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-workflow-file-reference/repository_id`.
            public var repository_id: Swift.Int
            /// The commit SHA of the workflow file to use
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-workflow-file-reference/sha`.
            public var sha: Swift.String?
            /// Creates a new `repository_hyphen_rule_hyphen_params_hyphen_workflow_hyphen_file_hyphen_reference`.
            ///
            /// - Parameters:
            ///   - path: The path to the workflow file
            ///   - ref: The ref (branch or tag) of the workflow file to use
            ///   - repository_id: The ID of the repository where the workflow is defined
            ///   - sha: The commit SHA of the workflow file to use
            public init(
                path: Swift.String,
                ref: Swift.String? = nil,
                repository_id: Swift.Int,
                sha: Swift.String? = nil
            ) {
                self.path = path
                self.ref = ref
                self.repository_id = repository_id
                self.sha = sha
            }
            public enum CodingKeys: String, CodingKey {
                case path
                case ref
                case repository_id
                case sha
            }
        }
        /// Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-workflows`.
        public struct repository_hyphen_rule_hyphen_workflows: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-workflows/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case workflows = "workflows"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-workflows/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_workflows._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-workflows/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// Allow repositories and branches to be created if a check would otherwise prohibit it.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-workflows/parameters/do_not_enforce_on_create`.
                public var do_not_enforce_on_create: Swift.Bool?
                /// Workflows that must pass for this rule to pass.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-workflows/parameters/workflows`.
                public var workflows: [Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_workflow_hyphen_file_hyphen_reference]
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - do_not_enforce_on_create: Allow repositories and branches to be created if a check would otherwise prohibit it.
                ///   - workflows: Workflows that must pass for this rule to pass.
                public init(
                    do_not_enforce_on_create: Swift.Bool? = nil,
                    workflows: [Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_workflow_hyphen_file_hyphen_reference]
                ) {
                    self.do_not_enforce_on_create = do_not_enforce_on_create
                    self.workflows = workflows
                }
                public enum CodingKeys: String, CodingKey {
                    case do_not_enforce_on_create
                    case workflows
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-workflows/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_workflows.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_workflows`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_workflows._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_workflows.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// A tool that must provide code scanning results for this rule to pass.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-params-code-scanning-tool`.
        public struct repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool: Codable, Hashable, Sendable {
            /// The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-code-scanning-tool/alerts_threshold`.
            @frozen public enum alerts_thresholdPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case errors = "errors"
                case errors_and_warnings = "errors_and_warnings"
                case all = "all"
            }
            /// The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-code-scanning-tool/alerts_threshold`.
            public var alerts_threshold: Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool.alerts_thresholdPayload
            /// The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-code-scanning-tool/security_alerts_threshold`.
            @frozen public enum security_alerts_thresholdPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case critical = "critical"
                case high_or_higher = "high_or_higher"
                case medium_or_higher = "medium_or_higher"
                case all = "all"
            }
            /// The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-code-scanning-tool/security_alerts_threshold`.
            public var security_alerts_threshold: Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool.security_alerts_thresholdPayload
            /// The name of a code scanning tool
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-params-code-scanning-tool/tool`.
            public var tool: Swift.String
            /// Creates a new `repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool`.
            ///
            /// - Parameters:
            ///   - alerts_threshold: The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
            ///   - security_alerts_threshold: The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
            ///   - tool: The name of a code scanning tool
            public init(
                alerts_threshold: Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool.alerts_thresholdPayload,
                security_alerts_threshold: Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool.security_alerts_thresholdPayload,
                tool: Swift.String
            ) {
                self.alerts_threshold = alerts_threshold
                self.security_alerts_threshold = security_alerts_threshold
                self.tool = tool
            }
            public enum CodingKeys: String, CodingKey {
                case alerts_threshold
                case security_alerts_threshold
                case tool
            }
        }
        /// Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-code-scanning`.
        public struct repository_hyphen_rule_hyphen_code_hyphen_scanning: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-code-scanning/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case code_scanning = "code_scanning"
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-code-scanning/type`.
            public var _type: Components.Schemas.repository_hyphen_rule_hyphen_code_hyphen_scanning._typePayload
            /// - Remark: Generated from `#/components/schemas/repository-rule-code-scanning/parameters`.
            public struct parametersPayload: Codable, Hashable, Sendable {
                /// Tools that must provide code scanning results for this rule to pass.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-rule-code-scanning/parameters/code_scanning_tools`.
                public var code_scanning_tools: [Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool]
                /// Creates a new `parametersPayload`.
                ///
                /// - Parameters:
                ///   - code_scanning_tools: Tools that must provide code scanning results for this rule to pass.
                public init(code_scanning_tools: [Components.Schemas.repository_hyphen_rule_hyphen_params_hyphen_code_hyphen_scanning_hyphen_tool]) {
                    self.code_scanning_tools = code_scanning_tools
                }
                public enum CodingKeys: String, CodingKey {
                    case code_scanning_tools
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-code-scanning/parameters`.
            public var parameters: Components.Schemas.repository_hyphen_rule_hyphen_code_hyphen_scanning.parametersPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_code_hyphen_scanning`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - parameters:
            public init(
                _type: Components.Schemas.repository_hyphen_rule_hyphen_code_hyphen_scanning._typePayload,
                parameters: Components.Schemas.repository_hyphen_rule_hyphen_code_hyphen_scanning.parametersPayload? = nil
            ) {
                self._type = _type
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case parameters
            }
        }
        /// A repository rule.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule`.
        @frozen public enum repository_hyphen_rule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule/case1`.
            case repository_hyphen_rule_hyphen_creation(Components.Schemas.repository_hyphen_rule_hyphen_creation)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case2`.
            case repository_hyphen_rule_hyphen_update(Components.Schemas.repository_hyphen_rule_hyphen_update)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case3`.
            case repository_hyphen_rule_hyphen_deletion(Components.Schemas.repository_hyphen_rule_hyphen_deletion)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case4`.
            case repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history(Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case5`.
            case repository_hyphen_rule_hyphen_merge_hyphen_queue(Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case6`.
            case repository_hyphen_rule_hyphen_required_hyphen_deployments(Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_deployments)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case7`.
            case repository_hyphen_rule_hyphen_required_hyphen_signatures(Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_signatures)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case8`.
            case repository_hyphen_rule_hyphen_pull_hyphen_request(Components.Schemas.repository_hyphen_rule_hyphen_pull_hyphen_request)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case9`.
            case repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks(Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case10`.
            case repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward(Components.Schemas.repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case11`.
            case repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern(Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case12`.
            case repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern(Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case13`.
            case repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern(Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case14`.
            case repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern(Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case15`.
            case repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern(Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern)
            /// Prevent commits that include changes in specified file paths from being pushed to the commit graph.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule/case16/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case file_path_restriction = "file_path_restriction"
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case16/type`.
                public var _type: Components.Schemas.repository_hyphen_rule.Case16Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/repository-rule/case16/parameters`.
                public struct parametersPayload: Codable, Hashable, Sendable {
                    /// The file paths that are restricted from being pushed to the commit graph.
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-rule/case16/parameters/restricted_file_paths`.
                    public var restricted_file_paths: [Swift.String]
                    /// Creates a new `parametersPayload`.
                    ///
                    /// - Parameters:
                    ///   - restricted_file_paths: The file paths that are restricted from being pushed to the commit graph.
                    public init(restricted_file_paths: [Swift.String]) {
                        self.restricted_file_paths = restricted_file_paths
                    }
                    public enum CodingKeys: String, CodingKey {
                        case restricted_file_paths
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case16/parameters`.
                public var parameters: Components.Schemas.repository_hyphen_rule.Case16Payload.parametersPayload?
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - parameters:
                public init(
                    _type: Components.Schemas.repository_hyphen_rule.Case16Payload._typePayload,
                    parameters: Components.Schemas.repository_hyphen_rule.Case16Payload.parametersPayload? = nil
                ) {
                    self._type = _type
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case parameters
                }
            }
            /// Prevent commits that include changes in specified file paths from being pushed to the commit graph.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case16`.
            case case16(Components.Schemas.repository_hyphen_rule.Case16Payload)
            /// Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case17`.
            public struct Case17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule/case17/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case max_file_path_length = "max_file_path_length"
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case17/type`.
                public var _type: Components.Schemas.repository_hyphen_rule.Case17Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/repository-rule/case17/parameters`.
                public struct parametersPayload: Codable, Hashable, Sendable {
                    /// The maximum amount of characters allowed in file paths
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-rule/case17/parameters/max_file_path_length`.
                    public var max_file_path_length: Swift.Int
                    /// Creates a new `parametersPayload`.
                    ///
                    /// - Parameters:
                    ///   - max_file_path_length: The maximum amount of characters allowed in file paths
                    public init(max_file_path_length: Swift.Int) {
                        self.max_file_path_length = max_file_path_length
                    }
                    public enum CodingKeys: String, CodingKey {
                        case max_file_path_length
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case17/parameters`.
                public var parameters: Components.Schemas.repository_hyphen_rule.Case17Payload.parametersPayload?
                /// Creates a new `Case17Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - parameters:
                public init(
                    _type: Components.Schemas.repository_hyphen_rule.Case17Payload._typePayload,
                    parameters: Components.Schemas.repository_hyphen_rule.Case17Payload.parametersPayload? = nil
                ) {
                    self._type = _type
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case parameters
                }
            }
            /// Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case17`.
            case case17(Components.Schemas.repository_hyphen_rule.Case17Payload)
            /// Prevent commits that include files with specified file extensions from being pushed to the commit graph.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case18`.
            public struct Case18Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule/case18/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case file_extension_restriction = "file_extension_restriction"
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case18/type`.
                public var _type: Components.Schemas.repository_hyphen_rule.Case18Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/repository-rule/case18/parameters`.
                public struct parametersPayload: Codable, Hashable, Sendable {
                    /// The file extensions that are restricted from being pushed to the commit graph.
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-rule/case18/parameters/restricted_file_extensions`.
                    public var restricted_file_extensions: [Swift.String]
                    /// Creates a new `parametersPayload`.
                    ///
                    /// - Parameters:
                    ///   - restricted_file_extensions: The file extensions that are restricted from being pushed to the commit graph.
                    public init(restricted_file_extensions: [Swift.String]) {
                        self.restricted_file_extensions = restricted_file_extensions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case restricted_file_extensions
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case18/parameters`.
                public var parameters: Components.Schemas.repository_hyphen_rule.Case18Payload.parametersPayload?
                /// Creates a new `Case18Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - parameters:
                public init(
                    _type: Components.Schemas.repository_hyphen_rule.Case18Payload._typePayload,
                    parameters: Components.Schemas.repository_hyphen_rule.Case18Payload.parametersPayload? = nil
                ) {
                    self._type = _type
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case parameters
                }
            }
            /// Prevent commits that include files with specified file extensions from being pushed to the commit graph.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case18`.
            case case18(Components.Schemas.repository_hyphen_rule.Case18Payload)
            /// Prevent commits that exceed a specified file size limit from being pushed to the commit.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case19`.
            public struct Case19Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule/case19/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case max_file_size = "max_file_size"
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case19/type`.
                public var _type: Components.Schemas.repository_hyphen_rule.Case19Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/repository-rule/case19/parameters`.
                public struct parametersPayload: Codable, Hashable, Sendable {
                    /// The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-rule/case19/parameters/max_file_size`.
                    public var max_file_size: Swift.Int
                    /// Creates a new `parametersPayload`.
                    ///
                    /// - Parameters:
                    ///   - max_file_size: The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
                    public init(max_file_size: Swift.Int) {
                        self.max_file_size = max_file_size
                    }
                    public enum CodingKeys: String, CodingKey {
                        case max_file_size
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule/case19/parameters`.
                public var parameters: Components.Schemas.repository_hyphen_rule.Case19Payload.parametersPayload?
                /// Creates a new `Case19Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - parameters:
                public init(
                    _type: Components.Schemas.repository_hyphen_rule.Case19Payload._typePayload,
                    parameters: Components.Schemas.repository_hyphen_rule.Case19Payload.parametersPayload? = nil
                ) {
                    self._type = _type
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case parameters
                }
            }
            /// Prevent commits that exceed a specified file size limit from being pushed to the commit.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule/case19`.
            case case19(Components.Schemas.repository_hyphen_rule.Case19Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case20`.
            case repository_hyphen_rule_hyphen_workflows(Components.Schemas.repository_hyphen_rule_hyphen_workflows)
            /// - Remark: Generated from `#/components/schemas/repository-rule/case21`.
            case repository_hyphen_rule_hyphen_code_hyphen_scanning(Components.Schemas.repository_hyphen_rule_hyphen_code_hyphen_scanning)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .repository_hyphen_rule_hyphen_creation(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_update(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_deletion(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_merge_hyphen_queue(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_required_hyphen_deployments(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_required_hyphen_signatures(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_pull_hyphen_request(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case18(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case19(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_workflows(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .repository_hyphen_rule_hyphen_code_hyphen_scanning(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .repository_hyphen_rule_hyphen_creation(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_update(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_deletion(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_merge_hyphen_queue(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_required_hyphen_deployments(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_required_hyphen_signatures(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_pull_hyphen_request(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern(value):
                    try value.encode(to: encoder)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try value.encode(to: encoder)
                case let .case18(value):
                    try value.encode(to: encoder)
                case let .case19(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_workflows(value):
                    try value.encode(to: encoder)
                case let .repository_hyphen_rule_hyphen_code_hyphen_scanning(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A set of rules to apply when specified conditions are met.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-ruleset`.
        public struct repository_hyphen_ruleset: Codable, Hashable, Sendable {
            /// The ID of the ruleset
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/id`.
            public var id: Swift.Int
            /// The name of the ruleset
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/name`.
            public var name: Swift.String
            /// The target of the ruleset
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/target`.
            @frozen public enum targetPayload: String, Codable, Hashable, Sendable {
                case branch = "branch"
                case tag = "tag"
                case push = "push"
            }
            /// The target of the ruleset
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/target`.
            public var target: Components.Schemas.repository_hyphen_ruleset.targetPayload?
            /// The type of the source of the ruleset
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/source_type`.
            @frozen public enum source_typePayload: String, Codable, Hashable, Sendable {
                case Repository = "Repository"
                case Organization = "Organization"
            }
            /// The type of the source of the ruleset
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/source_type`.
            public var source_type: Components.Schemas.repository_hyphen_ruleset.source_typePayload?
            /// The name of the source
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/source`.
            public var source: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/enforcement`.
            public var enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement
            /// The actors that can bypass the rules in this ruleset
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/bypass_actors`.
            public var bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]?
            /// The bypass type of the user making the API request for this ruleset. This field is only returned when
            /// querying the repository-level endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/current_user_can_bypass`.
            @frozen public enum current_user_can_bypassPayload: String, Codable, Hashable, Sendable {
                case always = "always"
                case pull_requests_only = "pull_requests_only"
                case never = "never"
            }
            /// The bypass type of the user making the API request for this ruleset. This field is only returned when
            /// querying the repository-level endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/current_user_can_bypass`.
            public var current_user_can_bypass: Components.Schemas.repository_hyphen_ruleset.current_user_can_bypassPayload?
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links/self`.
                public struct _selfPayload: Codable, Hashable, Sendable {
                    /// The URL of the ruleset
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links/self/href`.
                    public var href: Swift.String?
                    /// Creates a new `_selfPayload`.
                    ///
                    /// - Parameters:
                    ///   - href: The URL of the ruleset
                    public init(href: Swift.String? = nil) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links/self`.
                public var _self: Components.Schemas.repository_hyphen_ruleset._linksPayload._selfPayload?
                /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links/html`.
                public struct htmlPayload: Codable, Hashable, Sendable {
                    /// The html URL of the ruleset
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links/html/href`.
                    public var href: Swift.String?
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href: The html URL of the ruleset
                    public init(href: Swift.String? = nil) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links/html`.
                public var html: Components.Schemas.repository_hyphen_ruleset._linksPayload.htmlPayload?
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - _self:
                ///   - html:
                public init(
                    _self: Components.Schemas.repository_hyphen_ruleset._linksPayload._selfPayload? = nil,
                    html: Components.Schemas.repository_hyphen_ruleset._linksPayload.htmlPayload? = nil
                ) {
                    self._self = _self
                    self.html = html
                }
                public enum CodingKeys: String, CodingKey {
                    case _self = "self"
                    case html
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/_links`.
            public var _links: Components.Schemas.repository_hyphen_ruleset._linksPayload?
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/conditions`.
            public struct conditionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-ruleset/conditions/value1`.
                public var value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions?
                /// - Remark: Generated from `#/components/schemas/repository-ruleset/conditions/value2`.
                public var value2: Components.Schemas.org_hyphen_ruleset_hyphen_conditions?
                /// Creates a new `conditionsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions? = nil,
                    value2: Components.Schemas.org_hyphen_ruleset_hyphen_conditions? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/conditions`.
            public var conditions: Components.Schemas.repository_hyphen_ruleset.conditionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/rules`.
            public var rules: [Components.Schemas.repository_hyphen_rule]?
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository-ruleset/updated_at`.
            public var updated_at: Foundation.Date?
            /// Creates a new `repository_hyphen_ruleset`.
            ///
            /// - Parameters:
            ///   - id: The ID of the ruleset
            ///   - name: The name of the ruleset
            ///   - target: The target of the ruleset
            ///   - source_type: The type of the source of the ruleset
            ///   - source: The name of the source
            ///   - enforcement:
            ///   - bypass_actors: The actors that can bypass the rules in this ruleset
            ///   - current_user_can_bypass: The bypass type of the user making the API request for this ruleset. This field is only returned when
            ///   - node_id:
            ///   - _links:
            ///   - conditions:
            ///   - rules:
            ///   - created_at:
            ///   - updated_at:
            public init(
                id: Swift.Int,
                name: Swift.String,
                target: Components.Schemas.repository_hyphen_ruleset.targetPayload? = nil,
                source_type: Components.Schemas.repository_hyphen_ruleset.source_typePayload? = nil,
                source: Swift.String,
                enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement,
                bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]? = nil,
                current_user_can_bypass: Components.Schemas.repository_hyphen_ruleset.current_user_can_bypassPayload? = nil,
                node_id: Swift.String? = nil,
                _links: Components.Schemas.repository_hyphen_ruleset._linksPayload? = nil,
                conditions: Components.Schemas.repository_hyphen_ruleset.conditionsPayload? = nil,
                rules: [Components.Schemas.repository_hyphen_rule]? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil
            ) {
                self.id = id
                self.name = name
                self.target = target
                self.source_type = source_type
                self.source = source
                self.enforcement = enforcement
                self.bypass_actors = bypass_actors
                self.current_user_can_bypass = current_user_can_bypass
                self.node_id = node_id
                self._links = _links
                self.conditions = conditions
                self.rules = rules
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case target
                case source_type
                case source
                case enforcement
                case bypass_actors
                case current_user_can_bypass
                case node_id
                case _links
                case conditions
                case rules
                case created_at
                case updated_at
            }
        }
        /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites`.
        public struct rule_hyphen_suitesPayload: Codable, Hashable, Sendable {
            /// The unique identifier of the rule insight.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/id`.
            public var id: Swift.Int?
            /// The number that identifies the user.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/actor_id`.
            public var actor_id: Swift.Int?
            /// The handle for the GitHub user account.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/actor_name`.
            public var actor_name: Swift.String?
            /// The first commit sha before the push evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/before_sha`.
            public var before_sha: Swift.String?
            /// The last commit sha in the push evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/after_sha`.
            public var after_sha: Swift.String?
            /// The ref name that the evaluation ran on.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/ref`.
            public var ref: Swift.String?
            /// The ID of the repository associated with the rule evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/repository_id`.
            public var repository_id: Swift.Int?
            /// The name of the repository without the `.git` extension.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/repository_name`.
            public var repository_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// The result of the rule evaluations for rules with the `active` enforcement status.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/result`.
            @frozen public enum resultPayload: String, Codable, Hashable, Sendable {
                case pass = "pass"
                case fail = "fail"
                case bypass = "bypass"
            }
            /// The result of the rule evaluations for rules with the `active` enforcement status.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/result`.
            public var result: Components.Schemas.rule_hyphen_suitesPayload.resultPayload?
            /// The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/evaluation_result`.
            @frozen public enum evaluation_resultPayload: String, Codable, Hashable, Sendable {
                case pass = "pass"
                case fail = "fail"
                case bypass = "bypass"
            }
            /// The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
            ///
            /// - Remark: Generated from `#/components/schemas/rule_hyphen_suites/evaluation_result`.
            public var evaluation_result: Components.Schemas.rule_hyphen_suitesPayload.evaluation_resultPayload?
            /// Creates a new `rule_hyphen_suitesPayload`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of the rule insight.
            ///   - actor_id: The number that identifies the user.
            ///   - actor_name: The handle for the GitHub user account.
            ///   - before_sha: The first commit sha before the push evaluation.
            ///   - after_sha: The last commit sha in the push evaluation.
            ///   - ref: The ref name that the evaluation ran on.
            ///   - repository_id: The ID of the repository associated with the rule evaluation.
            ///   - repository_name: The name of the repository without the `.git` extension.
            ///   - pushed_at:
            ///   - result: The result of the rule evaluations for rules with the `active` enforcement status.
            ///   - evaluation_result: The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
            public init(
                id: Swift.Int? = nil,
                actor_id: Swift.Int? = nil,
                actor_name: Swift.String? = nil,
                before_sha: Swift.String? = nil,
                after_sha: Swift.String? = nil,
                ref: Swift.String? = nil,
                repository_id: Swift.Int? = nil,
                repository_name: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                result: Components.Schemas.rule_hyphen_suitesPayload.resultPayload? = nil,
                evaluation_result: Components.Schemas.rule_hyphen_suitesPayload.evaluation_resultPayload? = nil
            ) {
                self.id = id
                self.actor_id = actor_id
                self.actor_name = actor_name
                self.before_sha = before_sha
                self.after_sha = after_sha
                self.ref = ref
                self.repository_id = repository_id
                self.repository_name = repository_name
                self.pushed_at = pushed_at
                self.result = result
                self.evaluation_result = evaluation_result
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case actor_id
                case actor_name
                case before_sha
                case after_sha
                case ref
                case repository_id
                case repository_name
                case pushed_at
                case result
                case evaluation_result
            }
        }
        /// Response
        ///
        /// - Remark: Generated from `#/components/schemas/rule-suites`.
        public typealias rule_hyphen_suites = [Components.Schemas.rule_hyphen_suitesPayload]
        /// Response
        ///
        /// - Remark: Generated from `#/components/schemas/rule-suite`.
        public struct rule_hyphen_suite: Codable, Hashable, Sendable {
            /// The unique identifier of the rule insight.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/id`.
            public var id: Swift.Int?
            /// The number that identifies the user.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/actor_id`.
            public var actor_id: Swift.Int?
            /// The handle for the GitHub user account.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/actor_name`.
            public var actor_name: Swift.String?
            /// The first commit sha before the push evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/before_sha`.
            public var before_sha: Swift.String?
            /// The last commit sha in the push evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/after_sha`.
            public var after_sha: Swift.String?
            /// The ref name that the evaluation ran on.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/ref`.
            public var ref: Swift.String?
            /// The ID of the repository associated with the rule evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/repository_id`.
            public var repository_id: Swift.Int?
            /// The name of the repository without the `.git` extension.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/repository_name`.
            public var repository_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/rule-suite/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// The result of the rule evaluations for rules with the `active` enforcement status.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/result`.
            @frozen public enum resultPayload: String, Codable, Hashable, Sendable {
                case pass = "pass"
                case fail = "fail"
                case bypass = "bypass"
            }
            /// The result of the rule evaluations for rules with the `active` enforcement status.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/result`.
            public var result: Components.Schemas.rule_hyphen_suite.resultPayload?
            /// The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/evaluation_result`.
            @frozen public enum evaluation_resultPayload: String, Codable, Hashable, Sendable {
                case pass = "pass"
                case fail = "fail"
                case bypass = "bypass"
            }
            /// The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/evaluation_result`.
            public var evaluation_result: Components.Schemas.rule_hyphen_suite.evaluation_resultPayload?
            /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload`.
            public struct rule_evaluationsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/rule_source`.
                public struct rule_sourcePayload: Codable, Hashable, Sendable {
                    /// The type of rule source.
                    ///
                    /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/rule_source/type`.
                    public var _type: Swift.String?
                    /// The ID of the rule source.
                    ///
                    /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/rule_source/id`.
                    public var id: Swift.Int?
                    /// The name of the rule source.
                    ///
                    /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/rule_source/name`.
                    public var name: Swift.String?
                    /// Creates a new `rule_sourcePayload`.
                    ///
                    /// - Parameters:
                    ///   - _type: The type of rule source.
                    ///   - id: The ID of the rule source.
                    ///   - name: The name of the rule source.
                    public init(
                        _type: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        name: Swift.String? = nil
                    ) {
                        self._type = _type
                        self.id = id
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case id
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/rule_source`.
                public var rule_source: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayloadPayload.rule_sourcePayload?
                /// The enforcement level of this rule source.
                ///
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/enforcement`.
                @frozen public enum enforcementPayload: String, Codable, Hashable, Sendable {
                    case active = "active"
                    case evaluate = "evaluate"
                    case deleted_space_ruleset = "deleted ruleset"
                }
                /// The enforcement level of this rule source.
                ///
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/enforcement`.
                public var enforcement: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayloadPayload.enforcementPayload?
                /// The result of the evaluation of the individual rule.
                ///
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/result`.
                @frozen public enum resultPayload: String, Codable, Hashable, Sendable {
                    case pass = "pass"
                    case fail = "fail"
                }
                /// The result of the evaluation of the individual rule.
                ///
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/result`.
                public var result: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayloadPayload.resultPayload?
                /// The type of rule.
                ///
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/rule_type`.
                public var rule_type: Swift.String?
                /// The detailed failure message for the rule. Null if the rule passed.
                ///
                /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluationsPayload/details`.
                public var details: Swift.String?
                /// Creates a new `rule_evaluationsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - rule_source:
                ///   - enforcement: The enforcement level of this rule source.
                ///   - result: The result of the evaluation of the individual rule.
                ///   - rule_type: The type of rule.
                ///   - details: The detailed failure message for the rule. Null if the rule passed.
                public init(
                    rule_source: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayloadPayload.rule_sourcePayload? = nil,
                    enforcement: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayloadPayload.enforcementPayload? = nil,
                    result: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayloadPayload.resultPayload? = nil,
                    rule_type: Swift.String? = nil,
                    details: Swift.String? = nil
                ) {
                    self.rule_source = rule_source
                    self.enforcement = enforcement
                    self.result = result
                    self.rule_type = rule_type
                    self.details = details
                }
                public enum CodingKeys: String, CodingKey {
                    case rule_source
                    case enforcement
                    case result
                    case rule_type
                    case details
                }
            }
            /// Details on the evaluated rules.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluations`.
            public typealias rule_evaluationsPayload = [Components.Schemas.rule_hyphen_suite.rule_evaluationsPayloadPayload]
            /// Details on the evaluated rules.
            ///
            /// - Remark: Generated from `#/components/schemas/rule-suite/rule_evaluations`.
            public var rule_evaluations: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayload?
            /// Creates a new `rule_hyphen_suite`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of the rule insight.
            ///   - actor_id: The number that identifies the user.
            ///   - actor_name: The handle for the GitHub user account.
            ///   - before_sha: The first commit sha before the push evaluation.
            ///   - after_sha: The last commit sha in the push evaluation.
            ///   - ref: The ref name that the evaluation ran on.
            ///   - repository_id: The ID of the repository associated with the rule evaluation.
            ///   - repository_name: The name of the repository without the `.git` extension.
            ///   - pushed_at:
            ///   - result: The result of the rule evaluations for rules with the `active` enforcement status.
            ///   - evaluation_result: The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
            ///   - rule_evaluations: Details on the evaluated rules.
            public init(
                id: Swift.Int? = nil,
                actor_id: Swift.Int? = nil,
                actor_name: Swift.String? = nil,
                before_sha: Swift.String? = nil,
                after_sha: Swift.String? = nil,
                ref: Swift.String? = nil,
                repository_id: Swift.Int? = nil,
                repository_name: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                result: Components.Schemas.rule_hyphen_suite.resultPayload? = nil,
                evaluation_result: Components.Schemas.rule_hyphen_suite.evaluation_resultPayload? = nil,
                rule_evaluations: Components.Schemas.rule_hyphen_suite.rule_evaluationsPayload? = nil
            ) {
                self.id = id
                self.actor_id = actor_id
                self.actor_name = actor_name
                self.before_sha = before_sha
                self.after_sha = after_sha
                self.ref = ref
                self.repository_id = repository_id
                self.repository_name = repository_name
                self.pushed_at = pushed_at
                self.result = result
                self.evaluation_result = evaluation_result
                self.rule_evaluations = rule_evaluations
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case actor_id
                case actor_name
                case before_sha
                case after_sha
                case ref
                case repository_id
                case repository_name
                case pushed_at
                case result
                case evaluation_result
                case rule_evaluations
            }
        }
        /// The type of reviewer.
        ///
        /// - Remark: Generated from `#/components/schemas/deployment-reviewer-type`.
        @frozen public enum deployment_hyphen_reviewer_hyphen_type: String, Codable, Hashable, Sendable {
            case User = "User"
            case Team = "Team"
        }
        /// A request for a specific ref(branch,sha,tag) to be deployed
        ///
        /// - Remark: Generated from `#/components/schemas/deployment`.
        public struct deployment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/deployment/url`.
            public var url: Swift.String
            /// Unique identifier of the deployment
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/deployment/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/sha`.
            public var sha: Swift.String
            /// The ref to deploy. This can be a branch, tag, or sha.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/ref`.
            public var ref: Swift.String
            /// Parameter to specify a task to execute
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/task`.
            public var task: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/payload`.
            @frozen public enum payloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/deployment/payload/case1`.
                public struct Case1Payload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/deployment/payload/case1`.
                case case1(Components.Schemas.deployment.payloadPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/deployment/payload/case2`.
                case case2(Swift.String)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/deployment/payload`.
            public var payload: Components.Schemas.deployment.payloadPayload
            /// - Remark: Generated from `#/components/schemas/deployment/original_environment`.
            public var original_environment: Swift.String?
            /// Name for the target deployment environment.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/environment`.
            public var environment: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/deployment/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/deployment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment/repository_url`.
            public var repository_url: Swift.String
            /// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/transient_environment`.
            public var transient_environment: Swift.Bool?
            /// Specifies if the given environment is one that end-users directly interact with. Default: false.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment/production_environment`.
            public var production_environment: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/deployment/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// Creates a new `deployment`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id: Unique identifier of the deployment
            ///   - node_id:
            ///   - sha:
            ///   - ref: The ref to deploy. This can be a branch, tag, or sha.
            ///   - task: Parameter to specify a task to execute
            ///   - payload:
            ///   - original_environment:
            ///   - environment: Name for the target deployment environment.
            ///   - description:
            ///   - creator:
            ///   - created_at:
            ///   - updated_at:
            ///   - statuses_url:
            ///   - repository_url:
            ///   - transient_environment: Specifies if the given environment is will no longer exist at some point in the future. Default: false.
            ///   - production_environment: Specifies if the given environment is one that end-users directly interact with. Default: false.
            ///   - performed_via_github_app:
            public init(
                url: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                sha: Swift.String,
                ref: Swift.String,
                task: Swift.String,
                payload: Components.Schemas.deployment.payloadPayload,
                original_environment: Swift.String? = nil,
                environment: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                statuses_url: Swift.String,
                repository_url: Swift.String,
                transient_environment: Swift.Bool? = nil,
                production_environment: Swift.Bool? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.sha = sha
                self.ref = ref
                self.task = task
                self.payload = payload
                self.original_environment = original_environment
                self.environment = environment
                self.description = description
                self.creator = creator
                self.created_at = created_at
                self.updated_at = updated_at
                self.statuses_url = statuses_url
                self.repository_url = repository_url
                self.transient_environment = transient_environment
                self.production_environment = production_environment
                self.performed_via_github_app = performed_via_github_app
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case sha
                case ref
                case task
                case payload
                case original_environment
                case environment
                case description
                case creator
                case created_at
                case updated_at
                case statuses_url
                case repository_url
                case transient_environment
                case production_environment
                case performed_via_github_app
            }
        }
        /// Activity
        ///
        /// - Remark: Generated from `#/components/schemas/activity`.
        public struct activity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/activity/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/activity/node_id`.
            public var node_id: Swift.String
            /// The SHA of the commit before the activity.
            ///
            /// - Remark: Generated from `#/components/schemas/activity/before`.
            public var before: Swift.String
            /// The SHA of the commit after the activity.
            ///
            /// - Remark: Generated from `#/components/schemas/activity/after`.
            public var after: Swift.String
            /// The full Git reference, formatted as `refs/heads/<branch name>`.
            ///
            /// - Remark: Generated from `#/components/schemas/activity/ref`.
            public var ref: Swift.String
            /// The time when the activity occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/activity/timestamp`.
            public var timestamp: Foundation.Date
            /// The type of the activity that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/activity/activity_type`.
            @frozen public enum activity_typePayload: String, Codable, Hashable, Sendable {
                case push = "push"
                case force_push = "force_push"
                case branch_deletion = "branch_deletion"
                case branch_creation = "branch_creation"
                case pr_merge = "pr_merge"
                case merge_queue_merge = "merge_queue_merge"
            }
            /// The type of the activity that was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/activity/activity_type`.
            public var activity_type: Components.Schemas.activity.activity_typePayload
            /// - Remark: Generated from `#/components/schemas/activity/actor`.
            public var actor: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// Creates a new `activity`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - before: The SHA of the commit before the activity.
            ///   - after: The SHA of the commit after the activity.
            ///   - ref: The full Git reference, formatted as `refs/heads/<branch name>`.
            ///   - timestamp: The time when the activity occurred.
            ///   - activity_type: The type of the activity that was performed.
            ///   - actor:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                before: Swift.String,
                after: Swift.String,
                ref: Swift.String,
                timestamp: Foundation.Date,
                activity_type: Components.Schemas.activity.activity_typePayload,
                actor: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.before = before
                self.after = after
                self.ref = ref
                self.timestamp = timestamp
                self.activity_type = activity_type
                self.actor = actor
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case before
                case after
                case ref
                case timestamp
                case activity_type
                case actor
            }
        }
        /// An autolink reference.
        ///
        /// - Remark: Generated from `#/components/schemas/autolink`.
        public struct autolink: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/autolink/id`.
            public var id: Swift.Int
            /// The prefix of a key that is linkified.
            ///
            /// - Remark: Generated from `#/components/schemas/autolink/key_prefix`.
            public var key_prefix: Swift.String
            /// A template for the target URL that is generated if a key was found.
            ///
            /// - Remark: Generated from `#/components/schemas/autolink/url_template`.
            public var url_template: Swift.String
            /// Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
            ///
            /// - Remark: Generated from `#/components/schemas/autolink/is_alphanumeric`.
            public var is_alphanumeric: Swift.Bool
            /// Creates a new `autolink`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - key_prefix: The prefix of a key that is linkified.
            ///   - url_template: A template for the target URL that is generated if a key was found.
            ///   - is_alphanumeric: Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
            public init(
                id: Swift.Int,
                key_prefix: Swift.String,
                url_template: Swift.String,
                is_alphanumeric: Swift.Bool
            ) {
                self.id = id
                self.key_prefix = key_prefix
                self.url_template = url_template
                self.is_alphanumeric = is_alphanumeric
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case key_prefix
                case url_template
                case is_alphanumeric
            }
        }
        /// Check Automated Security Fixes
        ///
        /// - Remark: Generated from `#/components/schemas/check-automated-security-fixes`.
        public struct check_hyphen_automated_hyphen_security_hyphen_fixes: Codable, Hashable, Sendable {
            /// Whether automated security fixes are enabled for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/check-automated-security-fixes/enabled`.
            public var enabled: Swift.Bool
            /// Whether automated security fixes are paused for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/check-automated-security-fixes/paused`.
            public var paused: Swift.Bool
            /// Creates a new `check_hyphen_automated_hyphen_security_hyphen_fixes`.
            ///
            /// - Parameters:
            ///   - enabled: Whether automated security fixes are enabled for the repository.
            ///   - paused: Whether automated security fixes are paused for the repository.
            public init(
                enabled: Swift.Bool,
                paused: Swift.Bool
            ) {
                self.enabled = enabled
                self.paused = paused
            }
            public enum CodingKeys: String, CodingKey {
                case enabled
                case paused
            }
        }
        /// Protected Branch Required Status Check
        ///
        /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check`.
        public struct protected_hyphen_branch_hyphen_required_hyphen_status_hyphen_check: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/enforcement_level`.
            public var enforcement_level: Swift.String?
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/contexts`.
            public var contexts: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/checksPayload`.
            public struct checksPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/checksPayload/context`.
                public var context: Swift.String
                /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/checksPayload/app_id`.
                public var app_id: Swift.Int?
                /// Creates a new `checksPayloadPayload`.
                ///
                /// - Parameters:
                ///   - context:
                ///   - app_id:
                public init(
                    context: Swift.String,
                    app_id: Swift.Int? = nil
                ) {
                    self.context = context
                    self.app_id = app_id
                }
                public enum CodingKeys: String, CodingKey {
                    case context
                    case app_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/checks`.
            public typealias checksPayload = [Components.Schemas.protected_hyphen_branch_hyphen_required_hyphen_status_hyphen_check.checksPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/checks`.
            public var checks: Components.Schemas.protected_hyphen_branch_hyphen_required_hyphen_status_hyphen_check.checksPayload
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/contexts_url`.
            public var contexts_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/protected-branch-required-status-check/strict`.
            public var strict: Swift.Bool?
            /// Creates a new `protected_hyphen_branch_hyphen_required_hyphen_status_hyphen_check`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - enforcement_level:
            ///   - contexts:
            ///   - checks:
            ///   - contexts_url:
            ///   - strict:
            public init(
                url: Swift.String? = nil,
                enforcement_level: Swift.String? = nil,
                contexts: [Swift.String],
                checks: Components.Schemas.protected_hyphen_branch_hyphen_required_hyphen_status_hyphen_check.checksPayload,
                contexts_url: Swift.String? = nil,
                strict: Swift.Bool? = nil
            ) {
                self.url = url
                self.enforcement_level = enforcement_level
                self.contexts = contexts
                self.checks = checks
                self.contexts_url = contexts_url
                self.strict = strict
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case enforcement_level
                case contexts
                case checks
                case contexts_url
                case strict
            }
        }
        /// Protected Branch Admin Enforced
        ///
        /// - Remark: Generated from `#/components/schemas/protected-branch-admin-enforced`.
        public struct protected_hyphen_branch_hyphen_admin_hyphen_enforced: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/protected-branch-admin-enforced/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/protected-branch-admin-enforced/enabled`.
            public var enabled: Swift.Bool
            /// Creates a new `protected_hyphen_branch_hyphen_admin_hyphen_enforced`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - enabled:
            public init(
                url: Swift.String,
                enabled: Swift.Bool
            ) {
                self.url = url
                self.enabled = enabled
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case enabled
            }
        }
        /// Protected Branch Pull Request Review
        ///
        /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review`.
        public struct protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions`.
            public struct dismissal_restrictionsPayload: Codable, Hashable, Sendable {
                /// The list of users with review dismissal access.
                ///
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions/users`.
                public var users: [Components.Schemas.simple_hyphen_user]?
                /// The list of teams with review dismissal access.
                ///
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions/teams`.
                public var teams: [Components.Schemas.team]?
                /// The list of apps with review dismissal access.
                ///
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions/apps`.
                public var apps: [Components.Schemas.integration]?
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions/users_url`.
                public var users_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions/teams_url`.
                public var teams_url: Swift.String?
                /// Creates a new `dismissal_restrictionsPayload`.
                ///
                /// - Parameters:
                ///   - users: The list of users with review dismissal access.
                ///   - teams: The list of teams with review dismissal access.
                ///   - apps: The list of apps with review dismissal access.
                ///   - url:
                ///   - users_url:
                ///   - teams_url:
                public init(
                    users: [Components.Schemas.simple_hyphen_user]? = nil,
                    teams: [Components.Schemas.team]? = nil,
                    apps: [Components.Schemas.integration]? = nil,
                    url: Swift.String? = nil,
                    users_url: Swift.String? = nil,
                    teams_url: Swift.String? = nil
                ) {
                    self.users = users
                    self.teams = teams
                    self.apps = apps
                    self.url = url
                    self.users_url = users_url
                    self.teams_url = teams_url
                }
                public enum CodingKeys: String, CodingKey {
                    case users
                    case teams
                    case apps
                    case url
                    case users_url
                    case teams_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismissal_restrictions`.
            public var dismissal_restrictions: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review.dismissal_restrictionsPayload?
            /// Allow specific users, teams, or apps to bypass pull request requirements.
            ///
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/bypass_pull_request_allowances`.
            public struct bypass_pull_request_allowancesPayload: Codable, Hashable, Sendable {
                /// The list of users allowed to bypass pull request requirements.
                ///
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/bypass_pull_request_allowances/users`.
                public var users: [Components.Schemas.simple_hyphen_user]?
                /// The list of teams allowed to bypass pull request requirements.
                ///
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/bypass_pull_request_allowances/teams`.
                public var teams: [Components.Schemas.team]?
                /// The list of apps allowed to bypass pull request requirements.
                ///
                /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/bypass_pull_request_allowances/apps`.
                public var apps: [Components.Schemas.integration]?
                /// Creates a new `bypass_pull_request_allowancesPayload`.
                ///
                /// - Parameters:
                ///   - users: The list of users allowed to bypass pull request requirements.
                ///   - teams: The list of teams allowed to bypass pull request requirements.
                ///   - apps: The list of apps allowed to bypass pull request requirements.
                public init(
                    users: [Components.Schemas.simple_hyphen_user]? = nil,
                    teams: [Components.Schemas.team]? = nil,
                    apps: [Components.Schemas.integration]? = nil
                ) {
                    self.users = users
                    self.teams = teams
                    self.apps = apps
                }
                public enum CodingKeys: String, CodingKey {
                    case users
                    case teams
                    case apps
                }
            }
            /// Allow specific users, teams, or apps to bypass pull request requirements.
            ///
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/bypass_pull_request_allowances`.
            public var bypass_pull_request_allowances: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review.bypass_pull_request_allowancesPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/dismiss_stale_reviews`.
            public var dismiss_stale_reviews: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/require_code_owner_reviews`.
            public var require_code_owner_reviews: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/required_approving_review_count`.
            public var required_approving_review_count: Swift.Int?
            /// Whether the most recent push must be approved by someone other than the person who pushed it.
            ///
            /// - Remark: Generated from `#/components/schemas/protected-branch-pull-request-review/require_last_push_approval`.
            public var require_last_push_approval: Swift.Bool?
            /// Creates a new `protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - dismissal_restrictions:
            ///   - bypass_pull_request_allowances: Allow specific users, teams, or apps to bypass pull request requirements.
            ///   - dismiss_stale_reviews:
            ///   - require_code_owner_reviews:
            ///   - required_approving_review_count:
            ///   - require_last_push_approval: Whether the most recent push must be approved by someone other than the person who pushed it.
            public init(
                url: Swift.String? = nil,
                dismissal_restrictions: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review.dismissal_restrictionsPayload? = nil,
                bypass_pull_request_allowances: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review.bypass_pull_request_allowancesPayload? = nil,
                dismiss_stale_reviews: Swift.Bool,
                require_code_owner_reviews: Swift.Bool,
                required_approving_review_count: Swift.Int? = nil,
                require_last_push_approval: Swift.Bool? = nil
            ) {
                self.url = url
                self.dismissal_restrictions = dismissal_restrictions
                self.bypass_pull_request_allowances = bypass_pull_request_allowances
                self.dismiss_stale_reviews = dismiss_stale_reviews
                self.require_code_owner_reviews = require_code_owner_reviews
                self.required_approving_review_count = required_approving_review_count
                self.require_last_push_approval = require_last_push_approval
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case dismissal_restrictions
                case bypass_pull_request_allowances
                case dismiss_stale_reviews
                case require_code_owner_reviews
                case required_approving_review_count
                case require_last_push_approval
            }
        }
        /// Branch Restriction Policy
        ///
        /// - Remark: Generated from `#/components/schemas/branch-restriction-policy`.
        public struct branch_hyphen_restriction_hyphen_policy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/users_url`.
            public var users_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/apps_url`.
            public var apps_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload`.
            public struct usersPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/login`.
                public var login: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/id`.
                public var id: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/avatar_url`.
                public var avatar_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/gravatar_id`.
                public var gravatar_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/followers_url`.
                public var followers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/following_url`.
                public var following_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/gists_url`.
                public var gists_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/starred_url`.
                public var starred_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/subscriptions_url`.
                public var subscriptions_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/organizations_url`.
                public var organizations_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/repos_url`.
                public var repos_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/events_url`.
                public var events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/received_events_url`.
                public var received_events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/type`.
                public var _type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/site_admin`.
                public var site_admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/usersPayload/user_view_type`.
                public var user_view_type: Swift.String?
                /// Creates a new `usersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - login:
                ///   - id:
                ///   - node_id:
                ///   - avatar_url:
                ///   - gravatar_id:
                ///   - url:
                ///   - html_url:
                ///   - followers_url:
                ///   - following_url:
                ///   - gists_url:
                ///   - starred_url:
                ///   - subscriptions_url:
                ///   - organizations_url:
                ///   - repos_url:
                ///   - events_url:
                ///   - received_events_url:
                ///   - _type:
                ///   - site_admin:
                ///   - user_view_type:
                public init(
                    login: Swift.String? = nil,
                    id: Swift.Int64? = nil,
                    node_id: Swift.String? = nil,
                    avatar_url: Swift.String? = nil,
                    gravatar_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    followers_url: Swift.String? = nil,
                    following_url: Swift.String? = nil,
                    gists_url: Swift.String? = nil,
                    starred_url: Swift.String? = nil,
                    subscriptions_url: Swift.String? = nil,
                    organizations_url: Swift.String? = nil,
                    repos_url: Swift.String? = nil,
                    events_url: Swift.String? = nil,
                    received_events_url: Swift.String? = nil,
                    _type: Swift.String? = nil,
                    site_admin: Swift.Bool? = nil,
                    user_view_type: Swift.String? = nil
                ) {
                    self.login = login
                    self.id = id
                    self.node_id = node_id
                    self.avatar_url = avatar_url
                    self.gravatar_id = gravatar_id
                    self.url = url
                    self.html_url = html_url
                    self.followers_url = followers_url
                    self.following_url = following_url
                    self.gists_url = gists_url
                    self.starred_url = starred_url
                    self.subscriptions_url = subscriptions_url
                    self.organizations_url = organizations_url
                    self.repos_url = repos_url
                    self.events_url = events_url
                    self.received_events_url = received_events_url
                    self._type = _type
                    self.site_admin = site_admin
                    self.user_view_type = user_view_type
                }
                public enum CodingKeys: String, CodingKey {
                    case login
                    case id
                    case node_id
                    case avatar_url
                    case gravatar_id
                    case url
                    case html_url
                    case followers_url
                    case following_url
                    case gists_url
                    case starred_url
                    case subscriptions_url
                    case organizations_url
                    case repos_url
                    case events_url
                    case received_events_url
                    case _type = "type"
                    case site_admin
                    case user_view_type
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/users`.
            public typealias usersPayload = [Components.Schemas.branch_hyphen_restriction_hyphen_policy.usersPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/users`.
            public var users: Components.Schemas.branch_hyphen_restriction_hyphen_policy.usersPayload
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload`.
            public struct teamsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/slug`.
                public var slug: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/privacy`.
                public var privacy: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/notification_setting`.
                public var notification_setting: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/permission`.
                public var permission: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/members_url`.
                public var members_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/repositories_url`.
                public var repositories_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teamsPayload/parent`.
                public var parent: Swift.String?
                /// Creates a new `teamsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - html_url:
                ///   - name:
                ///   - slug:
                ///   - description:
                ///   - privacy:
                ///   - notification_setting:
                ///   - permission:
                ///   - members_url:
                ///   - repositories_url:
                ///   - parent:
                public init(
                    id: Swift.Int? = nil,
                    node_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    name: Swift.String? = nil,
                    slug: Swift.String? = nil,
                    description: Swift.String? = nil,
                    privacy: Swift.String? = nil,
                    notification_setting: Swift.String? = nil,
                    permission: Swift.String? = nil,
                    members_url: Swift.String? = nil,
                    repositories_url: Swift.String? = nil,
                    parent: Swift.String? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.html_url = html_url
                    self.name = name
                    self.slug = slug
                    self.description = description
                    self.privacy = privacy
                    self.notification_setting = notification_setting
                    self.permission = permission
                    self.members_url = members_url
                    self.repositories_url = repositories_url
                    self.parent = parent
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case html_url
                    case name
                    case slug
                    case description
                    case privacy
                    case notification_setting
                    case permission
                    case members_url
                    case repositories_url
                    case parent
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teams`.
            public typealias teamsPayload = [Components.Schemas.branch_hyphen_restriction_hyphen_policy.teamsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/teams`.
            public var teams: Components.Schemas.branch_hyphen_restriction_hyphen_policy.teamsPayload
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload`.
            public struct appsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/slug`.
                public var slug: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner`.
                public struct ownerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/repos_url`.
                    public var repos_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/events_url`.
                    public var events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/hooks_url`.
                    public var hooks_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/issues_url`.
                    public var issues_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/members_url`.
                    public var members_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/public_members_url`.
                    public var public_members_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/avatar_url`.
                    public var avatar_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/gravatar_id`.
                    public var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/html_url`.
                    public var html_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/followers_url`.
                    public var followers_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/following_url`.
                    public var following_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/gists_url`.
                    public var gists_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/starred_url`.
                    public var starred_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/subscriptions_url`.
                    public var subscriptions_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/organizations_url`.
                    public var organizations_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/received_events_url`.
                    public var received_events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/site_admin`.
                    public var site_admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner/user_view_type`.
                    public var user_view_type: Swift.String?
                    /// Creates a new `ownerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - node_id:
                    ///   - url:
                    ///   - repos_url:
                    ///   - events_url:
                    ///   - hooks_url:
                    ///   - issues_url:
                    ///   - members_url:
                    ///   - public_members_url:
                    ///   - avatar_url:
                    ///   - description:
                    ///   - gravatar_id:
                    ///   - html_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - organizations_url:
                    ///   - received_events_url:
                    ///   - _type:
                    ///   - site_admin:
                    ///   - user_view_type:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        node_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        repos_url: Swift.String? = nil,
                        events_url: Swift.String? = nil,
                        hooks_url: Swift.String? = nil,
                        issues_url: Swift.String? = nil,
                        members_url: Swift.String? = nil,
                        public_members_url: Swift.String? = nil,
                        avatar_url: Swift.String? = nil,
                        description: Swift.String? = nil,
                        gravatar_id: Swift.String? = nil,
                        html_url: Swift.String? = nil,
                        followers_url: Swift.String? = nil,
                        following_url: Swift.String? = nil,
                        gists_url: Swift.String? = nil,
                        starred_url: Swift.String? = nil,
                        subscriptions_url: Swift.String? = nil,
                        organizations_url: Swift.String? = nil,
                        received_events_url: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        site_admin: Swift.Bool? = nil,
                        user_view_type: Swift.String? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.node_id = node_id
                        self.url = url
                        self.repos_url = repos_url
                        self.events_url = events_url
                        self.hooks_url = hooks_url
                        self.issues_url = issues_url
                        self.members_url = members_url
                        self.public_members_url = public_members_url
                        self.avatar_url = avatar_url
                        self.description = description
                        self.gravatar_id = gravatar_id
                        self.html_url = html_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self.organizations_url = organizations_url
                        self.received_events_url = received_events_url
                        self._type = _type
                        self.site_admin = site_admin
                        self.user_view_type = user_view_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case node_id
                        case url
                        case repos_url
                        case events_url
                        case hooks_url
                        case issues_url
                        case members_url
                        case public_members_url
                        case avatar_url
                        case description
                        case gravatar_id
                        case html_url
                        case followers_url
                        case following_url
                        case gists_url
                        case starred_url
                        case subscriptions_url
                        case organizations_url
                        case received_events_url
                        case _type = "type"
                        case site_admin
                        case user_view_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/owner`.
                public var owner: Components.Schemas.branch_hyphen_restriction_hyphen_policy.appsPayloadPayload.ownerPayload?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/client_id`.
                public var client_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/external_url`.
                public var external_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/created_at`.
                public var created_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/updated_at`.
                public var updated_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/permissions`.
                public struct permissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/permissions/metadata`.
                    public var metadata: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/permissions/contents`.
                    public var contents: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/permissions/issues`.
                    public var issues: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/permissions/single_file`.
                    public var single_file: Swift.String?
                    /// Creates a new `permissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - metadata:
                    ///   - contents:
                    ///   - issues:
                    ///   - single_file:
                    public init(
                        metadata: Swift.String? = nil,
                        contents: Swift.String? = nil,
                        issues: Swift.String? = nil,
                        single_file: Swift.String? = nil
                    ) {
                        self.metadata = metadata
                        self.contents = contents
                        self.issues = issues
                        self.single_file = single_file
                    }
                    public enum CodingKeys: String, CodingKey {
                        case metadata
                        case contents
                        case issues
                        case single_file
                    }
                }
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/permissions`.
                public var permissions: Components.Schemas.branch_hyphen_restriction_hyphen_policy.appsPayloadPayload.permissionsPayload?
                /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/appsPayload/events`.
                public var events: [Swift.String]?
                /// Creates a new `appsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - slug:
                ///   - node_id:
                ///   - owner:
                ///   - name:
                ///   - client_id:
                ///   - description:
                ///   - external_url:
                ///   - html_url:
                ///   - created_at:
                ///   - updated_at:
                ///   - permissions:
                ///   - events:
                public init(
                    id: Swift.Int? = nil,
                    slug: Swift.String? = nil,
                    node_id: Swift.String? = nil,
                    owner: Components.Schemas.branch_hyphen_restriction_hyphen_policy.appsPayloadPayload.ownerPayload? = nil,
                    name: Swift.String? = nil,
                    client_id: Swift.String? = nil,
                    description: Swift.String? = nil,
                    external_url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    created_at: Swift.String? = nil,
                    updated_at: Swift.String? = nil,
                    permissions: Components.Schemas.branch_hyphen_restriction_hyphen_policy.appsPayloadPayload.permissionsPayload? = nil,
                    events: [Swift.String]? = nil
                ) {
                    self.id = id
                    self.slug = slug
                    self.node_id = node_id
                    self.owner = owner
                    self.name = name
                    self.client_id = client_id
                    self.description = description
                    self.external_url = external_url
                    self.html_url = html_url
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.permissions = permissions
                    self.events = events
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case slug
                    case node_id
                    case owner
                    case name
                    case client_id
                    case description
                    case external_url
                    case html_url
                    case created_at
                    case updated_at
                    case permissions
                    case events
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/apps`.
            public typealias appsPayload = [Components.Schemas.branch_hyphen_restriction_hyphen_policy.appsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/branch-restriction-policy/apps`.
            public var apps: Components.Schemas.branch_hyphen_restriction_hyphen_policy.appsPayload
            /// Creates a new `branch_hyphen_restriction_hyphen_policy`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - users_url:
            ///   - teams_url:
            ///   - apps_url:
            ///   - users:
            ///   - teams:
            ///   - apps:
            public init(
                url: Swift.String,
                users_url: Swift.String,
                teams_url: Swift.String,
                apps_url: Swift.String,
                users: Components.Schemas.branch_hyphen_restriction_hyphen_policy.usersPayload,
                teams: Components.Schemas.branch_hyphen_restriction_hyphen_policy.teamsPayload,
                apps: Components.Schemas.branch_hyphen_restriction_hyphen_policy.appsPayload
            ) {
                self.url = url
                self.users_url = users_url
                self.teams_url = teams_url
                self.apps_url = apps_url
                self.users = users
                self.teams = teams
                self.apps = apps
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case users_url
                case teams_url
                case apps_url
                case users
                case teams
                case apps
            }
        }
        /// Branch Protection
        ///
        /// - Remark: Generated from `#/components/schemas/branch-protection`.
        public struct branch_hyphen_protection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/branch-protection/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/branch-protection/enabled`.
            public var enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_status_checks`.
            public var required_status_checks: Components.Schemas.protected_hyphen_branch_hyphen_required_hyphen_status_hyphen_check?
            /// - Remark: Generated from `#/components/schemas/branch-protection/enforce_admins`.
            public var enforce_admins: Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced?
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_pull_request_reviews`.
            public var required_pull_request_reviews: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review?
            /// - Remark: Generated from `#/components/schemas/branch-protection/restrictions`.
            public var restrictions: Components.Schemas.branch_hyphen_restriction_hyphen_policy?
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_linear_history`.
            public struct required_linear_historyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/required_linear_history/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `required_linear_historyPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_linear_history`.
            public var required_linear_history: Components.Schemas.branch_hyphen_protection.required_linear_historyPayload?
            /// - Remark: Generated from `#/components/schemas/branch-protection/allow_force_pushes`.
            public struct allow_force_pushesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/allow_force_pushes/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `allow_force_pushesPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-protection/allow_force_pushes`.
            public var allow_force_pushes: Components.Schemas.branch_hyphen_protection.allow_force_pushesPayload?
            /// - Remark: Generated from `#/components/schemas/branch-protection/allow_deletions`.
            public struct allow_deletionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/allow_deletions/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `allow_deletionsPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-protection/allow_deletions`.
            public var allow_deletions: Components.Schemas.branch_hyphen_protection.allow_deletionsPayload?
            /// - Remark: Generated from `#/components/schemas/branch-protection/block_creations`.
            public struct block_creationsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/block_creations/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `block_creationsPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-protection/block_creations`.
            public var block_creations: Components.Schemas.branch_hyphen_protection.block_creationsPayload?
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_conversation_resolution`.
            public struct required_conversation_resolutionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/required_conversation_resolution/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `required_conversation_resolutionPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_conversation_resolution`.
            public var required_conversation_resolution: Components.Schemas.branch_hyphen_protection.required_conversation_resolutionPayload?
            /// - Remark: Generated from `#/components/schemas/branch-protection/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/branch-protection/protection_url`.
            public var protection_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_signatures`.
            public struct required_signaturesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/required_signatures/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/branch-protection/required_signatures/enabled`.
                public var enabled: Swift.Bool
                /// Creates a new `required_signaturesPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - enabled:
                public init(
                    url: Swift.String,
                    enabled: Swift.Bool
                ) {
                    self.url = url
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case enabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-protection/required_signatures`.
            public var required_signatures: Components.Schemas.branch_hyphen_protection.required_signaturesPayload?
            /// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
            ///
            /// - Remark: Generated from `#/components/schemas/branch-protection/lock_branch`.
            public struct lock_branchPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/lock_branch/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `lock_branchPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
            }
            /// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
            ///
            /// - Remark: Generated from `#/components/schemas/branch-protection/lock_branch`.
            public var lock_branch: Components.Schemas.branch_hyphen_protection.lock_branchPayload?
            /// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
            ///
            /// - Remark: Generated from `#/components/schemas/branch-protection/allow_fork_syncing`.
            public struct allow_fork_syncingPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-protection/allow_fork_syncing/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `allow_fork_syncingPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
            }
            /// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
            ///
            /// - Remark: Generated from `#/components/schemas/branch-protection/allow_fork_syncing`.
            public var allow_fork_syncing: Components.Schemas.branch_hyphen_protection.allow_fork_syncingPayload?
            /// Creates a new `branch_hyphen_protection`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - enabled:
            ///   - required_status_checks:
            ///   - enforce_admins:
            ///   - required_pull_request_reviews:
            ///   - restrictions:
            ///   - required_linear_history:
            ///   - allow_force_pushes:
            ///   - allow_deletions:
            ///   - block_creations:
            ///   - required_conversation_resolution:
            ///   - name:
            ///   - protection_url:
            ///   - required_signatures:
            ///   - lock_branch: Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
            ///   - allow_fork_syncing: Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
            public init(
                url: Swift.String? = nil,
                enabled: Swift.Bool? = nil,
                required_status_checks: Components.Schemas.protected_hyphen_branch_hyphen_required_hyphen_status_hyphen_check? = nil,
                enforce_admins: Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced? = nil,
                required_pull_request_reviews: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review? = nil,
                restrictions: Components.Schemas.branch_hyphen_restriction_hyphen_policy? = nil,
                required_linear_history: Components.Schemas.branch_hyphen_protection.required_linear_historyPayload? = nil,
                allow_force_pushes: Components.Schemas.branch_hyphen_protection.allow_force_pushesPayload? = nil,
                allow_deletions: Components.Schemas.branch_hyphen_protection.allow_deletionsPayload? = nil,
                block_creations: Components.Schemas.branch_hyphen_protection.block_creationsPayload? = nil,
                required_conversation_resolution: Components.Schemas.branch_hyphen_protection.required_conversation_resolutionPayload? = nil,
                name: Swift.String? = nil,
                protection_url: Swift.String? = nil,
                required_signatures: Components.Schemas.branch_hyphen_protection.required_signaturesPayload? = nil,
                lock_branch: Components.Schemas.branch_hyphen_protection.lock_branchPayload? = nil,
                allow_fork_syncing: Components.Schemas.branch_hyphen_protection.allow_fork_syncingPayload? = nil
            ) {
                self.url = url
                self.enabled = enabled
                self.required_status_checks = required_status_checks
                self.enforce_admins = enforce_admins
                self.required_pull_request_reviews = required_pull_request_reviews
                self.restrictions = restrictions
                self.required_linear_history = required_linear_history
                self.allow_force_pushes = allow_force_pushes
                self.allow_deletions = allow_deletions
                self.block_creations = block_creations
                self.required_conversation_resolution = required_conversation_resolution
                self.name = name
                self.protection_url = protection_url
                self.required_signatures = required_signatures
                self.lock_branch = lock_branch
                self.allow_fork_syncing = allow_fork_syncing
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case enabled
                case required_status_checks
                case enforce_admins
                case required_pull_request_reviews
                case restrictions
                case required_linear_history
                case allow_force_pushes
                case allow_deletions
                case block_creations
                case required_conversation_resolution
                case name
                case protection_url
                case required_signatures
                case lock_branch
                case allow_fork_syncing
            }
        }
        /// Short Branch
        ///
        /// - Remark: Generated from `#/components/schemas/short-branch`.
        public struct short_hyphen_branch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/short-branch/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/short-branch/commit`.
            public struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/short-branch/commit/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/short-branch/commit/url`.
                public var url: Swift.String
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                public init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/short-branch/commit`.
            public var commit: Components.Schemas.short_hyphen_branch.commitPayload
            /// - Remark: Generated from `#/components/schemas/short-branch/protected`.
            public var protected: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/short-branch/protection`.
            public var protection: Components.Schemas.branch_hyphen_protection?
            /// - Remark: Generated from `#/components/schemas/short-branch/protection_url`.
            public var protection_url: Swift.String?
            /// Creates a new `short_hyphen_branch`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - commit:
            ///   - protected:
            ///   - protection:
            ///   - protection_url:
            public init(
                name: Swift.String,
                commit: Components.Schemas.short_hyphen_branch.commitPayload,
                protected: Swift.Bool,
                protection: Components.Schemas.branch_hyphen_protection? = nil,
                protection_url: Swift.String? = nil
            ) {
                self.name = name
                self.commit = commit
                self.protected = protected
                self.protection = protection
                self.protection_url = protection_url
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case commit
                case protected
                case protection
                case protection_url
            }
        }
        /// Metaproperties for Git author/committer information.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-git-user`.
        public struct nullable_hyphen_git_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/date`.
            public var date: Swift.String?
            /// Creates a new `nullable_hyphen_git_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - date:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                date: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.date = date
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/verification`.
        public struct verification: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/verification/verified`.
            public var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/verification/reason`.
            public var reason: Swift.String
            /// - Remark: Generated from `#/components/schemas/verification/payload`.
            public var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/signature`.
            public var signature: Swift.String?
            /// Creates a new `verification`.
            ///
            /// - Parameters:
            ///   - verified:
            ///   - reason:
            ///   - payload:
            ///   - signature:
            public init(
                verified: Swift.Bool,
                reason: Swift.String,
                payload: Swift.String? = nil,
                signature: Swift.String? = nil
            ) {
                self.verified = verified
                self.reason = reason
                self.payload = payload
                self.signature = signature
            }
            public enum CodingKeys: String, CodingKey {
                case verified
                case reason
                case payload
                case signature
            }
        }
        /// Diff Entry
        ///
        /// - Remark: Generated from `#/components/schemas/diff-entry`.
        public struct diff_hyphen_entry: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/diff-entry/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/filename`.
            public var filename: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case added = "added"
                case removed = "removed"
                case modified = "modified"
                case renamed = "renamed"
                case copied = "copied"
                case changed = "changed"
                case unchanged = "unchanged"
            }
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            public var status: Components.Schemas.diff_hyphen_entry.statusPayload
            /// - Remark: Generated from `#/components/schemas/diff-entry/additions`.
            public var additions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/deletions`.
            public var deletions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/changes`.
            public var changes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/blob_url`.
            public var blob_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/raw_url`.
            public var raw_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/patch`.
            public var patch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/diff-entry/previous_filename`.
            public var previous_filename: Swift.String?
            /// Creates a new `diff_hyphen_entry`.
            ///
            /// - Parameters:
            ///   - sha:
            ///   - filename:
            ///   - status:
            ///   - additions:
            ///   - deletions:
            ///   - changes:
            ///   - blob_url:
            ///   - raw_url:
            ///   - contents_url:
            ///   - patch:
            ///   - previous_filename:
            public init(
                sha: Swift.String,
                filename: Swift.String,
                status: Components.Schemas.diff_hyphen_entry.statusPayload,
                additions: Swift.Int,
                deletions: Swift.Int,
                changes: Swift.Int,
                blob_url: Swift.String,
                raw_url: Swift.String,
                contents_url: Swift.String,
                patch: Swift.String? = nil,
                previous_filename: Swift.String? = nil
            ) {
                self.sha = sha
                self.filename = filename
                self.status = status
                self.additions = additions
                self.deletions = deletions
                self.changes = changes
                self.blob_url = blob_url
                self.raw_url = raw_url
                self.contents_url = contents_url
                self.patch = patch
                self.previous_filename = previous_filename
            }
            public enum CodingKeys: String, CodingKey {
                case sha
                case filename
                case status
                case additions
                case deletions
                case changes
                case blob_url
                case raw_url
                case contents_url
                case patch
                case previous_filename
            }
        }
        /// Commit
        ///
        /// - Remark: Generated from `#/components/schemas/commit`.
        public struct commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            public struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/commit/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/author`.
                public var author: Components.Schemas.nullable_hyphen_git_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/commit/commit/committer`.
                public var committer: Components.Schemas.nullable_hyphen_git_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/commit/commit/message`.
                public var message: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/comment_count`.
                public var comment_count: Swift.Int
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                public struct treePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/sha`.
                    public var sha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/url`.
                    public var url: Swift.String
                    /// Creates a new `treePayload`.
                    ///
                    /// - Parameters:
                    ///   - sha:
                    ///   - url:
                    public init(
                        sha: Swift.String,
                        url: Swift.String
                    ) {
                        self.sha = sha
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sha
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                public var tree: Components.Schemas.commit.commitPayload.treePayload
                /// - Remark: Generated from `#/components/schemas/commit/commit/verification`.
                public var verification: Components.Schemas.verification?
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - author:
                ///   - committer:
                ///   - message:
                ///   - comment_count:
                ///   - tree:
                ///   - verification:
                public init(
                    url: Swift.String,
                    author: Components.Schemas.nullable_hyphen_git_hyphen_user? = nil,
                    committer: Components.Schemas.nullable_hyphen_git_hyphen_user? = nil,
                    message: Swift.String,
                    comment_count: Swift.Int,
                    tree: Components.Schemas.commit.commitPayload.treePayload,
                    verification: Components.Schemas.verification? = nil
                ) {
                    self.url = url
                    self.author = author
                    self.committer = committer
                    self.message = message
                    self.comment_count = comment_count
                    self.tree = tree
                    self.verification = verification
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case author
                    case committer
                    case message
                    case comment_count
                    case tree
                    case verification
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            public var commit: Components.Schemas.commit.commitPayload
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            @frozen public enum authorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/author/case1`.
                case simple_hyphen_user(Components.Schemas.simple_hyphen_user)
                /// - Remark: Generated from `#/components/schemas/commit/author/case2`.
                case empty_hyphen_object(Components.Schemas.empty_hyphen_object)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .simple_hyphen_user(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .empty_hyphen_object(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .simple_hyphen_user(value):
                        try value.encode(to: encoder)
                    case let .empty_hyphen_object(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            public var author: Components.Schemas.commit.authorPayload?
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            @frozen public enum committerPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/committer/case1`.
                case simple_hyphen_user(Components.Schemas.simple_hyphen_user)
                /// - Remark: Generated from `#/components/schemas/commit/committer/case2`.
                case empty_hyphen_object(Components.Schemas.empty_hyphen_object)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .simple_hyphen_user(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .empty_hyphen_object(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .simple_hyphen_user(value):
                        try value.encode(to: encoder)
                    case let .empty_hyphen_object(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            public var committer: Components.Schemas.commit.committerPayload?
            /// - Remark: Generated from `#/components/schemas/commit/parentsPayload`.
            public struct parentsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/html_url`.
                public var html_url: Swift.String?
                /// Creates a new `parentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                ///   - html_url:
                public init(
                    sha: Swift.String,
                    url: Swift.String,
                    html_url: Swift.String? = nil
                ) {
                    self.sha = sha
                    self.url = url
                    self.html_url = html_url
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case html_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            public typealias parentsPayload = [Components.Schemas.commit.parentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            public var parents: Components.Schemas.commit.parentsPayload
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            public struct statsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/stats/additions`.
                public var additions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/deletions`.
                public var deletions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/total`.
                public var total: Swift.Int?
                /// Creates a new `statsPayload`.
                ///
                /// - Parameters:
                ///   - additions:
                ///   - deletions:
                ///   - total:
                public init(
                    additions: Swift.Int? = nil,
                    deletions: Swift.Int? = nil,
                    total: Swift.Int? = nil
                ) {
                    self.additions = additions
                    self.deletions = deletions
                    self.total = total
                }
                public enum CodingKeys: String, CodingKey {
                    case additions
                    case deletions
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            public var stats: Components.Schemas.commit.statsPayload?
            /// - Remark: Generated from `#/components/schemas/commit/files`.
            public var files: [Components.Schemas.diff_hyphen_entry]?
            /// Creates a new `commit`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - sha:
            ///   - node_id:
            ///   - html_url:
            ///   - comments_url:
            ///   - commit:
            ///   - author:
            ///   - committer:
            ///   - parents:
            ///   - stats:
            ///   - files:
            public init(
                url: Swift.String,
                sha: Swift.String,
                node_id: Swift.String,
                html_url: Swift.String,
                comments_url: Swift.String,
                commit: Components.Schemas.commit.commitPayload,
                author: Components.Schemas.commit.authorPayload? = nil,
                committer: Components.Schemas.commit.committerPayload? = nil,
                parents: Components.Schemas.commit.parentsPayload,
                stats: Components.Schemas.commit.statsPayload? = nil,
                files: [Components.Schemas.diff_hyphen_entry]? = nil
            ) {
                self.url = url
                self.sha = sha
                self.node_id = node_id
                self.html_url = html_url
                self.comments_url = comments_url
                self.commit = commit
                self.author = author
                self.committer = committer
                self.parents = parents
                self.stats = stats
                self.files = files
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case sha
                case node_id
                case html_url
                case comments_url
                case commit
                case author
                case committer
                case parents
                case stats
                case files
            }
        }
        /// Branch With Protection
        ///
        /// - Remark: Generated from `#/components/schemas/branch-with-protection`.
        public struct branch_hyphen_with_hyphen_protection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/commit`.
            public var commit: Components.Schemas.commit
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-with-protection/_links/html`.
                public var html: Swift.String
                /// - Remark: Generated from `#/components/schemas/branch-with-protection/_links/self`.
                public var _self: Swift.String
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - html:
                ///   - _self:
                public init(
                    html: Swift.String,
                    _self: Swift.String
                ) {
                    self.html = html
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case html
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/_links`.
            public var _links: Components.Schemas.branch_hyphen_with_hyphen_protection._linksPayload
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/protected`.
            public var protected: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/protection`.
            public var protection: Components.Schemas.branch_hyphen_protection
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/protection_url`.
            public var protection_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/pattern`.
            public var pattern: Swift.String?
            /// - Remark: Generated from `#/components/schemas/branch-with-protection/required_approving_review_count`.
            public var required_approving_review_count: Swift.Int?
            /// Creates a new `branch_hyphen_with_hyphen_protection`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - commit:
            ///   - _links:
            ///   - protected:
            ///   - protection:
            ///   - protection_url:
            ///   - pattern:
            ///   - required_approving_review_count:
            public init(
                name: Swift.String,
                commit: Components.Schemas.commit,
                _links: Components.Schemas.branch_hyphen_with_hyphen_protection._linksPayload,
                protected: Swift.Bool,
                protection: Components.Schemas.branch_hyphen_protection,
                protection_url: Swift.String,
                pattern: Swift.String? = nil,
                required_approving_review_count: Swift.Int? = nil
            ) {
                self.name = name
                self.commit = commit
                self._links = _links
                self.protected = protected
                self.protection = protection
                self.protection_url = protection_url
                self.pattern = pattern
                self.required_approving_review_count = required_approving_review_count
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case commit
                case _links
                case protected
                case protection
                case protection_url
                case pattern
                case required_approving_review_count
            }
        }
        /// Status Check Policy
        ///
        /// - Remark: Generated from `#/components/schemas/status-check-policy`.
        public struct status_hyphen_check_hyphen_policy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/status-check-policy/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/status-check-policy/strict`.
            public var strict: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/status-check-policy/contexts`.
            public var contexts: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/status-check-policy/checksPayload`.
            public struct checksPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/status-check-policy/checksPayload/context`.
                public var context: Swift.String
                /// - Remark: Generated from `#/components/schemas/status-check-policy/checksPayload/app_id`.
                public var app_id: Swift.Int?
                /// Creates a new `checksPayloadPayload`.
                ///
                /// - Parameters:
                ///   - context:
                ///   - app_id:
                public init(
                    context: Swift.String,
                    app_id: Swift.Int? = nil
                ) {
                    self.context = context
                    self.app_id = app_id
                }
                public enum CodingKeys: String, CodingKey {
                    case context
                    case app_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/status-check-policy/checks`.
            public typealias checksPayload = [Components.Schemas.status_hyphen_check_hyphen_policy.checksPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/status-check-policy/checks`.
            public var checks: Components.Schemas.status_hyphen_check_hyphen_policy.checksPayload
            /// - Remark: Generated from `#/components/schemas/status-check-policy/contexts_url`.
            public var contexts_url: Swift.String
            /// Creates a new `status_hyphen_check_hyphen_policy`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - strict:
            ///   - contexts:
            ///   - checks:
            ///   - contexts_url:
            public init(
                url: Swift.String,
                strict: Swift.Bool,
                contexts: [Swift.String],
                checks: Components.Schemas.status_hyphen_check_hyphen_policy.checksPayload,
                contexts_url: Swift.String
            ) {
                self.url = url
                self.strict = strict
                self.contexts = contexts
                self.checks = checks
                self.contexts_url = contexts_url
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case strict
                case contexts
                case checks
                case contexts_url
            }
        }
        /// Branch protections protect branches
        ///
        /// - Remark: Generated from `#/components/schemas/protected-branch`.
        public struct protected_hyphen_branch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/protected-branch/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_status_checks`.
            public var required_status_checks: Components.Schemas.status_hyphen_check_hyphen_policy?
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews`.
            public struct required_pull_request_reviewsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismiss_stale_reviews`.
                public var dismiss_stale_reviews: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/require_code_owner_reviews`.
                public var require_code_owner_reviews: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/required_approving_review_count`.
                public var required_approving_review_count: Swift.Int?
                /// Whether the most recent push must be approved by someone other than the person who pushed it.
                ///
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/require_last_push_approval`.
                public var require_last_push_approval: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions`.
                public struct dismissal_restrictionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions/url`.
                    public var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions/users_url`.
                    public var users_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions/teams_url`.
                    public var teams_url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions/users`.
                    public var users: [Components.Schemas.simple_hyphen_user]
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions/teams`.
                    public var teams: [Components.Schemas.team]
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions/apps`.
                    public var apps: [Components.Schemas.integration]?
                    /// Creates a new `dismissal_restrictionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - url:
                    ///   - users_url:
                    ///   - teams_url:
                    ///   - users:
                    ///   - teams:
                    ///   - apps:
                    public init(
                        url: Swift.String,
                        users_url: Swift.String,
                        teams_url: Swift.String,
                        users: [Components.Schemas.simple_hyphen_user],
                        teams: [Components.Schemas.team],
                        apps: [Components.Schemas.integration]? = nil
                    ) {
                        self.url = url
                        self.users_url = users_url
                        self.teams_url = teams_url
                        self.users = users
                        self.teams = teams
                        self.apps = apps
                    }
                    public enum CodingKeys: String, CodingKey {
                        case url
                        case users_url
                        case teams_url
                        case users
                        case teams
                        case apps
                    }
                }
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/dismissal_restrictions`.
                public var dismissal_restrictions: Components.Schemas.protected_hyphen_branch.required_pull_request_reviewsPayload.dismissal_restrictionsPayload?
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/bypass_pull_request_allowances`.
                public struct bypass_pull_request_allowancesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/bypass_pull_request_allowances/users`.
                    public var users: [Components.Schemas.simple_hyphen_user]
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/bypass_pull_request_allowances/teams`.
                    public var teams: [Components.Schemas.team]
                    /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/bypass_pull_request_allowances/apps`.
                    public var apps: [Components.Schemas.integration]?
                    /// Creates a new `bypass_pull_request_allowancesPayload`.
                    ///
                    /// - Parameters:
                    ///   - users:
                    ///   - teams:
                    ///   - apps:
                    public init(
                        users: [Components.Schemas.simple_hyphen_user],
                        teams: [Components.Schemas.team],
                        apps: [Components.Schemas.integration]? = nil
                    ) {
                        self.users = users
                        self.teams = teams
                        self.apps = apps
                    }
                    public enum CodingKeys: String, CodingKey {
                        case users
                        case teams
                        case apps
                    }
                }
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews/bypass_pull_request_allowances`.
                public var bypass_pull_request_allowances: Components.Schemas.protected_hyphen_branch.required_pull_request_reviewsPayload.bypass_pull_request_allowancesPayload?
                /// Creates a new `required_pull_request_reviewsPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - dismiss_stale_reviews:
                ///   - require_code_owner_reviews:
                ///   - required_approving_review_count:
                ///   - require_last_push_approval: Whether the most recent push must be approved by someone other than the person who pushed it.
                ///   - dismissal_restrictions:
                ///   - bypass_pull_request_allowances:
                public init(
                    url: Swift.String,
                    dismiss_stale_reviews: Swift.Bool? = nil,
                    require_code_owner_reviews: Swift.Bool? = nil,
                    required_approving_review_count: Swift.Int? = nil,
                    require_last_push_approval: Swift.Bool? = nil,
                    dismissal_restrictions: Components.Schemas.protected_hyphen_branch.required_pull_request_reviewsPayload.dismissal_restrictionsPayload? = nil,
                    bypass_pull_request_allowances: Components.Schemas.protected_hyphen_branch.required_pull_request_reviewsPayload.bypass_pull_request_allowancesPayload? = nil
                ) {
                    self.url = url
                    self.dismiss_stale_reviews = dismiss_stale_reviews
                    self.require_code_owner_reviews = require_code_owner_reviews
                    self.required_approving_review_count = required_approving_review_count
                    self.require_last_push_approval = require_last_push_approval
                    self.dismissal_restrictions = dismissal_restrictions
                    self.bypass_pull_request_allowances = bypass_pull_request_allowances
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case dismiss_stale_reviews
                    case require_code_owner_reviews
                    case required_approving_review_count
                    case require_last_push_approval
                    case dismissal_restrictions
                    case bypass_pull_request_allowances
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_pull_request_reviews`.
            public var required_pull_request_reviews: Components.Schemas.protected_hyphen_branch.required_pull_request_reviewsPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_signatures`.
            public struct required_signaturesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_signatures/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_signatures/enabled`.
                public var enabled: Swift.Bool
                /// Creates a new `required_signaturesPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - enabled:
                public init(
                    url: Swift.String,
                    enabled: Swift.Bool
                ) {
                    self.url = url
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case enabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_signatures`.
            public var required_signatures: Components.Schemas.protected_hyphen_branch.required_signaturesPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch/enforce_admins`.
            public struct enforce_adminsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/enforce_admins/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/protected-branch/enforce_admins/enabled`.
                public var enabled: Swift.Bool
                /// Creates a new `enforce_adminsPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - enabled:
                public init(
                    url: Swift.String,
                    enabled: Swift.Bool
                ) {
                    self.url = url
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    url = try container.decode(
                        Swift.String.self,
                        forKey: .url
                    )
                    enabled = try container.decode(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "url",
                        "enabled"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/enforce_admins`.
            public var enforce_admins: Components.Schemas.protected_hyphen_branch.enforce_adminsPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_linear_history`.
            public struct required_linear_historyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_linear_history/enabled`.
                public var enabled: Swift.Bool
                /// Creates a new `required_linear_historyPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    enabled = try container.decode(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "enabled"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_linear_history`.
            public var required_linear_history: Components.Schemas.protected_hyphen_branch.required_linear_historyPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch/allow_force_pushes`.
            public struct allow_force_pushesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/allow_force_pushes/enabled`.
                public var enabled: Swift.Bool
                /// Creates a new `allow_force_pushesPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    enabled = try container.decode(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "enabled"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/allow_force_pushes`.
            public var allow_force_pushes: Components.Schemas.protected_hyphen_branch.allow_force_pushesPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch/allow_deletions`.
            public struct allow_deletionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/allow_deletions/enabled`.
                public var enabled: Swift.Bool
                /// Creates a new `allow_deletionsPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    enabled = try container.decode(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "enabled"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/allow_deletions`.
            public var allow_deletions: Components.Schemas.protected_hyphen_branch.allow_deletionsPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch/restrictions`.
            public var restrictions: Components.Schemas.branch_hyphen_restriction_hyphen_policy?
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_conversation_resolution`.
            public struct required_conversation_resolutionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/required_conversation_resolution/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `required_conversation_resolutionPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    enabled = try container.decodeIfPresent(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "enabled"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/required_conversation_resolution`.
            public var required_conversation_resolution: Components.Schemas.protected_hyphen_branch.required_conversation_resolutionPayload?
            /// - Remark: Generated from `#/components/schemas/protected-branch/block_creations`.
            public struct block_creationsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/block_creations/enabled`.
                public var enabled: Swift.Bool
                /// Creates a new `block_creationsPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    enabled = try container.decode(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "enabled"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/protected-branch/block_creations`.
            public var block_creations: Components.Schemas.protected_hyphen_branch.block_creationsPayload?
            /// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
            ///
            /// - Remark: Generated from `#/components/schemas/protected-branch/lock_branch`.
            public struct lock_branchPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/lock_branch/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `lock_branchPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    enabled = try container.decodeIfPresent(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "enabled"
                    ])
                }
            }
            /// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
            ///
            /// - Remark: Generated from `#/components/schemas/protected-branch/lock_branch`.
            public var lock_branch: Components.Schemas.protected_hyphen_branch.lock_branchPayload?
            /// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
            ///
            /// - Remark: Generated from `#/components/schemas/protected-branch/allow_fork_syncing`.
            public struct allow_fork_syncingPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/protected-branch/allow_fork_syncing/enabled`.
                public var enabled: Swift.Bool?
                /// Creates a new `allow_fork_syncingPayload`.
                ///
                /// - Parameters:
                ///   - enabled:
                public init(enabled: Swift.Bool? = nil) {
                    self.enabled = enabled
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    enabled = try container.decodeIfPresent(
                        Swift.Bool.self,
                        forKey: .enabled
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "enabled"
                    ])
                }
            }
            /// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
            ///
            /// - Remark: Generated from `#/components/schemas/protected-branch/allow_fork_syncing`.
            public var allow_fork_syncing: Components.Schemas.protected_hyphen_branch.allow_fork_syncingPayload?
            /// Creates a new `protected_hyphen_branch`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - required_status_checks:
            ///   - required_pull_request_reviews:
            ///   - required_signatures:
            ///   - enforce_admins:
            ///   - required_linear_history:
            ///   - allow_force_pushes:
            ///   - allow_deletions:
            ///   - restrictions:
            ///   - required_conversation_resolution:
            ///   - block_creations:
            ///   - lock_branch: Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
            ///   - allow_fork_syncing: Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
            public init(
                url: Swift.String,
                required_status_checks: Components.Schemas.status_hyphen_check_hyphen_policy? = nil,
                required_pull_request_reviews: Components.Schemas.protected_hyphen_branch.required_pull_request_reviewsPayload? = nil,
                required_signatures: Components.Schemas.protected_hyphen_branch.required_signaturesPayload? = nil,
                enforce_admins: Components.Schemas.protected_hyphen_branch.enforce_adminsPayload? = nil,
                required_linear_history: Components.Schemas.protected_hyphen_branch.required_linear_historyPayload? = nil,
                allow_force_pushes: Components.Schemas.protected_hyphen_branch.allow_force_pushesPayload? = nil,
                allow_deletions: Components.Schemas.protected_hyphen_branch.allow_deletionsPayload? = nil,
                restrictions: Components.Schemas.branch_hyphen_restriction_hyphen_policy? = nil,
                required_conversation_resolution: Components.Schemas.protected_hyphen_branch.required_conversation_resolutionPayload? = nil,
                block_creations: Components.Schemas.protected_hyphen_branch.block_creationsPayload? = nil,
                lock_branch: Components.Schemas.protected_hyphen_branch.lock_branchPayload? = nil,
                allow_fork_syncing: Components.Schemas.protected_hyphen_branch.allow_fork_syncingPayload? = nil
            ) {
                self.url = url
                self.required_status_checks = required_status_checks
                self.required_pull_request_reviews = required_pull_request_reviews
                self.required_signatures = required_signatures
                self.enforce_admins = enforce_admins
                self.required_linear_history = required_linear_history
                self.allow_force_pushes = allow_force_pushes
                self.allow_deletions = allow_deletions
                self.restrictions = restrictions
                self.required_conversation_resolution = required_conversation_resolution
                self.block_creations = block_creations
                self.lock_branch = lock_branch
                self.allow_fork_syncing = allow_fork_syncing
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case required_status_checks
                case required_pull_request_reviews
                case required_signatures
                case enforce_admins
                case required_linear_history
                case allow_force_pushes
                case allow_deletions
                case restrictions
                case required_conversation_resolution
                case block_creations
                case lock_branch
                case allow_fork_syncing
            }
        }
        /// A list of errors found in a repo's CODEOWNERS file
        ///
        /// - Remark: Generated from `#/components/schemas/codeowners-errors`.
        public struct codeowners_hyphen_errors: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// The line number where this errors occurs.
                ///
                /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload/line`.
                public var line: Swift.Int
                /// The column number where this errors occurs.
                ///
                /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload/column`.
                public var column: Swift.Int
                /// The contents of the line where the error occurs.
                ///
                /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload/source`.
                public var source: Swift.String?
                /// The type of error.
                ///
                /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload/kind`.
                public var kind: Swift.String
                /// Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
                ///
                /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload/suggestion`.
                public var suggestion: Swift.String?
                /// A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
                ///
                /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload/message`.
                public var message: Swift.String
                /// The path of the file where the error occured.
                ///
                /// - Remark: Generated from `#/components/schemas/codeowners-errors/errorsPayload/path`.
                public var path: Swift.String
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - line: The line number where this errors occurs.
                ///   - column: The column number where this errors occurs.
                ///   - source: The contents of the line where the error occurs.
                ///   - kind: The type of error.
                ///   - suggestion: Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
                ///   - message: A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
                ///   - path: The path of the file where the error occured.
                public init(
                    line: Swift.Int,
                    column: Swift.Int,
                    source: Swift.String? = nil,
                    kind: Swift.String,
                    suggestion: Swift.String? = nil,
                    message: Swift.String,
                    path: Swift.String
                ) {
                    self.line = line
                    self.column = column
                    self.source = source
                    self.kind = kind
                    self.suggestion = suggestion
                    self.message = message
                    self.path = path
                }
                public enum CodingKeys: String, CodingKey {
                    case line
                    case column
                    case source
                    case kind
                    case suggestion
                    case message
                    case path
                }
            }
            /// - Remark: Generated from `#/components/schemas/codeowners-errors/errors`.
            public typealias errorsPayload = [Components.Schemas.codeowners_hyphen_errors.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/codeowners-errors/errors`.
            public var errors: Components.Schemas.codeowners_hyphen_errors.errorsPayload
            /// Creates a new `codeowners_hyphen_errors`.
            ///
            /// - Parameters:
            ///   - errors:
            public init(errors: Components.Schemas.codeowners_hyphen_errors.errorsPayload) {
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case errors
            }
        }
        /// Collaborator
        ///
        /// - Remark: Generated from `#/components/schemas/collaborator`.
        public struct collaborator: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/collaborator/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/collaborator/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/collaborator/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/collaborator/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/collaborator/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/collaborator/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/collaborator/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/collaborator/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/collaborator/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/collaborator/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/collaborator/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/collaborator/permissions`.
            public var permissions: Components.Schemas.collaborator.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/collaborator/role_name`.
            public var role_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/collaborator/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `collaborator`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - email:
            ///   - name:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - permissions:
            ///   - role_name:
            ///   - user_view_type:
            public init(
                login: Swift.String,
                id: Swift.Int64,
                email: Swift.String? = nil,
                name: Swift.String? = nil,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                permissions: Components.Schemas.collaborator.permissionsPayload? = nil,
                role_name: Swift.String,
                user_view_type: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.email = email
                self.name = name
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.permissions = permissions
                self.role_name = role_name
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case email
                case name
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case permissions
                case role_name
                case user_view_type
            }
        }
        /// Repository invitations let you manage who you collaborate with.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-invitation`.
        public struct repository_hyphen_invitation: Codable, Hashable, Sendable {
            /// Unique identifier of the repository invitation.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-invitation/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/repository-invitation/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/repository-invitation/invitee`.
            public var invitee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/repository-invitation/inviter`.
            public var inviter: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The permission associated with the invitation.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-invitation/permissions`.
            @frozen public enum permissionsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
                case triage = "triage"
                case maintain = "maintain"
            }
            /// The permission associated with the invitation.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-invitation/permissions`.
            public var permissions: Components.Schemas.repository_hyphen_invitation.permissionsPayload
            /// - Remark: Generated from `#/components/schemas/repository-invitation/created_at`.
            public var created_at: Foundation.Date
            /// Whether or not the invitation has expired
            ///
            /// - Remark: Generated from `#/components/schemas/repository-invitation/expired`.
            public var expired: Swift.Bool?
            /// URL for the repository invitation
            ///
            /// - Remark: Generated from `#/components/schemas/repository-invitation/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository-invitation/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository-invitation/node_id`.
            public var node_id: Swift.String
            /// Creates a new `repository_hyphen_invitation`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository invitation.
            ///   - repository:
            ///   - invitee:
            ///   - inviter:
            ///   - permissions: The permission associated with the invitation.
            ///   - created_at:
            ///   - expired: Whether or not the invitation has expired
            ///   - url: URL for the repository invitation
            ///   - html_url:
            ///   - node_id:
            public init(
                id: Swift.Int64,
                repository: Components.Schemas.minimal_hyphen_repository,
                invitee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                inviter: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                permissions: Components.Schemas.repository_hyphen_invitation.permissionsPayload,
                created_at: Foundation.Date,
                expired: Swift.Bool? = nil,
                url: Swift.String,
                html_url: Swift.String,
                node_id: Swift.String
            ) {
                self.id = id
                self.repository = repository
                self.invitee = invitee
                self.inviter = inviter
                self.permissions = permissions
                self.created_at = created_at
                self.expired = expired
                self.url = url
                self.html_url = html_url
                self.node_id = node_id
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case repository
                case invitee
                case inviter
                case permissions
                case created_at
                case expired
                case url
                case html_url
                case node_id
            }
        }
        /// Collaborator
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-collaborator`.
        public struct nullable_hyphen_collaborator: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-collaborator/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-collaborator/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-collaborator/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-collaborator/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-collaborator/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_collaborator.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/role_name`.
            public var role_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-collaborator/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `nullable_hyphen_collaborator`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - email:
            ///   - name:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - permissions:
            ///   - role_name:
            ///   - user_view_type:
            public init(
                login: Swift.String,
                id: Swift.Int64,
                email: Swift.String? = nil,
                name: Swift.String? = nil,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                permissions: Components.Schemas.nullable_hyphen_collaborator.permissionsPayload? = nil,
                role_name: Swift.String,
                user_view_type: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.email = email
                self.name = name
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.permissions = permissions
                self.role_name = role_name
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case email
                case name
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case permissions
                case role_name
                case user_view_type
            }
        }
        /// Repository Collaborator Permission
        ///
        /// - Remark: Generated from `#/components/schemas/repository-collaborator-permission`.
        public struct repository_hyphen_collaborator_hyphen_permission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-collaborator-permission/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository-collaborator-permission/role_name`.
            public var role_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository-collaborator-permission/user`.
            public var user: Components.Schemas.nullable_hyphen_collaborator?
            /// Creates a new `repository_hyphen_collaborator_hyphen_permission`.
            ///
            /// - Parameters:
            ///   - permission:
            ///   - role_name:
            ///   - user:
            public init(
                permission: Swift.String,
                role_name: Swift.String,
                user: Components.Schemas.nullable_hyphen_collaborator? = nil
            ) {
                self.permission = permission
                self.role_name = role_name
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case permission
                case role_name
                case user
            }
        }
        /// Commit Comment
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comment`.
        public struct commit_hyphen_comment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comment/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comment/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/path`.
            public var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/commit-comment/position`.
            public var position: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/line`.
            public var line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/commit_id`.
            public var commit_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/commit-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/commit-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `commit_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - html_url:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - body:
            ///   - path:
            ///   - position:
            ///   - line:
            ///   - commit_id:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - author_association:
            ///   - reactions:
            public init(
                html_url: Swift.String,
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                body: Swift.String,
                path: Swift.String? = nil,
                position: Swift.Int? = nil,
                line: Swift.Int? = nil,
                commit_id: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                author_association: Components.Schemas.author_hyphen_association,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.html_url = html_url
                self.url = url
                self.id = id
                self.node_id = node_id
                self.body = body
                self.path = path
                self.position = position
                self.line = line
                self.commit_id = commit_id
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.author_association = author_association
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case html_url
                case url
                case id
                case node_id
                case body
                case path
                case position
                case line
                case commit_id
                case user
                case created_at
                case updated_at
                case author_association
                case reactions
            }
        }
        /// Branch Short
        ///
        /// - Remark: Generated from `#/components/schemas/branch-short`.
        public struct branch_hyphen_short: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/branch-short/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/branch-short/commit`.
            public struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/branch-short/commit/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/branch-short/commit/url`.
                public var url: Swift.String
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                public init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/branch-short/commit`.
            public var commit: Components.Schemas.branch_hyphen_short.commitPayload
            /// - Remark: Generated from `#/components/schemas/branch-short/protected`.
            public var protected: Swift.Bool
            /// Creates a new `branch_hyphen_short`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - commit:
            ///   - protected:
            public init(
                name: Swift.String,
                commit: Components.Schemas.branch_hyphen_short.commitPayload,
                protected: Swift.Bool
            ) {
                self.name = name
                self.commit = commit
                self.protected = protected
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case commit
                case protected
            }
        }
        /// Hypermedia Link
        ///
        /// - Remark: Generated from `#/components/schemas/link`.
        public struct link: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/link/href`.
            public var href: Swift.String
            /// Creates a new `link`.
            ///
            /// - Parameters:
            ///   - href:
            public init(href: Swift.String) {
                self.href = href
            }
            public enum CodingKeys: String, CodingKey {
                case href
            }
        }
        /// The status of auto merging a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/auto-merge`.
        public struct auto_hyphen_merge: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/auto-merge/enabled_by`.
            public var enabled_by: Components.Schemas.simple_hyphen_user
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            @frozen public enum merge_methodPayload: String, Codable, Hashable, Sendable {
                case merge = "merge"
                case squash = "squash"
                case rebase = "rebase"
            }
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            public var merge_method: Components.Schemas.auto_hyphen_merge.merge_methodPayload
            /// Title for the merge commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_title`.
            public var commit_title: Swift.String
            /// Commit message for the merge commit.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_message`.
            public var commit_message: Swift.String
            /// Creates a new `auto_hyphen_merge`.
            ///
            /// - Parameters:
            ///   - enabled_by:
            ///   - merge_method: The merge method to use.
            ///   - commit_title: Title for the merge commit message.
            ///   - commit_message: Commit message for the merge commit.
            public init(
                enabled_by: Components.Schemas.simple_hyphen_user,
                merge_method: Components.Schemas.auto_hyphen_merge.merge_methodPayload,
                commit_title: Swift.String,
                commit_message: Swift.String
            ) {
                self.enabled_by = enabled_by
                self.merge_method = merge_method
                self.commit_title = commit_title
                self.commit_message = commit_message
            }
            public enum CodingKeys: String, CodingKey {
                case enabled_by
                case merge_method
                case commit_title
                case commit_message
            }
        }
        /// Pull Request Simple
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-simple`.
        public struct pull_hyphen_request_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/diff_url`.
            public var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/patch_url`.
            public var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comments_url`.
            public var review_comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comment_url`.
            public var review_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload`.
            public struct labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/id`.
                public var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/node_id`.
                public var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/description`.
                public var description: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/default`.
                public var _default: Swift.Bool
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                public init(
                    id: Swift.Int64,
                    node_id: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            public typealias labelsPayload = [Components.Schemas.pull_hyphen_request_hyphen_simple.labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            public var labels: Components.Schemas.pull_hyphen_request_hyphen_simple.labelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/milestone`.
            public var milestone: Components.Schemas.nullable_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merged_at`.
            public var merged_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merge_commit_sha`.
            public var merge_commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignees`.
            public var assignees: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_reviewers`.
            public var requested_reviewers: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_teams`.
            public var requested_teams: [Components.Schemas.team]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            public struct headPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/user`.
                public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            public var head: Components.Schemas.pull_hyphen_request_hyphen_simple.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            public struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/user`.
                public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            public var base: Components.Schemas.pull_hyphen_request_hyphen_simple.basePayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/comments`.
                public var comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/commits`.
                public var commits: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/statuses`.
                public var statuses: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/html`.
                public var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/issue`.
                public var issue: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comments`.
                public var review_comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comment`.
                public var review_comment: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/self`.
                public var _self: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - review_comments:
                ///   - review_comment:
                ///   - _self:
                public init(
                    comments: Components.Schemas.link,
                    commits: Components.Schemas.link,
                    statuses: Components.Schemas.link,
                    html: Components.Schemas.link,
                    issue: Components.Schemas.link,
                    review_comments: Components.Schemas.link,
                    review_comment: Components.Schemas.link,
                    _self: Components.Schemas.link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.review_comments = review_comments
                    self.review_comment = review_comment
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case review_comments
                    case review_comment
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            public var _links: Components.Schemas.pull_hyphen_request_hyphen_simple._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/auto_merge`.
            public var auto_merge: Components.Schemas.auto_hyphen_merge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/draft`.
            public var draft: Swift.Bool?
            /// Creates a new `pull_hyphen_request_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - html_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - issue_url:
            ///   - commits_url:
            ///   - review_comments_url:
            ///   - review_comment_url:
            ///   - comments_url:
            ///   - statuses_url:
            ///   - number:
            ///   - state:
            ///   - locked:
            ///   - title:
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - active_lock_reason:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - merged_at:
            ///   - merge_commit_sha:
            ///   - assignee:
            ///   - assignees:
            ///   - requested_reviewers:
            ///   - requested_teams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - author_association:
            ///   - auto_merge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            public init(
                url: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                html_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                issue_url: Swift.String,
                commits_url: Swift.String,
                review_comments_url: Swift.String,
                review_comment_url: Swift.String,
                comments_url: Swift.String,
                statuses_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body: Swift.String? = nil,
                labels: Components.Schemas.pull_hyphen_request_hyphen_simple.labelsPayload,
                milestone: Components.Schemas.nullable_hyphen_milestone? = nil,
                active_lock_reason: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                merged_at: Foundation.Date? = nil,
                merge_commit_sha: Swift.String? = nil,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                assignees: [Components.Schemas.simple_hyphen_user]? = nil,
                requested_reviewers: [Components.Schemas.simple_hyphen_user]? = nil,
                requested_teams: [Components.Schemas.team]? = nil,
                head: Components.Schemas.pull_hyphen_request_hyphen_simple.headPayload,
                base: Components.Schemas.pull_hyphen_request_hyphen_simple.basePayload,
                _links: Components.Schemas.pull_hyphen_request_hyphen_simple._linksPayload,
                author_association: Components.Schemas.author_hyphen_association,
                auto_merge: Components.Schemas.auto_hyphen_merge? = nil,
                draft: Swift.Bool? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.html_url = html_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.issue_url = issue_url
                self.commits_url = commits_url
                self.review_comments_url = review_comments_url
                self.review_comment_url = review_comment_url
                self.comments_url = comments_url
                self.statuses_url = statuses_url
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.active_lock_reason = active_lock_reason
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.merged_at = merged_at
                self.merge_commit_sha = merge_commit_sha
                self.assignee = assignee
                self.assignees = assignees
                self.requested_reviewers = requested_reviewers
                self.requested_teams = requested_teams
                self.head = head
                self.base = base
                self._links = _links
                self.author_association = author_association
                self.auto_merge = auto_merge
                self.draft = draft
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case html_url
                case diff_url
                case patch_url
                case issue_url
                case commits_url
                case review_comments_url
                case review_comment_url
                case comments_url
                case statuses_url
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case active_lock_reason
                case created_at
                case updated_at
                case closed_at
                case merged_at
                case merge_commit_sha
                case assignee
                case assignees
                case requested_reviewers
                case requested_teams
                case head
                case base
                case _links
                case author_association
                case auto_merge
                case draft
            }
        }
        /// - Remark: Generated from `#/components/schemas/simple-commit-status`.
        public struct simple_hyphen_commit_hyphen_status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/context`.
            public var context: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/target_url`.
            public var target_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/required`.
            public var required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/avatar_url`.
            public var avatar_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/simple-commit-status/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `simple_hyphen_commit_hyphen_status`.
            ///
            /// - Parameters:
            ///   - description:
            ///   - id:
            ///   - node_id:
            ///   - state:
            ///   - context:
            ///   - target_url:
            ///   - required:
            ///   - avatar_url:
            ///   - url:
            ///   - created_at:
            ///   - updated_at:
            public init(
                description: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                state: Swift.String,
                context: Swift.String,
                target_url: Swift.String? = nil,
                required: Swift.Bool? = nil,
                avatar_url: Swift.String? = nil,
                url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.description = description
                self.id = id
                self.node_id = node_id
                self.state = state
                self.context = context
                self.target_url = target_url
                self.required = required
                self.avatar_url = avatar_url
                self.url = url
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case id
                case node_id
                case state
                case context
                case target_url
                case required
                case avatar_url
                case url
                case created_at
                case updated_at
            }
        }
        /// Combined Commit Status
        ///
        /// - Remark: Generated from `#/components/schemas/combined-commit-status`.
        public struct combined_hyphen_commit_hyphen_status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/combined-commit-status/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/combined-commit-status/statuses`.
            public var statuses: [Components.Schemas.simple_hyphen_commit_hyphen_status]
            /// - Remark: Generated from `#/components/schemas/combined-commit-status/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/combined-commit-status/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/combined-commit-status/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/combined-commit-status/commit_url`.
            public var commit_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/combined-commit-status/url`.
            public var url: Swift.String
            /// Creates a new `combined_hyphen_commit_hyphen_status`.
            ///
            /// - Parameters:
            ///   - state:
            ///   - statuses:
            ///   - sha:
            ///   - total_count:
            ///   - repository:
            ///   - commit_url:
            ///   - url:
            public init(
                state: Swift.String,
                statuses: [Components.Schemas.simple_hyphen_commit_hyphen_status],
                sha: Swift.String,
                total_count: Swift.Int,
                repository: Components.Schemas.minimal_hyphen_repository,
                commit_url: Swift.String,
                url: Swift.String
            ) {
                self.state = state
                self.statuses = statuses
                self.sha = sha
                self.total_count = total_count
                self.repository = repository
                self.commit_url = commit_url
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case state
                case statuses
                case sha
                case total_count
                case repository
                case commit_url
                case url
            }
        }
        /// The status of a commit.
        ///
        /// - Remark: Generated from `#/components/schemas/status`.
        public struct status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/status/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/status/avatar_url`.
            public var avatar_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/status/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/status/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/status/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/status/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/status/target_url`.
            public var target_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/status/context`.
            public var context: Swift.String
            /// - Remark: Generated from `#/components/schemas/status/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/status/updated_at`.
            public var updated_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/status/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// Creates a new `status`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - avatar_url:
            ///   - id:
            ///   - node_id:
            ///   - state:
            ///   - description:
            ///   - target_url:
            ///   - context:
            ///   - created_at:
            ///   - updated_at:
            ///   - creator:
            public init(
                url: Swift.String,
                avatar_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                state: Swift.String,
                description: Swift.String? = nil,
                target_url: Swift.String? = nil,
                context: Swift.String,
                created_at: Swift.String,
                updated_at: Swift.String,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
            ) {
                self.url = url
                self.avatar_url = avatar_url
                self.id = id
                self.node_id = node_id
                self.state = state
                self.description = description
                self.target_url = target_url
                self.context = context
                self.created_at = created_at
                self.updated_at = updated_at
                self.creator = creator
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case avatar_url
                case id
                case node_id
                case state
                case description
                case target_url
                case context
                case created_at
                case updated_at
                case creator
            }
        }
        /// Code of Conduct Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-code-of-conduct-simple`.
        public struct nullable_hyphen_code_hyphen_of_hyphen_conduct_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-code-of-conduct-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-code-of-conduct-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-code-of-conduct-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-code-of-conduct-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_code_hyphen_of_hyphen_conduct_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - key:
            ///   - name:
            ///   - html_url:
            public init(
                url: Swift.String,
                key: Swift.String,
                name: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.url = url
                self.key = key
                self.name = name
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case key
                case name
                case html_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/nullable-community-health-file`.
        public struct nullable_hyphen_community_hyphen_health_hyphen_file: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-community-health-file/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-community-health-file/html_url`.
            public var html_url: Swift.String
            /// Creates a new `nullable_hyphen_community_hyphen_health_hyphen_file`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            public init(
                url: Swift.String,
                html_url: Swift.String
            ) {
                self.url = url
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
            }
        }
        /// Community Profile
        ///
        /// - Remark: Generated from `#/components/schemas/community-profile`.
        public struct community_hyphen_profile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/community-profile/health_percentage`.
            public var health_percentage: Swift.Int
            /// - Remark: Generated from `#/components/schemas/community-profile/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/community-profile/documentation`.
            public var documentation: Swift.String?
            /// - Remark: Generated from `#/components/schemas/community-profile/files`.
            public struct filesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/community-profile/files/code_of_conduct`.
                public var code_of_conduct: Components.Schemas.nullable_hyphen_code_hyphen_of_hyphen_conduct_hyphen_simple?
                /// - Remark: Generated from `#/components/schemas/community-profile/files/code_of_conduct_file`.
                public var code_of_conduct_file: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file?
                /// - Remark: Generated from `#/components/schemas/community-profile/files/license`.
                public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
                /// - Remark: Generated from `#/components/schemas/community-profile/files/contributing`.
                public var contributing: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file?
                /// - Remark: Generated from `#/components/schemas/community-profile/files/readme`.
                public var readme: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file?
                /// - Remark: Generated from `#/components/schemas/community-profile/files/issue_template`.
                public var issue_template: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file?
                /// - Remark: Generated from `#/components/schemas/community-profile/files/pull_request_template`.
                public var pull_request_template: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file?
                /// Creates a new `filesPayload`.
                ///
                /// - Parameters:
                ///   - code_of_conduct:
                ///   - code_of_conduct_file:
                ///   - license:
                ///   - contributing:
                ///   - readme:
                ///   - issue_template:
                ///   - pull_request_template:
                public init(
                    code_of_conduct: Components.Schemas.nullable_hyphen_code_hyphen_of_hyphen_conduct_hyphen_simple? = nil,
                    code_of_conduct_file: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file? = nil,
                    license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                    contributing: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file? = nil,
                    readme: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file? = nil,
                    issue_template: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file? = nil,
                    pull_request_template: Components.Schemas.nullable_hyphen_community_hyphen_health_hyphen_file? = nil
                ) {
                    self.code_of_conduct = code_of_conduct
                    self.code_of_conduct_file = code_of_conduct_file
                    self.license = license
                    self.contributing = contributing
                    self.readme = readme
                    self.issue_template = issue_template
                    self.pull_request_template = pull_request_template
                }
                public enum CodingKeys: String, CodingKey {
                    case code_of_conduct
                    case code_of_conduct_file
                    case license
                    case contributing
                    case readme
                    case issue_template
                    case pull_request_template
                }
            }
            /// - Remark: Generated from `#/components/schemas/community-profile/files`.
            public var files: Components.Schemas.community_hyphen_profile.filesPayload
            /// - Remark: Generated from `#/components/schemas/community-profile/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/community-profile/content_reports_enabled`.
            public var content_reports_enabled: Swift.Bool?
            /// Creates a new `community_hyphen_profile`.
            ///
            /// - Parameters:
            ///   - health_percentage:
            ///   - description:
            ///   - documentation:
            ///   - files:
            ///   - updated_at:
            ///   - content_reports_enabled:
            public init(
                health_percentage: Swift.Int,
                description: Swift.String? = nil,
                documentation: Swift.String? = nil,
                files: Components.Schemas.community_hyphen_profile.filesPayload,
                updated_at: Foundation.Date? = nil,
                content_reports_enabled: Swift.Bool? = nil
            ) {
                self.health_percentage = health_percentage
                self.description = description
                self.documentation = documentation
                self.files = files
                self.updated_at = updated_at
                self.content_reports_enabled = content_reports_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case health_percentage
                case description
                case documentation
                case files
                case updated_at
                case content_reports_enabled
            }
        }
        /// Commit Comparison
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comparison`.
        public struct commit_hyphen_comparison: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comparison/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/permalink_url`.
            public var permalink_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/diff_url`.
            public var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/patch_url`.
            public var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/base_commit`.
            public var base_commit: Components.Schemas.commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/merge_base_commit`.
            public var merge_base_commit: Components.Schemas.commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case diverged = "diverged"
                case ahead = "ahead"
                case behind = "behind"
                case identical = "identical"
            }
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            public var status: Components.Schemas.commit_hyphen_comparison.statusPayload
            /// - Remark: Generated from `#/components/schemas/commit-comparison/ahead_by`.
            public var ahead_by: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/behind_by`.
            public var behind_by: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/total_commits`.
            public var total_commits: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/commits`.
            public var commits: [Components.Schemas.commit]
            /// - Remark: Generated from `#/components/schemas/commit-comparison/files`.
            public var files: [Components.Schemas.diff_hyphen_entry]?
            /// Creates a new `commit_hyphen_comparison`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - permalink_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - base_commit:
            ///   - merge_base_commit:
            ///   - status:
            ///   - ahead_by:
            ///   - behind_by:
            ///   - total_commits:
            ///   - commits:
            ///   - files:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                permalink_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                base_commit: Components.Schemas.commit,
                merge_base_commit: Components.Schemas.commit,
                status: Components.Schemas.commit_hyphen_comparison.statusPayload,
                ahead_by: Swift.Int,
                behind_by: Swift.Int,
                total_commits: Swift.Int,
                commits: [Components.Schemas.commit],
                files: [Components.Schemas.diff_hyphen_entry]? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.permalink_url = permalink_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.base_commit = base_commit
                self.merge_base_commit = merge_base_commit
                self.status = status
                self.ahead_by = ahead_by
                self.behind_by = behind_by
                self.total_commits = total_commits
                self.commits = commits
                self.files = files
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case permalink_url
                case diff_url
                case patch_url
                case base_commit
                case merge_base_commit
                case status
                case ahead_by
                case behind_by
                case total_commits
                case commits
                case files
            }
        }
        /// Content Tree
        ///
        /// - Remark: Generated from `#/components/schemas/content-tree`.
        public struct content_hyphen_tree: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/content-tree/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-tree/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/content-tree/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-tree/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-tree/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-tree/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-tree/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-tree/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-tree/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-tree/download_url`.
            public var download_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload`.
            public struct entriesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/type`.
                public var _type: Swift.String
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/size`.
                public var size: Swift.Int
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/path`.
                public var path: Swift.String
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/git_url`.
                public var git_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/download_url`.
                public var download_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/_links`.
                public struct _linksPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/_links/git`.
                    public var git: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/_links/html`.
                    public var html: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/_links/self`.
                    public var _self: Swift.String
                    /// Creates a new `_linksPayload`.
                    ///
                    /// - Parameters:
                    ///   - git:
                    ///   - html:
                    ///   - _self:
                    public init(
                        git: Swift.String? = nil,
                        html: Swift.String? = nil,
                        _self: Swift.String
                    ) {
                        self.git = git
                        self.html = html
                        self._self = _self
                    }
                    public enum CodingKeys: String, CodingKey {
                        case git
                        case html
                        case _self = "self"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/content-tree/entriesPayload/_links`.
                public var _links: Components.Schemas.content_hyphen_tree.entriesPayloadPayload._linksPayload
                /// Creates a new `entriesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - size:
                ///   - name:
                ///   - path:
                ///   - sha:
                ///   - url:
                ///   - git_url:
                ///   - html_url:
                ///   - download_url:
                ///   - _links:
                public init(
                    _type: Swift.String,
                    size: Swift.Int,
                    name: Swift.String,
                    path: Swift.String,
                    sha: Swift.String,
                    url: Swift.String,
                    git_url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    download_url: Swift.String? = nil,
                    _links: Components.Schemas.content_hyphen_tree.entriesPayloadPayload._linksPayload
                ) {
                    self._type = _type
                    self.size = size
                    self.name = name
                    self.path = path
                    self.sha = sha
                    self.url = url
                    self.git_url = git_url
                    self.html_url = html_url
                    self.download_url = download_url
                    self._links = _links
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case size
                    case name
                    case path
                    case sha
                    case url
                    case git_url
                    case html_url
                    case download_url
                    case _links
                }
            }
            /// - Remark: Generated from `#/components/schemas/content-tree/entries`.
            public typealias entriesPayload = [Components.Schemas.content_hyphen_tree.entriesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/content-tree/entries`.
            public var entries: Components.Schemas.content_hyphen_tree.entriesPayload?
            /// - Remark: Generated from `#/components/schemas/content-tree/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/content-tree/_links/git`.
                public var git: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-tree/_links/html`.
                public var html: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-tree/_links/self`.
                public var _self: Swift.String
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - git:
                ///   - html:
                ///   - _self:
                public init(
                    git: Swift.String? = nil,
                    html: Swift.String? = nil,
                    _self: Swift.String
                ) {
                    self.git = git
                    self.html = html
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case git
                    case html
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/content-tree/_links`.
            public var _links: Components.Schemas.content_hyphen_tree._linksPayload
            /// Creates a new `content_hyphen_tree`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - size:
            ///   - name:
            ///   - path:
            ///   - sha:
            ///   - content:
            ///   - url:
            ///   - git_url:
            ///   - html_url:
            ///   - download_url:
            ///   - entries:
            ///   - _links:
            public init(
                _type: Swift.String,
                size: Swift.Int,
                name: Swift.String,
                path: Swift.String,
                sha: Swift.String,
                content: Swift.String? = nil,
                url: Swift.String,
                git_url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                download_url: Swift.String? = nil,
                entries: Components.Schemas.content_hyphen_tree.entriesPayload? = nil,
                _links: Components.Schemas.content_hyphen_tree._linksPayload
            ) {
                self._type = _type
                self.size = size
                self.name = name
                self.path = path
                self.sha = sha
                self.content = content
                self.url = url
                self.git_url = git_url
                self.html_url = html_url
                self.download_url = download_url
                self.entries = entries
                self._links = _links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case size
                case name
                case path
                case sha
                case content
                case url
                case git_url
                case html_url
                case download_url
                case entries
                case _links
            }
        }
        /// - Remark: Generated from `#/components/schemas/content_hyphen_directory`.
        public struct content_hyphen_directoryPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case dir = "dir"
                case file = "file"
                case submodule = "submodule"
                case symlink = "symlink"
            }
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/type`.
            public var _type: Components.Schemas.content_hyphen_directoryPayload._typePayload
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/download_url`.
            public var download_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/_links/git`.
                public var git: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/_links/html`.
                public var html: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/_links/self`.
                public var _self: Swift.String
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - git:
                ///   - html:
                ///   - _self:
                public init(
                    git: Swift.String? = nil,
                    html: Swift.String? = nil,
                    _self: Swift.String
                ) {
                    self.git = git
                    self.html = html
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case git
                    case html
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/content_hyphen_directory/_links`.
            public var _links: Components.Schemas.content_hyphen_directoryPayload._linksPayload
            /// Creates a new `content_hyphen_directoryPayload`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - size:
            ///   - name:
            ///   - path:
            ///   - content:
            ///   - sha:
            ///   - url:
            ///   - git_url:
            ///   - html_url:
            ///   - download_url:
            ///   - _links:
            public init(
                _type: Components.Schemas.content_hyphen_directoryPayload._typePayload,
                size: Swift.Int,
                name: Swift.String,
                path: Swift.String,
                content: Swift.String? = nil,
                sha: Swift.String,
                url: Swift.String,
                git_url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                download_url: Swift.String? = nil,
                _links: Components.Schemas.content_hyphen_directoryPayload._linksPayload
            ) {
                self._type = _type
                self.size = size
                self.name = name
                self.path = path
                self.content = content
                self.sha = sha
                self.url = url
                self.git_url = git_url
                self.html_url = html_url
                self.download_url = download_url
                self._links = _links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case size
                case name
                case path
                case content
                case sha
                case url
                case git_url
                case html_url
                case download_url
                case _links
            }
        }
        /// A list of directory items
        ///
        /// - Remark: Generated from `#/components/schemas/content-directory`.
        public typealias content_hyphen_directory = [Components.Schemas.content_hyphen_directoryPayload]
        /// Content File
        ///
        /// - Remark: Generated from `#/components/schemas/content-file`.
        public struct content_hyphen_file: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/content-file/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file = "file"
            }
            /// - Remark: Generated from `#/components/schemas/content-file/type`.
            public var _type: Components.Schemas.content_hyphen_file._typePayload
            /// - Remark: Generated from `#/components/schemas/content-file/encoding`.
            public var encoding: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-file/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/content-file/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-file/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-file/content`.
            public var content: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-file/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-file/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-file/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-file/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-file/download_url`.
            public var download_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-file/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/content-file/_links/git`.
                public var git: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-file/_links/html`.
                public var html: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-file/_links/self`.
                public var _self: Swift.String
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - git:
                ///   - html:
                ///   - _self:
                public init(
                    git: Swift.String? = nil,
                    html: Swift.String? = nil,
                    _self: Swift.String
                ) {
                    self.git = git
                    self.html = html
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case git
                    case html
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/content-file/_links`.
            public var _links: Components.Schemas.content_hyphen_file._linksPayload
            /// - Remark: Generated from `#/components/schemas/content-file/target`.
            public var target: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-file/submodule_git_url`.
            public var submodule_git_url: Swift.String?
            /// Creates a new `content_hyphen_file`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - encoding:
            ///   - size:
            ///   - name:
            ///   - path:
            ///   - content:
            ///   - sha:
            ///   - url:
            ///   - git_url:
            ///   - html_url:
            ///   - download_url:
            ///   - _links:
            ///   - target:
            ///   - submodule_git_url:
            public init(
                _type: Components.Schemas.content_hyphen_file._typePayload,
                encoding: Swift.String,
                size: Swift.Int,
                name: Swift.String,
                path: Swift.String,
                content: Swift.String,
                sha: Swift.String,
                url: Swift.String,
                git_url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                download_url: Swift.String? = nil,
                _links: Components.Schemas.content_hyphen_file._linksPayload,
                target: Swift.String? = nil,
                submodule_git_url: Swift.String? = nil
            ) {
                self._type = _type
                self.encoding = encoding
                self.size = size
                self.name = name
                self.path = path
                self.content = content
                self.sha = sha
                self.url = url
                self.git_url = git_url
                self.html_url = html_url
                self.download_url = download_url
                self._links = _links
                self.target = target
                self.submodule_git_url = submodule_git_url
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case encoding
                case size
                case name
                case path
                case content
                case sha
                case url
                case git_url
                case html_url
                case download_url
                case _links
                case target
                case submodule_git_url
            }
        }
        /// An object describing a symlink
        ///
        /// - Remark: Generated from `#/components/schemas/content-symlink`.
        public struct content_hyphen_symlink: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/content-symlink/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case symlink = "symlink"
            }
            /// - Remark: Generated from `#/components/schemas/content-symlink/type`.
            public var _type: Components.Schemas.content_hyphen_symlink._typePayload
            /// - Remark: Generated from `#/components/schemas/content-symlink/target`.
            public var target: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-symlink/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/content-symlink/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-symlink/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-symlink/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-symlink/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-symlink/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-symlink/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-symlink/download_url`.
            public var download_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-symlink/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/content-symlink/_links/git`.
                public var git: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-symlink/_links/html`.
                public var html: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-symlink/_links/self`.
                public var _self: Swift.String
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - git:
                ///   - html:
                ///   - _self:
                public init(
                    git: Swift.String? = nil,
                    html: Swift.String? = nil,
                    _self: Swift.String
                ) {
                    self.git = git
                    self.html = html
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case git
                    case html
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/content-symlink/_links`.
            public var _links: Components.Schemas.content_hyphen_symlink._linksPayload
            /// Creates a new `content_hyphen_symlink`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - target:
            ///   - size:
            ///   - name:
            ///   - path:
            ///   - sha:
            ///   - url:
            ///   - git_url:
            ///   - html_url:
            ///   - download_url:
            ///   - _links:
            public init(
                _type: Components.Schemas.content_hyphen_symlink._typePayload,
                target: Swift.String,
                size: Swift.Int,
                name: Swift.String,
                path: Swift.String,
                sha: Swift.String,
                url: Swift.String,
                git_url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                download_url: Swift.String? = nil,
                _links: Components.Schemas.content_hyphen_symlink._linksPayload
            ) {
                self._type = _type
                self.target = target
                self.size = size
                self.name = name
                self.path = path
                self.sha = sha
                self.url = url
                self.git_url = git_url
                self.html_url = html_url
                self.download_url = download_url
                self._links = _links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case target
                case size
                case name
                case path
                case sha
                case url
                case git_url
                case html_url
                case download_url
                case _links
            }
        }
        /// An object describing a submodule
        ///
        /// - Remark: Generated from `#/components/schemas/content-submodule`.
        public struct content_hyphen_submodule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/content-submodule/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case submodule = "submodule"
            }
            /// - Remark: Generated from `#/components/schemas/content-submodule/type`.
            public var _type: Components.Schemas.content_hyphen_submodule._typePayload
            /// - Remark: Generated from `#/components/schemas/content-submodule/submodule_git_url`.
            public var submodule_git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-submodule/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/content-submodule/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-submodule/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-submodule/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-submodule/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-submodule/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-submodule/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-submodule/download_url`.
            public var download_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/content-submodule/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/content-submodule/_links/git`.
                public var git: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-submodule/_links/html`.
                public var html: Swift.String?
                /// - Remark: Generated from `#/components/schemas/content-submodule/_links/self`.
                public var _self: Swift.String
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - git:
                ///   - html:
                ///   - _self:
                public init(
                    git: Swift.String? = nil,
                    html: Swift.String? = nil,
                    _self: Swift.String
                ) {
                    self.git = git
                    self.html = html
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case git
                    case html
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/content-submodule/_links`.
            public var _links: Components.Schemas.content_hyphen_submodule._linksPayload
            /// Creates a new `content_hyphen_submodule`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - submodule_git_url:
            ///   - size:
            ///   - name:
            ///   - path:
            ///   - sha:
            ///   - url:
            ///   - git_url:
            ///   - html_url:
            ///   - download_url:
            ///   - _links:
            public init(
                _type: Components.Schemas.content_hyphen_submodule._typePayload,
                submodule_git_url: Swift.String,
                size: Swift.Int,
                name: Swift.String,
                path: Swift.String,
                sha: Swift.String,
                url: Swift.String,
                git_url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                download_url: Swift.String? = nil,
                _links: Components.Schemas.content_hyphen_submodule._linksPayload
            ) {
                self._type = _type
                self.submodule_git_url = submodule_git_url
                self.size = size
                self.name = name
                self.path = path
                self.sha = sha
                self.url = url
                self.git_url = git_url
                self.html_url = html_url
                self.download_url = download_url
                self._links = _links
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case submodule_git_url
                case size
                case name
                case path
                case sha
                case url
                case git_url
                case html_url
                case download_url
                case _links
            }
        }
        /// File Commit
        ///
        /// - Remark: Generated from `#/components/schemas/file-commit`.
        public struct file_hyphen_commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/file-commit/content`.
            public struct contentPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/file-commit/content/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/path`.
                public var path: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/sha`.
                public var sha: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/git_url`.
                public var git_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/download_url`.
                public var download_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/type`.
                public var _type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/content/_links`.
                public struct _linksPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/file-commit/content/_links/self`.
                    public var _self: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/content/_links/git`.
                    public var git: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/content/_links/html`.
                    public var html: Swift.String?
                    /// Creates a new `_linksPayload`.
                    ///
                    /// - Parameters:
                    ///   - _self:
                    ///   - git:
                    ///   - html:
                    public init(
                        _self: Swift.String? = nil,
                        git: Swift.String? = nil,
                        html: Swift.String? = nil
                    ) {
                        self._self = _self
                        self.git = git
                        self.html = html
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _self = "self"
                        case git
                        case html
                    }
                }
                /// - Remark: Generated from `#/components/schemas/file-commit/content/_links`.
                public var _links: Components.Schemas.file_hyphen_commit.contentPayload._linksPayload?
                /// Creates a new `contentPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - path:
                ///   - sha:
                ///   - size:
                ///   - url:
                ///   - html_url:
                ///   - git_url:
                ///   - download_url:
                ///   - _type:
                ///   - _links:
                public init(
                    name: Swift.String? = nil,
                    path: Swift.String? = nil,
                    sha: Swift.String? = nil,
                    size: Swift.Int? = nil,
                    url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    git_url: Swift.String? = nil,
                    download_url: Swift.String? = nil,
                    _type: Swift.String? = nil,
                    _links: Components.Schemas.file_hyphen_commit.contentPayload._linksPayload? = nil
                ) {
                    self.name = name
                    self.path = path
                    self.sha = sha
                    self.size = size
                    self.url = url
                    self.html_url = html_url
                    self.git_url = git_url
                    self.download_url = download_url
                    self._type = _type
                    self._links = _links
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case path
                    case sha
                    case size
                    case url
                    case html_url
                    case git_url
                    case download_url
                    case _type = "type"
                    case _links
                }
            }
            /// - Remark: Generated from `#/components/schemas/file-commit/content`.
            public var content: Components.Schemas.file_hyphen_commit.contentPayload?
            /// - Remark: Generated from `#/components/schemas/file-commit/commit`.
            public struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/sha`.
                public var sha: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/author`.
                public struct authorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/author/date`.
                    public var date: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/author/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/author/email`.
                    public var email: Swift.String?
                    /// Creates a new `authorPayload`.
                    ///
                    /// - Parameters:
                    ///   - date:
                    ///   - name:
                    ///   - email:
                    public init(
                        date: Swift.String? = nil,
                        name: Swift.String? = nil,
                        email: Swift.String? = nil
                    ) {
                        self.date = date
                        self.name = name
                        self.email = email
                    }
                    public enum CodingKeys: String, CodingKey {
                        case date
                        case name
                        case email
                    }
                }
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/author`.
                public var author: Components.Schemas.file_hyphen_commit.commitPayload.authorPayload?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/committer`.
                public struct committerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/committer/date`.
                    public var date: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/committer/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/committer/email`.
                    public var email: Swift.String?
                    /// Creates a new `committerPayload`.
                    ///
                    /// - Parameters:
                    ///   - date:
                    ///   - name:
                    ///   - email:
                    public init(
                        date: Swift.String? = nil,
                        name: Swift.String? = nil,
                        email: Swift.String? = nil
                    ) {
                        self.date = date
                        self.name = name
                        self.email = email
                    }
                    public enum CodingKeys: String, CodingKey {
                        case date
                        case name
                        case email
                    }
                }
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/committer`.
                public var committer: Components.Schemas.file_hyphen_commit.commitPayload.committerPayload?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/tree`.
                public struct treePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/tree/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/tree/sha`.
                    public var sha: Swift.String?
                    /// Creates a new `treePayload`.
                    ///
                    /// - Parameters:
                    ///   - url:
                    ///   - sha:
                    public init(
                        url: Swift.String? = nil,
                        sha: Swift.String? = nil
                    ) {
                        self.url = url
                        self.sha = sha
                    }
                    public enum CodingKeys: String, CodingKey {
                        case url
                        case sha
                    }
                }
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/tree`.
                public var tree: Components.Schemas.file_hyphen_commit.commitPayload.treePayload?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/parentsPayload`.
                public struct parentsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/parentsPayload/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/parentsPayload/html_url`.
                    public var html_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/parentsPayload/sha`.
                    public var sha: Swift.String?
                    /// Creates a new `parentsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - url:
                    ///   - html_url:
                    ///   - sha:
                    public init(
                        url: Swift.String? = nil,
                        html_url: Swift.String? = nil,
                        sha: Swift.String? = nil
                    ) {
                        self.url = url
                        self.html_url = html_url
                        self.sha = sha
                    }
                    public enum CodingKeys: String, CodingKey {
                        case url
                        case html_url
                        case sha
                    }
                }
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/parents`.
                public typealias parentsPayload = [Components.Schemas.file_hyphen_commit.commitPayload.parentsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/parents`.
                public var parents: Components.Schemas.file_hyphen_commit.commitPayload.parentsPayload?
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/verification`.
                public struct verificationPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/verification/verified`.
                    public var verified: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/verification/reason`.
                    public var reason: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/verification/signature`.
                    public var signature: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/file-commit/commit/verification/payload`.
                    public var payload: Swift.String?
                    /// Creates a new `verificationPayload`.
                    ///
                    /// - Parameters:
                    ///   - verified:
                    ///   - reason:
                    ///   - signature:
                    ///   - payload:
                    public init(
                        verified: Swift.Bool? = nil,
                        reason: Swift.String? = nil,
                        signature: Swift.String? = nil,
                        payload: Swift.String? = nil
                    ) {
                        self.verified = verified
                        self.reason = reason
                        self.signature = signature
                        self.payload = payload
                    }
                    public enum CodingKeys: String, CodingKey {
                        case verified
                        case reason
                        case signature
                        case payload
                    }
                }
                /// - Remark: Generated from `#/components/schemas/file-commit/commit/verification`.
                public var verification: Components.Schemas.file_hyphen_commit.commitPayload.verificationPayload?
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - node_id:
                ///   - url:
                ///   - html_url:
                ///   - author:
                ///   - committer:
                ///   - message:
                ///   - tree:
                ///   - parents:
                ///   - verification:
                public init(
                    sha: Swift.String? = nil,
                    node_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    author: Components.Schemas.file_hyphen_commit.commitPayload.authorPayload? = nil,
                    committer: Components.Schemas.file_hyphen_commit.commitPayload.committerPayload? = nil,
                    message: Swift.String? = nil,
                    tree: Components.Schemas.file_hyphen_commit.commitPayload.treePayload? = nil,
                    parents: Components.Schemas.file_hyphen_commit.commitPayload.parentsPayload? = nil,
                    verification: Components.Schemas.file_hyphen_commit.commitPayload.verificationPayload? = nil
                ) {
                    self.sha = sha
                    self.node_id = node_id
                    self.url = url
                    self.html_url = html_url
                    self.author = author
                    self.committer = committer
                    self.message = message
                    self.tree = tree
                    self.parents = parents
                    self.verification = verification
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case node_id
                    case url
                    case html_url
                    case author
                    case committer
                    case message
                    case tree
                    case parents
                    case verification
                }
            }
            /// - Remark: Generated from `#/components/schemas/file-commit/commit`.
            public var commit: Components.Schemas.file_hyphen_commit.commitPayload
            /// Creates a new `file_hyphen_commit`.
            ///
            /// - Parameters:
            ///   - content:
            ///   - commit:
            public init(
                content: Components.Schemas.file_hyphen_commit.contentPayload? = nil,
                commit: Components.Schemas.file_hyphen_commit.commitPayload
            ) {
                self.content = content
                self.commit = commit
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case commit
            }
        }
        /// The ID of the push protection bypass placeholder. This value is returned on any push protected routes.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-push-protection-bypass-placeholder-id`.
        public typealias secret_hyphen_scanning_hyphen_push_hyphen_protection_hyphen_bypass_hyphen_placeholder_hyphen_id = Swift.String
        /// Repository rule violation was detected
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error`.
        public struct repository_hyphen_rule_hyphen_violation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/status`.
            public var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata/secret_scanning`.
                public struct secret_scanningPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata/secret_scanning/bypass_placeholdersPayload`.
                    public struct bypass_placeholdersPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata/secret_scanning/bypass_placeholdersPayload/placeholder_id`.
                        public var placeholder_id: Components.Schemas.secret_hyphen_scanning_hyphen_push_hyphen_protection_hyphen_bypass_hyphen_placeholder_hyphen_id?
                        /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata/secret_scanning/bypass_placeholdersPayload/token_type`.
                        public var token_type: Swift.String?
                        /// Creates a new `bypass_placeholdersPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - placeholder_id:
                        ///   - token_type:
                        public init(
                            placeholder_id: Components.Schemas.secret_hyphen_scanning_hyphen_push_hyphen_protection_hyphen_bypass_hyphen_placeholder_hyphen_id? = nil,
                            token_type: Swift.String? = nil
                        ) {
                            self.placeholder_id = placeholder_id
                            self.token_type = token_type
                        }
                        public enum CodingKeys: String, CodingKey {
                            case placeholder_id
                            case token_type
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata/secret_scanning/bypass_placeholders`.
                    public typealias bypass_placeholdersPayload = [Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error.metadataPayload.secret_scanningPayload.bypass_placeholdersPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata/secret_scanning/bypass_placeholders`.
                    public var bypass_placeholders: Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error.metadataPayload.secret_scanningPayload.bypass_placeholdersPayload?
                    /// Creates a new `secret_scanningPayload`.
                    ///
                    /// - Parameters:
                    ///   - bypass_placeholders:
                    public init(bypass_placeholders: Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error.metadataPayload.secret_scanningPayload.bypass_placeholdersPayload? = nil) {
                        self.bypass_placeholders = bypass_placeholders
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bypass_placeholders
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata/secret_scanning`.
                public var secret_scanning: Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error.metadataPayload.secret_scanningPayload?
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - secret_scanning:
                public init(secret_scanning: Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error.metadataPayload.secret_scanningPayload? = nil) {
                    self.secret_scanning = secret_scanning
                }
                public enum CodingKeys: String, CodingKey {
                    case secret_scanning
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-violation-error/metadata`.
            public var metadata: Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error.metadataPayload?
            /// Creates a new `repository_hyphen_rule_hyphen_violation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - status:
            ///   - metadata:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                status: Swift.String? = nil,
                metadata: Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error.metadataPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.status = status
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case status
                case metadata
            }
        }
        /// Contributor
        ///
        /// - Remark: Generated from `#/components/schemas/contributor`.
        public struct contributor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/contributor/login`.
            public var login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/id`.
            public var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/contributor/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/avatar_url`.
            public var avatar_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/followers_url`.
            public var followers_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/following_url`.
            public var following_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gists_url`.
            public var gists_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/starred_url`.
            public var starred_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/subscriptions_url`.
            public var subscriptions_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/organizations_url`.
            public var organizations_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/repos_url`.
            public var repos_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/events_url`.
            public var events_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/received_events_url`.
            public var received_events_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/contributor/site_admin`.
            public var site_admin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/contributor/contributions`.
            public var contributions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/contributor/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `contributor`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - contributions:
            ///   - email:
            ///   - name:
            ///   - user_view_type:
            public init(
                login: Swift.String? = nil,
                id: Swift.Int? = nil,
                node_id: Swift.String? = nil,
                avatar_url: Swift.String? = nil,
                gravatar_id: Swift.String? = nil,
                url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                followers_url: Swift.String? = nil,
                following_url: Swift.String? = nil,
                gists_url: Swift.String? = nil,
                starred_url: Swift.String? = nil,
                subscriptions_url: Swift.String? = nil,
                organizations_url: Swift.String? = nil,
                repos_url: Swift.String? = nil,
                events_url: Swift.String? = nil,
                received_events_url: Swift.String? = nil,
                _type: Swift.String,
                site_admin: Swift.Bool? = nil,
                contributions: Swift.Int,
                email: Swift.String? = nil,
                name: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.contributions = contributions
                self.email = email
                self.name = name
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case contributions
                case email
                case name
                case user_view_type
            }
        }
        /// The status of a deployment.
        ///
        /// - Remark: Generated from `#/components/schemas/deployment-status`.
        public struct deployment_hyphen_status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/deployment-status/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment-status/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/deployment-status/node_id`.
            public var node_id: Swift.String
            /// The state of the status.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-status/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case error = "error"
                case failure = "failure"
                case inactive = "inactive"
                case pending = "pending"
                case success = "success"
                case queued = "queued"
                case in_progress = "in_progress"
            }
            /// The state of the status.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-status/state`.
            public var state: Components.Schemas.deployment_hyphen_status.statePayload
            /// - Remark: Generated from `#/components/schemas/deployment-status/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// A short description of the status.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-status/description`.
            public var description: Swift.String
            /// The environment of the deployment that the status is for.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-status/environment`.
            public var environment: Swift.String?
            /// Closing down notice: the URL to associate with this status.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-status/target_url`.
            public var target_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment-status/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment-status/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/deployment-status/deployment_url`.
            public var deployment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/deployment-status/repository_url`.
            public var repository_url: Swift.String
            /// The URL for accessing your environment.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-status/environment_url`.
            public var environment_url: Swift.String?
            /// The URL to associate with this status.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-status/log_url`.
            public var log_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/deployment-status/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// Creates a new `deployment_hyphen_status`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - state: The state of the status.
            ///   - creator:
            ///   - description: A short description of the status.
            ///   - environment: The environment of the deployment that the status is for.
            ///   - target_url: Closing down notice: the URL to associate with this status.
            ///   - created_at:
            ///   - updated_at:
            ///   - deployment_url:
            ///   - repository_url:
            ///   - environment_url: The URL for accessing your environment.
            ///   - log_url: The URL to associate with this status.
            ///   - performed_via_github_app:
            public init(
                url: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                state: Components.Schemas.deployment_hyphen_status.statePayload,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                description: Swift.String,
                environment: Swift.String? = nil,
                target_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                deployment_url: Swift.String,
                repository_url: Swift.String,
                environment_url: Swift.String? = nil,
                log_url: Swift.String? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.state = state
                self.creator = creator
                self.description = description
                self.environment = environment
                self.target_url = target_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.deployment_url = deployment_url
                self.repository_url = repository_url
                self.environment_url = environment_url
                self.log_url = log_url
                self.performed_via_github_app = performed_via_github_app
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case state
                case creator
                case description
                case environment
                case target_url
                case created_at
                case updated_at
                case deployment_url
                case repository_url
                case environment_url
                case log_url
                case performed_via_github_app
            }
        }
        /// The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
        ///
        /// - Remark: Generated from `#/components/schemas/wait-timer`.
        public typealias wait_hyphen_timer = Swift.Int
        /// The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
        ///
        /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-settings`.
        public struct deployment_hyphen_branch_hyphen_policy_hyphen_settings: Codable, Hashable, Sendable {
            /// Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-settings/protected_branches`.
            public var protected_branches: Swift.Bool
            /// Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-settings/custom_branch_policies`.
            public var custom_branch_policies: Swift.Bool
            /// Creates a new `deployment_hyphen_branch_hyphen_policy_hyphen_settings`.
            ///
            /// - Parameters:
            ///   - protected_branches: Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
            ///   - custom_branch_policies: Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
            public init(
                protected_branches: Swift.Bool,
                custom_branch_policies: Swift.Bool
            ) {
                self.protected_branches = protected_branches
                self.custom_branch_policies = custom_branch_policies
            }
            public enum CodingKeys: String, CodingKey {
                case protected_branches
                case custom_branch_policies
            }
        }
        /// Details of a deployment environment
        ///
        /// - Remark: Generated from `#/components/schemas/environment`.
        public struct environment: Codable, Hashable, Sendable {
            /// The id of the environment.
            ///
            /// - Remark: Generated from `#/components/schemas/environment/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/environment/node_id`.
            public var node_id: Swift.String
            /// The name of the environment.
            ///
            /// - Remark: Generated from `#/components/schemas/environment/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/environment/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/environment/html_url`.
            public var html_url: Swift.String
            /// The time that the environment was created, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/environment/created_at`.
            public var created_at: Foundation.Date
            /// The time that the environment was last updated, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/environment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload`.
            public struct protection_rulesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value1/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value1/node_id`.
                    public var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value1/type`.
                    public var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value1/wait_timer`.
                    public var wait_timer: Components.Schemas.wait_hyphen_timer?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - _type:
                    ///   - wait_timer:
                    public init(
                        id: Swift.Int,
                        node_id: Swift.String,
                        _type: Swift.String,
                        wait_timer: Components.Schemas.wait_hyphen_timer? = nil
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self._type = _type
                        self.wait_timer = wait_timer
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case _type = "type"
                        case wait_timer
                    }
                }
                /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value1`.
                public var value1: Components.Schemas.environment.protection_rulesPayloadPayload.Value1Payload?
                /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/node_id`.
                    public var node_id: Swift.String
                    /// Whether deployments to this environment can be approved by the user who created the deployment.
                    ///
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/prevent_self_review`.
                    public var prevent_self_review: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/type`.
                    public var _type: Swift.String
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewersPayload`.
                    public struct reviewersPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewersPayload/type`.
                        public var _type: Components.Schemas.deployment_hyphen_reviewer_hyphen_type?
                        /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewersPayload/reviewer`.
                        public struct reviewerPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewersPayload/reviewer/value1`.
                            public var value1: Components.Schemas.simple_hyphen_user?
                            /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewersPayload/reviewer/value2`.
                            public var value2: Components.Schemas.team?
                            /// Creates a new `reviewerPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.simple_hyphen_user? = nil,
                                value2: Components.Schemas.team? = nil
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    value1 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    value2 = try .init(from: decoder)
                                } catch {
                                    errors.append(error)
                                }
                                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                    [
                                        value1,
                                        value2
                                    ],
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1?.encode(to: encoder)
                                try value2?.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewersPayload/reviewer`.
                        public var reviewer: Components.Schemas.environment.protection_rulesPayloadPayload.Value2Payload.reviewersPayloadPayload.reviewerPayload?
                        /// Creates a new `reviewersPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - reviewer:
                        public init(
                            _type: Components.Schemas.deployment_hyphen_reviewer_hyphen_type? = nil,
                            reviewer: Components.Schemas.environment.protection_rulesPayloadPayload.Value2Payload.reviewersPayloadPayload.reviewerPayload? = nil
                        ) {
                            self._type = _type
                            self.reviewer = reviewer
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case reviewer
                        }
                    }
                    /// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
                    ///
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewers`.
                    public typealias reviewersPayload = [Components.Schemas.environment.protection_rulesPayloadPayload.Value2Payload.reviewersPayloadPayload]
                    /// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
                    ///
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2/reviewers`.
                    public var reviewers: Components.Schemas.environment.protection_rulesPayloadPayload.Value2Payload.reviewersPayload?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - prevent_self_review: Whether deployments to this environment can be approved by the user who created the deployment.
                    ///   - _type:
                    ///   - reviewers: The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
                    public init(
                        id: Swift.Int,
                        node_id: Swift.String,
                        prevent_self_review: Swift.Bool? = nil,
                        _type: Swift.String,
                        reviewers: Components.Schemas.environment.protection_rulesPayloadPayload.Value2Payload.reviewersPayload? = nil
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self.prevent_self_review = prevent_self_review
                        self._type = _type
                        self.reviewers = reviewers
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case prevent_self_review
                        case _type = "type"
                        case reviewers
                    }
                }
                /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value2`.
                public var value2: Components.Schemas.environment.protection_rulesPayloadPayload.Value2Payload?
                /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value3`.
                public struct Value3Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value3/id`.
                    public var id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value3/node_id`.
                    public var node_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value3/type`.
                    public var _type: Swift.String
                    /// Creates a new `Value3Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - _type:
                    public init(
                        id: Swift.Int,
                        node_id: Swift.String,
                        _type: Swift.String
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self._type = _type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case _type = "type"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/environment/protection_rulesPayload/value3`.
                public var value3: Components.Schemas.environment.protection_rulesPayloadPayload.Value3Payload?
                /// Creates a new `protection_rulesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                ///   - value3:
                public init(
                    value1: Components.Schemas.environment.protection_rulesPayloadPayload.Value1Payload? = nil,
                    value2: Components.Schemas.environment.protection_rulesPayloadPayload.Value2Payload? = nil,
                    value3: Components.Schemas.environment.protection_rulesPayloadPayload.Value3Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                    self.value3 = value3
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value3 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2,
                            value3
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                    try value3?.encode(to: encoder)
                }
            }
            /// Built-in deployment protection rules for the environment.
            ///
            /// - Remark: Generated from `#/components/schemas/environment/protection_rules`.
            public typealias protection_rulesPayload = [Components.Schemas.environment.protection_rulesPayloadPayload]
            /// Built-in deployment protection rules for the environment.
            ///
            /// - Remark: Generated from `#/components/schemas/environment/protection_rules`.
            public var protection_rules: Components.Schemas.environment.protection_rulesPayload?
            /// - Remark: Generated from `#/components/schemas/environment/deployment_branch_policy`.
            public var deployment_branch_policy: Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_settings?
            /// Creates a new `environment`.
            ///
            /// - Parameters:
            ///   - id: The id of the environment.
            ///   - node_id:
            ///   - name: The name of the environment.
            ///   - url:
            ///   - html_url:
            ///   - created_at: The time that the environment was created, in ISO 8601 format.
            ///   - updated_at: The time that the environment was last updated, in ISO 8601 format.
            ///   - protection_rules: Built-in deployment protection rules for the environment.
            ///   - deployment_branch_policy:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                protection_rules: Components.Schemas.environment.protection_rulesPayload? = nil,
                deployment_branch_policy: Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_settings? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.url = url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.protection_rules = protection_rules
                self.deployment_branch_policy = deployment_branch_policy
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case url
                case html_url
                case created_at
                case updated_at
                case protection_rules
                case deployment_branch_policy
            }
        }
        /// Whether or not a user who created the job is prevented from approving their own job.
        ///
        /// - Remark: Generated from `#/components/schemas/prevent-self-review`.
        public typealias prevent_hyphen_self_hyphen_review = Swift.Bool
        /// Details of a deployment branch or tag policy.
        ///
        /// - Remark: Generated from `#/components/schemas/deployment-branch-policy`.
        public struct deployment_hyphen_branch_hyphen_policy: Codable, Hashable, Sendable {
            /// The unique identifier of the branch or tag policy.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy/id`.
            public var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy/node_id`.
            public var node_id: Swift.String?
            /// The name pattern that branches or tags must match in order to deploy to the environment.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy/name`.
            public var name: Swift.String?
            /// Whether this rule targets a branch or tag.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case branch = "branch"
                case tag = "tag"
            }
            /// Whether this rule targets a branch or tag.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy/type`.
            public var _type: Components.Schemas.deployment_hyphen_branch_hyphen_policy._typePayload?
            /// Creates a new `deployment_hyphen_branch_hyphen_policy`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of the branch or tag policy.
            ///   - node_id:
            ///   - name: The name pattern that branches or tags must match in order to deploy to the environment.
            ///   - _type: Whether this rule targets a branch or tag.
            public init(
                id: Swift.Int? = nil,
                node_id: Swift.String? = nil,
                name: Swift.String? = nil,
                _type: Components.Schemas.deployment_hyphen_branch_hyphen_policy._typePayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-name-pattern-with-type`.
        public struct deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern_hyphen_with_hyphen_type: Codable, Hashable, Sendable {
            /// The name pattern that branches or tags must match in order to deploy to the environment.
            ///
            /// Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
            /// For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-name-pattern-with-type/name`.
            public var name: Swift.String
            /// Whether this rule targets a branch or tag
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-name-pattern-with-type/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case branch = "branch"
                case tag = "tag"
            }
            /// Whether this rule targets a branch or tag
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-name-pattern-with-type/type`.
            public var _type: Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern_hyphen_with_hyphen_type._typePayload?
            /// Creates a new `deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern_hyphen_with_hyphen_type`.
            ///
            /// - Parameters:
            ///   - name: The name pattern that branches or tags must match in order to deploy to the environment.
            ///   - _type: Whether this rule targets a branch or tag
            public init(
                name: Swift.String,
                _type: Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern_hyphen_with_hyphen_type._typePayload? = nil
            ) {
                self.name = name
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-name-pattern`.
        public struct deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern: Codable, Hashable, Sendable {
            /// The name pattern that branches must match in order to deploy to the environment.
            ///
            /// Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
            /// For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-branch-policy-name-pattern/name`.
            public var name: Swift.String
            /// Creates a new `deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern`.
            ///
            /// - Parameters:
            ///   - name: The name pattern that branches must match in order to deploy to the environment.
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// A GitHub App that is providing a custom deployment protection rule.
        ///
        /// - Remark: Generated from `#/components/schemas/custom-deployment-rule-app`.
        public struct custom_hyphen_deployment_hyphen_rule_hyphen_app: Codable, Hashable, Sendable {
            /// The unique identifier of the deployment protection rule integration.
            ///
            /// - Remark: Generated from `#/components/schemas/custom-deployment-rule-app/id`.
            public var id: Swift.Int
            /// The slugified name of the deployment protection rule integration.
            ///
            /// - Remark: Generated from `#/components/schemas/custom-deployment-rule-app/slug`.
            public var slug: Swift.String
            /// The URL for the endpoint to get details about the app.
            ///
            /// - Remark: Generated from `#/components/schemas/custom-deployment-rule-app/integration_url`.
            public var integration_url: Swift.String
            /// The node ID for the deployment protection rule integration.
            ///
            /// - Remark: Generated from `#/components/schemas/custom-deployment-rule-app/node_id`.
            public var node_id: Swift.String
            /// Creates a new `custom_hyphen_deployment_hyphen_rule_hyphen_app`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of the deployment protection rule integration.
            ///   - slug: The slugified name of the deployment protection rule integration.
            ///   - integration_url: The URL for the endpoint to get details about the app.
            ///   - node_id: The node ID for the deployment protection rule integration.
            public init(
                id: Swift.Int,
                slug: Swift.String,
                integration_url: Swift.String,
                node_id: Swift.String
            ) {
                self.id = id
                self.slug = slug
                self.integration_url = integration_url
                self.node_id = node_id
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case integration_url
                case node_id
            }
        }
        /// Deployment protection rule
        ///
        /// - Remark: Generated from `#/components/schemas/deployment-protection-rule`.
        public struct deployment_hyphen_protection_hyphen_rule: Codable, Hashable, Sendable {
            /// The unique identifier for the deployment protection rule.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-protection-rule/id`.
            public var id: Swift.Int
            /// The node ID for the deployment protection rule.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-protection-rule/node_id`.
            public var node_id: Swift.String
            /// Whether the deployment protection rule is enabled for the environment.
            ///
            /// - Remark: Generated from `#/components/schemas/deployment-protection-rule/enabled`.
            public var enabled: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/deployment-protection-rule/app`.
            public var app: Components.Schemas.custom_hyphen_deployment_hyphen_rule_hyphen_app
            /// Creates a new `deployment_hyphen_protection_hyphen_rule`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier for the deployment protection rule.
            ///   - node_id: The node ID for the deployment protection rule.
            ///   - enabled: Whether the deployment protection rule is enabled for the environment.
            ///   - app:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                enabled: Swift.Bool,
                app: Components.Schemas.custom_hyphen_deployment_hyphen_rule_hyphen_app
            ) {
                self.id = id
                self.node_id = node_id
                self.enabled = enabled
                self.app = app
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case enabled
                case app
            }
        }
        /// - Remark: Generated from `#/components/schemas/hook-response`.
        public struct hook_hyphen_response: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/hook-response/code`.
            public var code: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/hook-response/status`.
            public var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook-response/message`.
            public var message: Swift.String?
            /// Creates a new `hook_hyphen_response`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - status:
            ///   - message:
            public init(
                code: Swift.Int? = nil,
                status: Swift.String? = nil,
                message: Swift.String? = nil
            ) {
                self.code = code
                self.status = status
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case status
                case message
            }
        }
        /// Webhooks for repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/hook`.
        public struct hook: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/hook/type`.
            public var _type: Swift.String
            /// Unique identifier of the webhook.
            ///
            /// - Remark: Generated from `#/components/schemas/hook/id`.
            public var id: Swift.Int
            /// The name of a valid service, use 'web' for a webhook.
            ///
            /// - Remark: Generated from `#/components/schemas/hook/name`.
            public var name: Swift.String
            /// Determines whether the hook is actually triggered on pushes.
            ///
            /// - Remark: Generated from `#/components/schemas/hook/active`.
            public var active: Swift.Bool
            /// Determines what events the hook is triggered for. Default: ['push'].
            ///
            /// - Remark: Generated from `#/components/schemas/hook/events`.
            public var events: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/hook/config`.
            public var config: Components.Schemas.webhook_hyphen_config
            /// - Remark: Generated from `#/components/schemas/hook/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/hook/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/hook/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/hook/test_url`.
            public var test_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/hook/ping_url`.
            public var ping_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/hook/deliveries_url`.
            public var deliveries_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook/last_response`.
            public var last_response: Components.Schemas.hook_hyphen_response
            /// Creates a new `hook`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id: Unique identifier of the webhook.
            ///   - name: The name of a valid service, use 'web' for a webhook.
            ///   - active: Determines whether the hook is actually triggered on pushes.
            ///   - events: Determines what events the hook is triggered for. Default: ['push'].
            ///   - config:
            ///   - updated_at:
            ///   - created_at:
            ///   - url:
            ///   - test_url:
            ///   - ping_url:
            ///   - deliveries_url:
            ///   - last_response:
            public init(
                _type: Swift.String,
                id: Swift.Int,
                name: Swift.String,
                active: Swift.Bool,
                events: [Swift.String],
                config: Components.Schemas.webhook_hyphen_config,
                updated_at: Foundation.Date,
                created_at: Foundation.Date,
                url: Swift.String,
                test_url: Swift.String,
                ping_url: Swift.String,
                deliveries_url: Swift.String? = nil,
                last_response: Components.Schemas.hook_hyphen_response
            ) {
                self._type = _type
                self.id = id
                self.name = name
                self.active = active
                self.events = events
                self.config = config
                self.updated_at = updated_at
                self.created_at = created_at
                self.url = url
                self.test_url = test_url
                self.ping_url = ping_url
                self.deliveries_url = deliveries_url
                self.last_response = last_response
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
                case active
                case events
                case config
                case updated_at
                case created_at
                case url
                case test_url
                case ping_url
                case deliveries_url
                case last_response
            }
        }
        /// An SSH key granting access to a single repository.
        ///
        /// - Remark: Generated from `#/components/schemas/deploy-key`.
        public struct deploy_hyphen_key: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/deploy-key/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/deploy-key/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/deploy-key/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/deploy-key/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/deploy-key/verified`.
            public var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/deploy-key/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/deploy-key/read_only`.
            public var read_only: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/deploy-key/added_by`.
            public var added_by: Swift.String?
            /// - Remark: Generated from `#/components/schemas/deploy-key/last_used`.
            public var last_used: Swift.String?
            /// - Remark: Generated from `#/components/schemas/deploy-key/enabled`.
            public var enabled: Swift.Bool?
            /// Creates a new `deploy_hyphen_key`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - key:
            ///   - url:
            ///   - title:
            ///   - verified:
            ///   - created_at:
            ///   - read_only:
            ///   - added_by:
            ///   - last_used:
            ///   - enabled:
            public init(
                id: Swift.Int,
                key: Swift.String,
                url: Swift.String,
                title: Swift.String,
                verified: Swift.Bool,
                created_at: Swift.String,
                read_only: Swift.Bool,
                added_by: Swift.String? = nil,
                last_used: Swift.String? = nil,
                enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.key = key
                self.url = url
                self.title = title
                self.verified = verified
                self.created_at = created_at
                self.read_only = read_only
                self.added_by = added_by
                self.last_used = last_used
                self.enabled = enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case key
                case url
                case title
                case verified
                case created_at
                case read_only
                case added_by
                case last_used
                case enabled
            }
        }
        /// Language
        ///
        /// - Remark: Generated from `#/components/schemas/language`.
        public struct language: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: [String: Swift.Int]
            /// Creates a new `language`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: [String: Swift.Int] = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Results of a successful merge upstream request
        ///
        /// - Remark: Generated from `#/components/schemas/merged-upstream`.
        public struct merged_hyphen_upstream: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/merged-upstream/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/merged-upstream/merge_type`.
            @frozen public enum merge_typePayload: String, Codable, Hashable, Sendable {
                case merge = "merge"
                case fast_hyphen_forward = "fast-forward"
                case none = "none"
            }
            /// - Remark: Generated from `#/components/schemas/merged-upstream/merge_type`.
            public var merge_type: Components.Schemas.merged_hyphen_upstream.merge_typePayload?
            /// - Remark: Generated from `#/components/schemas/merged-upstream/base_branch`.
            public var base_branch: Swift.String?
            /// Creates a new `merged_hyphen_upstream`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - merge_type:
            ///   - base_branch:
            public init(
                message: Swift.String? = nil,
                merge_type: Components.Schemas.merged_hyphen_upstream.merge_typePayload? = nil,
                base_branch: Swift.String? = nil
            ) {
                self.message = message
                self.merge_type = merge_type
                self.base_branch = base_branch
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case merge_type
                case base_branch
            }
        }
        /// - Remark: Generated from `#/components/schemas/pages-source-hash`.
        public struct pages_hyphen_source_hyphen_hash: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pages-source-hash/branch`.
            public var branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/pages-source-hash/path`.
            public var path: Swift.String
            /// Creates a new `pages_hyphen_source_hyphen_hash`.
            ///
            /// - Parameters:
            ///   - branch:
            ///   - path:
            public init(
                branch: Swift.String,
                path: Swift.String
            ) {
                self.branch = branch
                self.path = path
            }
            public enum CodingKeys: String, CodingKey {
                case branch
                case path
            }
        }
        /// - Remark: Generated from `#/components/schemas/pages-https-certificate`.
        public struct pages_hyphen_https_hyphen_certificate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pages-https-certificate/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case new = "new"
                case authorization_created = "authorization_created"
                case authorization_pending = "authorization_pending"
                case authorized = "authorized"
                case authorization_revoked = "authorization_revoked"
                case issued = "issued"
                case uploaded = "uploaded"
                case approved = "approved"
                case errored = "errored"
                case bad_authz = "bad_authz"
                case destroy_pending = "destroy_pending"
                case dns_changed = "dns_changed"
            }
            /// - Remark: Generated from `#/components/schemas/pages-https-certificate/state`.
            public var state: Components.Schemas.pages_hyphen_https_hyphen_certificate.statePayload
            /// - Remark: Generated from `#/components/schemas/pages-https-certificate/description`.
            public var description: Swift.String
            /// Array of the domain set and its alternate name (if it is configured)
            ///
            /// - Remark: Generated from `#/components/schemas/pages-https-certificate/domains`.
            public var domains: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/pages-https-certificate/expires_at`.
            public var expires_at: Swift.String?
            /// Creates a new `pages_hyphen_https_hyphen_certificate`.
            ///
            /// - Parameters:
            ///   - state:
            ///   - description:
            ///   - domains: Array of the domain set and its alternate name (if it is configured)
            ///   - expires_at:
            public init(
                state: Components.Schemas.pages_hyphen_https_hyphen_certificate.statePayload,
                description: Swift.String,
                domains: [Swift.String],
                expires_at: Swift.String? = nil
            ) {
                self.state = state
                self.description = description
                self.domains = domains
                self.expires_at = expires_at
            }
            public enum CodingKeys: String, CodingKey {
                case state
                case description
                case domains
                case expires_at
            }
        }
        /// The configuration for GitHub Pages for a repository.
        ///
        /// - Remark: Generated from `#/components/schemas/page`.
        public struct page: Codable, Hashable, Sendable {
            /// The API address for accessing this Page resource.
            ///
            /// - Remark: Generated from `#/components/schemas/page/url`.
            public var url: Swift.String
            /// The status of the most recent build of the Page.
            ///
            /// - Remark: Generated from `#/components/schemas/page/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case built = "built"
                case building = "building"
                case errored = "errored"
            }
            /// The status of the most recent build of the Page.
            ///
            /// - Remark: Generated from `#/components/schemas/page/status`.
            public var status: Components.Schemas.page.statusPayload?
            /// The Pages site's custom domain
            ///
            /// - Remark: Generated from `#/components/schemas/page/cname`.
            public var cname: Swift.String?
            /// The state if the domain is verified
            ///
            /// - Remark: Generated from `#/components/schemas/page/protected_domain_state`.
            @frozen public enum protected_domain_statePayload: String, Codable, Hashable, Sendable {
                case pending = "pending"
                case verified = "verified"
                case unverified = "unverified"
            }
            /// The state if the domain is verified
            ///
            /// - Remark: Generated from `#/components/schemas/page/protected_domain_state`.
            public var protected_domain_state: Components.Schemas.page.protected_domain_statePayload?
            /// The timestamp when a pending domain becomes unverified.
            ///
            /// - Remark: Generated from `#/components/schemas/page/pending_domain_unverified_at`.
            public var pending_domain_unverified_at: Foundation.Date?
            /// Whether the Page has a custom 404 page.
            ///
            /// - Remark: Generated from `#/components/schemas/page/custom_404`.
            public var custom_404: Swift.Bool
            /// The web address the Page can be accessed from.
            ///
            /// - Remark: Generated from `#/components/schemas/page/html_url`.
            public var html_url: Swift.String?
            /// The process in which the Page will be built.
            ///
            /// - Remark: Generated from `#/components/schemas/page/build_type`.
            @frozen public enum build_typePayload: String, Codable, Hashable, Sendable {
                case legacy = "legacy"
                case workflow = "workflow"
            }
            /// The process in which the Page will be built.
            ///
            /// - Remark: Generated from `#/components/schemas/page/build_type`.
            public var build_type: Components.Schemas.page.build_typePayload?
            /// - Remark: Generated from `#/components/schemas/page/source`.
            public var source: Components.Schemas.pages_hyphen_source_hyphen_hash?
            /// Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
            ///
            /// - Remark: Generated from `#/components/schemas/page/public`.
            public var _public: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/page/https_certificate`.
            public var https_certificate: Components.Schemas.pages_hyphen_https_hyphen_certificate?
            /// Whether https is enabled on the domain
            ///
            /// - Remark: Generated from `#/components/schemas/page/https_enforced`.
            public var https_enforced: Swift.Bool?
            /// Creates a new `page`.
            ///
            /// - Parameters:
            ///   - url: The API address for accessing this Page resource.
            ///   - status: The status of the most recent build of the Page.
            ///   - cname: The Pages site's custom domain
            ///   - protected_domain_state: The state if the domain is verified
            ///   - pending_domain_unverified_at: The timestamp when a pending domain becomes unverified.
            ///   - custom_404: Whether the Page has a custom 404 page.
            ///   - html_url: The web address the Page can be accessed from.
            ///   - build_type: The process in which the Page will be built.
            ///   - source:
            ///   - _public: Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
            ///   - https_certificate:
            ///   - https_enforced: Whether https is enabled on the domain
            public init(
                url: Swift.String,
                status: Components.Schemas.page.statusPayload? = nil,
                cname: Swift.String? = nil,
                protected_domain_state: Components.Schemas.page.protected_domain_statePayload? = nil,
                pending_domain_unverified_at: Foundation.Date? = nil,
                custom_404: Swift.Bool,
                html_url: Swift.String? = nil,
                build_type: Components.Schemas.page.build_typePayload? = nil,
                source: Components.Schemas.pages_hyphen_source_hyphen_hash? = nil,
                _public: Swift.Bool,
                https_certificate: Components.Schemas.pages_hyphen_https_hyphen_certificate? = nil,
                https_enforced: Swift.Bool? = nil
            ) {
                self.url = url
                self.status = status
                self.cname = cname
                self.protected_domain_state = protected_domain_state
                self.pending_domain_unverified_at = pending_domain_unverified_at
                self.custom_404 = custom_404
                self.html_url = html_url
                self.build_type = build_type
                self.source = source
                self._public = _public
                self.https_certificate = https_certificate
                self.https_enforced = https_enforced
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case status
                case cname
                case protected_domain_state
                case pending_domain_unverified_at
                case custom_404
                case html_url
                case build_type
                case source
                case _public = "public"
                case https_certificate
                case https_enforced
            }
        }
        /// Page Build
        ///
        /// - Remark: Generated from `#/components/schemas/page-build`.
        public struct page_hyphen_build: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/page-build/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/page-build/status`.
            public var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/page-build/error`.
            public struct errorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/page-build/error/message`.
                public var message: Swift.String?
                /// Creates a new `errorPayload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String? = nil) {
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case message
                }
            }
            /// - Remark: Generated from `#/components/schemas/page-build/error`.
            public var error: Components.Schemas.page_hyphen_build.errorPayload
            /// - Remark: Generated from `#/components/schemas/page-build/pusher`.
            public var pusher: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/page-build/commit`.
            public var commit: Swift.String
            /// - Remark: Generated from `#/components/schemas/page-build/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/page-build/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/page-build/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `page_hyphen_build`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - status:
            ///   - error:
            ///   - pusher:
            ///   - commit:
            ///   - duration:
            ///   - created_at:
            ///   - updated_at:
            public init(
                url: Swift.String,
                status: Swift.String,
                error: Components.Schemas.page_hyphen_build.errorPayload,
                pusher: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                commit: Swift.String,
                duration: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.url = url
                self.status = status
                self.error = error
                self.pusher = pusher
                self.commit = commit
                self.duration = duration
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case status
                case error
                case pusher
                case commit
                case duration
                case created_at
                case updated_at
            }
        }
        /// Page Build Status
        ///
        /// - Remark: Generated from `#/components/schemas/page-build-status`.
        public struct page_hyphen_build_hyphen_status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/page-build-status/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/page-build-status/status`.
            public var status: Swift.String
            /// Creates a new `page_hyphen_build_hyphen_status`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - status:
            public init(
                url: Swift.String,
                status: Swift.String
            ) {
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case status
            }
        }
        /// The GitHub Pages deployment status.
        ///
        /// - Remark: Generated from `#/components/schemas/page-deployment`.
        public struct page_hyphen_deployment: Codable, Hashable, Sendable {
            /// The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.
            ///
            /// - Remark: Generated from `#/components/schemas/page-deployment/id`.
            @frozen public enum idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/page-deployment/id/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/page-deployment/id/case2`.
                case case2(Swift.String)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.
            ///
            /// - Remark: Generated from `#/components/schemas/page-deployment/id`.
            public var id: Components.Schemas.page_hyphen_deployment.idPayload
            /// The URI to monitor GitHub Pages deployment status.
            ///
            /// - Remark: Generated from `#/components/schemas/page-deployment/status_url`.
            public var status_url: Swift.String
            /// The URI to the deployed GitHub Pages.
            ///
            /// - Remark: Generated from `#/components/schemas/page-deployment/page_url`.
            public var page_url: Swift.String
            /// The URI to the deployed GitHub Pages preview.
            ///
            /// - Remark: Generated from `#/components/schemas/page-deployment/preview_url`.
            public var preview_url: Swift.String?
            /// Creates a new `page_hyphen_deployment`.
            ///
            /// - Parameters:
            ///   - id: The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.
            ///   - status_url: The URI to monitor GitHub Pages deployment status.
            ///   - page_url: The URI to the deployed GitHub Pages.
            ///   - preview_url: The URI to the deployed GitHub Pages preview.
            public init(
                id: Components.Schemas.page_hyphen_deployment.idPayload,
                status_url: Swift.String,
                page_url: Swift.String,
                preview_url: Swift.String? = nil
            ) {
                self.id = id
                self.status_url = status_url
                self.page_url = page_url
                self.preview_url = preview_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case status_url
                case page_url
                case preview_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/pages-deployment-status`.
        public struct pages_hyphen_deployment_hyphen_status: Codable, Hashable, Sendable {
            /// The current status of the deployment.
            ///
            /// - Remark: Generated from `#/components/schemas/pages-deployment-status/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case deployment_in_progress = "deployment_in_progress"
                case syncing_files = "syncing_files"
                case finished_file_sync = "finished_file_sync"
                case updating_pages = "updating_pages"
                case purging_cdn = "purging_cdn"
                case deployment_cancelled = "deployment_cancelled"
                case deployment_failed = "deployment_failed"
                case deployment_content_failed = "deployment_content_failed"
                case deployment_attempt_error = "deployment_attempt_error"
                case deployment_lost = "deployment_lost"
                case succeed = "succeed"
            }
            /// The current status of the deployment.
            ///
            /// - Remark: Generated from `#/components/schemas/pages-deployment-status/status`.
            public var status: Components.Schemas.pages_hyphen_deployment_hyphen_status.statusPayload?
            /// Creates a new `pages_hyphen_deployment_hyphen_status`.
            ///
            /// - Parameters:
            ///   - status: The current status of the deployment.
            public init(status: Components.Schemas.pages_hyphen_deployment_hyphen_status.statusPayload? = nil) {
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case status
            }
        }
        /// Pages Health Check Status
        ///
        /// - Remark: Generated from `#/components/schemas/pages-health-check`.
        public struct pages_hyphen_health_hyphen_check: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pages-health-check/domain`.
            public struct domainPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/host`.
                public var host: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/uri`.
                public var uri: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/nameservers`.
                public var nameservers: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/dns_resolves`.
                public var dns_resolves: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_proxied`.
                public var is_proxied: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_cloudflare_ip`.
                public var is_cloudflare_ip: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_fastly_ip`.
                public var is_fastly_ip: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_old_ip_address`.
                public var is_old_ip_address: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_a_record`.
                public var is_a_record: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/has_cname_record`.
                public var has_cname_record: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/has_mx_records_present`.
                public var has_mx_records_present: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_valid_domain`.
                public var is_valid_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_apex_domain`.
                public var is_apex_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/should_be_a_record`.
                public var should_be_a_record: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_cname_to_github_user_domain`.
                public var is_cname_to_github_user_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_cname_to_pages_dot_github_dot_com`.
                public var is_cname_to_pages_dot_github_dot_com: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_cname_to_fastly`.
                public var is_cname_to_fastly: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_pointed_to_github_pages_ip`.
                public var is_pointed_to_github_pages_ip: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_non_github_pages_ip_present`.
                public var is_non_github_pages_ip_present: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_pages_domain`.
                public var is_pages_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_served_by_pages`.
                public var is_served_by_pages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_valid`.
                public var is_valid: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/reason`.
                public var reason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/responds_to_https`.
                public var responds_to_https: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/enforces_https`.
                public var enforces_https: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/https_error`.
                public var https_error: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/is_https_eligible`.
                public var is_https_eligible: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/domain/caa_error`.
                public var caa_error: Swift.String?
                /// Creates a new `domainPayload`.
                ///
                /// - Parameters:
                ///   - host:
                ///   - uri:
                ///   - nameservers:
                ///   - dns_resolves:
                ///   - is_proxied:
                ///   - is_cloudflare_ip:
                ///   - is_fastly_ip:
                ///   - is_old_ip_address:
                ///   - is_a_record:
                ///   - has_cname_record:
                ///   - has_mx_records_present:
                ///   - is_valid_domain:
                ///   - is_apex_domain:
                ///   - should_be_a_record:
                ///   - is_cname_to_github_user_domain:
                ///   - is_cname_to_pages_dot_github_dot_com:
                ///   - is_cname_to_fastly:
                ///   - is_pointed_to_github_pages_ip:
                ///   - is_non_github_pages_ip_present:
                ///   - is_pages_domain:
                ///   - is_served_by_pages:
                ///   - is_valid:
                ///   - reason:
                ///   - responds_to_https:
                ///   - enforces_https:
                ///   - https_error:
                ///   - is_https_eligible:
                ///   - caa_error:
                public init(
                    host: Swift.String? = nil,
                    uri: Swift.String? = nil,
                    nameservers: Swift.String? = nil,
                    dns_resolves: Swift.Bool? = nil,
                    is_proxied: Swift.Bool? = nil,
                    is_cloudflare_ip: Swift.Bool? = nil,
                    is_fastly_ip: Swift.Bool? = nil,
                    is_old_ip_address: Swift.Bool? = nil,
                    is_a_record: Swift.Bool? = nil,
                    has_cname_record: Swift.Bool? = nil,
                    has_mx_records_present: Swift.Bool? = nil,
                    is_valid_domain: Swift.Bool? = nil,
                    is_apex_domain: Swift.Bool? = nil,
                    should_be_a_record: Swift.Bool? = nil,
                    is_cname_to_github_user_domain: Swift.Bool? = nil,
                    is_cname_to_pages_dot_github_dot_com: Swift.Bool? = nil,
                    is_cname_to_fastly: Swift.Bool? = nil,
                    is_pointed_to_github_pages_ip: Swift.Bool? = nil,
                    is_non_github_pages_ip_present: Swift.Bool? = nil,
                    is_pages_domain: Swift.Bool? = nil,
                    is_served_by_pages: Swift.Bool? = nil,
                    is_valid: Swift.Bool? = nil,
                    reason: Swift.String? = nil,
                    responds_to_https: Swift.Bool? = nil,
                    enforces_https: Swift.Bool? = nil,
                    https_error: Swift.String? = nil,
                    is_https_eligible: Swift.Bool? = nil,
                    caa_error: Swift.String? = nil
                ) {
                    self.host = host
                    self.uri = uri
                    self.nameservers = nameservers
                    self.dns_resolves = dns_resolves
                    self.is_proxied = is_proxied
                    self.is_cloudflare_ip = is_cloudflare_ip
                    self.is_fastly_ip = is_fastly_ip
                    self.is_old_ip_address = is_old_ip_address
                    self.is_a_record = is_a_record
                    self.has_cname_record = has_cname_record
                    self.has_mx_records_present = has_mx_records_present
                    self.is_valid_domain = is_valid_domain
                    self.is_apex_domain = is_apex_domain
                    self.should_be_a_record = should_be_a_record
                    self.is_cname_to_github_user_domain = is_cname_to_github_user_domain
                    self.is_cname_to_pages_dot_github_dot_com = is_cname_to_pages_dot_github_dot_com
                    self.is_cname_to_fastly = is_cname_to_fastly
                    self.is_pointed_to_github_pages_ip = is_pointed_to_github_pages_ip
                    self.is_non_github_pages_ip_present = is_non_github_pages_ip_present
                    self.is_pages_domain = is_pages_domain
                    self.is_served_by_pages = is_served_by_pages
                    self.is_valid = is_valid
                    self.reason = reason
                    self.responds_to_https = responds_to_https
                    self.enforces_https = enforces_https
                    self.https_error = https_error
                    self.is_https_eligible = is_https_eligible
                    self.caa_error = caa_error
                }
                public enum CodingKeys: String, CodingKey {
                    case host
                    case uri
                    case nameservers
                    case dns_resolves
                    case is_proxied
                    case is_cloudflare_ip
                    case is_fastly_ip
                    case is_old_ip_address
                    case is_a_record
                    case has_cname_record
                    case has_mx_records_present
                    case is_valid_domain
                    case is_apex_domain
                    case should_be_a_record
                    case is_cname_to_github_user_domain
                    case is_cname_to_pages_dot_github_dot_com
                    case is_cname_to_fastly
                    case is_pointed_to_github_pages_ip
                    case is_non_github_pages_ip_present
                    case is_pages_domain
                    case is_served_by_pages
                    case is_valid
                    case reason
                    case responds_to_https
                    case enforces_https
                    case https_error
                    case is_https_eligible
                    case caa_error
                }
            }
            /// - Remark: Generated from `#/components/schemas/pages-health-check/domain`.
            public var domain: Components.Schemas.pages_hyphen_health_hyphen_check.domainPayload?
            /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain`.
            public struct alt_domainPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/host`.
                public var host: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/uri`.
                public var uri: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/nameservers`.
                public var nameservers: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/dns_resolves`.
                public var dns_resolves: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_proxied`.
                public var is_proxied: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_cloudflare_ip`.
                public var is_cloudflare_ip: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_fastly_ip`.
                public var is_fastly_ip: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_old_ip_address`.
                public var is_old_ip_address: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_a_record`.
                public var is_a_record: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/has_cname_record`.
                public var has_cname_record: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/has_mx_records_present`.
                public var has_mx_records_present: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_valid_domain`.
                public var is_valid_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_apex_domain`.
                public var is_apex_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/should_be_a_record`.
                public var should_be_a_record: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_cname_to_github_user_domain`.
                public var is_cname_to_github_user_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_cname_to_pages_dot_github_dot_com`.
                public var is_cname_to_pages_dot_github_dot_com: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_cname_to_fastly`.
                public var is_cname_to_fastly: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_pointed_to_github_pages_ip`.
                public var is_pointed_to_github_pages_ip: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_non_github_pages_ip_present`.
                public var is_non_github_pages_ip_present: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_pages_domain`.
                public var is_pages_domain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_served_by_pages`.
                public var is_served_by_pages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_valid`.
                public var is_valid: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/reason`.
                public var reason: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/responds_to_https`.
                public var responds_to_https: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/enforces_https`.
                public var enforces_https: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/https_error`.
                public var https_error: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/is_https_eligible`.
                public var is_https_eligible: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain/caa_error`.
                public var caa_error: Swift.String?
                /// Creates a new `alt_domainPayload`.
                ///
                /// - Parameters:
                ///   - host:
                ///   - uri:
                ///   - nameservers:
                ///   - dns_resolves:
                ///   - is_proxied:
                ///   - is_cloudflare_ip:
                ///   - is_fastly_ip:
                ///   - is_old_ip_address:
                ///   - is_a_record:
                ///   - has_cname_record:
                ///   - has_mx_records_present:
                ///   - is_valid_domain:
                ///   - is_apex_domain:
                ///   - should_be_a_record:
                ///   - is_cname_to_github_user_domain:
                ///   - is_cname_to_pages_dot_github_dot_com:
                ///   - is_cname_to_fastly:
                ///   - is_pointed_to_github_pages_ip:
                ///   - is_non_github_pages_ip_present:
                ///   - is_pages_domain:
                ///   - is_served_by_pages:
                ///   - is_valid:
                ///   - reason:
                ///   - responds_to_https:
                ///   - enforces_https:
                ///   - https_error:
                ///   - is_https_eligible:
                ///   - caa_error:
                public init(
                    host: Swift.String? = nil,
                    uri: Swift.String? = nil,
                    nameservers: Swift.String? = nil,
                    dns_resolves: Swift.Bool? = nil,
                    is_proxied: Swift.Bool? = nil,
                    is_cloudflare_ip: Swift.Bool? = nil,
                    is_fastly_ip: Swift.Bool? = nil,
                    is_old_ip_address: Swift.Bool? = nil,
                    is_a_record: Swift.Bool? = nil,
                    has_cname_record: Swift.Bool? = nil,
                    has_mx_records_present: Swift.Bool? = nil,
                    is_valid_domain: Swift.Bool? = nil,
                    is_apex_domain: Swift.Bool? = nil,
                    should_be_a_record: Swift.Bool? = nil,
                    is_cname_to_github_user_domain: Swift.Bool? = nil,
                    is_cname_to_pages_dot_github_dot_com: Swift.Bool? = nil,
                    is_cname_to_fastly: Swift.Bool? = nil,
                    is_pointed_to_github_pages_ip: Swift.Bool? = nil,
                    is_non_github_pages_ip_present: Swift.Bool? = nil,
                    is_pages_domain: Swift.Bool? = nil,
                    is_served_by_pages: Swift.Bool? = nil,
                    is_valid: Swift.Bool? = nil,
                    reason: Swift.String? = nil,
                    responds_to_https: Swift.Bool? = nil,
                    enforces_https: Swift.Bool? = nil,
                    https_error: Swift.String? = nil,
                    is_https_eligible: Swift.Bool? = nil,
                    caa_error: Swift.String? = nil
                ) {
                    self.host = host
                    self.uri = uri
                    self.nameservers = nameservers
                    self.dns_resolves = dns_resolves
                    self.is_proxied = is_proxied
                    self.is_cloudflare_ip = is_cloudflare_ip
                    self.is_fastly_ip = is_fastly_ip
                    self.is_old_ip_address = is_old_ip_address
                    self.is_a_record = is_a_record
                    self.has_cname_record = has_cname_record
                    self.has_mx_records_present = has_mx_records_present
                    self.is_valid_domain = is_valid_domain
                    self.is_apex_domain = is_apex_domain
                    self.should_be_a_record = should_be_a_record
                    self.is_cname_to_github_user_domain = is_cname_to_github_user_domain
                    self.is_cname_to_pages_dot_github_dot_com = is_cname_to_pages_dot_github_dot_com
                    self.is_cname_to_fastly = is_cname_to_fastly
                    self.is_pointed_to_github_pages_ip = is_pointed_to_github_pages_ip
                    self.is_non_github_pages_ip_present = is_non_github_pages_ip_present
                    self.is_pages_domain = is_pages_domain
                    self.is_served_by_pages = is_served_by_pages
                    self.is_valid = is_valid
                    self.reason = reason
                    self.responds_to_https = responds_to_https
                    self.enforces_https = enforces_https
                    self.https_error = https_error
                    self.is_https_eligible = is_https_eligible
                    self.caa_error = caa_error
                }
                public enum CodingKeys: String, CodingKey {
                    case host
                    case uri
                    case nameservers
                    case dns_resolves
                    case is_proxied
                    case is_cloudflare_ip
                    case is_fastly_ip
                    case is_old_ip_address
                    case is_a_record
                    case has_cname_record
                    case has_mx_records_present
                    case is_valid_domain
                    case is_apex_domain
                    case should_be_a_record
                    case is_cname_to_github_user_domain
                    case is_cname_to_pages_dot_github_dot_com
                    case is_cname_to_fastly
                    case is_pointed_to_github_pages_ip
                    case is_non_github_pages_ip_present
                    case is_pages_domain
                    case is_served_by_pages
                    case is_valid
                    case reason
                    case responds_to_https
                    case enforces_https
                    case https_error
                    case is_https_eligible
                    case caa_error
                }
            }
            /// - Remark: Generated from `#/components/schemas/pages-health-check/alt_domain`.
            public var alt_domain: Components.Schemas.pages_hyphen_health_hyphen_check.alt_domainPayload?
            /// Creates a new `pages_hyphen_health_hyphen_check`.
            ///
            /// - Parameters:
            ///   - domain:
            ///   - alt_domain:
            public init(
                domain: Components.Schemas.pages_hyphen_health_hyphen_check.domainPayload? = nil,
                alt_domain: Components.Schemas.pages_hyphen_health_hyphen_check.alt_domainPayload? = nil
            ) {
                self.domain = domain
                self.alt_domain = alt_domain
            }
            public enum CodingKeys: String, CodingKey {
                case domain
                case alt_domain
            }
        }
        /// Data related to a release.
        ///
        /// - Remark: Generated from `#/components/schemas/release-asset`.
        public struct release_hyphen_asset: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release-asset/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/browser_download_url`.
            public var browser_download_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/node_id`.
            public var node_id: Swift.String
            /// The file name of the asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/label`.
            public var label: Swift.String?
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case uploaded = "uploaded"
                case open = "open"
            }
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            public var state: Components.Schemas.release_hyphen_asset.statePayload
            /// - Remark: Generated from `#/components/schemas/release-asset/content_type`.
            public var content_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/download_count`.
            public var download_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/uploader`.
            public var uploader: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// Creates a new `release_hyphen_asset`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - browser_download_url:
            ///   - id:
            ///   - node_id:
            ///   - name: The file name of the asset.
            ///   - label:
            ///   - state: State of the release asset.
            ///   - content_type:
            ///   - size:
            ///   - download_count:
            ///   - created_at:
            ///   - updated_at:
            ///   - uploader:
            public init(
                url: Swift.String,
                browser_download_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                label: Swift.String? = nil,
                state: Components.Schemas.release_hyphen_asset.statePayload,
                content_type: Swift.String,
                size: Swift.Int,
                download_count: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                uploader: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
            ) {
                self.url = url
                self.browser_download_url = browser_download_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.label = label
                self.state = state
                self.content_type = content_type
                self.size = size
                self.download_count = download_count
                self.created_at = created_at
                self.updated_at = updated_at
                self.uploader = uploader
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case browser_download_url
                case id
                case node_id
                case name
                case label
                case state
                case content_type
                case size
                case download_count
                case created_at
                case updated_at
                case uploader
            }
        }
        /// A release.
        ///
        /// - Remark: Generated from `#/components/schemas/release`.
        public struct release: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/assets_url`.
            public var assets_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/upload_url`.
            public var upload_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/tarball_url`.
            public var tarball_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/zipball_url`.
            public var zipball_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release/node_id`.
            public var node_id: Swift.String
            /// The name of the tag.
            ///
            /// - Remark: Generated from `#/components/schemas/release/tag_name`.
            public var tag_name: Swift.String
            /// Specifies the commitish value that determines where the Git tag is created from.
            ///
            /// - Remark: Generated from `#/components/schemas/release/target_commitish`.
            public var target_commitish: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body`.
            public var body: Swift.String?
            /// true to create a draft (unpublished) release, false to create a published one.
            ///
            /// - Remark: Generated from `#/components/schemas/release/draft`.
            public var draft: Swift.Bool
            /// Whether to identify the release as a prerelease or a full release.
            ///
            /// - Remark: Generated from `#/components/schemas/release/prerelease`.
            public var prerelease: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/release/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release/published_at`.
            public var published_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/release/author`.
            public var author: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/release/assets`.
            public var assets: [Components.Schemas.release_hyphen_asset]
            /// - Remark: Generated from `#/components/schemas/release/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/mentions_count`.
            public var mentions_count: Swift.Int?
            /// The URL of the release discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/release/discussion_url`.
            public var discussion_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `release`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - assets_url:
            ///   - upload_url:
            ///   - tarball_url:
            ///   - zipball_url:
            ///   - id:
            ///   - node_id:
            ///   - tag_name: The name of the tag.
            ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from.
            ///   - name:
            ///   - body:
            ///   - draft: true to create a draft (unpublished) release, false to create a published one.
            ///   - prerelease: Whether to identify the release as a prerelease or a full release.
            ///   - created_at:
            ///   - published_at:
            ///   - author:
            ///   - assets:
            ///   - body_html:
            ///   - body_text:
            ///   - mentions_count:
            ///   - discussion_url: The URL of the release discussion.
            ///   - reactions:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                assets_url: Swift.String,
                upload_url: Swift.String,
                tarball_url: Swift.String? = nil,
                zipball_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                tag_name: Swift.String,
                target_commitish: Swift.String,
                name: Swift.String? = nil,
                body: Swift.String? = nil,
                draft: Swift.Bool,
                prerelease: Swift.Bool,
                created_at: Foundation.Date,
                published_at: Foundation.Date? = nil,
                author: Components.Schemas.simple_hyphen_user,
                assets: [Components.Schemas.release_hyphen_asset],
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                mentions_count: Swift.Int? = nil,
                discussion_url: Swift.String? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.assets_url = assets_url
                self.upload_url = upload_url
                self.tarball_url = tarball_url
                self.zipball_url = zipball_url
                self.id = id
                self.node_id = node_id
                self.tag_name = tag_name
                self.target_commitish = target_commitish
                self.name = name
                self.body = body
                self.draft = draft
                self.prerelease = prerelease
                self.created_at = created_at
                self.published_at = published_at
                self.author = author
                self.assets = assets
                self.body_html = body_html
                self.body_text = body_text
                self.mentions_count = mentions_count
                self.discussion_url = discussion_url
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case assets_url
                case upload_url
                case tarball_url
                case zipball_url
                case id
                case node_id
                case tag_name
                case target_commitish
                case name
                case body
                case draft
                case prerelease
                case created_at
                case published_at
                case author
                case assets
                case body_html
                case body_text
                case mentions_count
                case discussion_url
                case reactions
            }
        }
        /// Generated name and body describing a release
        ///
        /// - Remark: Generated from `#/components/schemas/release-notes-content`.
        public struct release_hyphen_notes_hyphen_content: Codable, Hashable, Sendable {
            /// The generated name of the release
            ///
            /// - Remark: Generated from `#/components/schemas/release-notes-content/name`.
            public var name: Swift.String
            /// The generated body describing the contents of the release supporting markdown formatting
            ///
            /// - Remark: Generated from `#/components/schemas/release-notes-content/body`.
            public var body: Swift.String
            /// Creates a new `release_hyphen_notes_hyphen_content`.
            ///
            /// - Parameters:
            ///   - name: The generated name of the release
            ///   - body: The generated body describing the contents of the release supporting markdown formatting
            public init(
                name: Swift.String,
                body: Swift.String
            ) {
                self.name = name
                self.body = body
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case body
            }
        }
        /// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-ruleset-info`.
        public struct repository_hyphen_rule_hyphen_ruleset_hyphen_info: Codable, Hashable, Sendable {
            /// The type of source for the ruleset that includes this rule.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-ruleset-info/ruleset_source_type`.
            @frozen public enum ruleset_source_typePayload: String, Codable, Hashable, Sendable {
                case Repository = "Repository"
                case Organization = "Organization"
            }
            /// The type of source for the ruleset that includes this rule.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-ruleset-info/ruleset_source_type`.
            public var ruleset_source_type: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info.ruleset_source_typePayload?
            /// The name of the source of the ruleset that includes this rule.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-ruleset-info/ruleset_source`.
            public var ruleset_source: Swift.String?
            /// The ID of the ruleset that includes this rule.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-rule-ruleset-info/ruleset_id`.
            public var ruleset_id: Swift.Int?
            /// Creates a new `repository_hyphen_rule_hyphen_ruleset_hyphen_info`.
            ///
            /// - Parameters:
            ///   - ruleset_source_type: The type of source for the ruleset that includes this rule.
            ///   - ruleset_source: The name of the source of the ruleset that includes this rule.
            ///   - ruleset_id: The ID of the ruleset that includes this rule.
            public init(
                ruleset_source_type: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info.ruleset_source_typePayload? = nil,
                ruleset_source: Swift.String? = nil,
                ruleset_id: Swift.Int? = nil
            ) {
                self.ruleset_source_type = ruleset_source_type
                self.ruleset_source = ruleset_source
                self.ruleset_id = ruleset_id
            }
            public enum CodingKeys: String, CodingKey {
                case ruleset_source_type
                case ruleset_source
                case ruleset_id
            }
        }
        /// A repository rule with ruleset details.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-rule-detailed`.
        @frozen public enum repository_hyphen_rule_hyphen_detailed: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case1/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_creation
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case1/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_creation,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case1`.
            case case1(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case2/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_update
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case2/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_update,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case2`.
            case case2(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case3/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_deletion
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case3/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_deletion,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case3`.
            case case3(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case4/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case4/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_linear_hyphen_history,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case4`.
            case case4(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case4Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case5/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case5/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_merge_hyphen_queue,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case5`.
            case case5(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case5Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case6/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_deployments
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case6/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_deployments,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case6`.
            case case6(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case7/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_signatures
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case7/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_signatures,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case7`.
            case case7(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case7Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case8/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_pull_hyphen_request
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case8/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_pull_hyphen_request,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case8`.
            case case8(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case8Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case9/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case9/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_required_hyphen_status_hyphen_checks,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case9`.
            case case9(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case9Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case10/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case10/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_non_hyphen_fast_hyphen_forward,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case10`.
            case case10(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case10Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case11/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case11/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_message_hyphen_pattern,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case11`.
            case case11(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case11Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case12`.
            public struct Case12Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case12/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case12/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case12Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_commit_hyphen_author_hyphen_email_hyphen_pattern,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case12`.
            case case12(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case12Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case13`.
            public struct Case13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case13/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case13/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case13Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_committer_hyphen_email_hyphen_pattern,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case13`.
            case case13(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case13Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case14/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case14/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_branch_hyphen_name_hyphen_pattern,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case14`.
            case case14(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case14Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case15`.
            public struct Case15Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case15/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case15/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case15Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_tag_hyphen_name_hyphen_pattern,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case15`.
            case case15(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case15Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case16/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_workflows
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case16/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_workflows,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case16`.
            case case16(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case16Payload)
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case17`.
            public struct Case17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case17/value1`.
                public var value1: Components.Schemas.repository_hyphen_rule_hyphen_code_hyphen_scanning
                /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case17/value2`.
                public var value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                /// Creates a new `Case17Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.repository_hyphen_rule_hyphen_code_hyphen_scanning,
                    value2: Components.Schemas.repository_hyphen_rule_hyphen_ruleset_hyphen_info
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-rule-detailed/case17`.
            case case17(Components.Schemas.repository_hyphen_rule_hyphen_detailed.Case17Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case15(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                case let .case12(value):
                    try value.encode(to: encoder)
                case let .case13(value):
                    try value.encode(to: encoder)
                case let .case14(value):
                    try value.encode(to: encoder)
                case let .case15(value):
                    try value.encode(to: encoder)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Code Frequency Stat
        ///
        /// - Remark: Generated from `#/components/schemas/code-frequency-stat`.
        public typealias code_hyphen_frequency_hyphen_stat = [Swift.Int]
        /// Commit Activity
        ///
        /// - Remark: Generated from `#/components/schemas/commit-activity`.
        public struct commit_hyphen_activity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-activity/days`.
            public var days: [Swift.Int]
            /// - Remark: Generated from `#/components/schemas/commit-activity/total`.
            public var total: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-activity/week`.
            public var week: Swift.Int
            /// Creates a new `commit_hyphen_activity`.
            ///
            /// - Parameters:
            ///   - days:
            ///   - total:
            ///   - week:
            public init(
                days: [Swift.Int],
                total: Swift.Int,
                week: Swift.Int
            ) {
                self.days = days
                self.total = total
                self.week = week
            }
            public enum CodingKeys: String, CodingKey {
                case days
                case total
                case week
            }
        }
        /// Contributor Activity
        ///
        /// - Remark: Generated from `#/components/schemas/contributor-activity`.
        public struct contributor_hyphen_activity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/contributor-activity/author`.
            public var author: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/contributor-activity/total`.
            public var total: Swift.Int
            /// - Remark: Generated from `#/components/schemas/contributor-activity/weeksPayload`.
            public struct weeksPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/contributor-activity/weeksPayload/w`.
                public var w: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/contributor-activity/weeksPayload/a`.
                public var a: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/contributor-activity/weeksPayload/d`.
                public var d: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/contributor-activity/weeksPayload/c`.
                public var c: Swift.Int?
                /// Creates a new `weeksPayloadPayload`.
                ///
                /// - Parameters:
                ///   - w:
                ///   - a:
                ///   - d:
                ///   - c:
                public init(
                    w: Swift.Int? = nil,
                    a: Swift.Int? = nil,
                    d: Swift.Int? = nil,
                    c: Swift.Int? = nil
                ) {
                    self.w = w
                    self.a = a
                    self.d = d
                    self.c = c
                }
                public enum CodingKeys: String, CodingKey {
                    case w
                    case a
                    case d
                    case c
                }
            }
            /// - Remark: Generated from `#/components/schemas/contributor-activity/weeks`.
            public typealias weeksPayload = [Components.Schemas.contributor_hyphen_activity.weeksPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/contributor-activity/weeks`.
            public var weeks: Components.Schemas.contributor_hyphen_activity.weeksPayload
            /// Creates a new `contributor_hyphen_activity`.
            ///
            /// - Parameters:
            ///   - author:
            ///   - total:
            ///   - weeks:
            public init(
                author: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                total: Swift.Int,
                weeks: Components.Schemas.contributor_hyphen_activity.weeksPayload
            ) {
                self.author = author
                self.total = total
                self.weeks = weeks
            }
            public enum CodingKeys: String, CodingKey {
                case author
                case total
                case weeks
            }
        }
        /// - Remark: Generated from `#/components/schemas/participation-stats`.
        public struct participation_hyphen_stats: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/participation-stats/all`.
            public var all: [Swift.Int]
            /// - Remark: Generated from `#/components/schemas/participation-stats/owner`.
            public var owner: [Swift.Int]
            /// Creates a new `participation_hyphen_stats`.
            ///
            /// - Parameters:
            ///   - all:
            ///   - owner:
            public init(
                all: [Swift.Int],
                owner: [Swift.Int]
            ) {
                self.all = all
                self.owner = owner
            }
            public enum CodingKeys: String, CodingKey {
                case all
                case owner
            }
        }
        /// Tag
        ///
        /// - Remark: Generated from `#/components/schemas/tag`.
        public struct tag: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/tag/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            public struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/tag/commit/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/tag/commit/url`.
                public var url: Swift.String
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                public init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            public var commit: Components.Schemas.tag.commitPayload
            /// - Remark: Generated from `#/components/schemas/tag/zipball_url`.
            public var zipball_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/tarball_url`.
            public var tarball_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/node_id`.
            public var node_id: Swift.String
            /// Creates a new `tag`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - commit:
            ///   - zipball_url:
            ///   - tarball_url:
            ///   - node_id:
            public init(
                name: Swift.String,
                commit: Components.Schemas.tag.commitPayload,
                zipball_url: Swift.String,
                tarball_url: Swift.String,
                node_id: Swift.String
            ) {
                self.name = name
                self.commit = commit
                self.zipball_url = zipball_url
                self.tarball_url = tarball_url
                self.node_id = node_id
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case commit
                case zipball_url
                case tarball_url
                case node_id
            }
        }
        /// Tag protection
        ///
        /// - Remark: Generated from `#/components/schemas/tag-protection`.
        public struct tag_hyphen_protection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/tag-protection/id`.
            public var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/tag-protection/created_at`.
            public var created_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/tag-protection/updated_at`.
            public var updated_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/tag-protection/enabled`.
            public var enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/tag-protection/pattern`.
            public var pattern: Swift.String
            /// Creates a new `tag_hyphen_protection`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - created_at:
            ///   - updated_at:
            ///   - enabled:
            ///   - pattern:
            public init(
                id: Swift.Int? = nil,
                created_at: Swift.String? = nil,
                updated_at: Swift.String? = nil,
                enabled: Swift.Bool? = nil,
                pattern: Swift.String
            ) {
                self.id = id
                self.created_at = created_at
                self.updated_at = updated_at
                self.enabled = enabled
                self.pattern = pattern
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case updated_at
                case enabled
                case pattern
            }
        }
        /// A topic aggregates entities that are related to a subject.
        ///
        /// - Remark: Generated from `#/components/schemas/topic`.
        public struct topic: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/topic/names`.
            public var names: [Swift.String]
            /// Creates a new `topic`.
            ///
            /// - Parameters:
            ///   - names:
            public init(names: [Swift.String]) {
                self.names = names
            }
            public enum CodingKeys: String, CodingKey {
                case names
            }
        }
        /// - Remark: Generated from `#/components/schemas/traffic`.
        public struct traffic: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/traffic/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/traffic/uniques`.
            public var uniques: Swift.Int
            /// - Remark: Generated from `#/components/schemas/traffic/count`.
            public var count: Swift.Int
            /// Creates a new `traffic`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - uniques:
            ///   - count:
            public init(
                timestamp: Foundation.Date,
                uniques: Swift.Int,
                count: Swift.Int
            ) {
                self.timestamp = timestamp
                self.uniques = uniques
                self.count = count
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case uniques
                case count
            }
        }
        /// Clone Traffic
        ///
        /// - Remark: Generated from `#/components/schemas/clone-traffic`.
        public struct clone_hyphen_traffic: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/clone-traffic/count`.
            public var count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/clone-traffic/uniques`.
            public var uniques: Swift.Int
            /// - Remark: Generated from `#/components/schemas/clone-traffic/clones`.
            public var clones: [Components.Schemas.traffic]
            /// Creates a new `clone_hyphen_traffic`.
            ///
            /// - Parameters:
            ///   - count:
            ///   - uniques:
            ///   - clones:
            public init(
                count: Swift.Int,
                uniques: Swift.Int,
                clones: [Components.Schemas.traffic]
            ) {
                self.count = count
                self.uniques = uniques
                self.clones = clones
            }
            public enum CodingKeys: String, CodingKey {
                case count
                case uniques
                case clones
            }
        }
        /// Content Traffic
        ///
        /// - Remark: Generated from `#/components/schemas/content-traffic`.
        public struct content_hyphen_traffic: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/content-traffic/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-traffic/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/content-traffic/count`.
            public var count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/content-traffic/uniques`.
            public var uniques: Swift.Int
            /// Creates a new `content_hyphen_traffic`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - title:
            ///   - count:
            ///   - uniques:
            public init(
                path: Swift.String,
                title: Swift.String,
                count: Swift.Int,
                uniques: Swift.Int
            ) {
                self.path = path
                self.title = title
                self.count = count
                self.uniques = uniques
            }
            public enum CodingKeys: String, CodingKey {
                case path
                case title
                case count
                case uniques
            }
        }
        /// Referrer Traffic
        ///
        /// - Remark: Generated from `#/components/schemas/referrer-traffic`.
        public struct referrer_hyphen_traffic: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/referrer-traffic/referrer`.
            public var referrer: Swift.String
            /// - Remark: Generated from `#/components/schemas/referrer-traffic/count`.
            public var count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/referrer-traffic/uniques`.
            public var uniques: Swift.Int
            /// Creates a new `referrer_hyphen_traffic`.
            ///
            /// - Parameters:
            ///   - referrer:
            ///   - count:
            ///   - uniques:
            public init(
                referrer: Swift.String,
                count: Swift.Int,
                uniques: Swift.Int
            ) {
                self.referrer = referrer
                self.count = count
                self.uniques = uniques
            }
            public enum CodingKeys: String, CodingKey {
                case referrer
                case count
                case uniques
            }
        }
        /// View Traffic
        ///
        /// - Remark: Generated from `#/components/schemas/view-traffic`.
        public struct view_hyphen_traffic: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/view-traffic/count`.
            public var count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/view-traffic/uniques`.
            public var uniques: Swift.Int
            /// - Remark: Generated from `#/components/schemas/view-traffic/views`.
            public var views: [Components.Schemas.traffic]
            /// Creates a new `view_hyphen_traffic`.
            ///
            /// - Parameters:
            ///   - count:
            ///   - uniques:
            ///   - views:
            public init(
                count: Swift.Int,
                uniques: Swift.Int,
                views: [Components.Schemas.traffic]
            ) {
                self.count = count
                self.uniques = uniques
                self.views = views
            }
            public enum CodingKeys: String, CodingKey {
                case count
                case uniques
                case views
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        public typealias pagination_hyphen_before = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        public typealias pagination_hyphen_after = Swift.String
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        ///
        /// - Remark: Generated from `#/components/parameters/cursor`.
        public typealias cursor = Swift.String
        /// - Remark: Generated from `#/components/parameters/delivery-id`.
        public typealias delivery_hyphen_id = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The unique identifier of the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-id`.
        public typealias comment_hyphen_id = Swift.Int64
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
        ///
        /// - Remark: Generated from `#/components/parameters/hook-id`.
        public typealias hook_hyphen_id = Swift.Int
        /// The unique identifier of the invitation.
        ///
        /// - Remark: Generated from `#/components/parameters/invitation-id`.
        public typealias invitation_hyphen_id = Swift.Int
        /// A comma-separated list of rule targets to filter by.
        /// If provided, only rulesets that apply to the specified targets will be returned.
        /// For example, `branch,tag,push`.
        ///
        ///
        /// - Remark: Generated from `#/components/parameters/ruleset-targets`.
        public typealias ruleset_hyphen_targets = Swift.String
        /// The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/ref-in-query`.
        public typealias ref_hyphen_in_hyphen_query = Swift.String
        /// The name of the repository to filter on. When specified, only rule evaluations from this repository will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/repository-name-in-query`.
        public typealias repository_hyphen_name_hyphen_in_hyphen_query = Swift.Int
        /// The time period to filter by.
        ///
        /// For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).
        ///
        /// - Remark: Generated from `#/components/parameters/time-period`.
        @frozen public enum time_hyphen_period: String, Codable, Hashable, Sendable {
            case hour = "hour"
            case day = "day"
            case week = "week"
            case month = "month"
        }
        /// The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/actor-name-in-query`.
        public typealias actor_hyphen_name_hyphen_in_hyphen_query = Swift.String
        /// The rule results to filter on. When specified, only suites with this result will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/rule-suite-result`.
        @frozen public enum rule_hyphen_suite_hyphen_result: String, Codable, Hashable, Sendable {
            case pass = "pass"
            case fail = "fail"
            case bypass = "bypass"
            case all = "all"
        }
        /// The unique identifier of the rule suite result.
        /// To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)
        /// for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)
        /// for organizations.
        ///
        /// - Remark: Generated from `#/components/parameters/rule-suite-id`.
        public typealias rule_hyphen_suite_hyphen_id = Swift.Int
        /// The unique identifier of the autolink.
        ///
        /// - Remark: Generated from `#/components/parameters/autolink-id`.
        public typealias autolink_hyphen_id = Swift.Int
        /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
        ///
        /// - Remark: Generated from `#/components/parameters/branch`.
        public typealias branch = Swift.String
        /// The SHA of the commit.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-sha`.
        public typealias commit_hyphen_sha = Swift.String
        /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-ref`.
        public typealias commit_hyphen_ref = Swift.String
        /// deployment_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/deployment-id`.
        public typealias deployment_hyphen_id = Swift.Int
        /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
        ///
        /// - Remark: Generated from `#/components/parameters/environment-name`.
        public typealias environment_hyphen_name = Swift.String
        /// The unique identifier of the branch policy.
        ///
        /// - Remark: Generated from `#/components/parameters/branch-policy-id`.
        public typealias branch_hyphen_policy_hyphen_id = Swift.Int
        /// The unique identifier of the protection rule.
        ///
        /// - Remark: Generated from `#/components/parameters/protection-rule-id`.
        public typealias protection_hyphen_rule_hyphen_id = Swift.Int
        /// The unique identifier of the key.
        ///
        /// - Remark: Generated from `#/components/parameters/key-id`.
        public typealias key_hyphen_id = Swift.Int
        /// The ID of the Pages deployment. You can also give the commit SHA of the deployment.
        ///
        /// - Remark: Generated from `#/components/parameters/pages-deployment-id`.
        @frozen public enum pages_hyphen_deployment_hyphen_id: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/parameters/pages-deployment-id/case1`.
            case case1(Swift.Int)
            /// - Remark: Generated from `#/components/parameters/pages-deployment-id/case2`.
            case case2(Swift.String)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// The unique identifier of the asset.
        ///
        /// - Remark: Generated from `#/components/parameters/asset-id`.
        public typealias asset_hyphen_id = Swift.Int
        /// The unique identifier of the release.
        ///
        /// - Remark: Generated from `#/components/parameters/release-id`.
        public typealias release_hyphen_id = Swift.Int
        /// The unique identifier of the tag protection.
        ///
        /// - Remark: Generated from `#/components/parameters/tag-protection-id`.
        public typealias tag_hyphen_protection_hyphen_id = Swift.Int
        /// The time frame to display results for.
        ///
        /// - Remark: Generated from `#/components/parameters/per`.
        @frozen public enum per: String, Codable, Hashable, Sendable {
            case day = "day"
            case week = "week"
        }
        /// A repository ID. Only return repositories with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo`.
        public typealias since_hyphen_repo = Swift.Int
        /// Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since-repo-date`.
        public typealias since_hyphen_repo_hyphen_date = Foundation.Date
        /// Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/before-repo-date`.
        public typealias before_hyphen_repo_hyphen_date = Foundation.Date
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct validation_failed_simple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error_hyphen_simple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error_hyphen_simple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed_simple.Body) {
                self.body = body
            }
        }
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct accepted: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/accepted/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/accepted/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.accepted.Body
            /// Creates a new `accepted`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.accepted.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
        public struct moved_permanently: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/moved_permanently/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/moved_permanently/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.moved_permanently.Body
            /// Creates a new `moved_permanently`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.moved_permanently.Body) {
                self.body = body
            }
        }
        public struct conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.conflict.Body
            /// Creates a new `conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.conflict.Body) {
                self.body = body
            }
        }
        public struct no_content: Sendable, Hashable {
            /// Creates a new `no_content`.
            public init() {}
        }
        public struct temporary_redirect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/temporary_redirect/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/temporary_redirect/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.temporary_redirect.Body
            /// Creates a new `temporary_redirect`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.temporary_redirect.Body) {
                self.body = body
            }
        }
        public struct found: Sendable, Hashable {
            /// Creates a new `found`.
            public init() {}
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List organization repositories
    ///
    /// Lists repositories for the specified organization.
    ///
    /// > [!NOTE]
    /// > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/repos/get(repos/list-for-org)`.
    public enum repos_sol_list_hyphen_for_hyphen_org {
        public static let id: Swift.String = "repos/list-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case _public = "public"
                    case _private = "private"
                    case forks = "forks"
                    case sources = "sources"
                    case member = "member"
                }
                /// Specifies the types of repositories you want returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/type`.
                public var _type: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query._typePayload?
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case pushed = "pushed"
                    case full_name = "full_name"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/sort`.
                public var sort: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/direction`.
                public var direction: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query.directionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type: Specifies the types of repositories you want returned.
                ///   - sort: The property to sort the results by.
                ///   - direction: The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    _type: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query._typePayload? = nil,
                    sort: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query.sortPayload? = nil,
                    direction: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self._type = _type
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Path,
                query: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_for_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_for_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_for_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/repos/get(repos/list-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an organization repository
    ///
    /// Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/repos/post(repos/create-in-org)`.
    public enum repos_sol_create_hyphen_in_hyphen_org {
        public static let id: Swift.String = "repos/create-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// A short description of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// A URL with more information about the repository.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/homepage`.
                    public var homepage: Swift.String?
                    /// Whether the repository is private.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/private`.
                    public var _private: Swift.Bool?
                    /// The visibility of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case _public = "public"
                        case _private = "private"
                    }
                    /// The visibility of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/visibility`.
                    public var visibility: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.visibilityPayload?
                    /// Either `true` to enable issues for this repository or `false` to disable them.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/has_issues`.
                    public var has_issues: Swift.Bool?
                    /// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/has_projects`.
                    public var has_projects: Swift.Bool?
                    /// Either `true` to enable the wiki for this repository or `false` to disable it.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/has_wiki`.
                    public var has_wiki: Swift.Bool?
                    /// Whether downloads are enabled.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/has_downloads`.
                    public var has_downloads: Swift.Bool?
                    /// Either `true` to make this repo available as a template repository or `false` to prevent it.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/is_template`.
                    public var is_template: Swift.Bool?
                    /// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/team_id`.
                    public var team_id: Swift.Int?
                    /// Pass `true` to create an initial commit with empty README.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/auto_init`.
                    public var auto_init: Swift.Bool?
                    /// Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/gitignore_template`.
                    public var gitignore_template: Swift.String?
                    /// Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/license_template`.
                    public var license_template: Swift.String?
                    /// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/allow_squash_merge`.
                    public var allow_squash_merge: Swift.Bool?
                    /// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/allow_merge_commit`.
                    public var allow_merge_commit: Swift.Bool?
                    /// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/allow_rebase_merge`.
                    public var allow_rebase_merge: Swift.Bool?
                    /// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/allow_auto_merge`.
                    public var allow_auto_merge: Swift.Bool?
                    /// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/delete_branch_on_merge`.
                    public var delete_branch_on_merge: Swift.Bool?
                    /// Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/use_squash_pr_title_as_default`.
                    @available(*, deprecated)
                    public var use_squash_pr_title_as_default: Swift.Bool?
                    /// Required when using `squash_merge_commit_message`.
                    ///
                    /// The default value for a squash merge commit title:
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/squash_merge_commit_title`.
                    @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                        case PR_TITLE = "PR_TITLE"
                        case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
                    }
                    /// Required when using `squash_merge_commit_message`.
                    ///
                    /// The default value for a squash merge commit title:
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/squash_merge_commit_title`.
                    public var squash_merge_commit_title: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.squash_merge_commit_titlePayload?
                    /// The default value for a squash merge commit message:
                    ///
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/squash_merge_commit_message`.
                    @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                        case PR_BODY = "PR_BODY"
                        case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                        case BLANK = "BLANK"
                    }
                    /// The default value for a squash merge commit message:
                    ///
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/squash_merge_commit_message`.
                    public var squash_merge_commit_message: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.squash_merge_commit_messagePayload?
                    /// Required when using `merge_commit_message`.
                    ///
                    /// The default value for a merge commit title.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/merge_commit_title`.
                    @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                        case PR_TITLE = "PR_TITLE"
                        case MERGE_MESSAGE = "MERGE_MESSAGE"
                    }
                    /// Required when using `merge_commit_message`.
                    ///
                    /// The default value for a merge commit title.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/merge_commit_title`.
                    public var merge_commit_title: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.merge_commit_titlePayload?
                    /// The default value for a merge commit message.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/merge_commit_message`.
                    @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                        case PR_BODY = "PR_BODY"
                        case PR_TITLE = "PR_TITLE"
                        case BLANK = "BLANK"
                    }
                    /// The default value for a merge commit message.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/merge_commit_message`.
                    public var merge_commit_message: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.merge_commit_messagePayload?
                    /// The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/custom_properties`.
                    public struct custom_propertiesPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `custom_propertiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/json/custom_properties`.
                    public var custom_properties: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.custom_propertiesPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the repository.
                    ///   - description: A short description of the repository.
                    ///   - homepage: A URL with more information about the repository.
                    ///   - _private: Whether the repository is private.
                    ///   - visibility: The visibility of the repository.
                    ///   - has_issues: Either `true` to enable issues for this repository or `false` to disable them.
                    ///   - has_projects: Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
                    ///   - has_wiki: Either `true` to enable the wiki for this repository or `false` to disable it.
                    ///   - has_downloads: Whether downloads are enabled.
                    ///   - is_template: Either `true` to make this repo available as a template repository or `false` to prevent it.
                    ///   - team_id: The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
                    ///   - auto_init: Pass `true` to create an initial commit with empty README.
                    ///   - gitignore_template: Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
                    ///   - license_template: Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
                    ///   - allow_squash_merge: Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
                    ///   - allow_merge_commit: Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
                    ///   - allow_rebase_merge: Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
                    ///   - allow_auto_merge: Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
                    ///   - delete_branch_on_merge: Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
                    ///   - use_squash_pr_title_as_default: Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
                    ///   - squash_merge_commit_title: Required when using `squash_merge_commit_message`.
                    ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                    ///   - merge_commit_title: Required when using `merge_commit_message`.
                    ///   - merge_commit_message: The default value for a merge commit message.
                    ///   - custom_properties: The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
                    public init(
                        name: Swift.String,
                        description: Swift.String? = nil,
                        homepage: Swift.String? = nil,
                        _private: Swift.Bool? = nil,
                        visibility: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.visibilityPayload? = nil,
                        has_issues: Swift.Bool? = nil,
                        has_projects: Swift.Bool? = nil,
                        has_wiki: Swift.Bool? = nil,
                        has_downloads: Swift.Bool? = nil,
                        is_template: Swift.Bool? = nil,
                        team_id: Swift.Int? = nil,
                        auto_init: Swift.Bool? = nil,
                        gitignore_template: Swift.String? = nil,
                        license_template: Swift.String? = nil,
                        allow_squash_merge: Swift.Bool? = nil,
                        allow_merge_commit: Swift.Bool? = nil,
                        allow_rebase_merge: Swift.Bool? = nil,
                        allow_auto_merge: Swift.Bool? = nil,
                        delete_branch_on_merge: Swift.Bool? = nil,
                        use_squash_pr_title_as_default: Swift.Bool? = nil,
                        squash_merge_commit_title: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.squash_merge_commit_titlePayload? = nil,
                        squash_merge_commit_message: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.squash_merge_commit_messagePayload? = nil,
                        merge_commit_title: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.merge_commit_titlePayload? = nil,
                        merge_commit_message: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.merge_commit_messagePayload? = nil,
                        custom_properties: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload.custom_propertiesPayload? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.homepage = homepage
                        self._private = _private
                        self.visibility = visibility
                        self.has_issues = has_issues
                        self.has_projects = has_projects
                        self.has_wiki = has_wiki
                        self.has_downloads = has_downloads
                        self.is_template = is_template
                        self.team_id = team_id
                        self.auto_init = auto_init
                        self.gitignore_template = gitignore_template
                        self.license_template = license_template
                        self.allow_squash_merge = allow_squash_merge
                        self.allow_merge_commit = allow_merge_commit
                        self.allow_rebase_merge = allow_rebase_merge
                        self.allow_auto_merge = allow_auto_merge
                        self.delete_branch_on_merge = delete_branch_on_merge
                        self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                        self.squash_merge_commit_title = squash_merge_commit_title
                        self.squash_merge_commit_message = squash_merge_commit_message
                        self.merge_commit_title = merge_commit_title
                        self.merge_commit_message = merge_commit_message
                        self.custom_properties = custom_properties
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case homepage
                        case _private = "private"
                        case visibility
                        case has_issues
                        case has_projects
                        case has_wiki
                        case has_downloads
                        case is_template
                        case team_id
                        case auto_init
                        case gitignore_template
                        case license_template
                        case allow_squash_merge
                        case allow_merge_commit
                        case allow_rebase_merge
                        case allow_auto_merge
                        case delete_branch_on_merge
                        case use_squash_pr_title_as_default
                        case squash_merge_commit_title
                        case squash_merge_commit_message
                        case merge_commit_title
                        case merge_commit_message
                        case custom_properties
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_in_hyphen_org.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_in_hyphen_org.Output.Created.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/repos/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_in_hyphen_org.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_in_hyphen_org.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_in_hyphen_org.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/repos/post(repos/create-in-org)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_in_hyphen_org.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_in_hyphen_org.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/repos/post(repos/create-in-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/repos/post(repos/create-in-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all organization repository rulesets
    ///
    /// Get all the repository rulesets for an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/get(repos/get-org-rulesets)`.
    public enum repos_sol_get_hyphen_org_hyphen_rulesets {
        public static let id: Swift.String = "repos/get-org-rulesets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// A comma-separated list of rule targets to filter by.
                /// If provided, only rulesets that apply to the specified targets will be returned.
                /// For example, `branch,tag,push`.
                ///
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/query/targets`.
                public var targets: Components.Parameters.ruleset_hyphen_targets?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - targets: A comma-separated list of rule targets to filter by.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    targets: Components.Parameters.ruleset_hyphen_targets? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.targets = targets
                }
            }
            public var query: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_rulesets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_rulesets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Path,
                query: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository_hyphen_ruleset])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository_hyphen_ruleset] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/get(repos/get-org-rulesets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_org_hyphen_rulesets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/get(repos/get-org-rulesets)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/get(repos/get-org-rulesets)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an organization repository ruleset
    ///
    /// Create a repository ruleset for an organization.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/rulesets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/post(repos/create-org-ruleset)`.
    public enum repos_sol_create_hyphen_org_hyphen_ruleset {
        public static let id: Swift.String = "repos/create-org-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_org_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_org_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json/target`.
                    @frozen public enum targetPayload: String, Codable, Hashable, Sendable {
                        case branch = "branch"
                        case tag = "tag"
                        case push = "push"
                    }
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json/target`.
                    public var target: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Body.jsonPayload.targetPayload?
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json/enforcement`.
                    public var enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement
                    /// The actors that can bypass the rules in this ruleset
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json/bypass_actors`.
                    public var bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]?
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json/conditions`.
                    public var conditions: Components.Schemas.org_hyphen_ruleset_hyphen_conditions?
                    /// An array of rules within the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/json/rules`.
                    public var rules: [Components.Schemas.repository_hyphen_rule]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the ruleset.
                    ///   - target: The target of the ruleset
                    ///   - enforcement:
                    ///   - bypass_actors: The actors that can bypass the rules in this ruleset
                    ///   - conditions:
                    ///   - rules: An array of rules within the ruleset.
                    public init(
                        name: Swift.String,
                        target: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Body.jsonPayload.targetPayload? = nil,
                        enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement,
                        bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]? = nil,
                        conditions: Components.Schemas.org_hyphen_ruleset_hyphen_conditions? = nil,
                        rules: [Components.Schemas.repository_hyphen_rule]? = nil
                    ) {
                        self.name = name
                        self.target = target
                        self.enforcement = enforcement
                        self.bypass_actors = bypass_actors
                        self.conditions = conditions
                        self.rules = rules
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case target
                        case enforcement
                        case bypass_actors
                        case conditions
                        case rules
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Path,
                headers: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_ruleset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_ruleset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/post(repos/create-org-ruleset)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_org_hyphen_ruleset.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/post(repos/create-org-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/post(repos/create-org-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization rule suites
    ///
    /// Lists suites of rule evaluations at the organization level.
    /// For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/rule-suites`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/get(repos/get-org-rule-suites)`.
    public enum repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites {
        public static let id: Swift.String = "repos/get-org-rule-suites"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query/ref`.
                public var ref: Components.Parameters.ref_hyphen_in_hyphen_query?
                /// The name of the repository to filter on. When specified, only rule evaluations from this repository will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query/repository_name`.
                public var repository_name: Components.Parameters.repository_hyphen_name_hyphen_in_hyphen_query?
                /// - Remark: Generated from `#/components/parameters/time-period`.
                @frozen public enum time_hyphen_period: String, Codable, Hashable, Sendable {
                    case hour = "hour"
                    case day = "day"
                    case week = "week"
                    case month = "month"
                }
                /// The time period to filter by.
                ///
                /// For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query/time_period`.
                public var time_period: Components.Parameters.time_hyphen_period?
                /// The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query/actor_name`.
                public var actor_name: Components.Parameters.actor_hyphen_name_hyphen_in_hyphen_query?
                /// - Remark: Generated from `#/components/parameters/rule-suite-result`.
                @frozen public enum rule_hyphen_suite_hyphen_result: String, Codable, Hashable, Sendable {
                    case pass = "pass"
                    case fail = "fail"
                    case bypass = "bypass"
                    case all = "all"
                }
                /// The rule results to filter on. When specified, only suites with this result will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query/rule_suite_result`.
                public var rule_suite_result: Components.Parameters.rule_hyphen_suite_hyphen_result?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.
                ///   - repository_name: The name of the repository to filter on. When specified, only rule evaluations from this repository will be returned.
                ///   - time_period: The time period to filter by.
                ///   - actor_name: The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.
                ///   - rule_suite_result: The rule results to filter on. When specified, only suites with this result will be returned.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    ref: Components.Parameters.ref_hyphen_in_hyphen_query? = nil,
                    repository_name: Components.Parameters.repository_hyphen_name_hyphen_in_hyphen_query? = nil,
                    time_period: Components.Parameters.time_hyphen_period? = nil,
                    actor_name: Components.Parameters.actor_hyphen_name_hyphen_in_hyphen_query? = nil,
                    rule_suite_result: Components.Parameters.rule_hyphen_suite_hyphen_result? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.ref = ref
                    self.repository_name = repository_name
                    self.time_period = time_period
                    self.actor_name = actor_name
                    self.rule_suite_result = rule_suite_result
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Path,
                query: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.rule_hyphen_suites)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.rule_hyphen_suites {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/get(repos/get-org-rule-suites)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suites.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/get(repos/get-org-rule-suites)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/get(repos/get-org-rule-suites)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization rule suite
    ///
    /// Gets information about a suite of rule evaluations from within an organization.
    /// For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-org-rule-suite)`.
    public enum repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite {
        public static let id: Swift.String = "repos/get-org-rule-suite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/{rule_suite_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/{rule_suite_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the rule suite result.
                /// To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)
                /// for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)
                /// for organizations.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/{rule_suite_id}/GET/path/rule_suite_id`.
                public var rule_suite_id: Components.Parameters.rule_hyphen_suite_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - rule_suite_id: The unique identifier of the rule suite result.
                public init(
                    org: Components.Parameters.org,
                    rule_suite_id: Components.Parameters.rule_hyphen_suite_hyphen_id
                ) {
                    self.org = org
                    self.rule_suite_id = rule_suite_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/{rule_suite_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input.Path,
                headers: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/{rule_suite_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/rule-suites/{rule_suite_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.rule_hyphen_suite)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.rule_hyphen_suite {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-org-rule-suite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_org_hyphen_rule_hyphen_suite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-org-rule-suite)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-org-rule-suite)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization repository ruleset
    ///
    /// Get a repository ruleset for an organization.
    ///
    /// **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
    /// making the API request has write access to the ruleset.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/get(repos/get-org-ruleset)`.
    public enum repos_sol_get_hyphen_org_hyphen_ruleset {
        public static let id: Swift.String = "repos/get-org-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The ID of the ruleset.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/GET/path/ruleset_id`.
                public var ruleset_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - ruleset_id: The ID of the ruleset.
                public init(
                    org: Components.Parameters.org,
                    ruleset_id: Swift.Int
                ) {
                    self.org = org
                    self.ruleset_id = ruleset_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_org_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input.Path,
                headers: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_ruleset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_ruleset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/get(repos/get-org-ruleset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_org_hyphen_ruleset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/get(repos/get-org-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/get(repos/get-org-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an organization repository ruleset
    ///
    /// Update a ruleset for an organization.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/put(repos/update-org-ruleset)`.
    public enum repos_sol_update_hyphen_org_hyphen_ruleset {
        public static let id: Swift.String = "repos/update-org-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The ID of the ruleset.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/path/ruleset_id`.
                public var ruleset_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - ruleset_id: The ID of the ruleset.
                public init(
                    org: Components.Parameters.org,
                    ruleset_id: Swift.Int
                ) {
                    self.org = org
                    self.ruleset_id = ruleset_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_org_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_org_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json/target`.
                    @frozen public enum targetPayload: String, Codable, Hashable, Sendable {
                        case branch = "branch"
                        case tag = "tag"
                        case push = "push"
                    }
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json/target`.
                    public var target: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Body.jsonPayload.targetPayload?
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json/enforcement`.
                    public var enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement?
                    /// The actors that can bypass the rules in this ruleset
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json/bypass_actors`.
                    public var bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]?
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json/conditions`.
                    public var conditions: Components.Schemas.org_hyphen_ruleset_hyphen_conditions?
                    /// An array of rules within the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/json/rules`.
                    public var rules: [Components.Schemas.repository_hyphen_rule]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the ruleset.
                    ///   - target: The target of the ruleset
                    ///   - enforcement:
                    ///   - bypass_actors: The actors that can bypass the rules in this ruleset
                    ///   - conditions:
                    ///   - rules: An array of rules within the ruleset.
                    public init(
                        name: Swift.String? = nil,
                        target: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Body.jsonPayload.targetPayload? = nil,
                        enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement? = nil,
                        bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]? = nil,
                        conditions: Components.Schemas.org_hyphen_ruleset_hyphen_conditions? = nil,
                        rules: [Components.Schemas.repository_hyphen_rule]? = nil
                    ) {
                        self.name = name
                        self.target = target
                        self.enforcement = enforcement
                        self.bypass_actors = bypass_actors
                        self.conditions = conditions
                        self.rules = rules
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case target
                        case enforcement
                        case bypass_actors
                        case conditions
                        case rules
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Path,
                headers: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_ruleset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_ruleset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/put(repos/update-org-ruleset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_org_hyphen_ruleset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/put(repos/update-org-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/put(repos/update-org-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an organization repository ruleset
    ///
    /// Delete a ruleset for an organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/delete(repos/delete-org-ruleset)`.
    public enum repos_sol_delete_hyphen_org_hyphen_ruleset {
        public static let id: Swift.String = "repos/delete-org-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The ID of the ruleset.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/DELETE/path/ruleset_id`.
                public var ruleset_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - ruleset_id: The ID of the ruleset.
                public init(
                    org: Components.Parameters.org,
                    ruleset_id: Swift.Int
                ) {
                    self.org = org
                    self.ruleset_id = ruleset_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/rulesets/{ruleset_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/delete(repos/delete-org-ruleset)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_org_hyphen_ruleset.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/delete(repos/delete-org-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/rulesets/{ruleset_id}/delete(repos/delete-org-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository
    ///
    /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    ///
    /// > [!NOTE]
    /// > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)`.
    public enum repos_sol_get {
        public static let id: Swift.String = "repos/get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get.Input.Path,
                headers: Operations.repos_sol_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/get(repos/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a repository
    ///
    /// **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)`.
    public enum repos_sol_update {
        public static let id: Swift.String = "repos/update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_update.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// A short description of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// A URL with more information about the repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/homepage`.
                    public var homepage: Swift.String?
                    /// Either `true` to make the repository private or `false` to make it public. Default: `false`.  
                    /// **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/private`.
                    public var _private: Swift.Bool?
                    /// The visibility of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case _public = "public"
                        case _private = "private"
                    }
                    /// The visibility of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/visibility`.
                    public var visibility: Operations.repos_sol_update.Input.Body.jsonPayload.visibilityPayload?
                    /// Specify which security and analysis features to enable or disable for the repository.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
                    /// `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis`.
                    public struct security_and_analysisPayload: Codable, Hashable, Sendable {
                        /// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/advanced_security`.
                        public struct advanced_securityPayload: Codable, Hashable, Sendable {
                            /// Can be `enabled` or `disabled`.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/advanced_security/status`.
                            public var status: Swift.String?
                            /// Creates a new `advanced_securityPayload`.
                            ///
                            /// - Parameters:
                            ///   - status: Can be `enabled` or `disabled`.
                            public init(status: Swift.String? = nil) {
                                self.status = status
                            }
                            public enum CodingKeys: String, CodingKey {
                                case status
                            }
                        }
                        /// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/advanced_security`.
                        public var advanced_security: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.advanced_securityPayload?
                        /// Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning`.
                        public struct secret_scanningPayload: Codable, Hashable, Sendable {
                            /// Can be `enabled` or `disabled`.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning/status`.
                            public var status: Swift.String?
                            /// Creates a new `secret_scanningPayload`.
                            ///
                            /// - Parameters:
                            ///   - status: Can be `enabled` or `disabled`.
                            public init(status: Swift.String? = nil) {
                                self.status = status
                            }
                            public enum CodingKeys: String, CodingKey {
                                case status
                            }
                        }
                        /// Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning`.
                        public var secret_scanning: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanningPayload?
                        /// Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_push_protection`.
                        public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                            /// Can be `enabled` or `disabled`.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_push_protection/status`.
                            public var status: Swift.String?
                            /// Creates a new `secret_scanning_push_protectionPayload`.
                            ///
                            /// - Parameters:
                            ///   - status: Can be `enabled` or `disabled`.
                            public init(status: Swift.String? = nil) {
                                self.status = status
                            }
                            public enum CodingKeys: String, CodingKey {
                                case status
                            }
                        }
                        /// Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_push_protection`.
                        public var secret_scanning_push_protection: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanning_push_protectionPayload?
                        /// Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_ai_detection`.
                        public struct secret_scanning_ai_detectionPayload: Codable, Hashable, Sendable {
                            /// Can be `enabled` or `disabled`.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_ai_detection/status`.
                            public var status: Swift.String?
                            /// Creates a new `secret_scanning_ai_detectionPayload`.
                            ///
                            /// - Parameters:
                            ///   - status: Can be `enabled` or `disabled`.
                            public init(status: Swift.String? = nil) {
                                self.status = status
                            }
                            public enum CodingKeys: String, CodingKey {
                                case status
                            }
                        }
                        /// Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_ai_detection`.
                        public var secret_scanning_ai_detection: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanning_ai_detectionPayload?
                        /// Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_non_provider_patterns`.
                        public struct secret_scanning_non_provider_patternsPayload: Codable, Hashable, Sendable {
                            /// Can be `enabled` or `disabled`.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_non_provider_patterns/status`.
                            public var status: Swift.String?
                            /// Creates a new `secret_scanning_non_provider_patternsPayload`.
                            ///
                            /// - Parameters:
                            ///   - status: Can be `enabled` or `disabled`.
                            public init(status: Swift.String? = nil) {
                                self.status = status
                            }
                            public enum CodingKeys: String, CodingKey {
                                case status
                            }
                        }
                        /// Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis/secret_scanning_non_provider_patterns`.
                        public var secret_scanning_non_provider_patterns: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanning_non_provider_patternsPayload?
                        /// Creates a new `security_and_analysisPayload`.
                        ///
                        /// - Parameters:
                        ///   - advanced_security: Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
                        ///   - secret_scanning: Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
                        ///   - secret_scanning_push_protection: Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
                        ///   - secret_scanning_ai_detection: Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)."
                        ///   - secret_scanning_non_provider_patterns: Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
                        public init(
                            advanced_security: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.advanced_securityPayload? = nil,
                            secret_scanning: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanningPayload? = nil,
                            secret_scanning_push_protection: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanning_push_protectionPayload? = nil,
                            secret_scanning_ai_detection: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanning_ai_detectionPayload? = nil,
                            secret_scanning_non_provider_patterns: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload.secret_scanning_non_provider_patternsPayload? = nil
                        ) {
                            self.advanced_security = advanced_security
                            self.secret_scanning = secret_scanning
                            self.secret_scanning_push_protection = secret_scanning_push_protection
                            self.secret_scanning_ai_detection = secret_scanning_ai_detection
                            self.secret_scanning_non_provider_patterns = secret_scanning_non_provider_patterns
                        }
                        public enum CodingKeys: String, CodingKey {
                            case advanced_security
                            case secret_scanning
                            case secret_scanning_push_protection
                            case secret_scanning_ai_detection
                            case secret_scanning_non_provider_patterns
                        }
                    }
                    /// Specify which security and analysis features to enable or disable for the repository.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
                    /// `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/security_and_analysis`.
                    public var security_and_analysis: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload?
                    /// Either `true` to enable issues for this repository or `false` to disable them.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/has_issues`.
                    public var has_issues: Swift.Bool?
                    /// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/has_projects`.
                    public var has_projects: Swift.Bool?
                    /// Either `true` to enable the wiki for this repository or `false` to disable it.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/has_wiki`.
                    public var has_wiki: Swift.Bool?
                    /// Either `true` to make this repo available as a template repository or `false` to prevent it.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/is_template`.
                    public var is_template: Swift.Bool?
                    /// Updates the default branch for this repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/default_branch`.
                    public var default_branch: Swift.String?
                    /// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/allow_squash_merge`.
                    public var allow_squash_merge: Swift.Bool?
                    /// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/allow_merge_commit`.
                    public var allow_merge_commit: Swift.Bool?
                    /// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/allow_rebase_merge`.
                    public var allow_rebase_merge: Swift.Bool?
                    /// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/allow_auto_merge`.
                    public var allow_auto_merge: Swift.Bool?
                    /// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/delete_branch_on_merge`.
                    public var delete_branch_on_merge: Swift.Bool?
                    /// Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/allow_update_branch`.
                    public var allow_update_branch: Swift.Bool?
                    /// Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/use_squash_pr_title_as_default`.
                    @available(*, deprecated)
                    public var use_squash_pr_title_as_default: Swift.Bool?
                    /// Required when using `squash_merge_commit_message`.
                    ///
                    /// The default value for a squash merge commit title:
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/squash_merge_commit_title`.
                    @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                        case PR_TITLE = "PR_TITLE"
                        case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
                    }
                    /// Required when using `squash_merge_commit_message`.
                    ///
                    /// The default value for a squash merge commit title:
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/squash_merge_commit_title`.
                    public var squash_merge_commit_title: Operations.repos_sol_update.Input.Body.jsonPayload.squash_merge_commit_titlePayload?
                    /// The default value for a squash merge commit message:
                    ///
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/squash_merge_commit_message`.
                    @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                        case PR_BODY = "PR_BODY"
                        case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                        case BLANK = "BLANK"
                    }
                    /// The default value for a squash merge commit message:
                    ///
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/squash_merge_commit_message`.
                    public var squash_merge_commit_message: Operations.repos_sol_update.Input.Body.jsonPayload.squash_merge_commit_messagePayload?
                    /// Required when using `merge_commit_message`.
                    ///
                    /// The default value for a merge commit title.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/merge_commit_title`.
                    @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                        case PR_TITLE = "PR_TITLE"
                        case MERGE_MESSAGE = "MERGE_MESSAGE"
                    }
                    /// Required when using `merge_commit_message`.
                    ///
                    /// The default value for a merge commit title.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/merge_commit_title`.
                    public var merge_commit_title: Operations.repos_sol_update.Input.Body.jsonPayload.merge_commit_titlePayload?
                    /// The default value for a merge commit message.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/merge_commit_message`.
                    @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                        case PR_BODY = "PR_BODY"
                        case PR_TITLE = "PR_TITLE"
                        case BLANK = "BLANK"
                    }
                    /// The default value for a merge commit message.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/merge_commit_message`.
                    public var merge_commit_message: Operations.repos_sol_update.Input.Body.jsonPayload.merge_commit_messagePayload?
                    /// Whether to archive this repository. `false` will unarchive a previously archived repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/archived`.
                    public var archived: Swift.Bool?
                    /// Either `true` to allow private forks, or `false` to prevent private forks.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/allow_forking`.
                    public var allow_forking: Swift.Bool?
                    /// Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/json/web_commit_signoff_required`.
                    public var web_commit_signoff_required: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the repository.
                    ///   - description: A short description of the repository.
                    ///   - homepage: A URL with more information about the repository.
                    ///   - _private: Either `true` to make the repository private or `false` to make it public. Default: `false`.  
                    ///   - visibility: The visibility of the repository.
                    ///   - security_and_analysis: Specify which security and analysis features to enable or disable for the repository.
                    ///   - has_issues: Either `true` to enable issues for this repository or `false` to disable them.
                    ///   - has_projects: Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
                    ///   - has_wiki: Either `true` to enable the wiki for this repository or `false` to disable it.
                    ///   - is_template: Either `true` to make this repo available as a template repository or `false` to prevent it.
                    ///   - default_branch: Updates the default branch for this repository.
                    ///   - allow_squash_merge: Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
                    ///   - allow_merge_commit: Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
                    ///   - allow_rebase_merge: Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
                    ///   - allow_auto_merge: Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
                    ///   - delete_branch_on_merge: Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
                    ///   - allow_update_branch: Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
                    ///   - use_squash_pr_title_as_default: Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
                    ///   - squash_merge_commit_title: Required when using `squash_merge_commit_message`.
                    ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                    ///   - merge_commit_title: Required when using `merge_commit_message`.
                    ///   - merge_commit_message: The default value for a merge commit message.
                    ///   - archived: Whether to archive this repository. `false` will unarchive a previously archived repository.
                    ///   - allow_forking: Either `true` to allow private forks, or `false` to prevent private forks.
                    ///   - web_commit_signoff_required: Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
                    public init(
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        homepage: Swift.String? = nil,
                        _private: Swift.Bool? = nil,
                        visibility: Operations.repos_sol_update.Input.Body.jsonPayload.visibilityPayload? = nil,
                        security_and_analysis: Operations.repos_sol_update.Input.Body.jsonPayload.security_and_analysisPayload? = nil,
                        has_issues: Swift.Bool? = nil,
                        has_projects: Swift.Bool? = nil,
                        has_wiki: Swift.Bool? = nil,
                        is_template: Swift.Bool? = nil,
                        default_branch: Swift.String? = nil,
                        allow_squash_merge: Swift.Bool? = nil,
                        allow_merge_commit: Swift.Bool? = nil,
                        allow_rebase_merge: Swift.Bool? = nil,
                        allow_auto_merge: Swift.Bool? = nil,
                        delete_branch_on_merge: Swift.Bool? = nil,
                        allow_update_branch: Swift.Bool? = nil,
                        use_squash_pr_title_as_default: Swift.Bool? = nil,
                        squash_merge_commit_title: Operations.repos_sol_update.Input.Body.jsonPayload.squash_merge_commit_titlePayload? = nil,
                        squash_merge_commit_message: Operations.repos_sol_update.Input.Body.jsonPayload.squash_merge_commit_messagePayload? = nil,
                        merge_commit_title: Operations.repos_sol_update.Input.Body.jsonPayload.merge_commit_titlePayload? = nil,
                        merge_commit_message: Operations.repos_sol_update.Input.Body.jsonPayload.merge_commit_messagePayload? = nil,
                        archived: Swift.Bool? = nil,
                        allow_forking: Swift.Bool? = nil,
                        web_commit_signoff_required: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.homepage = homepage
                        self._private = _private
                        self.visibility = visibility
                        self.security_and_analysis = security_and_analysis
                        self.has_issues = has_issues
                        self.has_projects = has_projects
                        self.has_wiki = has_wiki
                        self.is_template = is_template
                        self.default_branch = default_branch
                        self.allow_squash_merge = allow_squash_merge
                        self.allow_merge_commit = allow_merge_commit
                        self.allow_rebase_merge = allow_rebase_merge
                        self.allow_auto_merge = allow_auto_merge
                        self.delete_branch_on_merge = delete_branch_on_merge
                        self.allow_update_branch = allow_update_branch
                        self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                        self.squash_merge_commit_title = squash_merge_commit_title
                        self.squash_merge_commit_message = squash_merge_commit_message
                        self.merge_commit_title = merge_commit_title
                        self.merge_commit_message = merge_commit_message
                        self.archived = archived
                        self.allow_forking = allow_forking
                        self.web_commit_signoff_required = web_commit_signoff_required
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case homepage
                        case _private = "private"
                        case visibility
                        case security_and_analysis
                        case has_issues
                        case has_projects
                        case has_wiki
                        case is_template
                        case default_branch
                        case allow_squash_merge
                        case allow_merge_commit
                        case allow_rebase_merge
                        case allow_auto_merge
                        case delete_branch_on_merge
                        case allow_update_branch
                        case use_squash_pr_title_as_default
                        case squash_merge_commit_title
                        case squash_merge_commit_message
                        case merge_commit_title
                        case merge_commit_message
                        case archived
                        case allow_forking
                        case web_commit_signoff_required
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update.Input.Path,
                headers: Operations.repos_sol_update.Input.Headers = .init(),
                body: Operations.repos_sol_update.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Temporary Redirect
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)/responses/307`.
            ///
            /// HTTP response code: `307 temporaryRedirect`.
            case temporaryRedirect(Components.Responses.temporary_redirect)
            /// The associated value of the enum case if `self` is `.temporaryRedirect`.
            ///
            /// - Throws: An error if `self` is not `.temporaryRedirect`.
            /// - SeeAlso: `.temporaryRedirect`.
            public var temporaryRedirect: Components.Responses.temporary_redirect {
                get throws {
                    switch self {
                    case let .temporaryRedirect(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "temporaryRedirect",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/patch(repos/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository
    ///
    /// Deleting a repository requires admin access.
    ///
    /// If an organization owner has configured the organization to prevent members from deleting organization-owned
    /// repositories, you will get a `403 Forbidden` response.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/delete(repos/delete)`.
    public enum repos_sol_delete {
        public static let id: Swift.String = "repos/delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_delete.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete.Input.Path,
                headers: Operations.repos_sol_delete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/delete(repos/delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/responses/403/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/responses/403/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/responses/403/content/json/documentation_url`.
                        public var documentation_url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        public init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/DELETE/responses/403/content/application\/json`.
                    case json(Operations.repos_sol_delete.Output.Forbidden.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_delete.Output.Forbidden.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_delete.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_delete.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/delete(repos/delete)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.repos_sol_delete.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.repos_sol_delete.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Temporary Redirect
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/delete(repos/delete)/responses/307`.
            ///
            /// HTTP response code: `307 temporaryRedirect`.
            case temporaryRedirect(Components.Responses.temporary_redirect)
            /// The associated value of the enum case if `self` is `.temporaryRedirect`.
            ///
            /// - Throws: An error if `self` is not `.temporaryRedirect`.
            /// - SeeAlso: `.temporaryRedirect`.
            public var temporaryRedirect: Components.Responses.temporary_redirect {
                get throws {
                    switch self {
                    case let .temporaryRedirect(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "temporaryRedirect",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/delete(repos/delete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository activities
    ///
    /// Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.
    ///
    /// For more information about viewing repository activity,
    /// see "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/activity`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/activity/get(repos/list-activities)`.
    public enum repos_sol_list_hyphen_activities {
        public static let id: Swift.String = "repos/list-activities"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_activities.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// The Git reference for the activities you want to list.
                ///
                /// The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/ref`.
                public var ref: Swift.String?
                /// The GitHub username to use to filter by the actor who performed the activity.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/actor`.
                public var actor: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/time_period`.
                @frozen public enum time_periodPayload: String, Codable, Hashable, Sendable {
                    case day = "day"
                    case week = "week"
                    case month = "month"
                    case quarter = "quarter"
                    case year = "year"
                }
                /// The time period to filter by.
                ///
                /// For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/time_period`.
                public var time_period: Operations.repos_sol_list_hyphen_activities.Input.Query.time_periodPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/activity_type`.
                @frozen public enum activity_typePayload: String, Codable, Hashable, Sendable {
                    case push = "push"
                    case force_push = "force_push"
                    case branch_creation = "branch_creation"
                    case branch_deletion = "branch_deletion"
                    case pr_merge = "pr_merge"
                    case merge_queue_merge = "merge_queue_merge"
                }
                /// The activity type to filter by.
                ///
                /// For example, you can choose to filter by "force_push", to see all force pushes to the repository.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/query/activity_type`.
                public var activity_type: Operations.repos_sol_list_hyphen_activities.Input.Query.activity_typePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - ref: The Git reference for the activities you want to list.
                ///   - actor: The GitHub username to use to filter by the actor who performed the activity.
                ///   - time_period: The time period to filter by.
                ///   - activity_type: The activity type to filter by.
                public init(
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    ref: Swift.String? = nil,
                    actor: Swift.String? = nil,
                    time_period: Operations.repos_sol_list_hyphen_activities.Input.Query.time_periodPayload? = nil,
                    activity_type: Operations.repos_sol_list_hyphen_activities.Input.Query.activity_typePayload? = nil
                ) {
                    self.direction = direction
                    self.per_page = per_page
                    self.before = before
                    self.after = after
                    self.ref = ref
                    self.actor = actor
                    self.time_period = time_period
                    self.activity_type = activity_type
                }
            }
            public var query: Operations.repos_sol_list_hyphen_activities.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_activities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_activities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_activities.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_activities.Input.Path,
                query: Operations.repos_sol_list_hyphen_activities.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_activities.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_activities.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/activity/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.activity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.activity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_activities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_activities.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_activities.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/activity/get(repos/list-activities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_activities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_activities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/activity/get(repos/list-activities)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an attestation
    ///
    /// Store an artifact attestation and associate it with a repository.
    ///
    /// The authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.
    ///
    /// Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/attestations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/post(repos/create-attestation)`.
    public enum repos_sol_create_hyphen_attestation {
        public static let id: Swift.String = "repos/create-attestation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_attestation.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_attestation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_attestation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_attestation.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The attestation's Sigstore Bundle.
                    /// Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json/bundle`.
                    public struct bundlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json/bundle/mediaType`.
                        public var mediaType: Swift.String?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json/bundle/verificationMaterial`.
                        public struct verificationMaterialPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                            /// Creates a new `verificationMaterialPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json/bundle/verificationMaterial`.
                        public var verificationMaterial: Operations.repos_sol_create_hyphen_attestation.Input.Body.jsonPayload.bundlePayload.verificationMaterialPayload?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json/bundle/dsseEnvelope`.
                        public struct dsseEnvelopePayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                            /// Creates a new `dsseEnvelopePayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json/bundle/dsseEnvelope`.
                        public var dsseEnvelope: Operations.repos_sol_create_hyphen_attestation.Input.Body.jsonPayload.bundlePayload.dsseEnvelopePayload?
                        /// Creates a new `bundlePayload`.
                        ///
                        /// - Parameters:
                        ///   - mediaType:
                        ///   - verificationMaterial:
                        ///   - dsseEnvelope:
                        public init(
                            mediaType: Swift.String? = nil,
                            verificationMaterial: Operations.repos_sol_create_hyphen_attestation.Input.Body.jsonPayload.bundlePayload.verificationMaterialPayload? = nil,
                            dsseEnvelope: Operations.repos_sol_create_hyphen_attestation.Input.Body.jsonPayload.bundlePayload.dsseEnvelopePayload? = nil
                        ) {
                            self.mediaType = mediaType
                            self.verificationMaterial = verificationMaterial
                            self.dsseEnvelope = dsseEnvelope
                        }
                        public enum CodingKeys: String, CodingKey {
                            case mediaType
                            case verificationMaterial
                            case dsseEnvelope
                        }
                    }
                    /// The attestation's Sigstore Bundle.
                    /// Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/json/bundle`.
                    public var bundle: Operations.repos_sol_create_hyphen_attestation.Input.Body.jsonPayload.bundlePayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - bundle: The attestation's Sigstore Bundle.
                    public init(bundle: Operations.repos_sol_create_hyphen_attestation.Input.Body.jsonPayload.bundlePayload) {
                        self.bundle = bundle
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bundle
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_attestation.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_attestation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_attestation.Input.Path,
                headers: Operations.repos_sol_create_hyphen_attestation.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_attestation.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// The ID of the attestation.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/responses/201/content/json/id`.
                        public var id: Swift.Int?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id: The ID of the attestation.
                        public init(id: Swift.Int? = nil) {
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/POST/responses/201/content/application\/json`.
                    case json(Operations.repos_sol_create_hyphen_attestation.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_create_hyphen_attestation.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_attestation.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_attestation.Output.Created.Body) {
                    self.body = body
                }
            }
            /// response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/post(repos/create-attestation)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_attestation.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_attestation.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/post(repos/create-attestation)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/post(repos/create-attestation)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List attestations
    ///
    /// List a collection of artifact attestations with a given subject digest that are associated with a repository.
    ///
    /// The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.
    ///
    /// **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/attestations/{subject_digest}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/{subject_digest}/get(repos/list-attestations)`.
    public enum repos_sol_list_hyphen_attestations {
        public static let id: Swift.String = "repos/list-attestations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/path/subject_digest`.
                public var subject_digest: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - subject_digest: The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    subject_digest: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.subject_digest = subject_digest
                }
            }
            public var path: Operations.repos_sol_list_hyphen_attestations.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil
                ) {
                    self.per_page = per_page
                    self.before = before
                    self.after = after
                }
            }
            public var query: Operations.repos_sol_list_hyphen_attestations.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_attestations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_attestations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_attestations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_attestations.Input.Path,
                query: Operations.repos_sol_list_hyphen_attestations.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_attestations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload`.
                        public struct attestationsPayloadPayload: Codable, Hashable, Sendable {
                            /// The attestation's Sigstore Bundle.
                            /// Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle`.
                            public struct bundlePayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle/mediaType`.
                                public var mediaType: Swift.String?
                                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle/verificationMaterial`.
                                public struct verificationMaterialPayload: Codable, Hashable, Sendable {
                                    /// A container of undocumented properties.
                                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                                    /// Creates a new `verificationMaterialPayload`.
                                    ///
                                    /// - Parameters:
                                    ///   - additionalProperties: A container of undocumented properties.
                                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                                        self.additionalProperties = additionalProperties
                                    }
                                    public init(from decoder: any Decoder) throws {
                                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                                    }
                                    public func encode(to encoder: any Encoder) throws {
                                        try encoder.encodeAdditionalProperties(additionalProperties)
                                    }
                                }
                                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle/verificationMaterial`.
                                public var verificationMaterial: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload.bundlePayload.verificationMaterialPayload?
                                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle/dsseEnvelope`.
                                public struct dsseEnvelopePayload: Codable, Hashable, Sendable {
                                    /// A container of undocumented properties.
                                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                                    /// Creates a new `dsseEnvelopePayload`.
                                    ///
                                    /// - Parameters:
                                    ///   - additionalProperties: A container of undocumented properties.
                                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                                        self.additionalProperties = additionalProperties
                                    }
                                    public init(from decoder: any Decoder) throws {
                                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                                    }
                                    public func encode(to encoder: any Encoder) throws {
                                        try encoder.encodeAdditionalProperties(additionalProperties)
                                    }
                                }
                                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle/dsseEnvelope`.
                                public var dsseEnvelope: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload.bundlePayload.dsseEnvelopePayload?
                                /// Creates a new `bundlePayload`.
                                ///
                                /// - Parameters:
                                ///   - mediaType:
                                ///   - verificationMaterial:
                                ///   - dsseEnvelope:
                                public init(
                                    mediaType: Swift.String? = nil,
                                    verificationMaterial: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload.bundlePayload.verificationMaterialPayload? = nil,
                                    dsseEnvelope: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload.bundlePayload.dsseEnvelopePayload? = nil
                                ) {
                                    self.mediaType = mediaType
                                    self.verificationMaterial = verificationMaterial
                                    self.dsseEnvelope = dsseEnvelope
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case mediaType
                                    case verificationMaterial
                                    case dsseEnvelope
                                }
                            }
                            /// The attestation's Sigstore Bundle.
                            /// Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/bundle`.
                            public var bundle: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload.bundlePayload?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestationsPayload/repository_id`.
                            public var repository_id: Swift.Int?
                            /// Creates a new `attestationsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - bundle: The attestation's Sigstore Bundle.
                            ///   - repository_id:
                            public init(
                                bundle: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload.bundlePayload? = nil,
                                repository_id: Swift.Int? = nil
                            ) {
                                self.bundle = bundle
                                self.repository_id = repository_id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case bundle
                                case repository_id
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestations`.
                        public typealias attestationsPayload = [Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayloadPayload]
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/json/attestations`.
                        public var attestations: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - attestations:
                        public init(attestations: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload.attestationsPayload? = nil) {
                            self.attestations = attestations
                        }
                        public enum CodingKeys: String, CodingKey {
                            case attestations
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/attestations/{subject_digest}/GET/responses/200/content/application\/json`.
                    case json(Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_attestations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/attestations/{subject_digest}/get(repos/list-attestations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_attestations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_attestations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all autolinks of a repository
    ///
    /// Gets all autolinks that are configured for a repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/autolinks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/get(repos/list-autolinks)`.
    public enum repos_sol_list_hyphen_autolinks {
        public static let id: Swift.String = "repos/list-autolinks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_autolinks.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_autolinks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_autolinks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_autolinks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_autolinks.Input.Path,
                headers: Operations.repos_sol_list_hyphen_autolinks.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.autolink])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.autolink] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_autolinks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_autolinks.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/get(repos/list-autolinks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_autolinks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_autolinks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an autolink reference for a repository
    ///
    /// Users with admin access to the repository can create an autolink.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/autolinks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/post(repos/create-autolink)`.
    public enum repos_sol_create_hyphen_autolink {
        public static let id: Swift.String = "repos/create-autolink"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_autolink.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_autolink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_autolink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_autolink.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/requestBody/json/key_prefix`.
                    public var key_prefix: Swift.String
                    /// The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/requestBody/json/url_template`.
                    public var url_template: Swift.String
                    /// Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/requestBody/json/is_alphanumeric`.
                    public var is_alphanumeric: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - key_prefix: This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
                    ///   - url_template: The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
                    ///   - is_alphanumeric: Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
                    public init(
                        key_prefix: Swift.String,
                        url_template: Swift.String,
                        is_alphanumeric: Swift.Bool? = nil
                    ) {
                        self.key_prefix = key_prefix
                        self.url_template = url_template
                        self.is_alphanumeric = is_alphanumeric
                    }
                    public enum CodingKeys: String, CodingKey {
                        case key_prefix
                        case url_template
                        case is_alphanumeric
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_autolink.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_autolink.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_autolink.Input.Path,
                headers: Operations.repos_sol_create_hyphen_autolink.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_autolink.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_autolink.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.autolink)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.autolink {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_autolink.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_autolink.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_autolink.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/post(repos/create-autolink)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_autolink.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_autolink.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/post(repos/create-autolink)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an autolink reference of a repository
    ///
    /// This returns a single autolink reference by ID that was configured for the given repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/autolinks/{autolink_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/get(repos/get-autolink)`.
    public enum repos_sol_get_hyphen_autolink {
        public static let id: Swift.String = "repos/get-autolink"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the autolink.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/GET/path/autolink_id`.
                public var autolink_id: Components.Parameters.autolink_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - autolink_id: The unique identifier of the autolink.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    autolink_id: Components.Parameters.autolink_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.autolink_id = autolink_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_autolink.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_autolink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_autolink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_autolink.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_autolink.Input.Path,
                headers: Operations.repos_sol_get_hyphen_autolink.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.autolink)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.autolink {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_autolink.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_autolink.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/get(repos/get-autolink)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_autolink.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_autolink.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/get(repos/get-autolink)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an autolink reference from a repository
    ///
    /// This deletes a single autolink reference by ID that was configured for the given repository.
    ///
    /// Information about autolinks are only available to repository administrators.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/delete(repos/delete-autolink)`.
    public enum repos_sol_delete_hyphen_autolink {
        public static let id: Swift.String = "repos/delete-autolink"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the autolink.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/DELETE/path/autolink_id`.
                public var autolink_id: Components.Parameters.autolink_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - autolink_id: The unique identifier of the autolink.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    autolink_id: Components.Parameters.autolink_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.autolink_id = autolink_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_autolink.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/autolinks/{autolink_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_autolink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_autolink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_autolink.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_autolink.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_autolink.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/delete(repos/delete-autolink)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_autolink.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_autolink.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/autolinks/{autolink_id}/delete(repos/delete-autolink)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if automated security fixes are enabled for a repository
    ///
    /// Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/get(repos/check-automated-security-fixes)`.
    public enum repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes {
        public static let id: Swift.String = "repos/check-automated-security-fixes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path,
                headers: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.check_hyphen_automated_hyphen_security_hyphen_fixes)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.check_hyphen_automated_hyphen_security_hyphen_fixes {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response if Dependabot is enabled
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/get(repos/check-automated-security-fixes)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if Dependabot is not enabled for the repository
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/get(repos/check-automated-security-fixes)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_check_hyphen_automated_hyphen_security_hyphen_fixes.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Enable automated security fixes
    ///
    /// Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/put(repos/enable-automated-security-fixes)`.
    public enum repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes {
        public static let id: Swift.String = "repos/enable-automated-security-fixes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/put(repos/enable-automated-security-fixes)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_enable_hyphen_automated_hyphen_security_hyphen_fixes.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Disable automated security fixes
    ///
    /// Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/automated-security-fixes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/delete(repos/disable-automated-security-fixes)`.
    public enum repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes {
        public static let id: Swift.String = "repos/disable-automated-security-fixes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/automated-security-fixes/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/automated-security-fixes/delete(repos/disable-automated-security-fixes)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_disable_hyphen_automated_hyphen_security_hyphen_fixes.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List branches
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/get(repos/list-branches)`.
    public enum repos_sol_list_hyphen_branches {
        public static let id: Swift.String = "repos/list-branches"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_branches.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/query/protected`.
                public var protected: Swift.Bool?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - protected: Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    protected: Swift.Bool? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.protected = protected
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_branches.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_branches.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_branches.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_branches.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_branches.Input.Path,
                query: Operations.repos_sol_list_hyphen_branches.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_branches.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_branches.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.short_hyphen_branch])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.short_hyphen_branch] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_branches.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_branches.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_branches.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/get(repos/list-branches)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_branches.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_branches.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/get(repos/list-branches)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a branch
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/get(repos/get-branch)`.
    public enum repos_sol_get_hyphen_branch {
        public static let id: Swift.String = "repos/get-branch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_branch.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_branch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_branch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_branch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_branch.Input.Path,
                headers: Operations.repos_sol_get_hyphen_branch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.branch_hyphen_with_hyphen_protection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.branch_hyphen_with_hyphen_protection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_branch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_branch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/get(repos/get-branch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_branch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_branch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/get(repos/get-branch)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/get(repos/get-branch)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/get(repos/get-branch-protection)`.
    public enum repos_sol_get_hyphen_branch_hyphen_protection {
        public static let id: Swift.String = "repos/get-branch-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_branch_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_branch_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.branch_hyphen_protection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.branch_hyphen_protection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/get(repos/get-branch-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_branch_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_branch_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/get(repos/get-branch-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Protecting a branch requires admin or owner permissions to the repository.
    ///
    /// > [!NOTE]
    /// > Passing new arrays of `users` and `teams` replaces their previous values.
    ///
    /// > [!NOTE]
    /// > The list of users, apps, and teams in total is limited to 100 items.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/put(repos/update-branch-protection)`.
    public enum repos_sol_update_hyphen_branch_hyphen_protection {
        public static let id: Swift.String = "repos/update-branch-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_branch_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_branch_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Require status checks to pass before merging. Set to `null` to disable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks`.
                    public struct required_status_checksPayload: Codable, Hashable, Sendable {
                        /// Require branches to be up to date before merging.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks/strict`.
                        public var strict: Swift.Bool
                        /// **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks/contexts`.
                        @available(*, deprecated)
                        public var contexts: [Swift.String]
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks/checksPayload`.
                        public struct checksPayloadPayload: Codable, Hashable, Sendable {
                            /// The name of the required check
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks/checksPayload/context`.
                            public var context: Swift.String
                            /// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks/checksPayload/app_id`.
                            public var app_id: Swift.Int?
                            /// Creates a new `checksPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - context: The name of the required check
                            ///   - app_id: The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                            public init(
                                context: Swift.String,
                                app_id: Swift.Int? = nil
                            ) {
                                self.context = context
                                self.app_id = app_id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case context
                                case app_id
                            }
                        }
                        /// The list of status checks to require in order to merge into this branch.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks/checks`.
                        public typealias checksPayload = [Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_status_checksPayload.checksPayloadPayload]
                        /// The list of status checks to require in order to merge into this branch.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks/checks`.
                        public var checks: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_status_checksPayload.checksPayload?
                        /// Creates a new `required_status_checksPayload`.
                        ///
                        /// - Parameters:
                        ///   - strict: Require branches to be up to date before merging.
                        ///   - contexts: **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
                        ///   - checks: The list of status checks to require in order to merge into this branch.
                        public init(
                            strict: Swift.Bool,
                            contexts: [Swift.String],
                            checks: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_status_checksPayload.checksPayload? = nil
                        ) {
                            self.strict = strict
                            self.contexts = contexts
                            self.checks = checks
                        }
                        public enum CodingKeys: String, CodingKey {
                            case strict
                            case contexts
                            case checks
                        }
                    }
                    /// Require status checks to pass before merging. Set to `null` to disable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_status_checks`.
                    public var required_status_checks: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_status_checksPayload?
                    /// Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/enforce_admins`.
                    public var enforce_admins: Swift.Bool?
                    /// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews`.
                    public struct required_pull_request_reviewsPayload: Codable, Hashable, Sendable {
                        /// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/dismissal_restrictions`.
                        public struct dismissal_restrictionsPayload: Codable, Hashable, Sendable {
                            /// The list of user `login`s with dismissal access
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/dismissal_restrictions/users`.
                            public var users: [Swift.String]?
                            /// The list of team `slug`s with dismissal access
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/dismissal_restrictions/teams`.
                            public var teams: [Swift.String]?
                            /// The list of app `slug`s with dismissal access
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/dismissal_restrictions/apps`.
                            public var apps: [Swift.String]?
                            /// Creates a new `dismissal_restrictionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - users: The list of user `login`s with dismissal access
                            ///   - teams: The list of team `slug`s with dismissal access
                            ///   - apps: The list of app `slug`s with dismissal access
                            public init(
                                users: [Swift.String]? = nil,
                                teams: [Swift.String]? = nil,
                                apps: [Swift.String]? = nil
                            ) {
                                self.users = users
                                self.teams = teams
                                self.apps = apps
                            }
                            public enum CodingKeys: String, CodingKey {
                                case users
                                case teams
                                case apps
                            }
                        }
                        /// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/dismissal_restrictions`.
                        public var dismissal_restrictions: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_pull_request_reviewsPayload.dismissal_restrictionsPayload?
                        /// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/dismiss_stale_reviews`.
                        public var dismiss_stale_reviews: Swift.Bool?
                        /// Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/require_code_owner_reviews`.
                        public var require_code_owner_reviews: Swift.Bool?
                        /// Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/required_approving_review_count`.
                        public var required_approving_review_count: Swift.Int?
                        /// Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/require_last_push_approval`.
                        public var require_last_push_approval: Swift.Bool?
                        /// Allow specific users, teams, or apps to bypass pull request requirements.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/bypass_pull_request_allowances`.
                        public struct bypass_pull_request_allowancesPayload: Codable, Hashable, Sendable {
                            /// The list of user `login`s allowed to bypass pull request requirements.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/bypass_pull_request_allowances/users`.
                            public var users: [Swift.String]?
                            /// The list of team `slug`s allowed to bypass pull request requirements.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/bypass_pull_request_allowances/teams`.
                            public var teams: [Swift.String]?
                            /// The list of app `slug`s allowed to bypass pull request requirements.
                            ///
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/bypass_pull_request_allowances/apps`.
                            public var apps: [Swift.String]?
                            /// Creates a new `bypass_pull_request_allowancesPayload`.
                            ///
                            /// - Parameters:
                            ///   - users: The list of user `login`s allowed to bypass pull request requirements.
                            ///   - teams: The list of team `slug`s allowed to bypass pull request requirements.
                            ///   - apps: The list of app `slug`s allowed to bypass pull request requirements.
                            public init(
                                users: [Swift.String]? = nil,
                                teams: [Swift.String]? = nil,
                                apps: [Swift.String]? = nil
                            ) {
                                self.users = users
                                self.teams = teams
                                self.apps = apps
                            }
                            public enum CodingKeys: String, CodingKey {
                                case users
                                case teams
                                case apps
                            }
                        }
                        /// Allow specific users, teams, or apps to bypass pull request requirements.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews/bypass_pull_request_allowances`.
                        public var bypass_pull_request_allowances: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_pull_request_reviewsPayload.bypass_pull_request_allowancesPayload?
                        /// Creates a new `required_pull_request_reviewsPayload`.
                        ///
                        /// - Parameters:
                        ///   - dismissal_restrictions: Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                        ///   - dismiss_stale_reviews: Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
                        ///   - require_code_owner_reviews: Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
                        ///   - required_approving_review_count: Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
                        ///   - require_last_push_approval: Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
                        ///   - bypass_pull_request_allowances: Allow specific users, teams, or apps to bypass pull request requirements.
                        public init(
                            dismissal_restrictions: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_pull_request_reviewsPayload.dismissal_restrictionsPayload? = nil,
                            dismiss_stale_reviews: Swift.Bool? = nil,
                            require_code_owner_reviews: Swift.Bool? = nil,
                            required_approving_review_count: Swift.Int? = nil,
                            require_last_push_approval: Swift.Bool? = nil,
                            bypass_pull_request_allowances: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_pull_request_reviewsPayload.bypass_pull_request_allowancesPayload? = nil
                        ) {
                            self.dismissal_restrictions = dismissal_restrictions
                            self.dismiss_stale_reviews = dismiss_stale_reviews
                            self.require_code_owner_reviews = require_code_owner_reviews
                            self.required_approving_review_count = required_approving_review_count
                            self.require_last_push_approval = require_last_push_approval
                            self.bypass_pull_request_allowances = bypass_pull_request_allowances
                        }
                        public enum CodingKeys: String, CodingKey {
                            case dismissal_restrictions
                            case dismiss_stale_reviews
                            case require_code_owner_reviews
                            case required_approving_review_count
                            case require_last_push_approval
                            case bypass_pull_request_allowances
                        }
                    }
                    /// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_pull_request_reviews`.
                    public var required_pull_request_reviews: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_pull_request_reviewsPayload?
                    /// Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/restrictions`.
                    public struct restrictionsPayload: Codable, Hashable, Sendable {
                        /// The list of user `login`s with push access
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/restrictions/users`.
                        public var users: [Swift.String]
                        /// The list of team `slug`s with push access
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/restrictions/teams`.
                        public var teams: [Swift.String]
                        /// The list of app `slug`s with push access
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/restrictions/apps`.
                        public var apps: [Swift.String]?
                        /// Creates a new `restrictionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - users: The list of user `login`s with push access
                        ///   - teams: The list of team `slug`s with push access
                        ///   - apps: The list of app `slug`s with push access
                        public init(
                            users: [Swift.String],
                            teams: [Swift.String],
                            apps: [Swift.String]? = nil
                        ) {
                            self.users = users
                            self.teams = teams
                            self.apps = apps
                        }
                        public enum CodingKeys: String, CodingKey {
                            case users
                            case teams
                            case apps
                        }
                    }
                    /// Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/restrictions`.
                    public var restrictions: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.restrictionsPayload?
                    /// Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_linear_history`.
                    public var required_linear_history: Swift.Bool?
                    /// Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/allow_force_pushes`.
                    public var allow_force_pushes: Swift.Bool?
                    /// Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/allow_deletions`.
                    public var allow_deletions: Swift.Bool?
                    /// If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/block_creations`.
                    public var block_creations: Swift.Bool?
                    /// Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/required_conversation_resolution`.
                    public var required_conversation_resolution: Swift.Bool?
                    /// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/lock_branch`.
                    public var lock_branch: Swift.Bool?
                    /// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/json/allow_fork_syncing`.
                    public var allow_fork_syncing: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - required_status_checks: Require status checks to pass before merging. Set to `null` to disable.
                    ///   - enforce_admins: Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
                    ///   - required_pull_request_reviews: Require at least one approving review on a pull request, before merging. Set to `null` to disable.
                    ///   - restrictions: Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
                    ///   - required_linear_history: Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
                    ///   - allow_force_pushes: Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
                    ///   - allow_deletions: Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
                    ///   - block_creations: If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
                    ///   - required_conversation_resolution: Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
                    ///   - lock_branch: Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
                    ///   - allow_fork_syncing: Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
                    public init(
                        required_status_checks: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_status_checksPayload? = nil,
                        enforce_admins: Swift.Bool? = nil,
                        required_pull_request_reviews: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.required_pull_request_reviewsPayload? = nil,
                        restrictions: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload.restrictionsPayload? = nil,
                        required_linear_history: Swift.Bool? = nil,
                        allow_force_pushes: Swift.Bool? = nil,
                        allow_deletions: Swift.Bool? = nil,
                        block_creations: Swift.Bool? = nil,
                        required_conversation_resolution: Swift.Bool? = nil,
                        lock_branch: Swift.Bool? = nil,
                        allow_fork_syncing: Swift.Bool? = nil
                    ) {
                        self.required_status_checks = required_status_checks
                        self.enforce_admins = enforce_admins
                        self.required_pull_request_reviews = required_pull_request_reviews
                        self.restrictions = restrictions
                        self.required_linear_history = required_linear_history
                        self.allow_force_pushes = allow_force_pushes
                        self.allow_deletions = allow_deletions
                        self.block_creations = block_creations
                        self.required_conversation_resolution = required_conversation_resolution
                        self.lock_branch = lock_branch
                        self.allow_fork_syncing = allow_fork_syncing
                    }
                    public enum CodingKeys: String, CodingKey {
                        case required_status_checks
                        case enforce_admins
                        case required_pull_request_reviews
                        case restrictions
                        case required_linear_history
                        case allow_force_pushes
                        case allow_deletions
                        case block_creations
                        case required_conversation_resolution
                        case lock_branch
                        case allow_fork_syncing
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.protected_hyphen_branch)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.protected_hyphen_branch {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/put(repos/update-branch-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_branch_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_branch_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/put(repos/update-branch-protection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/put(repos/update-branch-protection)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/put(repos/update-branch-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/delete(repos/delete-branch-protection)`.
    public enum repos_sol_delete_hyphen_branch_hyphen_protection {
        public static let id: Swift.String = "repos/delete-branch-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_branch_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_branch_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/delete(repos/delete-branch-protection)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_branch_hyphen_protection.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/delete(repos/delete-branch-protection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/get(repos/get-admin-branch-protection)`.
    public enum repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection {
        public static let id: Swift.String = "repos/get-admin-branch-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/get(repos/get-admin-branch-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/post(repos/set-admin-branch-protection)`.
    public enum repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection {
        public static let id: Swift.String = "repos/set-admin-branch-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/POST/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/post(repos/set-admin-branch-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_set_hyphen_admin_hyphen_branch_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete admin branch protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/delete(repos/delete-admin-branch-protection)`.
    public enum repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection {
        public static let id: Swift.String = "repos/delete-admin-branch-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/delete(repos/delete-admin-branch-protection)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_admin_hyphen_branch_hyphen_protection.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins/delete(repos/delete-admin-branch-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/get(repos/get-pull-request-review-protection)`.
    public enum repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection {
        public static let id: Swift.String = "repos/get-pull-request-review-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/get(repos/get-pull-request-review-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// > [!NOTE]
    /// > Passing new arrays of `users` and `teams` replaces their previous values.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/patch(repos/update-pull-request-review-protection)`.
    public enum repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection {
        public static let id: Swift.String = "repos/update-pull-request-review-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/dismissal_restrictions`.
                    public struct dismissal_restrictionsPayload: Codable, Hashable, Sendable {
                        /// The list of user `login`s with dismissal access
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/dismissal_restrictions/users`.
                        public var users: [Swift.String]?
                        /// The list of team `slug`s with dismissal access
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/dismissal_restrictions/teams`.
                        public var teams: [Swift.String]?
                        /// The list of app `slug`s with dismissal access
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/dismissal_restrictions/apps`.
                        public var apps: [Swift.String]?
                        /// Creates a new `dismissal_restrictionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - users: The list of user `login`s with dismissal access
                        ///   - teams: The list of team `slug`s with dismissal access
                        ///   - apps: The list of app `slug`s with dismissal access
                        public init(
                            users: [Swift.String]? = nil,
                            teams: [Swift.String]? = nil,
                            apps: [Swift.String]? = nil
                        ) {
                            self.users = users
                            self.teams = teams
                            self.apps = apps
                        }
                        public enum CodingKeys: String, CodingKey {
                            case users
                            case teams
                            case apps
                        }
                    }
                    /// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/dismissal_restrictions`.
                    public var dismissal_restrictions: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body.jsonPayload.dismissal_restrictionsPayload?
                    /// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/dismiss_stale_reviews`.
                    public var dismiss_stale_reviews: Swift.Bool?
                    /// Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/require_code_owner_reviews`.
                    public var require_code_owner_reviews: Swift.Bool?
                    /// Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/required_approving_review_count`.
                    public var required_approving_review_count: Swift.Int?
                    /// Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/require_last_push_approval`.
                    public var require_last_push_approval: Swift.Bool?
                    /// Allow specific users, teams, or apps to bypass pull request requirements.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/bypass_pull_request_allowances`.
                    public struct bypass_pull_request_allowancesPayload: Codable, Hashable, Sendable {
                        /// The list of user `login`s allowed to bypass pull request requirements.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/bypass_pull_request_allowances/users`.
                        public var users: [Swift.String]?
                        /// The list of team `slug`s allowed to bypass pull request requirements.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/bypass_pull_request_allowances/teams`.
                        public var teams: [Swift.String]?
                        /// The list of app `slug`s allowed to bypass pull request requirements.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/bypass_pull_request_allowances/apps`.
                        public var apps: [Swift.String]?
                        /// Creates a new `bypass_pull_request_allowancesPayload`.
                        ///
                        /// - Parameters:
                        ///   - users: The list of user `login`s allowed to bypass pull request requirements.
                        ///   - teams: The list of team `slug`s allowed to bypass pull request requirements.
                        ///   - apps: The list of app `slug`s allowed to bypass pull request requirements.
                        public init(
                            users: [Swift.String]? = nil,
                            teams: [Swift.String]? = nil,
                            apps: [Swift.String]? = nil
                        ) {
                            self.users = users
                            self.teams = teams
                            self.apps = apps
                        }
                        public enum CodingKeys: String, CodingKey {
                            case users
                            case teams
                            case apps
                        }
                    }
                    /// Allow specific users, teams, or apps to bypass pull request requirements.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/json/bypass_pull_request_allowances`.
                    public var bypass_pull_request_allowances: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body.jsonPayload.bypass_pull_request_allowancesPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - dismissal_restrictions: Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                    ///   - dismiss_stale_reviews: Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
                    ///   - require_code_owner_reviews: Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
                    ///   - required_approving_review_count: Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
                    ///   - require_last_push_approval: Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
                    ///   - bypass_pull_request_allowances: Allow specific users, teams, or apps to bypass pull request requirements.
                    public init(
                        dismissal_restrictions: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body.jsonPayload.dismissal_restrictionsPayload? = nil,
                        dismiss_stale_reviews: Swift.Bool? = nil,
                        require_code_owner_reviews: Swift.Bool? = nil,
                        required_approving_review_count: Swift.Int? = nil,
                        require_last_push_approval: Swift.Bool? = nil,
                        bypass_pull_request_allowances: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body.jsonPayload.bypass_pull_request_allowancesPayload? = nil
                    ) {
                        self.dismissal_restrictions = dismissal_restrictions
                        self.dismiss_stale_reviews = dismiss_stale_reviews
                        self.require_code_owner_reviews = require_code_owner_reviews
                        self.required_approving_review_count = required_approving_review_count
                        self.require_last_push_approval = require_last_push_approval
                        self.bypass_pull_request_allowances = bypass_pull_request_allowances
                    }
                    public enum CodingKeys: String, CodingKey {
                        case dismissal_restrictions
                        case dismiss_stale_reviews
                        case require_code_owner_reviews
                        case required_approving_review_count
                        case require_last_push_approval
                        case bypass_pull_request_allowances
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.protected_hyphen_branch_hyphen_pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/patch(repos/update-pull-request-review-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/patch(repos/update-pull-request-review-protection)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete pull request review protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/delete(repos/delete-pull-request-review-protection)`.
    public enum repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection {
        public static let id: Swift.String = "repos/delete-pull-request-review-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/delete(repos/delete-pull-request-review-protection)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_pull_hyphen_request_hyphen_review_hyphen_protection.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews/delete(repos/delete-pull-request-review-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
    ///
    /// > [!NOTE]
    /// > You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/get(repos/get-commit-signature-protection)`.
    public enum repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection {
        public static let id: Swift.String = "repos/get-commit-signature-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/get(repos/get-commit-signature-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/get(repos/get-commit-signature-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/post(repos/create-commit-signature-protection)`.
    public enum repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection {
        public static let id: Swift.String = "repos/create-commit-signature-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/POST/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.protected_hyphen_branch_hyphen_admin_hyphen_enforced {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/post(repos/create-commit-signature-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_create_hyphen_commit_hyphen_signature_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/post(repos/create-commit-signature-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete commit signature protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/delete(repos/delete-commit-signature-protection)`.
    public enum repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection {
        public static let id: Swift.String = "repos/delete-commit-signature-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/delete(repos/delete-commit-signature-protection)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_commit_hyphen_signature_hyphen_protection.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_signatures/delete(repos/delete-commit-signature-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get status checks protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/get(repos/get-status-checks-protection)`.
    public enum repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection {
        public static let id: Swift.String = "repos/get-status-checks-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.status_hyphen_check_hyphen_policy)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.status_hyphen_check_hyphen_policy {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/get(repos/get-status-checks-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_status_hyphen_checks_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/get(repos/get-status-checks-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update status check protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/patch(repos/update-status-check-protection)`.
    public enum repos_sol_update_hyphen_status_hyphen_check_hyphen_protection {
        public static let id: Swift.String = "repos/update-status-check-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Require branches to be up to date before merging.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json/strict`.
                    public var strict: Swift.Bool?
                    /// **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json/contexts`.
                    @available(*, deprecated)
                    public var contexts: [Swift.String]?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json/checksPayload`.
                    public struct checksPayloadPayload: Codable, Hashable, Sendable {
                        /// The name of the required check
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json/checksPayload/context`.
                        public var context: Swift.String
                        /// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json/checksPayload/app_id`.
                        public var app_id: Swift.Int?
                        /// Creates a new `checksPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - context: The name of the required check
                        ///   - app_id: The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                        public init(
                            context: Swift.String,
                            app_id: Swift.Int? = nil
                        ) {
                            self.context = context
                            self.app_id = app_id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case context
                            case app_id
                        }
                    }
                    /// The list of status checks to require in order to merge into this branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json/checks`.
                    public typealias checksPayload = [Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Body.jsonPayload.checksPayloadPayload]
                    /// The list of status checks to require in order to merge into this branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/json/checks`.
                    public var checks: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Body.jsonPayload.checksPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - strict: Require branches to be up to date before merging.
                    ///   - contexts: **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
                    ///   - checks: The list of status checks to require in order to merge into this branch.
                    public init(
                        strict: Swift.Bool? = nil,
                        contexts: [Swift.String]? = nil,
                        checks: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Body.jsonPayload.checksPayload? = nil
                    ) {
                        self.strict = strict
                        self.contexts = contexts
                        self.checks = checks
                    }
                    public enum CodingKeys: String, CodingKey {
                        case strict
                        case contexts
                        case checks
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.status_hyphen_check_hyphen_policy)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.status_hyphen_check_hyphen_policy {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/patch(repos/update-status-check-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_status_hyphen_check_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/patch(repos/update-status-check-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/patch(repos/update-status-check-protection)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove status check protection
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/delete(repos/remove-status-check-protection)`.
    public enum repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection {
        public static let id: Swift.String = "repos/remove-status-check-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/delete(repos/remove-status-check-protection)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_protection.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get all status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/get(repos/get-all-status-check-contexts)`.
    public enum repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts {
        public static let id: Swift.String = "repos/get-all-status-check-contexts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
                headers: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/GET/responses/200/content/application\/json`.
                    case json([Swift.String])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Swift.String] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/get(repos/get-all-status-check-contexts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_all_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/get(repos/get-all-status-check-contexts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/post(repos/add-status-check-contexts)`.
    public enum repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts {
        public static let id: Swift.String = "repos/add-status-check-contexts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The name of the status checks
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/requestBody/json/case1/contexts`.
                        public var contexts: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - contexts: The name of the status checks
                        public init(contexts: [Swift.String]) {
                            self.contexts = contexts
                        }
                        public enum CodingKeys: String, CodingKey {
                            case contexts
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/requestBody/json/case1`.
                    case case1(Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Body.jsonPayload.Case1Payload)
                    /// The name of the status checks
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/requestBody/json/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
                headers: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init(),
                body: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/POST/responses/200/content/application\/json`.
                    case json([Swift.String])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Swift.String] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/post(repos/add-status-check-contexts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_add_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/post(repos/add-status-check-contexts)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/post(repos/add-status-check-contexts)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/post(repos/add-status-check-contexts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/put(repos/set-status-check-contexts)`.
    public enum repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts {
        public static let id: Swift.String = "repos/set-status-check-contexts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The name of the status checks
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/requestBody/json/case1/contexts`.
                        public var contexts: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - contexts: The name of the status checks
                        public init(contexts: [Swift.String]) {
                            self.contexts = contexts
                        }
                        public enum CodingKeys: String, CodingKey {
                            case contexts
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/requestBody/json/case1`.
                    case case1(Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Body.jsonPayload.Case1Payload)
                    /// The name of the status checks
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/requestBody/json/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
                headers: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init(),
                body: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/PUT/responses/200/content/application\/json`.
                    case json([Swift.String])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Swift.String] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/put(repos/set-status-check-contexts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_set_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/put(repos/set-status-check-contexts)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/put(repos/set-status-check-contexts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove status check contexts
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/delete(repos/remove-status-check-contexts)`.
    public enum repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts {
        public static let id: Swift.String = "repos/remove-status-check-contexts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The name of the status checks
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/requestBody/json/case1/contexts`.
                        public var contexts: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - contexts: The name of the status checks
                        public init(contexts: [Swift.String]) {
                            self.contexts = contexts
                        }
                        public enum CodingKeys: String, CodingKey {
                            case contexts
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/requestBody/json/case1`.
                    case case1(Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Body.jsonPayload.Case1Payload)
                    /// The name of the status checks
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/requestBody/json/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/requestBody/content/application\/json`.
                case json(Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Path,
                headers: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Headers = .init(),
                body: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/DELETE/responses/200/content/application\/json`.
                    case json([Swift.String])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Swift.String] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/delete(repos/remove-status-check-contexts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_remove_hyphen_status_hyphen_check_hyphen_contexts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/delete(repos/remove-status-check-contexts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts/delete(repos/remove-status-check-contexts)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists who has access to this protected branch.
    ///
    /// > [!NOTE]
    /// > Users, apps, and teams `restrictions` are only available for organization-owned repositories.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/get(repos/get-access-restrictions)`.
    public enum repos_sol_get_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/get-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.branch_hyphen_restriction_hyphen_policy)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.branch_hyphen_restriction_hyphen_policy {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/get(repos/get-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/get(repos/get-access-restrictions)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Disables the ability to restrict who can push to this branch.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/delete(repos/delete-access-restrictions)`.
    public enum repos_sol_delete_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/delete-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/delete(repos/delete-access-restrictions)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_access_hyphen_restrictions.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get apps with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/get(repos/get-apps-with-access-to-protected-branch)`.
    public enum repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch {
        public static let id: Swift.String = "repos/get-apps-with-access-to-protected-branch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path,
                headers: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.integration])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.integration] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/get(repos/get-apps-with-access-to-protected-branch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_apps_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/get(repos/get-apps-with-access-to-protected-branch)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/post(repos/add-app-access-restrictions)`.
    public enum repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/add-app-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/requestBody/json/apps`.
                    public var apps: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apps: The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
                    public init(apps: [Swift.String]) {
                        self.apps = apps
                    }
                    public enum CodingKeys: String, CodingKey {
                        case apps
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/POST/responses/200/content/application\/json`.
                    case json([Components.Schemas.integration])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.integration] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/post(repos/add-app-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_add_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/post(repos/add-app-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/put(repos/set-app-access-restrictions)`.
    public enum repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/set-app-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/requestBody/json/apps`.
                    public var apps: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apps: The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
                    public init(apps: [Swift.String]) {
                        self.apps = apps
                    }
                    public enum CodingKeys: String, CodingKey {
                        case apps
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/PUT/responses/200/content/application\/json`.
                    case json([Components.Schemas.integration])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.integration] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/put(repos/set-app-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_set_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/put(repos/set-app-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove app access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/delete(repos/remove-app-access-restrictions)`.
    public enum repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/remove-app-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/requestBody/json/apps`.
                    public var apps: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apps: The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
                    public init(apps: [Swift.String]) {
                        self.apps = apps
                    }
                    public enum CodingKeys: String, CodingKey {
                        case apps
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/requestBody/content/application\/json`.
                case json(Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/DELETE/responses/200/content/application\/json`.
                    case json([Components.Schemas.integration])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.integration] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/delete(repos/remove-app-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_remove_hyphen_app_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps/delete(repos/remove-app-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get teams with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the teams who have push access to this branch. The list includes child teams.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/get(repos/get-teams-with-access-to-protected-branch)`.
    public enum repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch {
        public static let id: Swift.String = "repos/get-teams-with-access-to-protected-branch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path,
                headers: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/get(repos/get-teams-with-access-to-protected-branch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_teams_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/get(repos/get-teams-with-access-to-protected-branch)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified teams push access for this branch. You can also give push access to child teams.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/post(repos/add-team-access-restrictions)`.
    public enum repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/add-team-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The slug values for teams
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/requestBody/json/case1/teams`.
                        public var teams: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - teams: The slug values for teams
                        public init(teams: [Swift.String]) {
                            self.teams = teams
                        }
                        public enum CodingKeys: String, CodingKey {
                            case teams
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/requestBody/json/case1`.
                    case case1(Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload.Case1Payload)
                    /// The slug values for teams
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/requestBody/json/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/POST/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/post(repos/add-team-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_add_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/post(repos/add-team-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/put(repos/set-team-access-restrictions)`.
    public enum repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/set-team-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The slug values for teams
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/requestBody/json/case1/teams`.
                        public var teams: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - teams: The slug values for teams
                        public init(teams: [Swift.String]) {
                            self.teams = teams
                        }
                        public enum CodingKeys: String, CodingKey {
                            case teams
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/requestBody/json/case1`.
                    case case1(Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload.Case1Payload)
                    /// The slug values for teams
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/requestBody/json/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/PUT/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/put(repos/set-team-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_set_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/put(repos/set-team-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove team access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of a team to push to this branch. You can also remove push access for child teams.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/delete(repos/remove-team-access-restrictions)`.
    public enum repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/remove-team-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The slug values for teams
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/requestBody/json/case1/teams`.
                        public var teams: [Swift.String]
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - teams: The slug values for teams
                        public init(teams: [Swift.String]) {
                            self.teams = teams
                        }
                        public enum CodingKeys: String, CodingKey {
                            case teams
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/requestBody/json/case1`.
                    case case1(Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload.Case1Payload)
                    /// The slug values for teams
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/requestBody/json/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/requestBody/content/application\/json`.
                case json(Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/DELETE/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/delete(repos/remove-team-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_remove_hyphen_team_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams/delete(repos/remove-team-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get users with access to the protected branch
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists the people who have push access to this branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/get(repos/get-users-with-access-to-protected-branch)`.
    public enum repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch {
        public static let id: Swift.String = "repos/get-users-with-access-to-protected-branch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Path,
                headers: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/get(repos/get-users-with-access-to-protected-branch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_users_hyphen_with_hyphen_access_hyphen_to_hyphen_protected_hyphen_branch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/get(repos/get-users-with-access-to-protected-branch)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Grants the specified people push access for this branch.
    ///
    /// | Type    | Description                                                                                                                   |
    /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/post(repos/add-user-access-restrictions)`.
    public enum repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/add-user-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The username for users
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/requestBody/json/users`.
                    public var users: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - users: The username for users
                    public init(users: [Swift.String]) {
                        self.users = users
                    }
                    public enum CodingKeys: String, CodingKey {
                        case users
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/POST/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/post(repos/add-user-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_add_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/post(repos/add-user-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
    ///
    /// | Type    | Description                                                                                                                   |
    /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/put(repos/set-user-access-restrictions)`.
    public enum repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/set-user-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The username for users
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/requestBody/json/users`.
                    public var users: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - users: The username for users
                    public init(users: [Swift.String]) {
                        self.users = users
                    }
                    public enum CodingKeys: String, CodingKey {
                        case users
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/PUT/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/put(repos/set-user-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_set_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/put(repos/set-user-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove user access restrictions
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Removes the ability of a user to push to this branch.
    ///
    /// | Type    | Description                                                                                                                                   |
    /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
    /// | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/delete(repos/remove-user-access-restrictions)`.
    public enum repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions {
        public static let id: Swift.String = "repos/remove-user-access-restrictions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The username for users
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/requestBody/json/users`.
                    public var users: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - users: The username for users
                    public init(users: [Swift.String]) {
                        self.users = users
                    }
                    public enum CodingKeys: String, CodingKey {
                        case users
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/requestBody/content/application\/json`.
                case json(Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Path,
                headers: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Headers = .init(),
                body: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/DELETE/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/delete(repos/remove-user-access-restrictions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_remove_hyphen_user_hyphen_access_hyphen_restrictions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users/delete(repos/remove-user-access-restrictions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Rename a branch
    ///
    /// Renames a branch in a repository.
    ///
    /// > [!NOTE]
    /// > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
    ///
    /// The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
    ///
    /// In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/branches/{branch}/rename`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/rename/post(repos/rename-branch)`.
    public enum repos_sol_rename_hyphen_branch {
        public static let id: Swift.String = "repos/rename-branch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_rename_hyphen_branch.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_rename_hyphen_branch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_rename_hyphen_branch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_rename_hyphen_branch.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The new name of the branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/requestBody/json/new_name`.
                    public var new_name: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - new_name: The new name of the branch.
                    public init(new_name: Swift.String) {
                        self.new_name = new_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case new_name
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_rename_hyphen_branch.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_rename_hyphen_branch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_rename_hyphen_branch.Input.Path,
                headers: Operations.repos_sol_rename_hyphen_branch.Input.Headers = .init(),
                body: Operations.repos_sol_rename_hyphen_branch.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/branches/{branch}/rename/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.branch_hyphen_with_hyphen_protection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.branch_hyphen_with_hyphen_protection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_rename_hyphen_branch.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_rename_hyphen_branch.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/rename/post(repos/rename-branch)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_rename_hyphen_branch.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_rename_hyphen_branch.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/rename/post(repos/rename-branch)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/rename/post(repos/rename-branch)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/branches/{branch}/rename/post(repos/rename-branch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List CODEOWNERS errors
    ///
    /// List any syntax errors that are detected in the CODEOWNERS
    /// file.
    ///
    /// For more information about the correct CODEOWNERS syntax,
    /// see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codeowners/errors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codeowners/errors/get(repos/codeowners-errors)`.
    public enum repos_sol_codeowners_hyphen_errors {
        public static let id: Swift.String = "repos/codeowners-errors"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_codeowners_hyphen_errors.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/query/ref`.
                public var ref: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)
                public init(ref: Swift.String? = nil) {
                    self.ref = ref
                }
            }
            public var query: Operations.repos_sol_codeowners_hyphen_errors.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_codeowners_hyphen_errors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_codeowners_hyphen_errors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_codeowners_hyphen_errors.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_codeowners_hyphen_errors.Input.Path,
                query: Operations.repos_sol_codeowners_hyphen_errors.Input.Query = .init(),
                headers: Operations.repos_sol_codeowners_hyphen_errors.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codeowners/errors/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codeowners_hyphen_errors)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codeowners_hyphen_errors {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_codeowners_hyphen_errors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_codeowners_hyphen_errors.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codeowners/errors/get(repos/codeowners-errors)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_codeowners_hyphen_errors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_codeowners_hyphen_errors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codeowners/errors/get(repos/codeowners-errors)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_codeowners_hyphen_errors.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_codeowners_hyphen_errors.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository collaborators
    ///
    /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    /// Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// The authenticated user must have push access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/get(repos/list-collaborators)`.
    public enum repos_sol_list_hyphen_collaborators {
        public static let id: Swift.String = "repos/list-collaborators"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_collaborators.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/query/affiliation`.
                @frozen public enum affiliationPayload: String, Codable, Hashable, Sendable {
                    case outside = "outside"
                    case direct = "direct"
                    case all = "all"
                }
                /// Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/query/affiliation`.
                public var affiliation: Operations.repos_sol_list_hyphen_collaborators.Input.Query.affiliationPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/query/permission`.
                @frozen public enum permissionPayload: String, Codable, Hashable, Sendable {
                    case pull = "pull"
                    case triage = "triage"
                    case push = "push"
                    case maintain = "maintain"
                    case admin = "admin"
                }
                /// Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/query/permission`.
                public var permission: Operations.repos_sol_list_hyphen_collaborators.Input.Query.permissionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - affiliation: Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
                ///   - permission: Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    affiliation: Operations.repos_sol_list_hyphen_collaborators.Input.Query.affiliationPayload? = nil,
                    permission: Operations.repos_sol_list_hyphen_collaborators.Input.Query.permissionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.affiliation = affiliation
                    self.permission = permission
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_collaborators.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_collaborators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_collaborators.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_collaborators.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_collaborators.Input.Path,
                query: Operations.repos_sol_list_hyphen_collaborators.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_collaborators.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_collaborators.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.collaborator])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.collaborator] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_collaborators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_collaborators.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_collaborators.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/get(repos/list-collaborators)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_collaborators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_collaborators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/get(repos/list-collaborators)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a user is a repository collaborator
    ///
    /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    ///
    /// Team members will include the members of child teams.
    ///
    /// The authenticated user must have push access to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/get(repos/check-collaborator)`.
    public enum repos_sol_check_hyphen_collaborator {
        public static let id: Swift.String = "repos/check-collaborator"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    username: Components.Parameters.username
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.username = username
                }
            }
            public var path: Operations.repos_sol_check_hyphen_collaborator.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_check_hyphen_collaborator.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if user is a collaborator
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/get(repos/check-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_check_hyphen_collaborator.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_check_hyphen_collaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if user is not a collaborator
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/get(repos/check-collaborator)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_check_hyphen_collaborator.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_check_hyphen_collaborator.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Add a repository collaborator
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    ///
    /// For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
    ///
    /// ```
    /// Cannot assign {member} permission of {role name}
    /// ```
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).
    ///
    /// **Updating an existing collaborator's permission level**
    ///
    /// The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
    ///
    /// **Rate limits**
    ///
    /// You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/put(repos/add-collaborator)`.
    public enum repos_sol_add_hyphen_collaborator {
        public static let id: Swift.String = "repos/add-collaborator"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    username: Components.Parameters.username
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.username = username
                }
            }
            public var path: Operations.repos_sol_add_hyphen_collaborator.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_collaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_add_hyphen_collaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_add_hyphen_collaborator.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/requestBody/json/permission`.
                    public var permission: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permission: The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
                    public init(permission: Swift.String? = nil) {
                        self.permission = permission
                    }
                    public enum CodingKeys: String, CodingKey {
                        case permission
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_add_hyphen_collaborator.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_add_hyphen_collaborator.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_add_hyphen_collaborator.Input.Path,
                headers: Operations.repos_sol_add_hyphen_collaborator.Input.Headers = .init(),
                body: Operations.repos_sol_add_hyphen_collaborator.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_invitation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_invitation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_add_hyphen_collaborator.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_add_hyphen_collaborator.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when a new invitation is created
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/put(repos/add-collaborator)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_add_hyphen_collaborator.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_add_hyphen_collaborator.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when:
            /// - an existing collaborator is added as a collaborator
            /// - an organization member is added as an individual collaborator
            /// - an existing team member (whose team is also a repository collaborator) is added as an individual collaborator
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/put(repos/add-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_add_hyphen_collaborator.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_add_hyphen_collaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/put(repos/add-collaborator)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/put(repos/add-collaborator)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a repository collaborator
    ///
    /// Removes a collaborator from a repository.
    ///
    /// To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.
    ///
    /// This endpoint also:
    /// - Cancels any outstanding invitations
    /// - Unasigns the user from any issues
    /// - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
    /// - Unstars the repository
    /// - Updates access permissions to packages
    ///
    /// Removing a user as a collaborator has the following effects on forks:
    ///  - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
    ///  - If the user had their own fork of the repository, the fork will be deleted.
    ///  - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.
    ///
    /// > [!NOTE]
    /// > A user can still have access to the repository through organization permissions like base repository permissions.
    ///
    /// Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.
    ///
    /// For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/collaborators/{username}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/delete(repos/remove-collaborator)`.
    public enum repos_sol_remove_hyphen_collaborator {
        public static let id: Swift.String = "repos/remove-collaborator"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    username: Components.Parameters.username
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.username = username
                }
            }
            public var path: Operations.repos_sol_remove_hyphen_collaborator.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_collaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_remove_hyphen_collaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_remove_hyphen_collaborator.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_remove_hyphen_collaborator.Input.Path,
                headers: Operations.repos_sol_remove_hyphen_collaborator.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when collaborator was removed from the repository.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/delete(repos/remove-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_remove_hyphen_collaborator.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_remove_hyphen_collaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/delete(repos/remove-collaborator)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/delete(repos/remove-collaborator)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get repository permissions for a user
    ///
    /// Checks the repository permission of a collaborator. The possible repository
    /// permissions are `admin`, `write`, `read`, and `none`.
    ///
    /// *Note*: The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the
    /// `maintain` role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role assigned to the
    /// collaborator, see the `role_name` attribute, which will provide the full role name, including custom roles. The
    /// `permissions` hash can also be used to determine which base level of access the collaborator has to the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/collaborators/{username}/permission`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/permission/get(repos/get-collaborator-permission-level)`.
    public enum repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level {
        public static let id: Swift.String = "repos/get-collaborator-permission-level"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/permission/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/permission/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/permission/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/permission/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    username: Components.Parameters.username
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.username = username
                }
            }
            public var path: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/permission/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input.Path,
                headers: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/permission/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/collaborators/{username}/permission/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_collaborator_hyphen_permission)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_collaborator_hyphen_permission {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// if user has admin permissions
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/permission/get(repos/get-collaborator-permission-level)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_collaborator_hyphen_permission_hyphen_level.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/collaborators/{username}/permission/get(repos/get-collaborator-permission-level)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commit comments for a repository
    ///
    /// Lists the commit comments for a specified repository. Comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/get(repos/list-commit-comments-for-repo)`.
    public enum repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "repos/list-commit-comments-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.commit_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.commit_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/get(repos/list-commit-comments-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_commit_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a commit comment
    ///
    /// Gets a specified commit comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/get(repos/get-commit-comment)`.
    public enum repos_sol_get_hyphen_commit_hyphen_comment {
        public static let id: Swift.String = "repos/get-commit-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/GET/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input.Path,
                headers: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.commit_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.commit_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/get(repos/get-commit-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_commit_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_commit_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/get(repos/get-commit-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a commit comment
    ///
    /// Updates the contents of a specified commit comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/patch(repos/update-commit-comment)`.
    public enum repos_sol_update_hyphen_commit_hyphen_comment {
        public static let id: Swift.String = "repos/update-commit-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_commit_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_commit_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The contents of the comment
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The contents of the comment
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Path,
                headers: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.commit_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.commit_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/patch(repos/update-commit-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_commit_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_commit_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/patch(repos/update-commit-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a commit comment
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/delete(repos/delete-commit-comment)`.
    public enum repos_sol_delete_hyphen_commit_hyphen_comment {
        public static let id: Swift.String = "repos/delete-commit-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/DELETE/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/comments/{comment_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_commit_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_commit_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/delete(repos/delete-commit-comment)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_commit_hyphen_comment.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/comments/{comment_id}/delete(repos/delete-commit-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    public enum repos_sol_list_hyphen_commits {
        public static let id: Swift.String = "repos/list-commits"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_commits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query`.
            public struct Query: Sendable, Hashable {
                /// SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/sha`.
                public var sha: Swift.String?
                /// Only commits containing this file path will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/path`.
                public var path: Swift.String?
                /// GitHub username or email address to use to filter by commit author.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/author`.
                public var author: Swift.String?
                /// GitHub username or email address to use to filter by commit committer.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/committer`.
                public var committer: Swift.String?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/since`.
                public var since: Foundation.Date?
                /// Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/until`.
                public var until: Foundation.Date?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sha: SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///   - path: Only commits containing this file path will be returned.
                ///   - author: GitHub username or email address to use to filter by commit author.
                ///   - committer: GitHub username or email address to use to filter by commit committer.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///   - until: Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sha: Swift.String? = nil,
                    path: Swift.String? = nil,
                    author: Swift.String? = nil,
                    committer: Swift.String? = nil,
                    since: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sha = sha
                    self.path = path
                    self.author = author
                    self.committer = committer
                    self.since = since
                    self.until = until
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_commits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_commits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_commits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_commits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_commits.Input.Path,
                query: Operations.repos_sol_list_hyphen_commits.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_commits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_commits.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.commit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.commit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_commits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_commits.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_commits.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_commits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_commits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List branches for HEAD commit
    ///
    /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/get(repos/list-branches-for-head-commit)`.
    public enum repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit {
        public static let id: Swift.String = "repos/list-branches-for-head-commit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The SHA of the commit.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/GET/path/commit_sha`.
                public var commit_sha: Components.Parameters.commit_hyphen_sha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - commit_sha: The SHA of the commit.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    commit_sha: Components.Parameters.commit_hyphen_sha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commit_sha = commit_sha
                }
            }
            public var path: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input.Path,
                headers: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.branch_hyphen_short])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.branch_hyphen_short] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/get(repos/list-branches-for-head-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_branches_hyphen_for_hyphen_head_hyphen_commit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/get(repos/list-branches-for-head-commit)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head/get(repos/list-branches-for-head-commit)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commit comments
    ///
    /// Lists the comments for a specified commit.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/get(repos/list-comments-for-commit)`.
    public enum repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit {
        public static let id: Swift.String = "repos/list-comments-for-commit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The SHA of the commit.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/path/commit_sha`.
                public var commit_sha: Components.Parameters.commit_hyphen_sha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - commit_sha: The SHA of the commit.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    commit_sha: Components.Parameters.commit_hyphen_sha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commit_sha = commit_sha
                }
            }
            public var path: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Path,
                query: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.commit_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.commit_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/get(repos/list-comments-for-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_comments_hyphen_for_hyphen_commit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a commit comment
    ///
    /// Create a comment for a commit using its `:commit_sha`.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/commits/{commit_sha}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/post(repos/create-commit-comment)`.
    public enum repos_sol_create_hyphen_commit_hyphen_comment {
        public static let id: Swift.String = "repos/create-commit-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The SHA of the commit.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/path/commit_sha`.
                public var commit_sha: Components.Parameters.commit_hyphen_sha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - commit_sha: The SHA of the commit.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    commit_sha: Components.Parameters.commit_hyphen_sha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commit_sha = commit_sha
                }
            }
            public var path: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_commit_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_commit_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The contents of the comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Relative path of the file to comment on.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/requestBody/json/path`.
                    public var path: Swift.String?
                    /// Line index in the diff to comment on.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/requestBody/json/position`.
                    public var position: Swift.Int?
                    /// **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/requestBody/json/line`.
                    public var line: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The contents of the comment.
                    ///   - path: Relative path of the file to comment on.
                    ///   - position: Line index in the diff to comment on.
                    ///   - line: **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on.
                    public init(
                        body: Swift.String,
                        path: Swift.String? = nil,
                        position: Swift.Int? = nil,
                        line: Swift.Int? = nil
                    ) {
                        self.body = body
                        self.path = path
                        self.position = position
                        self.line = line
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                        case path
                        case position
                        case line
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Path,
                headers: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.commit_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.commit_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/post(repos/create-commit-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_commit_hyphen_comment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/post(repos/create-commit-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/comments/post(repos/create-commit-comment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    public enum repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit {
        public static let id: Swift.String = "repos/list-pull-requests-associated-with-commit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The SHA of the commit.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/commit_sha`.
                public var commit_sha: Components.Parameters.commit_hyphen_sha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - commit_sha: The SHA of the commit.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    commit_sha: Components.Parameters.commit_hyphen_sha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commit_sha = commit_sha
                }
            }
            public var path: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Path,
                query: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_hyphen_request_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.pull_hyphen_request_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_pull_hyphen_requests_hyphen_associated_hyphen_with_hyphen_commit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a commit
    ///
    /// Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
    ///
    /// > [!NOTE]
    /// > If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types.
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.
    /// - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)`.
    public enum repos_sol_get_hyphen_commit {
        public static let id: Swift.String = "repos/get-commit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/path/ref`.
                public var ref: Components.Parameters.commit_hyphen_ref
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ref: The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ref: Components.Parameters.commit_hyphen_ref
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ref = ref
                }
            }
            public var path: Operations.repos_sol_get_hyphen_commit.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.repos_sol_get_hyphen_commit.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_commit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_commit.Input.Path,
                query: Operations.repos_sol_get_hyphen_commit.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_commit.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.commit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.commit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_commit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_commit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_commit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_commit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/get(repos/get-commit)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the combined status for a specific reference
    ///
    /// Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
    ///
    ///
    /// Additionally, a combined `state` is returned. The `state` is one of:
    ///
    /// *   **failure** if any of the contexts report as `error` or `failure`
    /// *   **pending** if there are no statuses or a context is `pending`
    /// *   **success** if the latest status for all contexts is `success`
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/status`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/status/get(repos/get-combined-status-for-ref)`.
    public enum repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref {
        public static let id: Swift.String = "repos/get-combined-status-for-ref"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/path/ref`.
                public var ref: Components.Parameters.commit_hyphen_ref
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ref: The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ref: Components.Parameters.commit_hyphen_ref
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ref = ref
                }
            }
            public var path: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Path,
                query: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/status/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.combined_hyphen_commit_hyphen_status)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.combined_hyphen_commit_hyphen_status {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/status/get(repos/get-combined-status-for-ref)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_combined_hyphen_status_hyphen_for_hyphen_ref.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/status/get(repos/get-combined-status-for-ref)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commit statuses for a reference
    ///
    /// Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
    ///
    /// This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{ref}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/statuses/get(repos/list-commit-statuses-for-ref)`.
    public enum repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref {
        public static let id: Swift.String = "repos/list-commit-statuses-for-ref"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/path/ref`.
                public var ref: Components.Parameters.commit_hyphen_ref
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ref: The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ref: Components.Parameters.commit_hyphen_ref
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ref = ref
                }
            }
            public var path: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Path,
                query: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{ref}/statuses/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.status])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.status] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/statuses/get(repos/list-commit-statuses-for-ref)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_commit_hyphen_statuses_hyphen_for_hyphen_ref.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{ref}/statuses/get(repos/list-commit-statuses-for-ref)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get community profile metrics
    ///
    /// Returns all community profile metrics for a repository. The repository cannot be a fork.
    ///
    /// The returned metrics include an overall health score, the repository description, the presence of documentation, the
    /// detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
    /// README, and CONTRIBUTING files.
    ///
    /// The `health_percentage` score is defined as a percentage of how many of
    /// the recommended community health files are present. For more information, see
    /// "[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."
    ///
    /// `content_reports_enabled` is only returned for organization-owned repositories.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/community/profile`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/community/profile/get(repos/get-community-profile-metrics)`.
    public enum repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics {
        public static let id: Swift.String = "repos/get-community-profile-metrics"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/community/profile/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/community/profile/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/community/profile/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/community/profile/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input.Path,
                headers: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/community/profile/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/community/profile/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.community_hyphen_profile)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.community_hyphen_profile {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/community/profile/get(repos/get-community-profile-metrics)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_community_hyphen_profile_hyphen_metrics.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    public enum repos_sol_compare_hyphen_commits {
        public static let id: Swift.String = "repos/compare-commits"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/basehead`.
                public var basehead: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - basehead: The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    basehead: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.basehead = basehead
                }
            }
            public var path: Operations.repos_sol_compare_hyphen_commits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.repos_sol_compare_hyphen_commits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_compare_hyphen_commits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_compare_hyphen_commits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_compare_hyphen_commits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_compare_hyphen_commits.Input.Path,
                query: Operations.repos_sol_compare_hyphen_commits.Input.Query = .init(),
                headers: Operations.repos_sol_compare_hyphen_commits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.commit_hyphen_comparison)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.commit_hyphen_comparison {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_compare_hyphen_commits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_compare_hyphen_commits.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_compare_hyphen_commits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_compare_hyphen_commits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get repository content
    ///
    /// Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
    /// - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    /// - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
    ///
    /// If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
    ///
    /// If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.
    ///
    /// If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
    ///
    /// **Notes**:
    ///
    /// - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
    /// - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
    /// more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
    /// - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
    /// - If the requested file's size is:
    ///   - 1 MB or smaller: All features of this endpoint are supported.
    ///   - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
    /// string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
    ///   - Greater than 100 MB: This endpoint is not supported.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)`.
    public enum repos_sol_get_hyphen_content {
        public static let id: Swift.String = "repos/get-content"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// path parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path/path`.
                public var path: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - path: path parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    path: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.path = path
                }
            }
            public var path: Operations.repos_sol_get_hyphen_content.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The name of the commit/branch/tag. Default: the repository’s default branch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/query/ref`.
                public var ref: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: The name of the commit/branch/tag. Default: the repository’s default branch.
                public init(ref: Swift.String? = nil) {
                    self.ref = ref
                }
            }
            public var query: Operations.repos_sol_get_hyphen_content.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_content.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_content.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_content.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_content.Input.Path,
                query: Operations.repos_sol_get_hyphen_content.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_content.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/responses/200/content/application\/vnd.github.object`.
                    case application_vnd_period_github_period_object(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_github_period_object`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_github_period_object`.
                    /// - SeeAlso: `.application_vnd_period_github_period_object`.
                    public var application_vnd_period_github_period_object: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_vnd_period_github_period_object(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_content.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_content.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_content.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_content.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(repos/get-content)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_github_period_object
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.github.object":
                    self = .application_vnd_period_github_period_object
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_github_period_object:
                    return "application/vnd.github.object"
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .application_vnd_period_github_period_object,
                    .json
                ]
            }
        }
    }
    /// Create or update file contents
    ///
    /// Creates a new file or replaces an existing file in a repository.
    ///
    /// > [!NOTE]
    /// > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)`.
    public enum repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents {
        public static let id: Swift.String = "repos/create-or-update-file-contents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// path parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path/path`.
                public var path: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - path: path parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    path: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.path = path
                }
            }
            public var path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/message`.
                    public var message: Swift.String
                    /// The new file content, using Base64 encoding.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/content`.
                    public var content: Swift.String
                    /// **Required if you are updating a file**. The blob SHA of the file being replaced.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/sha`.
                    public var sha: Swift.String?
                    /// The branch name. Default: the repository’s default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/branch`.
                    public var branch: Swift.String?
                    /// The person that committed the file. Default: the authenticated user.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/committer`.
                    public struct committerPayload: Codable, Hashable, Sendable {
                        /// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/committer/name`.
                        public var name: Swift.String
                        /// The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/committer/email`.
                        public var email: Swift.String
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/committer/date`.
                        public var date: Swift.String?
                        /// Creates a new `committerPayload`.
                        ///
                        /// - Parameters:
                        ///   - name: The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                        ///   - email: The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                        ///   - date:
                        public init(
                            name: Swift.String,
                            email: Swift.String,
                            date: Swift.String? = nil
                        ) {
                            self.name = name
                            self.email = email
                            self.date = date
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                            case email
                            case date
                        }
                    }
                    /// The person that committed the file. Default: the authenticated user.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/committer`.
                    public var committer: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body.jsonPayload.committerPayload?
                    /// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/author`.
                    public struct authorPayload: Codable, Hashable, Sendable {
                        /// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/author/name`.
                        public var name: Swift.String
                        /// The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/author/email`.
                        public var email: Swift.String
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/author/date`.
                        public var date: Swift.String?
                        /// Creates a new `authorPayload`.
                        ///
                        /// - Parameters:
                        ///   - name: The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                        ///   - email: The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                        ///   - date:
                        public init(
                            name: Swift.String,
                            email: Swift.String,
                            date: Swift.String? = nil
                        ) {
                            self.name = name
                            self.email = email
                            self.date = date
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                            case email
                            case date
                        }
                    }
                    /// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/author`.
                    public var author: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body.jsonPayload.authorPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - message: The commit message.
                    ///   - content: The new file content, using Base64 encoding.
                    ///   - sha: **Required if you are updating a file**. The blob SHA of the file being replaced.
                    ///   - branch: The branch name. Default: the repository’s default branch.
                    ///   - committer: The person that committed the file. Default: the authenticated user.
                    ///   - author: The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
                    public init(
                        message: Swift.String,
                        content: Swift.String,
                        sha: Swift.String? = nil,
                        branch: Swift.String? = nil,
                        committer: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body.jsonPayload.committerPayload? = nil,
                        author: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body.jsonPayload.authorPayload? = nil
                    ) {
                        self.message = message
                        self.content = content
                        self.sha = sha
                        self.branch = branch
                        self.committer = committer
                        self.author = author
                    }
                    public enum CodingKeys: String, CodingKey {
                        case message
                        case content
                        case sha
                        case branch
                        case committer
                        case author
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Path,
                headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.file_hyphen_commit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.file_hyphen_commit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.file_hyphen_commit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.file_hyphen_commit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/409/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/409/content/json/case1`.
                        case basic_hyphen_error(Components.Schemas.basic_hyphen_error)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/409/content/json/case2`.
                        case repository_hyphen_rule_hyphen_violation_hyphen_error(Components.Schemas.repository_hyphen_rule_hyphen_violation_hyphen_error)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .basic_hyphen_error(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .repository_hyphen_rule_hyphen_violation_hyphen_error(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .basic_hyphen_error(value):
                                try value.encode(to: encoder)
                            case let .repository_hyphen_rule_hyphen_violation_hyphen_error(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/responses/409/content/application\/json`.
                    case json(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Conflict.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Conflict.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(repos/create-or-update-file-contents)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_file_hyphen_contents.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a file
    ///
    /// Deletes a file in a repository.
    ///
    /// You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
    ///
    /// The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
    ///
    /// You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
    ///
    /// > [!NOTE]
    /// > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)`.
    public enum repos_sol_delete_hyphen_file {
        public static let id: Swift.String = "repos/delete-file"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// path parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path/path`.
                public var path: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - path: path parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    path: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.path = path
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_file.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_file.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_file.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_file.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/message`.
                    public var message: Swift.String
                    /// The blob SHA of the file being deleted.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/sha`.
                    public var sha: Swift.String
                    /// The branch name. Default: the repository’s default branch
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/branch`.
                    public var branch: Swift.String?
                    /// object containing information about the committer.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/committer`.
                    public struct committerPayload: Codable, Hashable, Sendable {
                        /// The name of the author (or committer) of the commit
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/committer/name`.
                        public var name: Swift.String?
                        /// The email of the author (or committer) of the commit
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/committer/email`.
                        public var email: Swift.String?
                        /// Creates a new `committerPayload`.
                        ///
                        /// - Parameters:
                        ///   - name: The name of the author (or committer) of the commit
                        ///   - email: The email of the author (or committer) of the commit
                        public init(
                            name: Swift.String? = nil,
                            email: Swift.String? = nil
                        ) {
                            self.name = name
                            self.email = email
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                            case email
                        }
                    }
                    /// object containing information about the committer.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/committer`.
                    public var committer: Operations.repos_sol_delete_hyphen_file.Input.Body.jsonPayload.committerPayload?
                    /// object containing information about the author.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/author`.
                    public struct authorPayload: Codable, Hashable, Sendable {
                        /// The name of the author (or committer) of the commit
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/author/name`.
                        public var name: Swift.String?
                        /// The email of the author (or committer) of the commit
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/author/email`.
                        public var email: Swift.String?
                        /// Creates a new `authorPayload`.
                        ///
                        /// - Parameters:
                        ///   - name: The name of the author (or committer) of the commit
                        ///   - email: The email of the author (or committer) of the commit
                        public init(
                            name: Swift.String? = nil,
                            email: Swift.String? = nil
                        ) {
                            self.name = name
                            self.email = email
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                            case email
                        }
                    }
                    /// object containing information about the author.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/json/author`.
                    public var author: Operations.repos_sol_delete_hyphen_file.Input.Body.jsonPayload.authorPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - message: The commit message.
                    ///   - sha: The blob SHA of the file being deleted.
                    ///   - branch: The branch name. Default: the repository’s default branch
                    ///   - committer: object containing information about the committer.
                    ///   - author: object containing information about the author.
                    public init(
                        message: Swift.String,
                        sha: Swift.String,
                        branch: Swift.String? = nil,
                        committer: Operations.repos_sol_delete_hyphen_file.Input.Body.jsonPayload.committerPayload? = nil,
                        author: Operations.repos_sol_delete_hyphen_file.Input.Body.jsonPayload.authorPayload? = nil
                    ) {
                        self.message = message
                        self.sha = sha
                        self.branch = branch
                        self.committer = committer
                        self.author = author
                    }
                    public enum CodingKeys: String, CodingKey {
                        case message
                        case sha
                        case branch
                        case committer
                        case author
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/requestBody/content/application\/json`.
                case json(Operations.repos_sol_delete_hyphen_file.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_delete_hyphen_file.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_delete_hyphen_file.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_file.Input.Headers = .init(),
                body: Operations.repos_sol_delete_hyphen_file.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.file_hyphen_commit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.file_hyphen_commit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_delete_hyphen_file.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_delete_hyphen_file.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_delete_hyphen_file.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_delete_hyphen_file.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(repos/delete-file)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    public enum repos_sol_list_hyphen_contributors {
        public static let id: Swift.String = "repos/list-contributors"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_contributors.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Set to `1` or `true` to include anonymous contributors in results.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/anon`.
                public var anon: Swift.String?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - anon: Set to `1` or `true` to include anonymous contributors in results.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    anon: Swift.String? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.anon = anon
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_contributors.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_contributors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_contributors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_contributors.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_contributors.Input.Path,
                query: Operations.repos_sol_list_hyphen_contributors.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_contributors.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_contributors.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.contributor])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.contributor] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_contributors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_contributors.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_contributors.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// If repository contains content
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_contributors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_contributors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if repository is empty
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_list_hyphen_contributors.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_list_hyphen_contributors.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List deployments
    ///
    /// Simple filtering of deployments is available via query parameters:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/get(repos/list-deployments)`.
    public enum repos_sol_list_hyphen_deployments {
        public static let id: Swift.String = "repos/list-deployments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_deployments.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The SHA recorded at creation time.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/query/sha`.
                public var sha: Swift.String?
                /// The name of the ref. This can be a branch, tag, or SHA.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/query/ref`.
                public var ref: Swift.String?
                /// The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/query/task`.
                public var task: Swift.String?
                /// The name of the environment that was deployed to (e.g., `staging` or `production`).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/query/environment`.
                public var environment: Swift.String?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sha: The SHA recorded at creation time.
                ///   - ref: The name of the ref. This can be a branch, tag, or SHA.
                ///   - task: The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
                ///   - environment: The name of the environment that was deployed to (e.g., `staging` or `production`).
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sha: Swift.String? = nil,
                    ref: Swift.String? = nil,
                    task: Swift.String? = nil,
                    environment: Swift.String? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sha = sha
                    self.ref = ref
                    self.task = task
                    self.environment = environment
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_deployments.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deployments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deployments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_deployments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_deployments.Input.Path,
                query: Operations.repos_sol_list_hyphen_deployments.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_deployments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_deployments.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.deployment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.deployment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_deployments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_deployments.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_deployments.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/get(repos/list-deployments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_deployments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_deployments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a deployment
    ///
    /// Deployments offer a few configurable parameters with certain defaults.
    ///
    /// The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
    /// before we merge a pull request.
    ///
    /// The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
    /// multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
    /// makes it easier to track which environments have requested deployments. The default environment is `production`.
    ///
    /// The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
    /// the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
    /// the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
    /// return a failure response.
    ///
    /// By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
    /// state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
    /// specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
    /// not require any contexts or create any commit statuses, the deployment will always succeed.
    ///
    /// The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
    /// field that will be passed on when a deployment event is dispatched.
    ///
    /// The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
    /// be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
    /// application with debugging enabled.
    ///
    /// Merged branch response:
    ///
    /// You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
    /// a deployment. This auto-merge happens when:
    /// *   Auto-merge option is enabled in the repository
    /// *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
    /// *   There are no merge conflicts
    ///
    /// If there are no new commits in the base branch, a new request to create a deployment should give a successful
    /// response.
    ///
    /// Merge conflict response:
    ///
    /// This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
    /// be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
    ///
    /// Failed commit status checks:
    ///
    /// This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
    /// status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/post(repos/create-deployment)`.
    public enum repos_sol_create_hyphen_deployment {
        public static let id: Swift.String = "repos/create-deployment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_deployment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_deployment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The ref to deploy. This can be a branch, tag, or SHA.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/ref`.
                    public var ref: Swift.String
                    /// Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/task`.
                    public var task: Swift.String?
                    /// Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/auto_merge`.
                    public var auto_merge: Swift.Bool?
                    /// The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/required_contexts`.
                    public var required_contexts: [Swift.String]?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/payload`.
                    @frozen public enum payloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/payload/case1`.
                        public struct Case1Payload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                            /// Creates a new `Case1Payload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/payload/case1`.
                        case case1(Operations.repos_sol_create_hyphen_deployment.Input.Body.jsonPayload.payloadPayload.Case1Payload)
                        /// JSON payload with extra information about the deployment.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/payload/case2`.
                        case case2(Swift.String)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try value.encode(to: encoder)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/payload`.
                    public var payload: Operations.repos_sol_create_hyphen_deployment.Input.Body.jsonPayload.payloadPayload?
                    /// Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/environment`.
                    public var environment: Swift.String?
                    /// Short description of the deployment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/transient_environment`.
                    public var transient_environment: Swift.Bool?
                    /// Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/json/production_environment`.
                    public var production_environment: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ref: The ref to deploy. This can be a branch, tag, or SHA.
                    ///   - task: Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
                    ///   - auto_merge: Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
                    ///   - required_contexts: The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
                    ///   - payload:
                    ///   - environment: Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
                    ///   - description: Short description of the deployment.
                    ///   - transient_environment: Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
                    ///   - production_environment: Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
                    public init(
                        ref: Swift.String,
                        task: Swift.String? = nil,
                        auto_merge: Swift.Bool? = nil,
                        required_contexts: [Swift.String]? = nil,
                        payload: Operations.repos_sol_create_hyphen_deployment.Input.Body.jsonPayload.payloadPayload? = nil,
                        environment: Swift.String? = nil,
                        description: Swift.String? = nil,
                        transient_environment: Swift.Bool? = nil,
                        production_environment: Swift.Bool? = nil
                    ) {
                        self.ref = ref
                        self.task = task
                        self.auto_merge = auto_merge
                        self.required_contexts = required_contexts
                        self.payload = payload
                        self.environment = environment
                        self.description = description
                        self.transient_environment = transient_environment
                        self.production_environment = production_environment
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ref
                        case task
                        case auto_merge
                        case required_contexts
                        case payload
                        case environment
                        case description
                        case transient_environment
                        case production_environment
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_deployment.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_deployment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_deployment.Input.Path,
                headers: Operations.repos_sol_create_hyphen_deployment.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_deployment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.deployment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_deployment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_deployment.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/post(repos/create-deployment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_deployment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_deployment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/responses/202/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/responses/202/content/json/message`.
                        public var message: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        public init(message: Swift.String? = nil) {
                            self.message = message
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/POST/responses/202/content/application\/json`.
                    case json(Operations.repos_sol_create_hyphen_deployment.Output.Accepted.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_create_hyphen_deployment.Output.Accepted.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_deployment.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_deployment.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Merged branch response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/post(repos/create-deployment)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.repos_sol_create_hyphen_deployment.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.repos_sol_create_hyphen_deployment.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when there is a merge conflict or the commit's status checks failed
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/post(repos/create-deployment)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.repos_sol_create_hyphen_deployment.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.repos_sol_create_hyphen_deployment.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/post(repos/create-deployment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a deployment
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/get(repos/get-deployment)`.
    public enum repos_sol_get_hyphen_deployment {
        public static let id: Swift.String = "repos/get-deployment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// deployment_id parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/GET/path/deployment_id`.
                public var deployment_id: Components.Parameters.deployment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - deployment_id: deployment_id parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    deployment_id: Components.Parameters.deployment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.deployment_id = deployment_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_deployment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deployment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deployment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_deployment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_deployment.Input.Path,
                headers: Operations.repos_sol_get_hyphen_deployment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.deployment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_deployment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_deployment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/get(repos/get-deployment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_deployment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_deployment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/get(repos/get-deployment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a deployment
    ///
    /// If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.
    ///
    /// To set a deployment as inactive, you must:
    ///
    /// *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
    /// *   Mark the active deployment as inactive by adding any non-successful deployment status.
    ///
    /// For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/deployments/{deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/delete(repos/delete-deployment)`.
    public enum repos_sol_delete_hyphen_deployment {
        public static let id: Swift.String = "repos/delete-deployment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// deployment_id parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/DELETE/path/deployment_id`.
                public var deployment_id: Components.Parameters.deployment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - deployment_id: deployment_id parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    deployment_id: Components.Parameters.deployment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.deployment_id = deployment_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_deployment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_deployment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_deployment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_deployment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_deployment.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_deployment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/delete(repos/delete-deployment)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_deployment.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_deployment.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/delete(repos/delete-deployment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/delete(repos/delete-deployment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List deployment statuses
    ///
    /// Users with pull access can view deployment statuses for a deployment:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/get(repos/list-deployment-statuses)`.
    public enum repos_sol_list_hyphen_deployment_hyphen_statuses {
        public static let id: Swift.String = "repos/list-deployment-statuses"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// deployment_id parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/path/deployment_id`.
                public var deployment_id: Components.Parameters.deployment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - deployment_id: deployment_id parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    deployment_id: Components.Parameters.deployment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.deployment_id = deployment_id
                }
            }
            public var path: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Path,
                query: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.deployment_hyphen_status])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.deployment_hyphen_status] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/get(repos/list-deployment-statuses)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_deployment_hyphen_statuses.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/get(repos/list-deployment-statuses)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a deployment status
    ///
    /// Users with `push` access can create deployment statuses for a given deployment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/post(repos/create-deployment-status)`.
    public enum repos_sol_create_hyphen_deployment_hyphen_status {
        public static let id: Swift.String = "repos/create-deployment-status"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// deployment_id parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/path/deployment_id`.
                public var deployment_id: Components.Parameters.deployment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - deployment_id: deployment_id parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    deployment_id: Components.Parameters.deployment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.deployment_id = deployment_id
                }
            }
            public var path: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment_hyphen_status.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment_hyphen_status.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case error = "error"
                        case failure = "failure"
                        case inactive = "inactive"
                        case in_progress = "in_progress"
                        case queued = "queued"
                        case pending = "pending"
                        case success = "success"
                    }
                    /// The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/state`.
                    public var state: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Body.jsonPayload.statePayload
                    /// The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
                    ///
                    /// > [!NOTE]
                    /// > It's recommended to use the `log_url` parameter, which replaces `target_url`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/target_url`.
                    public var target_url: Swift.String?
                    /// The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/log_url`.
                    public var log_url: Swift.String?
                    /// A short description of the status. The maximum description length is 140 characters.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/environment`.
                    public var environment: Swift.String?
                    /// Sets the URL for accessing your environment. Default: `""`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/environment_url`.
                    public var environment_url: Swift.String?
                    /// Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/json/auto_inactive`.
                    public var auto_inactive: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - state: The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
                    ///   - target_url: The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
                    ///   - log_url: The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
                    ///   - description: A short description of the status. The maximum description length is 140 characters.
                    ///   - environment: Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.
                    ///   - environment_url: Sets the URL for accessing your environment. Default: `""`
                    ///   - auto_inactive: Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
                    public init(
                        state: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Body.jsonPayload.statePayload,
                        target_url: Swift.String? = nil,
                        log_url: Swift.String? = nil,
                        description: Swift.String? = nil,
                        environment: Swift.String? = nil,
                        environment_url: Swift.String? = nil,
                        auto_inactive: Swift.Bool? = nil
                    ) {
                        self.state = state
                        self.target_url = target_url
                        self.log_url = log_url
                        self.description = description
                        self.environment = environment
                        self.environment_url = environment_url
                        self.auto_inactive = auto_inactive
                    }
                    public enum CodingKeys: String, CodingKey {
                        case state
                        case target_url
                        case log_url
                        case description
                        case environment
                        case environment_url
                        case auto_inactive
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Path,
                headers: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.deployment_hyphen_status)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment_hyphen_status {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/post(repos/create-deployment-status)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_deployment_hyphen_status.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/post(repos/create-deployment-status)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a deployment status
    ///
    /// Users with pull access can view a deployment status for a deployment:
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/get(repos/get-deployment-status)`.
    public enum repos_sol_get_hyphen_deployment_hyphen_status {
        public static let id: Swift.String = "repos/get-deployment-status"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// deployment_id parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/path/deployment_id`.
                public var deployment_id: Components.Parameters.deployment_hyphen_id
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/path/status_id`.
                public var status_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - deployment_id: deployment_id parameter
                ///   - status_id:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    deployment_id: Components.Parameters.deployment_hyphen_id,
                    status_id: Swift.Int
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.deployment_id = deployment_id
                    self.status_id = status_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deployment_hyphen_status.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deployment_hyphen_status.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input.Path,
                headers: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.deployment_hyphen_status)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment_hyphen_status {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/get(repos/get-deployment-status)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_deployment_hyphen_status.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_deployment_hyphen_status.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}/get(repos/get-deployment-status)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a repository dispatch event
    ///
    /// You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
    ///
    /// The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
    ///
    /// This input example shows how you can use the `client_payload` as a test to debug your workflow.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/dispatches`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dispatches/post(repos/create-dispatch-event)`.
    public enum repos_sol_create_hyphen_dispatch_hyphen_event {
        public static let id: Swift.String = "repos/create-dispatch-event"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_dispatch_hyphen_event.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_dispatch_hyphen_event.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A custom webhook event name. Must be 100 characters or fewer.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/requestBody/json/event_type`.
                    public var event_type: Swift.String
                    /// JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/requestBody/json/client_payload`.
                    public struct client_payloadPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `client_payloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/requestBody/json/client_payload`.
                    public var client_payload: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Body.jsonPayload.client_payloadPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - event_type: A custom webhook event name. Must be 100 characters or fewer.
                    ///   - client_payload: JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.
                    public init(
                        event_type: Swift.String,
                        client_payload: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Body.jsonPayload.client_payloadPayload? = nil
                    ) {
                        self.event_type = event_type
                        self.client_payload = client_payload
                    }
                    public enum CodingKeys: String, CodingKey {
                        case event_type
                        case client_payload
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dispatches/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Path,
                headers: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dispatches/post(repos/create-dispatch-event)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_create_hyphen_dispatch_hyphen_event.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dispatches/post(repos/create-dispatch-event)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dispatches/post(repos/create-dispatch-event)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List environments
    ///
    /// Lists the environments for a repository.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/get(repos/get-all-environments)`.
    public enum repos_sol_get_hyphen_all_hyphen_environments {
        public static let id: Swift.String = "repos/get-all-environments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_environments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_environments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Path,
                query: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_all_hyphen_environments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// The number of environments in this repository
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/responses/200/content/json/environments`.
                        public var environments: [Components.Schemas.environment]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count: The number of environments in this repository
                        ///   - environments:
                        public init(
                            total_count: Swift.Int? = nil,
                            environments: [Components.Schemas.environment]? = nil
                        ) {
                            self.total_count = total_count
                            self.environments = environments
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case environments
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/GET/responses/200/content/application\/json`.
                    case json(Operations.repos_sol_get_hyphen_all_hyphen_environments.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_get_hyphen_all_hyphen_environments.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_all_hyphen_environments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_all_hyphen_environments.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/get(repos/get-all-environments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_all_hyphen_environments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_all_hyphen_environments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an environment
    ///
    /// > [!NOTE]
    /// > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/get(repos/get-environment)`.
    public enum repos_sol_get_hyphen_environment {
        public static let id: Swift.String = "repos/get-environment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.repos_sol_get_hyphen_environment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_environment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_environment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_environment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_environment.Input.Path,
                headers: Operations.repos_sol_get_hyphen_environment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.environment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.environment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_environment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_environment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/get(repos/get-environment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_environment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_environment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update an environment
    ///
    /// Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
    ///
    /// > [!NOTE]
    /// > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
    ///
    /// > [!NOTE]
    /// > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/put(repos/create-or-update-environment)`.
    public enum repos_sol_create_hyphen_or_hyphen_update_hyphen_environment {
        public static let id: Swift.String = "repos/create-or-update-environment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/wait_timer`.
                    public var wait_timer: Components.Schemas.wait_hyphen_timer?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/prevent_self_review`.
                    public var prevent_self_review: Components.Schemas.prevent_hyphen_self_hyphen_review?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/reviewersPayload`.
                    public struct reviewersPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/reviewersPayload/type`.
                        public var _type: Components.Schemas.deployment_hyphen_reviewer_hyphen_type?
                        /// The id of the user or team who can review the deployment
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/reviewersPayload/id`.
                        public var id: Swift.Int?
                        /// Creates a new `reviewersPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - id: The id of the user or team who can review the deployment
                        public init(
                            _type: Components.Schemas.deployment_hyphen_reviewer_hyphen_type? = nil,
                            id: Swift.Int? = nil
                        ) {
                            self._type = _type
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case id
                        }
                    }
                    /// The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/reviewers`.
                    public typealias reviewersPayload = [Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body.jsonPayload.reviewersPayloadPayload]
                    /// The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/reviewers`.
                    public var reviewers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body.jsonPayload.reviewersPayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/json/deployment_branch_policy`.
                    public var deployment_branch_policy: Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_settings?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - wait_timer:
                    ///   - prevent_self_review:
                    ///   - reviewers: The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
                    ///   - deployment_branch_policy:
                    public init(
                        wait_timer: Components.Schemas.wait_hyphen_timer? = nil,
                        prevent_self_review: Components.Schemas.prevent_hyphen_self_hyphen_review? = nil,
                        reviewers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body.jsonPayload.reviewersPayload? = nil,
                        deployment_branch_policy: Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_settings? = nil
                    ) {
                        self.wait_timer = wait_timer
                        self.prevent_self_review = prevent_self_review
                        self.reviewers = reviewers
                        self.deployment_branch_policy = deployment_branch_policy
                    }
                    public enum CodingKeys: String, CodingKey {
                        case wait_timer
                        case prevent_self_review
                        case reviewers
                        case deployment_branch_policy
                    }
                    public init(from decoder: any Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)
                        wait_timer = try container.decodeIfPresent(
                            Components.Schemas.wait_hyphen_timer.self,
                            forKey: .wait_timer
                        )
                        prevent_self_review = try container.decodeIfPresent(
                            Components.Schemas.prevent_hyphen_self_hyphen_review.self,
                            forKey: .prevent_self_review
                        )
                        reviewers = try container.decodeIfPresent(
                            Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body.jsonPayload.reviewersPayload.self,
                            forKey: .reviewers
                        )
                        deployment_branch_policy = try container.decodeIfPresent(
                            Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_settings.self,
                            forKey: .deployment_branch_policy
                        )
                        try decoder.ensureNoAdditionalProperties(knownKeys: [
                            "wait_timer",
                            "prevent_self_review",
                            "reviewers",
                            "deployment_branch_policy"
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Path,
                headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.environment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.environment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/put(repos/create-or-update-environment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/PUT/responses/422/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Validation error when the environment name is invalid or when `protected_branches` and `custom_branch_policies` in `deployment_branch_policy` are set to the same value
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/put(repos/create-or-update-environment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_environment.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an environment
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/delete(repos/delete-an-environment)`.
    public enum repos_sol_delete_hyphen_an_hyphen_environment {
        public static let id: Swift.String = "repos/delete-an-environment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/DELETE/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_an_hyphen_environment.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_delete_hyphen_an_hyphen_environment.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Default response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/delete(repos/delete-an-environment)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_an_hyphen_environment.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_an_hyphen_environment.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List deployment branch policies
    ///
    /// Lists the deployment branch policies for an environment.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/get(repos/list-deployment-branch-policies)`.
    public enum repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies {
        public static let id: Swift.String = "repos/list-deployment-branch-policies"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Path,
                query: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// The number of deployment branch policies for the environment.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/responses/200/content/json/branch_policies`.
                        public var branch_policies: [Components.Schemas.deployment_hyphen_branch_hyphen_policy]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count: The number of deployment branch policies for the environment.
                        ///   - branch_policies:
                        public init(
                            total_count: Swift.Int,
                            branch_policies: [Components.Schemas.deployment_hyphen_branch_hyphen_policy]
                        ) {
                            self.total_count = total_count
                            self.branch_policies = branch_policies
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case branch_policies
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/GET/responses/200/content/application\/json`.
                    case json(Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/get(repos/list-deployment-branch-policies)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_deployment_hyphen_branch_hyphen_policies.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a deployment branch policy
    ///
    /// Creates a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/post(repos/create-deployment-branch-policy)`.
    public enum repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy {
        public static let id: Swift.String = "repos/create-deployment-branch-policy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                }
            }
            public var path: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern_hyphen_with_hyphen_type)
            }
            public var body: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path,
                headers: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.deployment_hyphen_branch_hyphen_policy)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment_hyphen_branch_hyphen_policy {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/post(repos/create-deployment-branch-policy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found or `deployment_branch_policy.custom_branch_policies` property for the environment is set to false
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/post(repos/create-deployment-branch-policy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct SeeOther: Sendable, Hashable {
                /// Creates a new `SeeOther`.
                public init() {}
            }
            /// Response if the same branch name pattern already exists
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/post(repos/create-deployment-branch-policy)/responses/303`.
            ///
            /// HTTP response code: `303 seeOther`.
            case seeOther(Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.SeeOther)
            /// The associated value of the enum case if `self` is `.seeOther`.
            ///
            /// - Throws: An error if `self` is not `.seeOther`.
            /// - SeeAlso: `.seeOther`.
            public var seeOther: Operations.repos_sol_create_hyphen_deployment_hyphen_branch_hyphen_policy.Output.SeeOther {
                get throws {
                    switch self {
                    case let .seeOther(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "seeOther",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a deployment branch policy
    ///
    /// Gets a deployment branch or tag policy for an environment.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/get(repos/get-deployment-branch-policy)`.
    public enum repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy {
        public static let id: Swift.String = "repos/get-deployment-branch-policy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The unique identifier of the branch policy.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/path/branch_policy_id`.
                public var branch_policy_id: Components.Parameters.branch_hyphen_policy_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - branch_policy_id: The unique identifier of the branch policy.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    branch_policy_id: Components.Parameters.branch_hyphen_policy_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.branch_policy_id = branch_policy_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path,
                headers: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.deployment_hyphen_branch_hyphen_policy)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment_hyphen_branch_hyphen_policy {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/get(repos/get-deployment-branch-policy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a deployment branch policy
    ///
    /// Updates a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/put(repos/update-deployment-branch-policy)`.
    public enum repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy {
        public static let id: Swift.String = "repos/update-deployment-branch-policy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The unique identifier of the branch policy.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/path/branch_policy_id`.
                public var branch_policy_id: Components.Parameters.branch_hyphen_policy_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - branch_policy_id: The unique identifier of the branch policy.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    branch_policy_id: Components.Parameters.branch_hyphen_policy_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.branch_policy_id = branch_policy_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.deployment_hyphen_branch_hyphen_policy_hyphen_name_hyphen_pattern)
            }
            public var body: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path,
                headers: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.deployment_hyphen_branch_hyphen_policy)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment_hyphen_branch_hyphen_policy {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/put(repos/update-deployment-branch-policy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_deployment_hyphen_branch_hyphen_policy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a deployment branch policy
    ///
    /// Deletes a deployment branch or tag policy for an environment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/delete(repos/delete-deployment-branch-policy)`.
    public enum repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy {
        public static let id: Swift.String = "repos/delete-deployment-branch-policy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/DELETE/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The unique identifier of the branch policy.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/DELETE/path/branch_policy_id`.
                public var branch_policy_id: Components.Parameters.branch_hyphen_policy_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - branch_policy_id: The unique identifier of the branch policy.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    branch_policy_id: Components.Parameters.branch_hyphen_policy_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.branch_policy_id = branch_policy_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}/delete(repos/delete-deployment-branch-policy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_deployment_hyphen_branch_hyphen_policy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get all deployment protection rules for an environment
    ///
    /// Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/get(repos/get-all-deployment-protection-rules)`.
    public enum repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules {
        public static let id: Swift.String = "repos/get-all-deployment-protection-rules"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                public init(
                    environment_name: Components.Parameters.environment_hyphen_name,
                    repo: Components.Parameters.repo,
                    owner: Components.Parameters.owner
                ) {
                    self.environment_name = environment_name
                    self.repo = repo
                    self.owner = owner
                }
            }
            public var path: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input.Path,
                headers: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// The number of enabled custom deployment protection rules for this environment
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/responses/200/content/json/custom_deployment_protection_rules`.
                        public var custom_deployment_protection_rules: [Components.Schemas.deployment_hyphen_protection_hyphen_rule]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count: The number of enabled custom deployment protection rules for this environment
                        ///   - custom_deployment_protection_rules:
                        public init(
                            total_count: Swift.Int? = nil,
                            custom_deployment_protection_rules: [Components.Schemas.deployment_hyphen_protection_hyphen_rule]? = nil
                        ) {
                            self.total_count = total_count
                            self.custom_deployment_protection_rules = custom_deployment_protection_rules
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case custom_deployment_protection_rules
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/GET/responses/200/content/application\/json`.
                    case json(Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of deployment protection rules
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/get(repos/get-all-deployment-protection-rules)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_all_hyphen_deployment_hyphen_protection_hyphen_rules.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a custom deployment protection rule on an environment
    ///
    /// Enable a custom deployment protection rule for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/post(repos/create-deployment-protection-rule)`.
    public enum repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule {
        public static let id: Swift.String = "repos/create-deployment-protection-rule"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                public init(
                    environment_name: Components.Parameters.environment_hyphen_name,
                    repo: Components.Parameters.repo,
                    owner: Components.Parameters.owner
                ) {
                    self.environment_name = environment_name
                    self.repo = repo
                    self.owner = owner
                }
            }
            public var path: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The ID of the custom app that will be enabled on the environment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/requestBody/json/integration_id`.
                    public var integration_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - integration_id: The ID of the custom app that will be enabled on the environment.
                    public init(integration_id: Swift.Int? = nil) {
                        self.integration_id = integration_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case integration_id
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path,
                headers: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.deployment_hyphen_protection_hyphen_rule)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment_hyphen_protection_hyphen_rule {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Created.Body) {
                    self.body = body
                }
            }
            /// The enabled custom deployment protection rule
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/post(repos/create-deployment-protection-rule)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List custom deployment rule integrations available for an environment
    ///
    /// Gets all custom deployment protection rule integrations that are available for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/get(repos/list-custom-deployment-rule-integrations)`.
    public enum repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations {
        public static let id: Swift.String = "repos/list-custom-deployment-rule-integrations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                public init(
                    environment_name: Components.Parameters.environment_hyphen_name,
                    repo: Components.Parameters.repo,
                    owner: Components.Parameters.owner
                ) {
                    self.environment_name = environment_name
                    self.repo = repo
                    self.owner = owner
                }
            }
            public var path: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Path,
                query: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// The total number of custom deployment protection rule integrations available for this environment.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/responses/200/content/json/available_custom_deployment_protection_rule_integrations`.
                        public var available_custom_deployment_protection_rule_integrations: [Components.Schemas.custom_hyphen_deployment_hyphen_rule_hyphen_app]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count: The total number of custom deployment protection rule integrations available for this environment.
                        ///   - available_custom_deployment_protection_rule_integrations:
                        public init(
                            total_count: Swift.Int? = nil,
                            available_custom_deployment_protection_rule_integrations: [Components.Schemas.custom_hyphen_deployment_hyphen_rule_hyphen_app]? = nil
                        ) {
                            self.total_count = total_count
                            self.available_custom_deployment_protection_rule_integrations = available_custom_deployment_protection_rule_integrations
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case available_custom_deployment_protection_rule_integrations
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/GET/responses/200/content/application\/json`.
                    case json(Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of custom deployment rule integrations available for this environment.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps/get(repos/list-custom-deployment-rule-integrations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_custom_hyphen_deployment_hyphen_rule_hyphen_integrations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a custom deployment protection rule
    ///
    /// Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    ///
    /// For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/get(repos/get-custom-deployment-protection-rule)`.
    public enum repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule {
        public static let id: Swift.String = "repos/get-custom-deployment-protection-rule"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The unique identifier of the protection rule.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/path/protection_rule_id`.
                public var protection_rule_id: Components.Parameters.protection_hyphen_rule_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - protection_rule_id: The unique identifier of the protection rule.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    environment_name: Components.Parameters.environment_hyphen_name,
                    protection_rule_id: Components.Parameters.protection_hyphen_rule_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.environment_name = environment_name
                    self.protection_rule_id = protection_rule_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path,
                headers: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.deployment_hyphen_protection_hyphen_rule)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deployment_hyphen_protection_hyphen_rule {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/get(repos/get-custom-deployment-protection-rule)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_custom_hyphen_deployment_hyphen_protection_hyphen_rule.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Disable a custom protection rule for an environment
    ///
    /// Disables a custom deployment protection rule for an environment.
    ///
    /// The authenticated user must have admin or owner permissions to the repository to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/delete(repos/disable-deployment-protection-rule)`.
    public enum repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule {
        public static let id: Swift.String = "repos/disable-deployment-protection-rule"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/DELETE/path/environment_name`.
                public var environment_name: Components.Parameters.environment_hyphen_name
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The unique identifier of the protection rule.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/DELETE/path/protection_rule_id`.
                public var protection_rule_id: Components.Parameters.protection_hyphen_rule_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - environment_name: The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - protection_rule_id: The unique identifier of the protection rule.
                public init(
                    environment_name: Components.Parameters.environment_hyphen_name,
                    repo: Components.Parameters.repo,
                    owner: Components.Parameters.owner,
                    protection_rule_id: Components.Parameters.protection_hyphen_rule_hyphen_id
                ) {
                    self.environment_name = environment_name
                    self.repo = repo
                    self.owner = owner
                    self.protection_rule_id = protection_rule_id
                }
            }
            public var path: Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}/delete(repos/disable-deployment-protection-rule)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_disable_hyphen_deployment_hyphen_protection_hyphen_rule.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List forks
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/get(repos/list-forks)`.
    public enum repos_sol_list_hyphen_forks {
        public static let id: Swift.String = "repos/list-forks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_forks.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case newest = "newest"
                    case oldest = "oldest"
                    case stargazers = "stargazers"
                    case watchers = "watchers"
                }
                /// The sort order. `stargazers` will sort by star count.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/query/sort`.
                public var sort: Operations.repos_sol_list_hyphen_forks.Input.Query.sortPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The sort order. `stargazers` will sort by star count.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Operations.repos_sol_list_hyphen_forks.Input.Query.sortPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_forks.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_forks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_forks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_forks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_forks.Input.Path,
                query: Operations.repos_sol_list_hyphen_forks.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_forks.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_forks.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_forks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_forks.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_forks.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/get(repos/list-forks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_forks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_forks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/get(repos/list-forks)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Create a fork
    ///
    /// Create a fork for the authenticated user.
    ///
    /// > [!NOTE]
    /// > Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    ///
    /// > [!NOTE]
    /// > Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)`.
    public enum repos_sol_create_hyphen_fork {
        public static let id: Swift.String = "repos/create-fork"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_fork.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_fork.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_fork.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_fork.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Optional parameter to specify the organization name if forking into an organization.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/requestBody/json/organization`.
                    public var organization: Swift.String?
                    /// When forking from an existing repository, a new name for the fork.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// When forking from an existing repository, fork with only the default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/requestBody/json/default_branch_only`.
                    public var default_branch_only: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - organization: Optional parameter to specify the organization name if forking into an organization.
                    ///   - name: When forking from an existing repository, a new name for the fork.
                    ///   - default_branch_only: When forking from an existing repository, fork with only the default branch.
                    public init(
                        organization: Swift.String? = nil,
                        name: Swift.String? = nil,
                        default_branch_only: Swift.Bool? = nil
                    ) {
                        self.organization = organization
                        self.name = name
                        self.default_branch_only = default_branch_only
                    }
                    public enum CodingKeys: String, CodingKey {
                        case organization
                        case name
                        case default_branch_only
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_fork.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_fork.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_fork.Input.Path,
                headers: Operations.repos_sol_create_hyphen_fork.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_fork.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/forks/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_fork.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_fork.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.repos_sol_create_hyphen_fork.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.repos_sol_create_hyphen_fork.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/forks/post(repos/create-fork)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List repository webhooks
    ///
    /// Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/get(repos/list-webhooks)`.
    public enum repos_sol_list_hyphen_webhooks {
        public static let id: Swift.String = "repos/list-webhooks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_webhooks.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_webhooks.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_webhooks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_webhooks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_webhooks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_webhooks.Input.Path,
                query: Operations.repos_sol_list_hyphen_webhooks.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_webhooks.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_webhooks.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.hook])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.hook] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_webhooks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_webhooks.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_webhooks.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/get(repos/list-webhooks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_webhooks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_webhooks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/get(repos/list-webhooks)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a repository webhook
    ///
    /// Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
    /// share the same `config` as long as those webhooks do not have any `events` that overlap.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/post(repos/create-webhook)`.
    public enum repos_sol_create_hyphen_webhook {
        public static let id: Swift.String = "repos/create-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_webhook.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Key/value pairs to provide settings for this webhook.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/config`.
                    public struct configPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/config/url`.
                        public var url: Components.Schemas.webhook_hyphen_config_hyphen_url?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/config/content_type`.
                        public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/config/secret`.
                        public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/config/insecure_ssl`.
                        public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
                        /// Creates a new `configPayload`.
                        ///
                        /// - Parameters:
                        ///   - url:
                        ///   - content_type:
                        ///   - secret:
                        ///   - insecure_ssl:
                        public init(
                            url: Components.Schemas.webhook_hyphen_config_hyphen_url? = nil,
                            content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                            secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                            insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
                        ) {
                            self.url = url
                            self.content_type = content_type
                            self.secret = secret
                            self.insecure_ssl = insecure_ssl
                        }
                        public enum CodingKeys: String, CodingKey {
                            case url
                            case content_type
                            case secret
                            case insecure_ssl
                        }
                    }
                    /// Key/value pairs to provide settings for this webhook.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/config`.
                    public var config: Operations.repos_sol_create_hyphen_webhook.Input.Body.jsonPayload.configPayload?
                    /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/events`.
                    public var events: [Swift.String]?
                    /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/json/active`.
                    public var active: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
                    ///   - config: Key/value pairs to provide settings for this webhook.
                    ///   - events: Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
                    ///   - active: Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    public init(
                        name: Swift.String? = nil,
                        config: Operations.repos_sol_create_hyphen_webhook.Input.Body.jsonPayload.configPayload? = nil,
                        events: [Swift.String]? = nil,
                        active: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self.config = config
                        self.events = events
                        self.active = active
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case config
                        case events
                        case active
                    }
                    public init(from decoder: any Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)
                        name = try container.decodeIfPresent(
                            Swift.String.self,
                            forKey: .name
                        )
                        config = try container.decodeIfPresent(
                            Operations.repos_sol_create_hyphen_webhook.Input.Body.jsonPayload.configPayload.self,
                            forKey: .config
                        )
                        events = try container.decodeIfPresent(
                            [Swift.String].self,
                            forKey: .events
                        )
                        active = try container.decodeIfPresent(
                            Swift.Bool.self,
                            forKey: .active
                        )
                        try decoder.ensureNoAdditionalProperties(knownKeys: [
                            "name",
                            "config",
                            "events",
                            "active"
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_webhook.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_webhook.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_webhook.Input.Path,
                headers: Operations.repos_sol_create_hyphen_webhook.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_webhook.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_webhook.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.hook)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.hook {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_webhook.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_webhook.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_webhook.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/post(repos/create-webhook)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_webhook.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_webhook.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/post(repos/create-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/post(repos/create-webhook)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/post(repos/create-webhook)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository webhook
    ///
    /// Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/get(repos/get-webhook)`.
    public enum repos_sol_get_hyphen_webhook {
        public static let id: Swift.String = "repos/get-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_webhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_webhook.Input.Path,
                headers: Operations.repos_sol_get_hyphen_webhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.hook)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.hook {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_webhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_webhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/get(repos/get-webhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_webhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_webhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/get(repos/get-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a repository webhook
    ///
    /// Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/patch(repos/update-webhook)`.
    public enum repos_sol_update_hyphen_webhook {
        public static let id: Swift.String = "repos/update-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_webhook.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody/json/config`.
                    public var config: Components.Schemas.webhook_hyphen_config?
                    /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody/json/events`.
                    public var events: [Swift.String]?
                    /// Determines a list of events to be added to the list of events that the Hook triggers for.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody/json/add_events`.
                    public var add_events: [Swift.String]?
                    /// Determines a list of events to be removed from the list of events that the Hook triggers for.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody/json/remove_events`.
                    public var remove_events: [Swift.String]?
                    /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody/json/active`.
                    public var active: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - config:
                    ///   - events: Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
                    ///   - add_events: Determines a list of events to be added to the list of events that the Hook triggers for.
                    ///   - remove_events: Determines a list of events to be removed from the list of events that the Hook triggers for.
                    ///   - active: Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    public init(
                        config: Components.Schemas.webhook_hyphen_config? = nil,
                        events: [Swift.String]? = nil,
                        add_events: [Swift.String]? = nil,
                        remove_events: [Swift.String]? = nil,
                        active: Swift.Bool? = nil
                    ) {
                        self.config = config
                        self.events = events
                        self.add_events = add_events
                        self.remove_events = remove_events
                        self.active = active
                    }
                    public enum CodingKeys: String, CodingKey {
                        case config
                        case events
                        case add_events
                        case remove_events
                        case active
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_webhook.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_webhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_webhook.Input.Path,
                headers: Operations.repos_sol_update_hyphen_webhook.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_webhook.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.hook)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.hook {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_webhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_webhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/patch(repos/update-webhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_webhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_webhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/patch(repos/update-webhook)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/patch(repos/update-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository webhook
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/delete(repos/delete-webhook)`.
    public enum repos_sol_delete_hyphen_webhook {
        public static let id: Swift.String = "repos/delete-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/DELETE/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_webhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_webhook.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_webhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/delete(repos/delete-webhook)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_webhook.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_webhook.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/delete(repos/delete-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a webhook configuration for a repository
    ///
    /// Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/get(repos/get-webhook-config-for-repo)`.
    public enum repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "repos/get-webhook-config-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.webhook_hyphen_config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.webhook_hyphen_config {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/get(repos/get-webhook-config-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a webhook configuration for a repository
    ///
    /// Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/patch(repos/update-webhook-config-for-repo)`.
    public enum repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "repos/update-webhook-config-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/requestBody/json/url`.
                    public var url: Components.Schemas.webhook_hyphen_config_hyphen_url?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/requestBody/json/content_type`.
                    public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/requestBody/json/secret`.
                    public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/requestBody/json/insecure_ssl`.
                    public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - url:
                    ///   - content_type:
                    ///   - secret:
                    ///   - insecure_ssl:
                    public init(
                        url: Components.Schemas.webhook_hyphen_config_hyphen_url? = nil,
                        content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                        secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                        insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
                    ) {
                        self.url = url
                        self.content_type = content_type
                        self.secret = secret
                        self.insecure_ssl = insecure_ssl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case url
                        case content_type
                        case secret
                        case insecure_ssl
                    }
                    public init(from decoder: any Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)
                        url = try container.decodeIfPresent(
                            Components.Schemas.webhook_hyphen_config_hyphen_url.self,
                            forKey: .url
                        )
                        content_type = try container.decodeIfPresent(
                            Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type.self,
                            forKey: .content_type
                        )
                        secret = try container.decodeIfPresent(
                            Components.Schemas.webhook_hyphen_config_hyphen_secret.self,
                            forKey: .secret
                        )
                        insecure_ssl = try container.decodeIfPresent(
                            Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl.self,
                            forKey: .insecure_ssl
                        )
                        try decoder.ensureNoAdditionalProperties(knownKeys: [
                            "url",
                            "content_type",
                            "secret",
                            "insecure_ssl"
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Path,
                headers: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/config/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.webhook_hyphen_config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.webhook_hyphen_config {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/config/patch(repos/update-webhook-config-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List deliveries for a repository webhook
    ///
    /// Returns a list of webhook deliveries for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/get(repos/list-webhook-deliveries)`.
    public enum repos_sol_list_hyphen_webhook_hyphen_deliveries {
        public static let id: Swift.String = "repos/list-webhook-deliveries"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/query/cursor`.
                public var cursor: Components.Parameters.cursor?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - cursor: Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    cursor: Components.Parameters.cursor? = nil
                ) {
                    self.per_page = per_page
                    self.cursor = cursor
                }
            }
            public var query: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Path,
                query: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.hook_hyphen_delivery_hyphen_item])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.hook_hyphen_delivery_hyphen_item] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/get(repos/list-webhook-deliveries)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/get(repos/list-webhook-deliveries)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/get(repos/list-webhook-deliveries)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Get a delivery for a repository webhook
    ///
    /// Returns a delivery for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/get(repos/get-webhook-delivery)`.
    public enum repos_sol_get_hyphen_webhook_hyphen_delivery {
        public static let id: Swift.String = "repos/get-webhook-delivery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path/delivery_id`.
                public var delivery_id: Components.Parameters.delivery_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///   - delivery_id:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id,
                    delivery_id: Components.Parameters.delivery_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                    self.delivery_id = delivery_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input.Path,
                headers: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.hook_hyphen_delivery)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.hook_hyphen_delivery {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/get(repos/get-webhook-delivery)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/get(repos/get-webhook-delivery)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/get(repos/get-webhook-delivery)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Redeliver a delivery for a repository webhook
    ///
    /// Redeliver a webhook delivery for a webhook configured in a repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(repos/redeliver-webhook-delivery)`.
    public enum repos_sol_redeliver_hyphen_webhook_hyphen_delivery {
        public static let id: Swift.String = "repos/redeliver-webhook-delivery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path/delivery_id`.
                public var delivery_id: Components.Parameters.delivery_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///   - delivery_id:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id,
                    delivery_id: Components.Parameters.delivery_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                    self.delivery_id = delivery_id
                }
            }
            public var path: Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path,
                headers: Operations.repos_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(repos/redeliver-webhook-delivery)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(repos/redeliver-webhook-delivery)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(repos/redeliver-webhook-delivery)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Ping a repository webhook
    ///
    /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/pings`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/pings/post(repos/ping-webhook)`.
    public enum repos_sol_ping_hyphen_webhook {
        public static let id: Swift.String = "repos/ping-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/pings/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/pings/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/pings/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/pings/POST/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_ping_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/pings/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_ping_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_ping_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_ping_hyphen_webhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_ping_hyphen_webhook.Input.Path,
                headers: Operations.repos_sol_ping_hyphen_webhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/pings/post(repos/ping-webhook)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_ping_hyphen_webhook.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_ping_hyphen_webhook.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/pings/post(repos/ping-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Test the push repository webhook
    ///
    /// This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
    ///
    /// > [!NOTE]
    /// > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/hooks/{hook_id}/tests`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/tests/post(repos/test-push-webhook)`.
    public enum repos_sol_test_hyphen_push_hyphen_webhook {
        public static let id: Swift.String = "repos/test-push-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/tests/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/tests/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/tests/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/tests/POST/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/hooks/{hook_id}/tests/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_test_hyphen_push_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_test_hyphen_push_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input.Path,
                headers: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/tests/post(repos/test-push-webhook)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_test_hyphen_push_hyphen_webhook.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_test_hyphen_push_hyphen_webhook.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/hooks/{hook_id}/tests/post(repos/test-push-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository invitations
    ///
    /// When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/invitations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/get(repos/list-invitations)`.
    public enum repos_sol_list_hyphen_invitations {
        public static let id: Swift.String = "repos/list-invitations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_invitations.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_invitations.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_invitations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_invitations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_invitations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_invitations.Input.Path,
                query: Operations.repos_sol_list_hyphen_invitations.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_invitations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_invitations.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository_hyphen_invitation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository_hyphen_invitation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_invitations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_invitations.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_invitations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/get(repos/list-invitations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_invitations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_invitations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/patch(repos/update-invitation)`.
    public enum repos_sol_update_hyphen_invitation {
        public static let id: Swift.String = "repos/update-invitation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the invitation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/path/invitation_id`.
                public var invitation_id: Components.Parameters.invitation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - invitation_id: The unique identifier of the invitation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    invitation_id: Components.Parameters.invitation_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.invitation_id = invitation_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_invitation.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_invitation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_invitation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_invitation.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/requestBody/json/permissions`.
                    @frozen public enum permissionsPayload: String, Codable, Hashable, Sendable {
                        case read = "read"
                        case write = "write"
                        case maintain = "maintain"
                        case triage = "triage"
                        case admin = "admin"
                    }
                    /// The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/requestBody/json/permissions`.
                    public var permissions: Operations.repos_sol_update_hyphen_invitation.Input.Body.jsonPayload.permissionsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permissions: The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
                    public init(permissions: Operations.repos_sol_update_hyphen_invitation.Input.Body.jsonPayload.permissionsPayload? = nil) {
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_invitation.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_invitation.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_invitation.Input.Path,
                headers: Operations.repos_sol_update_hyphen_invitation.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_invitation.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_invitation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_invitation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_invitation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_invitation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/patch(repos/update-invitation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_invitation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_invitation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/delete(repos/delete-invitation)`.
    public enum repos_sol_delete_hyphen_invitation {
        public static let id: Swift.String = "repos/delete-invitation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the invitation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/invitations/{invitation_id}/DELETE/path/invitation_id`.
                public var invitation_id: Components.Parameters.invitation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - invitation_id: The unique identifier of the invitation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    invitation_id: Components.Parameters.invitation_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.invitation_id = invitation_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_invitation.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_delete_hyphen_invitation.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/invitations/{invitation_id}/delete(repos/delete-invitation)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_invitation.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_invitation.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List deploy keys
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/keys`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/get(repos/list-deploy-keys)`.
    public enum repos_sol_list_hyphen_deploy_hyphen_keys {
        public static let id: Swift.String = "repos/list-deploy-keys"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deploy_hyphen_keys.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_deploy_hyphen_keys.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Path,
                query: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.deploy_hyphen_key])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.deploy_hyphen_key] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/get(repos/list-deploy-keys)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_deploy_hyphen_keys.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a deploy key
    ///
    /// You can create a read-only deploy key.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/keys`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/post(repos/create-deploy-key)`.
    public enum repos_sol_create_hyphen_deploy_hyphen_key {
        public static let id: Swift.String = "repos/create-deploy-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deploy_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_deploy_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A name for the key.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The contents of the key.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/requestBody/json/key`.
                    public var key: Swift.String
                    /// If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
                    ///   
                    /// Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/requestBody/json/read_only`.
                    public var read_only: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: A name for the key.
                    ///   - key: The contents of the key.
                    ///   - read_only: If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
                    public init(
                        title: Swift.String? = nil,
                        key: Swift.String,
                        read_only: Swift.Bool? = nil
                    ) {
                        self.title = title
                        self.key = key
                        self.read_only = read_only
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case key
                        case read_only
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Path,
                headers: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.deploy_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deploy_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/post(repos/create-deploy-key)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_deploy_hyphen_key.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/post(repos/create-deploy-key)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a deploy key
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/get(repos/get-deploy-key)`.
    public enum repos_sol_get_hyphen_deploy_hyphen_key {
        public static let id: Swift.String = "repos/get-deploy-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the key.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/GET/path/key_id`.
                public var key_id: Components.Parameters.key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - key_id: The unique identifier of the key.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    key_id: Components.Parameters.key_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.key_id = key_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deploy_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_deploy_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input.Path,
                headers: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.deploy_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.deploy_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/get(repos/get-deploy-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_deploy_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_deploy_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/get(repos/get-deploy-key)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a deploy key
    ///
    /// Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/keys/{key_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/delete(repos/delete-deploy-key)`.
    public enum repos_sol_delete_hyphen_deploy_hyphen_key {
        public static let id: Swift.String = "repos/delete-deploy-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the key.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/keys/{key_id}/DELETE/path/key_id`.
                public var key_id: Components.Parameters.key_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - key_id: The unique identifier of the key.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    key_id: Components.Parameters.key_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.key_id = key_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/keys/{key_id}/delete(repos/delete-deploy-key)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_deploy_hyphen_key.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List repository languages
    ///
    /// Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/languages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/languages/get(repos/list-languages)`.
    public enum repos_sol_list_hyphen_languages {
        public static let id: Swift.String = "repos/list-languages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/languages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/languages/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/languages/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_languages.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/languages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_languages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_languages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_languages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_languages.Input.Path,
                headers: Operations.repos_sol_list_hyphen_languages.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/languages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/languages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.language)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.language {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_languages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_languages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/languages/get(repos/list-languages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_languages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_languages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sync a fork branch with the upstream repository
    ///
    /// Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/merge-upstream`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merge-upstream/post(repos/merge-upstream)`.
    public enum repos_sol_merge_hyphen_upstream {
        public static let id: Swift.String = "repos/merge-upstream"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_merge_hyphen_upstream.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_merge_hyphen_upstream.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_merge_hyphen_upstream.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_merge_hyphen_upstream.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the branch which should be updated to match upstream.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/requestBody/json/branch`.
                    public var branch: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - branch: The name of the branch which should be updated to match upstream.
                    public init(branch: Swift.String) {
                        self.branch = branch
                    }
                    public enum CodingKeys: String, CodingKey {
                        case branch
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_merge_hyphen_upstream.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_merge_hyphen_upstream.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_merge_hyphen_upstream.Input.Path,
                headers: Operations.repos_sol_merge_hyphen_upstream.Input.Headers = .init(),
                body: Operations.repos_sol_merge_hyphen_upstream.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merge-upstream/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.merged_hyphen_upstream)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.merged_hyphen_upstream {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_merge_hyphen_upstream.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_merge_hyphen_upstream.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The branch has been successfully synced with the upstream repository
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merge-upstream/post(repos/merge-upstream)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_merge_hyphen_upstream.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_merge_hyphen_upstream.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// The branch could not be synced because of a merge conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merge-upstream/post(repos/merge-upstream)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.repos_sol_merge_hyphen_upstream.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.repos_sol_merge_hyphen_upstream.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// The branch could not be synced for some other reason
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merge-upstream/post(repos/merge-upstream)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.repos_sol_merge_hyphen_upstream.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.repos_sol_merge_hyphen_upstream.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Merge a branch
    ///
    ///
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/merges`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)`.
    public enum repos_sol_merge {
        public static let id: Swift.String = "repos/merge"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_merge.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_merge.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_merge.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_merge.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the base branch that the head will be merged into.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/requestBody/json/base`.
                    public var base: Swift.String
                    /// The head to merge. This can be a branch name or a commit SHA1.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/requestBody/json/head`.
                    public var head: Swift.String
                    /// Commit message to use for the merge commit. If omitted, a default message will be used.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/requestBody/json/commit_message`.
                    public var commit_message: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - base: The name of the base branch that the head will be merged into.
                    ///   - head: The head to merge. This can be a branch name or a commit SHA1.
                    ///   - commit_message: Commit message to use for the merge commit. If omitted, a default message will be used.
                    public init(
                        base: Swift.String,
                        head: Swift.String,
                        commit_message: Swift.String? = nil
                    ) {
                        self.base = base
                        self.head = head
                        self.commit_message = commit_message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case base
                        case head
                        case commit_message
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_merge.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_merge.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_merge.Input.Path,
                headers: Operations.repos_sol_merge.Input.Headers = .init(),
                body: Operations.repos_sol_merge.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/merges/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.commit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.commit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_merge.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_merge.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Successful Response (The resulting merge commit)
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_merge.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_merge.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when already merged
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_merge.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_merge.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found when the base or head does not exist
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_merge.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_merge.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when there is a merge conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.repos_sol_merge.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.repos_sol_merge.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/merges/post(repos/merge)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a GitHub Pages site
    ///
    /// Gets information about a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/get(repos/get-pages)`.
    public enum repos_sol_get_hyphen_pages {
        public static let id: Swift.String = "repos/get-pages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_pages.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_pages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_pages.Input.Path,
                headers: Operations.repos_sol_get_hyphen_pages.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.page)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.page {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_pages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_pages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/get(repos/get-pages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_pages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_pages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/get(repos/get-pages)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a GitHub Pages site
    ///
    /// Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/post(repos/create-pages-site)`.
    public enum repos_sol_create_hyphen_pages_hyphen_site {
        public static let id: Swift.String = "repos/create-pages-site"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_pages_hyphen_site.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_pages_hyphen_site.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// The source branch and directory used to publish your Pages site.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/requestBody/json/value1`.
                    public struct Value1Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value1Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/requestBody/json/value1`.
                    public var value1: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value1Payload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/requestBody/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value2Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/requestBody/json/value2`.
                    public var value2: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value2Payload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value1Payload? = nil,
                        value2: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value2Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Path,
                headers: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_pages_hyphen_site.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.page)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.page {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_pages_hyphen_site.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_pages_hyphen_site.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/post(repos/create-pages-site)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_pages_hyphen_site.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_pages_hyphen_site.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/post(repos/create-pages-site)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/post(repos/create-pages-site)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update information about a GitHub Pages site
    ///
    /// Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/put(repos/update-information-about-pages-site)`.
    public enum repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site {
        public static let id: Swift.String = "repos/update-information-about-pages-site"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value1`.
                    public struct Value1Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value1Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value1`.
                    public var value1: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value1Payload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value2Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value2`.
                    public var value2: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value2Payload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value3`.
                    public struct Value3Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value3Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value3`.
                    public var value3: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value3Payload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value4`.
                    public struct Value4Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value4Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value4`.
                    public var value4: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value4Payload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value5`.
                    public struct Value5Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value5Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/json/value5`.
                    public var value5: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value5Payload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    ///   - value3:
                    ///   - value4:
                    ///   - value5:
                    public init(
                        value1: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value1Payload? = nil,
                        value2: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value2Payload? = nil,
                        value3: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value3Payload? = nil,
                        value4: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value4Payload? = nil,
                        value5: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload.Value5Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                        self.value3 = value3
                        self.value4 = value4
                        self.value5 = value5
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value3 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value4 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value5 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2,
                                value3,
                                value4,
                                value5
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                        try value3?.encode(to: encoder)
                        try value4?.encode(to: encoder)
                        try value5?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Path,
                headers: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/put(repos/update-information-about-pages-site)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_update_hyphen_information_hyphen_about_hyphen_pages_hyphen_site.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/put(repos/update-information-about-pages-site)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/put(repos/update-information-about-pages-site)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/put(repos/update-information-about-pages-site)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Delete a GitHub Pages site
    ///
    /// Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pages`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/delete(repos/delete-pages-site)`.
    public enum repos_sol_delete_hyphen_pages_hyphen_site {
        public static let id: Swift.String = "repos/delete-pages-site"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_pages_hyphen_site.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_pages_hyphen_site.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/delete(repos/delete-pages-site)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_pages_hyphen_site.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_pages_hyphen_site.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/delete(repos/delete-pages-site)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/delete(repos/delete-pages-site)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/delete(repos/delete-pages-site)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List GitHub Pages builds
    ///
    /// Lists builts of a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/get(repos/list-pages-builds)`.
    public enum repos_sol_list_hyphen_pages_hyphen_builds {
        public static let id: Swift.String = "repos/list-pages-builds"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_pages_hyphen_builds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_pages_hyphen_builds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Path,
                query: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.page_hyphen_build])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.page_hyphen_build] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/get(repos/list-pages-builds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_pages_hyphen_builds.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Request a GitHub Pages build
    ///
    /// You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
    ///
    /// Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/builds`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/post(repos/request-pages-build)`.
    public enum repos_sol_request_hyphen_pages_hyphen_build {
        public static let id: Swift.String = "repos/request-pages-build"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_request_hyphen_pages_hyphen_build.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_request_hyphen_pages_hyphen_build.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_request_hyphen_pages_hyphen_build.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_request_hyphen_pages_hyphen_build.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_request_hyphen_pages_hyphen_build.Input.Path,
                headers: Operations.repos_sol_request_hyphen_pages_hyphen_build.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.page_hyphen_build_hyphen_status)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.page_hyphen_build_hyphen_status {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_request_hyphen_pages_hyphen_build.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_request_hyphen_pages_hyphen_build.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/post(repos/request-pages-build)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_request_hyphen_pages_hyphen_build.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_request_hyphen_pages_hyphen_build.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get latest Pages build
    ///
    /// Gets information about the single most recent build of a GitHub Pages site.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/latest/get(repos/get-latest-pages-build)`.
    public enum repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build {
        public static let id: Swift.String = "repos/get-latest-pages-build"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/latest/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/latest/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/latest/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/latest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input.Path,
                headers: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/latest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/latest/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.page_hyphen_build)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.page_hyphen_build {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/latest/get(repos/get-latest-pages-build)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_latest_hyphen_pages_hyphen_build.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub Pages build
    ///
    /// Gets information about a GitHub Pages build.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/builds/{build_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/{build_id}/get(repos/get-pages-build)`.
    public enum repos_sol_get_hyphen_pages_hyphen_build {
        public static let id: Swift.String = "repos/get-pages-build"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/{build_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/{build_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/{build_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/{build_id}/GET/path/build_id`.
                public var build_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - build_id:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    build_id: Swift.Int
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.build_id = build_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_pages_hyphen_build.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/{build_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages_hyphen_build.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages_hyphen_build.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_pages_hyphen_build.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_pages_hyphen_build.Input.Path,
                headers: Operations.repos_sol_get_hyphen_pages_hyphen_build.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/{build_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/builds/{build_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.page_hyphen_build)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.page_hyphen_build {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_pages_hyphen_build.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_pages_hyphen_build.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/builds/{build_id}/get(repos/get-pages-build)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_pages_hyphen_build.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_pages_hyphen_build.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a GitHub Pages deployment
    ///
    /// Create a GitHub Pages deployment for a repository.
    ///
    /// The authenticated user must have write permission to the repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/deployments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/post(repos/create-pages-deployment)`.
    public enum repos_sol_create_hyphen_pages_hyphen_deployment {
        public static let id: Swift.String = "repos/create-pages-deployment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_pages_hyphen_deployment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_pages_hyphen_deployment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// The object used to create GitHub Pages deployment
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody/json/artifact_id`.
                    public var artifact_id: Swift.Double?
                    /// The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody/json/artifact_url`.
                    public var artifact_url: Swift.String?
                    /// The target environment for this GitHub Pages deployment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody/json/environment`.
                    public var environment: Swift.String?
                    /// A unique string that represents the version of the build for this deployment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody/json/pages_build_version`.
                    public var pages_build_version: Swift.String
                    /// The OIDC token issued by GitHub Actions certifying the origin of the deployment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody/json/oidc_token`.
                    public var oidc_token: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - artifact_id: The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
                    ///   - artifact_url: The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
                    ///   - environment: The target environment for this GitHub Pages deployment.
                    ///   - pages_build_version: A unique string that represents the version of the build for this deployment.
                    ///   - oidc_token: The OIDC token issued by GitHub Actions certifying the origin of the deployment.
                    public init(
                        artifact_id: Swift.Double? = nil,
                        artifact_url: Swift.String? = nil,
                        environment: Swift.String? = nil,
                        pages_build_version: Swift.String,
                        oidc_token: Swift.String
                    ) {
                        self.artifact_id = artifact_id
                        self.artifact_url = artifact_url
                        self.environment = environment
                        self.pages_build_version = pages_build_version
                        self.oidc_token = oidc_token
                    }
                    public enum CodingKeys: String, CodingKey {
                        case artifact_id
                        case artifact_url
                        case environment
                        case pages_build_version
                        case oidc_token
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Path,
                headers: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.page_hyphen_deployment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.page_hyphen_deployment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/post(repos/create-pages-deployment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_create_hyphen_pages_hyphen_deployment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/post(repos/create-pages-deployment)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/post(repos/create-pages-deployment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/post(repos/create-pages-deployment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Get the status of a GitHub Pages deployment
    ///
    /// Gets the current status of a GitHub Pages deployment.
    ///
    /// The authenticated user must have read permission for the GitHub Pages site.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/get(repos/get-pages-deployment)`.
    public enum repos_sol_get_hyphen_pages_hyphen_deployment {
        public static let id: Swift.String = "repos/get-pages-deployment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/pages-deployment-id`.
                @frozen public enum pages_hyphen_deployment_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/pages-deployment-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/pages-deployment-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the Pages deployment. You can also give the commit SHA of the deployment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/GET/path/pages_deployment_id`.
                public var pages_deployment_id: Components.Parameters.pages_hyphen_deployment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pages_deployment_id: The ID of the Pages deployment. You can also give the commit SHA of the deployment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pages_deployment_id: Components.Parameters.pages_hyphen_deployment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pages_deployment_id = pages_deployment_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages_hyphen_deployment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages_hyphen_deployment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input.Path,
                headers: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.pages_hyphen_deployment_hyphen_status)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pages_hyphen_deployment_hyphen_status {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/get(repos/get-pages-deployment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_pages_hyphen_deployment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/get(repos/get-pages-deployment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel a GitHub Pages deployment
    ///
    /// Cancels a GitHub Pages deployment.
    ///
    /// The authenticated user must have write permissions for the GitHub Pages site.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/post(repos/cancel-pages-deployment)`.
    public enum repos_sol_cancel_hyphen_pages_hyphen_deployment {
        public static let id: Swift.String = "repos/cancel-pages-deployment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/components/parameters/pages-deployment-id`.
                @frozen public enum pages_hyphen_deployment_hyphen_id: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/pages-deployment-id/case1`.
                    case case1(Swift.Int)
                    /// - Remark: Generated from `#/components/parameters/pages-deployment-id/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The ID of the Pages deployment. You can also give the commit SHA of the deployment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/POST/path/pages_deployment_id`.
                public var pages_deployment_id: Components.Parameters.pages_hyphen_deployment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pages_deployment_id: The ID of the Pages deployment. You can also give the commit SHA of the deployment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pages_deployment_id: Components.Parameters.pages_hyphen_deployment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pages_deployment_id = pages_deployment_id
                }
            }
            public var path: Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input.Path,
                headers: Operations.repos_sol_cancel_hyphen_pages_hyphen_deployment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/post(repos/cancel-pages-deployment)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel/post(repos/cancel-pages-deployment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a DNS health check for GitHub Pages
    ///
    /// Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
    ///
    /// The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
    ///
    /// The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pages/health`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)`.
    public enum repos_sol_get_hyphen_pages_hyphen_health_hyphen_check {
        public static let id: Swift.String = "repos/get-pages-health-check"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input.Path,
                headers: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.pages_hyphen_health_hyphen_check)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pages_hyphen_health_hyphen_check {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pages/health/GET/responses/202/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Empty response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Custom domains are not available for GitHub Pages
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// There isn't a CNAME for this page
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.repos_sol_get_hyphen_pages_hyphen_health_hyphen_check.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pages/health/get(repos/get-pages-health-check)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if private vulnerability reporting is enabled for a repository
    ///
    /// Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/get(repos/check-private-vulnerability-reporting)`.
    public enum repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting {
        public static let id: Swift.String = "repos/check-private-vulnerability-reporting"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path,
                headers: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// Whether or not private vulnerability reporting is enabled for the repository.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/responses/200/content/json/enabled`.
                        public var enabled: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - enabled: Whether or not private vulnerability reporting is enabled for the repository.
                        public init(enabled: Swift.Bool) {
                            self.enabled = enabled
                        }
                        public enum CodingKeys: String, CodingKey {
                            case enabled
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/GET/responses/200/content/application\/json`.
                    case json(Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Private vulnerability reporting status
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/get(repos/check-private-vulnerability-reporting)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_check_hyphen_private_hyphen_vulnerability_hyphen_reporting.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/get(repos/check-private-vulnerability-reporting)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Enable private vulnerability reporting for a repository
    ///
    /// Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/put(repos/enable-private-vulnerability-reporting)`.
    public enum repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting {
        public static let id: Swift.String = "repos/enable-private-vulnerability-reporting"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path,
                headers: Operations.repos_sol_enable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/put(repos/enable-private-vulnerability-reporting)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/put(repos/enable-private-vulnerability-reporting)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Disable private vulnerability reporting for a repository
    ///
    /// Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/private-vulnerability-reporting`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/delete(repos/disable-private-vulnerability-reporting)`.
    public enum repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting {
        public static let id: Swift.String = "repos/disable-private-vulnerability-reporting"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/private-vulnerability-reporting/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Path,
                headers: Operations.repos_sol_disable_hyphen_private_hyphen_vulnerability_hyphen_reporting.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/delete(repos/disable-private-vulnerability-reporting)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/private-vulnerability-reporting/delete(repos/disable-private-vulnerability-reporting)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Get all custom property values for a repository
    ///
    /// Gets all custom property values that are set for a repository.
    /// Users with read access to the repository can use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/properties/values`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/get(repos/get-custom-properties-values)`.
    public enum repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values {
        public static let id: Swift.String = "repos/get-custom-properties-values"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input.Path,
                headers: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.custom_hyphen_property_hyphen_value])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.custom_hyphen_property_hyphen_value] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/get(repos/get-custom-properties-values)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_custom_hyphen_properties_hyphen_values.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/get(repos/get-custom-properties-values)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/get(repos/get-custom-properties-values)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update custom property values for a repository
    ///
    /// Create new or update existing custom property values for a repository.
    /// Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
    ///
    /// Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/properties/values`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/patch(repos/create-or-update-custom-properties-values)`.
    public enum repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values {
        public static let id: Swift.String = "repos/create-or-update-custom-properties-values"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A list of custom property names and associated values to apply to the repositories.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/requestBody/json/properties`.
                    public var properties: [Components.Schemas.custom_hyphen_property_hyphen_value]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - properties: A list of custom property names and associated values to apply to the repositories.
                    public init(properties: [Components.Schemas.custom_hyphen_property_hyphen_value]) {
                        self.properties = properties
                    }
                    public enum CodingKeys: String, CodingKey {
                        case properties
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/properties/values/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Path,
                headers: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when custom property values are successfully created or updated
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/patch(repos/create-or-update-custom-properties-values)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/patch(repos/create-or-update-custom-properties-values)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/patch(repos/create-or-update-custom-properties-values)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/properties/values/patch(repos/create-or-update-custom-properties-values)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository README
    ///
    /// Gets the preferred README for a repository.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
    /// - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/readme`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/get(repos/get-readme)`.
    public enum repos_sol_get_hyphen_readme {
        public static let id: Swift.String = "repos/get-readme"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_readme.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The name of the commit/branch/tag. Default: the repository’s default branch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/query/ref`.
                public var ref: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: The name of the commit/branch/tag. Default: the repository’s default branch.
                public init(ref: Swift.String? = nil) {
                    self.ref = ref
                }
            }
            public var query: Operations.repos_sol_get_hyphen_readme.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_readme.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_readme.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_readme.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_readme.Input.Path,
                query: Operations.repos_sol_get_hyphen_readme.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_readme.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.content_hyphen_file)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.content_hyphen_file {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_readme.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_readme.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/get(repos/get-readme)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_readme.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_readme.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/get(repos/get-readme)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/get(repos/get-readme)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/get(repos/get-readme)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository README for a directory
    ///
    /// Gets the README from a repository directory.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
    /// - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/readme/{dir}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/{dir}/get(repos/get-readme-in-directory)`.
    public enum repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory {
        public static let id: Swift.String = "repos/get-readme-in-directory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The alternate path to look for a README file
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/path/dir`.
                public var dir: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - dir: The alternate path to look for a README file
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    dir: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.dir = dir
                }
            }
            public var path: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The name of the commit/branch/tag. Default: the repository’s default branch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/query/ref`.
                public var ref: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: The name of the commit/branch/tag. Default: the repository’s default branch.
                public init(ref: Swift.String? = nil) {
                    self.ref = ref
                }
            }
            public var query: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Path,
                query: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/readme/{dir}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.content_hyphen_file)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.content_hyphen_file {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/{dir}/get(repos/get-readme-in-directory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_readme_hyphen_in_hyphen_directory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/{dir}/get(repos/get-readme-in-directory)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/readme/{dir}/get(repos/get-readme-in-directory)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    public enum repos_sol_list_hyphen_releases {
        public static let id: Swift.String = "repos/list-releases"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_releases.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_releases.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_releases.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_releases.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_releases.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_releases.Input.Path,
                query: Operations.repos_sol_list_hyphen_releases.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_releases.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_releases.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.release])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.release] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_releases.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_releases.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_releases.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_releases.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_releases.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    public enum repos_sol_create_hyphen_release {
        public static let id: Swift.String = "repos/create-release"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_release.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_release.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_release.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_release.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/tag_name`.
                    public var tag_name: Swift.String
                    /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/target_commitish`.
                    public var target_commitish: Swift.String?
                    /// The name of the release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Text describing the contents of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/body`.
                    public var body: Swift.String?
                    /// `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/draft`.
                    public var draft: Swift.Bool?
                    /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/prerelease`.
                    public var prerelease: Swift.Bool?
                    /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/discussion_category_name`.
                    public var discussion_category_name: Swift.String?
                    /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/generate_release_notes`.
                    public var generate_release_notes: Swift.Bool?
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    @frozen public enum make_latestPayload: String, Codable, Hashable, Sendable {
                        case _true = "true"
                        case _false = "false"
                        case legacy = "legacy"
                    }
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    public var make_latest: Operations.repos_sol_create_hyphen_release.Input.Body.jsonPayload.make_latestPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - tag_name: The name of the tag.
                    ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///   - name: The name of the release.
                    ///   - body: Text describing the contents of the tag.
                    ///   - draft: `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///   - prerelease: `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///   - discussion_category_name: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///   - generate_release_notes: Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///   - make_latest: Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    public init(
                        tag_name: Swift.String,
                        target_commitish: Swift.String? = nil,
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        draft: Swift.Bool? = nil,
                        prerelease: Swift.Bool? = nil,
                        discussion_category_name: Swift.String? = nil,
                        generate_release_notes: Swift.Bool? = nil,
                        make_latest: Operations.repos_sol_create_hyphen_release.Input.Body.jsonPayload.make_latestPayload? = nil
                    ) {
                        self.tag_name = tag_name
                        self.target_commitish = target_commitish
                        self.name = name
                        self.body = body
                        self.draft = draft
                        self.prerelease = prerelease
                        self.discussion_category_name = discussion_category_name
                        self.generate_release_notes = generate_release_notes
                        self.make_latest = make_latest
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tag_name
                        case target_commitish
                        case name
                        case body
                        case draft
                        case prerelease
                        case discussion_category_name
                        case generate_release_notes
                        case make_latest
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_release.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_release.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_release.Input.Path,
                headers: Operations.repos_sol_create_hyphen_release.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_release.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_release.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_release.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_release.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_release.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_release.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_release.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_release.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_release.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found if the discussion category name is invalid
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_create_hyphen_release.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_create_hyphen_release.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a release asset
    ///
    /// To download the asset's binary content:
    ///
    /// - If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.
    /// - Alternatively, set the `Accept` header of the request to 
    ///   [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). 
    ///   The API will either redirect the client to the location, or stream it directly if possible.
    ///   API clients should handle both a `200` or `302` response.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/get(repos/get-release-asset)`.
    public enum repos_sol_get_hyphen_release_hyphen_asset {
        public static let id: Swift.String = "repos/get-release-asset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the asset.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/GET/path/asset_id`.
                public var asset_id: Components.Parameters.asset_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - asset_id: The unique identifier of the asset.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    asset_id: Components.Parameters.asset_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.asset_id = asset_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_release_hyphen_asset.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_release_hyphen_asset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_release_hyphen_asset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_release_hyphen_asset.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_release_hyphen_asset.Input.Path,
                headers: Operations.repos_sol_get_hyphen_release_hyphen_asset.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.release_hyphen_asset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release_hyphen_asset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_release_hyphen_asset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_release_hyphen_asset.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/get(repos/get-release-asset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_release_hyphen_asset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_release_hyphen_asset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/get(repos/get-release-asset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/get(repos/get-release-asset)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a release asset
    ///
    /// Users with push access to the repository can edit a release asset.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/patch(repos/update-release-asset)`.
    public enum repos_sol_update_hyphen_release_hyphen_asset {
        public static let id: Swift.String = "repos/update-release-asset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the asset.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/path/asset_id`.
                public var asset_id: Components.Parameters.asset_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - asset_id: The unique identifier of the asset.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    asset_id: Components.Parameters.asset_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.asset_id = asset_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_release_hyphen_asset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_release_hyphen_asset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The file name of the asset.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// An alternate short description of the asset. Used in place of the filename.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/requestBody/json/label`.
                    public var label: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/requestBody/json/state`.
                    public var state: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The file name of the asset.
                    ///   - label: An alternate short description of the asset. Used in place of the filename.
                    ///   - state:
                    public init(
                        name: Swift.String? = nil,
                        label: Swift.String? = nil,
                        state: Swift.String? = nil
                    ) {
                        self.name = name
                        self.label = label
                        self.state = state
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case label
                        case state
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Path,
                headers: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_release_hyphen_asset.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.release_hyphen_asset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release_hyphen_asset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_release_hyphen_asset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_release_hyphen_asset.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/patch(repos/update-release-asset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_release_hyphen_asset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_release_hyphen_asset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a release asset
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/delete(repos/delete-release-asset)`.
    public enum repos_sol_delete_hyphen_release_hyphen_asset {
        public static let id: Swift.String = "repos/delete-release-asset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the asset.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/assets/{asset_id}/DELETE/path/asset_id`.
                public var asset_id: Components.Parameters.asset_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - asset_id: The unique identifier of the asset.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    asset_id: Components.Parameters.asset_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.asset_id = asset_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_release_hyphen_asset.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_delete_hyphen_release_hyphen_asset.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/assets/{asset_id}/delete(repos/delete-release-asset)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_release_hyphen_asset.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_release_hyphen_asset.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Generate release notes content for a release
    ///
    /// Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases/generate-notes`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/generate-notes/post(repos/generate-release-notes)`.
    public enum repos_sol_generate_hyphen_release_hyphen_notes {
        public static let id: Swift.String = "repos/generate-release-notes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_generate_hyphen_release_hyphen_notes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_generate_hyphen_release_hyphen_notes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The tag name for the release. This can be an existing tag or a new one.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/requestBody/json/tag_name`.
                    public var tag_name: Swift.String
                    /// Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/requestBody/json/target_commitish`.
                    public var target_commitish: Swift.String?
                    /// The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/requestBody/json/previous_tag_name`.
                    public var previous_tag_name: Swift.String?
                    /// Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/requestBody/json/configuration_file_path`.
                    public var configuration_file_path: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - tag_name: The tag name for the release. This can be an existing tag or a new one.
                    ///   - target_commitish: Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
                    ///   - previous_tag_name: The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
                    ///   - configuration_file_path: Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
                    public init(
                        tag_name: Swift.String,
                        target_commitish: Swift.String? = nil,
                        previous_tag_name: Swift.String? = nil,
                        configuration_file_path: Swift.String? = nil
                    ) {
                        self.tag_name = tag_name
                        self.target_commitish = target_commitish
                        self.previous_tag_name = previous_tag_name
                        self.configuration_file_path = configuration_file_path
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tag_name
                        case target_commitish
                        case previous_tag_name
                        case configuration_file_path
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Path,
                headers: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Headers = .init(),
                body: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/generate-notes/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.release_hyphen_notes_hyphen_content)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release_hyphen_notes_hyphen_content {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Name and body of generated release notes
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/generate-notes/post(repos/generate-release-notes)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_generate_hyphen_release_hyphen_notes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_generate_hyphen_release_hyphen_notes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/generate-notes/post(repos/generate-release-notes)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    public enum repos_sol_get_hyphen_latest_hyphen_release {
        public static let id: Swift.String = "repos/get-latest-release"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_latest_hyphen_release.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_latest_hyphen_release.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Path,
                headers: Operations.repos_sol_get_hyphen_latest_hyphen_release.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_latest_hyphen_release.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a release by tag name
    ///
    /// Get a published release with the specified tag.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/tags/{tag}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/tags/{tag}/get(repos/get-release-by-tag)`.
    public enum repos_sol_get_hyphen_release_hyphen_by_hyphen_tag {
        public static let id: Swift.String = "repos/get-release-by-tag"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/tags/{tag}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/tags/{tag}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/tags/{tag}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// tag parameter
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/tags/{tag}/GET/path/tag`.
                public var tag: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - tag: tag parameter
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    tag: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.tag = tag
                }
            }
            public var path: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/tags/{tag}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input.Path,
                headers: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/tags/{tag}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/tags/{tag}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/tags/{tag}/get(repos/get-release-by-tag)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_release_hyphen_by_hyphen_tag.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/tags/{tag}/get(repos/get-release-by-tag)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a release
    ///
    /// Gets a public release with the specified release ID.
    ///
    /// > [!NOTE]
    /// > This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/get(repos/get-release)`.
    public enum repos_sol_get_hyphen_release {
        public static let id: Swift.String = "repos/get-release"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the release.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/GET/path/release_id`.
                public var release_id: Components.Parameters.release_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - release_id: The unique identifier of the release.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    release_id: Components.Parameters.release_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.release_id = release_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_release.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_release.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_release.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_release.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_release.Input.Path,
                headers: Operations.repos_sol_get_hyphen_release.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_release.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_release.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/get(repos/get-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_release.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_release.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/get(repos/get-release)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.repos_sol_get_hyphen_release.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.repos_sol_get_hyphen_release.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a release
    ///
    /// Users with push access to the repository can edit a release.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/patch(repos/update-release)`.
    public enum repos_sol_update_hyphen_release {
        public static let id: Swift.String = "repos/update-release"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the release.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/path/release_id`.
                public var release_id: Components.Parameters.release_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - release_id: The unique identifier of the release.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    release_id: Components.Parameters.release_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.release_id = release_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_release.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_release.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_release.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_release.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/tag_name`.
                    public var tag_name: Swift.String?
                    /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/target_commitish`.
                    public var target_commitish: Swift.String?
                    /// The name of the release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Text describing the contents of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/body`.
                    public var body: Swift.String?
                    /// `true` makes the release a draft, and `false` publishes the release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/draft`.
                    public var draft: Swift.Bool?
                    /// `true` to identify the release as a prerelease, `false` to identify the release as a full release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/prerelease`.
                    public var prerelease: Swift.Bool?
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/make_latest`.
                    @frozen public enum make_latestPayload: String, Codable, Hashable, Sendable {
                        case _true = "true"
                        case _false = "false"
                        case legacy = "legacy"
                    }
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/make_latest`.
                    public var make_latest: Operations.repos_sol_update_hyphen_release.Input.Body.jsonPayload.make_latestPayload?
                    /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/json/discussion_category_name`.
                    public var discussion_category_name: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - tag_name: The name of the tag.
                    ///   - target_commitish: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///   - name: The name of the release.
                    ///   - body: Text describing the contents of the tag.
                    ///   - draft: `true` makes the release a draft, and `false` publishes the release.
                    ///   - prerelease: `true` to identify the release as a prerelease, `false` to identify the release as a full release.
                    ///   - make_latest: Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///   - discussion_category_name: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    public init(
                        tag_name: Swift.String? = nil,
                        target_commitish: Swift.String? = nil,
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        draft: Swift.Bool? = nil,
                        prerelease: Swift.Bool? = nil,
                        make_latest: Operations.repos_sol_update_hyphen_release.Input.Body.jsonPayload.make_latestPayload? = nil,
                        discussion_category_name: Swift.String? = nil
                    ) {
                        self.tag_name = tag_name
                        self.target_commitish = target_commitish
                        self.name = name
                        self.body = body
                        self.draft = draft
                        self.prerelease = prerelease
                        self.make_latest = make_latest
                        self.discussion_category_name = discussion_category_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tag_name
                        case target_commitish
                        case name
                        case body
                        case draft
                        case prerelease
                        case make_latest
                        case discussion_category_name
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_release.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_release.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_release.Input.Path,
                headers: Operations.repos_sol_update_hyphen_release.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_release.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_release.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_release.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/patch(repos/update-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_release.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_release.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_release.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_release.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found if the discussion category name is invalid
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/patch(repos/update-release)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_update_hyphen_release.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_update_hyphen_release.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a release
    ///
    /// Users with push access to the repository can delete a release.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/releases/{release_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/delete(repos/delete-release)`.
    public enum repos_sol_delete_hyphen_release {
        public static let id: Swift.String = "repos/delete-release"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the release.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/DELETE/path/release_id`.
                public var release_id: Components.Parameters.release_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - release_id: The unique identifier of the release.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    release_id: Components.Parameters.release_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.release_id = release_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_release.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_delete_hyphen_release.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/delete(repos/delete-release)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_release.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_release.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List release assets
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/{release_id}/assets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/get(repos/list-release-assets)`.
    public enum repos_sol_list_hyphen_release_hyphen_assets {
        public static let id: Swift.String = "repos/list-release-assets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the release.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/path/release_id`.
                public var release_id: Components.Parameters.release_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - release_id: The unique identifier of the release.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    release_id: Components.Parameters.release_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.release_id = release_id
                }
            }
            public var path: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_release_hyphen_assets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_release_hyphen_assets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Path,
                query: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_release_hyphen_assets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_release_hyphen_assets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.release_hyphen_asset])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.release_hyphen_asset] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_release_hyphen_assets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_release_hyphen_assets.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_release_hyphen_assets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/get(repos/list-release-assets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_release_hyphen_assets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_release_hyphen_assets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upload a release asset
    ///
    /// This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
    /// the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
    ///
    /// You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
    ///
    /// Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 
    ///
    /// `application/zip`
    ///
    /// GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
    /// you'll still need to pass your authentication to be able to upload an asset.
    ///
    /// When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
    ///
    /// **Notes:**
    /// *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
    /// endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    /// *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). 
    /// *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases/{release_id}/assets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/post(repos/upload-release-asset)`.
    public enum repos_sol_upload_hyphen_release_hyphen_asset {
        public static let id: Swift.String = "repos/upload-release-asset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the release.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/path/release_id`.
                public var release_id: Components.Parameters.release_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - release_id: The unique identifier of the release.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    release_id: Components.Parameters.release_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.release_id = release_id
                }
            }
            public var path: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/query/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/query/label`.
                public var label: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - label:
                public init(
                    name: Swift.String,
                    label: Swift.String? = nil
                ) {
                    self.name = name
                    self.label = label
                }
            }
            public var query: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_upload_hyphen_release_hyphen_asset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_upload_hyphen_release_hyphen_asset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Path,
                query: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Query,
                headers: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Headers = .init(),
                body: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/{release_id}/assets/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.release_hyphen_asset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.release_hyphen_asset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response for successful upload
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/post(repos/upload-release-asset)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Response if you upload an asset with the same filename as another uploaded asset
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/{release_id}/assets/post(repos/upload-release-asset)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.repos_sol_upload_hyphen_release_hyphen_asset.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get rules for a branch
    ///
    /// Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply
    /// to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level
    /// at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled"
    /// enforcement statuses are not returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rules/branches/{branch}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rules/branches/{branch}/get(repos/get-branch-rules)`.
    public enum repos_sol_get_hyphen_branch_hyphen_rules {
        public static let id: Swift.String = "repos/get-branch-rules"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/path/branch`.
                public var branch: Components.Parameters.branch
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - branch: The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    branch: Components.Parameters.branch
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.branch = branch
                }
            }
            public var path: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_branch_hyphen_rules.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_branch_hyphen_rules.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Path,
                query: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rules/branches/{branch}/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository_hyphen_rule_hyphen_detailed])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository_hyphen_rule_hyphen_detailed] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rules/branches/{branch}/get(repos/get-branch-rules)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_branch_hyphen_rules.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_branch_hyphen_rules.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all repository rulesets
    ///
    /// Get all the rulesets for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/get(repos/get-repo-rulesets)`.
    public enum repos_sol_get_hyphen_repo_hyphen_rulesets {
        public static let id: Swift.String = "repos/get-repo-rulesets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Include rulesets configured at higher levels that apply to this repository
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/query/includes_parents`.
                public var includes_parents: Swift.Bool?
                /// A comma-separated list of rule targets to filter by.
                /// If provided, only rulesets that apply to the specified targets will be returned.
                /// For example, `branch,tag,push`.
                ///
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/query/targets`.
                public var targets: Components.Parameters.ruleset_hyphen_targets?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - includes_parents: Include rulesets configured at higher levels that apply to this repository
                ///   - targets: A comma-separated list of rule targets to filter by.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    includes_parents: Swift.Bool? = nil,
                    targets: Components.Parameters.ruleset_hyphen_targets? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.includes_parents = includes_parents
                    self.targets = targets
                }
            }
            public var query: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Path,
                query: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository_hyphen_ruleset])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository_hyphen_ruleset] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/get(repos/get-repo-rulesets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_repo_hyphen_rulesets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/get(repos/get-repo-rulesets)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/get(repos/get-repo-rulesets)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a repository ruleset
    ///
    /// Create a ruleset for a repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/rulesets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/post(repos/create-repo-ruleset)`.
    public enum repos_sol_create_hyphen_repo_hyphen_ruleset {
        public static let id: Swift.String = "repos/create-repo-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json/target`.
                    @frozen public enum targetPayload: String, Codable, Hashable, Sendable {
                        case branch = "branch"
                        case tag = "tag"
                        case push = "push"
                    }
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json/target`.
                    public var target: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Body.jsonPayload.targetPayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json/enforcement`.
                    public var enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement
                    /// The actors that can bypass the rules in this ruleset
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json/bypass_actors`.
                    public var bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json/conditions`.
                    public var conditions: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions?
                    /// An array of rules within the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/json/rules`.
                    public var rules: [Components.Schemas.repository_hyphen_rule]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the ruleset.
                    ///   - target: The target of the ruleset
                    ///   - enforcement:
                    ///   - bypass_actors: The actors that can bypass the rules in this ruleset
                    ///   - conditions:
                    ///   - rules: An array of rules within the ruleset.
                    public init(
                        name: Swift.String,
                        target: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Body.jsonPayload.targetPayload? = nil,
                        enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement,
                        bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]? = nil,
                        conditions: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions? = nil,
                        rules: [Components.Schemas.repository_hyphen_rule]? = nil
                    ) {
                        self.name = name
                        self.target = target
                        self.enforcement = enforcement
                        self.bypass_actors = bypass_actors
                        self.conditions = conditions
                        self.rules = rules
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case target
                        case enforcement
                        case bypass_actors
                        case conditions
                        case rules
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Path,
                headers: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_ruleset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_ruleset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/post(repos/create-repo-ruleset)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_repo_hyphen_ruleset.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/post(repos/create-repo-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/post(repos/create-repo-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository rule suites
    ///
    /// Lists suites of rule evaluations at the repository level.
    /// For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/rule-suites`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/get(repos/get-repo-rule-suites)`.
    public enum repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites {
        public static let id: Swift.String = "repos/get-repo-rule-suites"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/query/ref`.
                public var ref: Components.Parameters.ref_hyphen_in_hyphen_query?
                /// - Remark: Generated from `#/components/parameters/time-period`.
                @frozen public enum time_hyphen_period: String, Codable, Hashable, Sendable {
                    case hour = "hour"
                    case day = "day"
                    case week = "week"
                    case month = "month"
                }
                /// The time period to filter by.
                ///
                /// For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/query/time_period`.
                public var time_period: Components.Parameters.time_hyphen_period?
                /// The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/query/actor_name`.
                public var actor_name: Components.Parameters.actor_hyphen_name_hyphen_in_hyphen_query?
                /// - Remark: Generated from `#/components/parameters/rule-suite-result`.
                @frozen public enum rule_hyphen_suite_hyphen_result: String, Codable, Hashable, Sendable {
                    case pass = "pass"
                    case fail = "fail"
                    case bypass = "bypass"
                    case all = "all"
                }
                /// The rule results to filter on. When specified, only suites with this result will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/query/rule_suite_result`.
                public var rule_suite_result: Components.Parameters.rule_hyphen_suite_hyphen_result?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.
                ///   - time_period: The time period to filter by.
                ///   - actor_name: The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.
                ///   - rule_suite_result: The rule results to filter on. When specified, only suites with this result will be returned.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    ref: Components.Parameters.ref_hyphen_in_hyphen_query? = nil,
                    time_period: Components.Parameters.time_hyphen_period? = nil,
                    actor_name: Components.Parameters.actor_hyphen_name_hyphen_in_hyphen_query? = nil,
                    rule_suite_result: Components.Parameters.rule_hyphen_suite_hyphen_result? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.ref = ref
                    self.time_period = time_period
                    self.actor_name = actor_name
                    self.rule_suite_result = rule_suite_result
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Path,
                query: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.rule_hyphen_suites)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.rule_hyphen_suites {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/get(repos/get-repo-rule-suites)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suites.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/get(repos/get-repo-rule-suites)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/get(repos/get-repo-rule-suites)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository rule suite
    ///
    /// Gets information about a suite of rule evaluations from within a repository.
    /// For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-repo-rule-suite)`.
    public enum repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite {
        public static let id: Swift.String = "repos/get-repo-rule-suite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the rule suite result.
                /// To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)
                /// for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)
                /// for organizations.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/GET/path/rule_suite_id`.
                public var rule_suite_id: Components.Parameters.rule_hyphen_suite_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - rule_suite_id: The unique identifier of the rule suite result.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    rule_suite_id: Components.Parameters.rule_hyphen_suite_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.rule_suite_id = rule_suite_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input.Path,
                headers: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.rule_hyphen_suite)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.rule_hyphen_suite {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-repo-rule-suite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_repo_hyphen_rule_hyphen_suite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-repo-rule-suite)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}/get(repos/get-repo-rule-suite)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository ruleset
    ///
    /// Get a ruleset for a repository.
    ///
    /// **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
    /// making the API request has write access to the ruleset.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/get(repos/get-repo-ruleset)`.
    public enum repos_sol_get_hyphen_repo_hyphen_ruleset {
        public static let id: Swift.String = "repos/get-repo-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The ID of the ruleset.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/path/ruleset_id`.
                public var ruleset_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ruleset_id: The ID of the ruleset.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ruleset_id: Swift.Int
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ruleset_id = ruleset_id
                }
            }
            public var path: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Include rulesets configured at higher levels that apply to this repository
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/query/includes_parents`.
                public var includes_parents: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - includes_parents: Include rulesets configured at higher levels that apply to this repository
                public init(includes_parents: Swift.Bool? = nil) {
                    self.includes_parents = includes_parents
                }
            }
            public var query: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Path,
                query: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_ruleset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_ruleset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/get(repos/get-repo-ruleset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_repo_hyphen_ruleset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/get(repos/get-repo-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/get(repos/get-repo-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a repository ruleset
    ///
    /// Update a ruleset for a repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/put(repos/update-repo-ruleset)`.
    public enum repos_sol_update_hyphen_repo_hyphen_ruleset {
        public static let id: Swift.String = "repos/update-repo-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The ID of the ruleset.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/path/ruleset_id`.
                public var ruleset_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ruleset_id: The ID of the ruleset.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ruleset_id: Swift.Int
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ruleset_id = ruleset_id
                }
            }
            public var path: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json/target`.
                    @frozen public enum targetPayload: String, Codable, Hashable, Sendable {
                        case branch = "branch"
                        case tag = "tag"
                        case push = "push"
                    }
                    /// The target of the ruleset
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json/target`.
                    public var target: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Body.jsonPayload.targetPayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json/enforcement`.
                    public var enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement?
                    /// The actors that can bypass the rules in this ruleset
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json/bypass_actors`.
                    public var bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json/conditions`.
                    public var conditions: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions?
                    /// An array of rules within the ruleset.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/json/rules`.
                    public var rules: [Components.Schemas.repository_hyphen_rule]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the ruleset.
                    ///   - target: The target of the ruleset
                    ///   - enforcement:
                    ///   - bypass_actors: The actors that can bypass the rules in this ruleset
                    ///   - conditions:
                    ///   - rules: An array of rules within the ruleset.
                    public init(
                        name: Swift.String? = nil,
                        target: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Body.jsonPayload.targetPayload? = nil,
                        enforcement: Components.Schemas.repository_hyphen_rule_hyphen_enforcement? = nil,
                        bypass_actors: [Components.Schemas.repository_hyphen_ruleset_hyphen_bypass_hyphen_actor]? = nil,
                        conditions: Components.Schemas.repository_hyphen_ruleset_hyphen_conditions? = nil,
                        rules: [Components.Schemas.repository_hyphen_rule]? = nil
                    ) {
                        self.name = name
                        self.target = target
                        self.enforcement = enforcement
                        self.bypass_actors = bypass_actors
                        self.conditions = conditions
                        self.rules = rules
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case target
                        case enforcement
                        case bypass_actors
                        case conditions
                        case rules
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Path,
                headers: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Headers = .init(),
                body: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_ruleset)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_ruleset {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/put(repos/update-repo-ruleset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_update_hyphen_repo_hyphen_ruleset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/put(repos/update-repo-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/put(repos/update-repo-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository ruleset
    ///
    /// Delete a ruleset for a repository.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/delete(repos/delete-repo-ruleset)`.
    public enum repos_sol_delete_hyphen_repo_hyphen_ruleset {
        public static let id: Swift.String = "repos/delete-repo-ruleset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The ID of the ruleset.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/DELETE/path/ruleset_id`.
                public var ruleset_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ruleset_id: The ID of the ruleset.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ruleset_id: Swift.Int
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ruleset_id = ruleset_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/rulesets/{ruleset_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/delete(repos/delete-repo-ruleset)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_repo_hyphen_ruleset.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/delete(repos/delete-repo-ruleset)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/rulesets/{ruleset_id}/delete(repos/delete-repo-ruleset)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the weekly commit activity
    ///
    /// Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
    ///
    /// > [!NOTE]
    /// > This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/code_frequency`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/code_frequency/get(repos/get-code-frequency-stats)`.
    public enum repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats {
        public static let id: Swift.String = "repos/get-code-frequency-stats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/code_frequency/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/code_frequency/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/code_frequency/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/code_frequency/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input.Path,
                headers: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/code_frequency/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/code_frequency/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.code_hyphen_frequency_hyphen_stat])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.code_hyphen_frequency_hyphen_stat] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/code_frequency/get(repos/get-code-frequency-stats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/code_frequency/get(repos/get-code-frequency-stats)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/code_frequency/get(repos/get-code-frequency-stats)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Repository contains more than 10,000 commits
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/code_frequency/get(repos/get-code-frequency-stats)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.repos_sol_get_hyphen_code_hyphen_frequency_hyphen_stats.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the last year of commit activity
    ///
    /// Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/commit_activity`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/commit_activity/get(repos/get-commit-activity-stats)`.
    public enum repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats {
        public static let id: Swift.String = "repos/get-commit-activity-stats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/commit_activity/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/commit_activity/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/commit_activity/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/commit_activity/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input.Path,
                headers: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/commit_activity/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/commit_activity/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.commit_hyphen_activity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.commit_hyphen_activity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/commit_activity/get(repos/get-commit-activity-stats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_commit_hyphen_activity_hyphen_stats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/commit_activity/get(repos/get-commit-activity-stats)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/commit_activity/get(repos/get-commit-activity-stats)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all contributor commit activity
    ///
    ///
    /// Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
    ///
    /// *   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
    /// *   `a` - Number of additions
    /// *   `d` - Number of deletions
    /// *   `c` - Number of commits
    ///
    /// > [!NOTE]
    /// > This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/contributors/get(repos/get-contributors-stats)`.
    public enum repos_sol_get_hyphen_contributors_hyphen_stats {
        public static let id: Swift.String = "repos/get-contributors-stats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/contributors/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/contributors/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/contributors/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/contributors/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_contributors_hyphen_stats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_contributors_hyphen_stats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input.Path,
                headers: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/contributors/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/contributors/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.contributor_hyphen_activity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.contributor_hyphen_activity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/contributors/get(repos/get-contributors-stats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_contributors_hyphen_stats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/contributors/get(repos/get-contributors-stats)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/contributors/get(repos/get-contributors-stats)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the weekly commit count
    ///
    /// Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
    ///
    /// The array order is oldest week (index 0) to most recent week.
    ///
    /// The most recent week is seven days ago at UTC midnight to today at UTC midnight.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/participation`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/participation/get(repos/get-participation-stats)`.
    public enum repos_sol_get_hyphen_participation_hyphen_stats {
        public static let id: Swift.String = "repos/get-participation-stats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/participation/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/participation/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/participation/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/participation/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_participation_hyphen_stats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_participation_hyphen_stats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input.Path,
                headers: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/participation/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/participation/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.participation_hyphen_stats)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.participation_hyphen_stats {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The array order is oldest week (index 0) to most recent week.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/participation/get(repos/get-participation-stats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_participation_hyphen_stats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_participation_hyphen_stats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/participation/get(repos/get-participation-stats)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the hourly commit count for each day
    ///
    /// Each array contains the day number, hour number, and number of commits:
    ///
    /// *   `0-6`: Sunday - Saturday
    /// *   `0-23`: Hour of day
    /// *   Number of commits
    ///
    /// For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/stats/punch_card`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/punch_card/get(repos/get-punch-card-stats)`.
    public enum repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats {
        public static let id: Swift.String = "repos/get-punch-card-stats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/punch_card/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/punch_card/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/punch_card/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/punch_card/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input.Path,
                headers: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/punch_card/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/stats/punch_card/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.code_hyphen_frequency_hyphen_stat])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.code_hyphen_frequency_hyphen_stat] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/punch_card/get(repos/get-punch-card-stats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_punch_hyphen_card_hyphen_stats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/stats/punch_card/get(repos/get-punch-card-stats)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a commit status
    ///
    /// Users with push access in a repository can create commit statuses for a given SHA.
    ///
    /// Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/statuses/{sha}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/statuses/{sha}/post(repos/create-commit-status)`.
    public enum repos_sol_create_hyphen_commit_hyphen_status {
        public static let id: Swift.String = "repos/create-commit-status"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/path/sha`.
                public var sha: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - sha:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    sha: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.sha = sha
                }
            }
            public var path: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_commit_hyphen_status.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_commit_hyphen_status.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The state of the status.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case error = "error"
                        case failure = "failure"
                        case pending = "pending"
                        case success = "success"
                    }
                    /// The state of the status.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody/json/state`.
                    public var state: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Body.jsonPayload.statePayload
                    /// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
                    /// For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
                    /// `http://ci.example.com/user/repo/build/sha`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody/json/target_url`.
                    public var target_url: Swift.String?
                    /// A short description of the status.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// A string label to differentiate this status from the status of other systems. This field is case-insensitive.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody/json/context`.
                    public var context: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - state: The state of the status.
                    ///   - target_url: The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
                    ///   - description: A short description of the status.
                    ///   - context: A string label to differentiate this status from the status of other systems. This field is case-insensitive.
                    public init(
                        state: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Body.jsonPayload.statePayload,
                        target_url: Swift.String? = nil,
                        description: Swift.String? = nil,
                        context: Swift.String? = nil
                    ) {
                        self.state = state
                        self.target_url = target_url
                        self.description = description
                        self.context = context
                    }
                    public enum CodingKeys: String, CodingKey {
                        case state
                        case target_url
                        case description
                        case context
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Path,
                headers: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_commit_hyphen_status.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_commit_hyphen_status.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/statuses/{sha}/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.status)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.status {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_commit_hyphen_status.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_commit_hyphen_status.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_commit_hyphen_status.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/statuses/{sha}/post(repos/create-commit-status)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_commit_hyphen_status.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_commit_hyphen_status.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    public enum repos_sol_list_hyphen_tags {
        public static let id: Swift.String = "repos/list-tags"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_tags.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_tags.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_tags.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_tags.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_tags.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_tags.Input.Path,
                query: Operations.repos_sol_list_hyphen_tags.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_tags.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_tags.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.tag])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.tag] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_tags.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_tags.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_tags.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_tags.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_tags.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Closing down - List tag protection states for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)" endpoint instead.
    ///
    /// This returns the tag protection states of a repository.
    ///
    /// This information is only available to repository administrators.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/get(repos/list-tag-protection)`.
    public enum repos_sol_list_hyphen_tag_hyphen_protection {
        public static let id: Swift.String = "repos/list-tag-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_tag_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_tag_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.tag_hyphen_protection])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.tag_hyphen_protection] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/get(repos/list-tag-protection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_tag_hyphen_protection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_tag_hyphen_protection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/get(repos/list-tag-protection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/get(repos/list-tag-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Closing down - Create a tag protection state for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)" endpoint instead.
    ///
    /// This creates a tag protection state for a repository.
    /// This endpoint is only available to repository administrators.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/tags/protection`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/post(repos/create-tag-protection)`.
    public enum repos_sol_create_hyphen_tag_hyphen_protection {
        public static let id: Swift.String = "repos/create-tag-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_tag_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_tag_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An optional glob pattern to match against when enforcing tag protection.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/requestBody/json/pattern`.
                    public var pattern: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - pattern: An optional glob pattern to match against when enforcing tag protection.
                    public init(pattern: Swift.String) {
                        self.pattern = pattern
                    }
                    public enum CodingKeys: String, CodingKey {
                        case pattern
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.tag_hyphen_protection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.tag_hyphen_protection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/post(repos/create-tag-protection)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_tag_hyphen_protection.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_tag_hyphen_protection.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/post(repos/create-tag-protection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/post(repos/create-tag-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Closing down - Delete a tag protection state for a repository
    ///
    /// > [!WARNING]
    /// > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)" endpoint instead.
    ///
    /// This deletes a tag protection state for a repository.
    /// This endpoint is only available to repository administrators.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/{tag_protection_id}/delete(repos/delete-tag-protection)`.
    public enum repos_sol_delete_hyphen_tag_hyphen_protection {
        public static let id: Swift.String = "repos/delete-tag-protection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/{tag_protection_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/{tag_protection_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/{tag_protection_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the tag protection.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/{tag_protection_id}/DELETE/path/tag_protection_id`.
                public var tag_protection_id: Components.Parameters.tag_hyphen_protection_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - tag_protection_id: The unique identifier of the tag protection.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    tag_protection_id: Components.Parameters.tag_hyphen_protection_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.tag_protection_id = tag_protection_id
                }
            }
            public var path: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/protection/{tag_protection_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_tag_hyphen_protection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_delete_hyphen_tag_hyphen_protection.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input.Path,
                headers: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/{tag_protection_id}/delete(repos/delete-tag-protection)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_delete_hyphen_tag_hyphen_protection.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/{tag_protection_id}/delete(repos/delete-tag-protection)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/protection/{tag_protection_id}/delete(repos/delete-tag-protection)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Download a repository archive (tar)
    ///
    /// Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    /// `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    /// the `Location` header to make a second `GET` request.
    ///
    /// > [!NOTE]
    /// > For private repositories, these links are temporary and expire after five minutes.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tarball/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tarball/{ref}/get(repos/download-tarball-archive)`.
    public enum repos_sol_download_hyphen_tarball_hyphen_archive {
        public static let id: Swift.String = "repos/download-tarball-archive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tarball/{ref}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tarball/{ref}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tarball/{ref}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tarball/{ref}/GET/path/ref`.
                public var ref: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ref:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ref: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ref = ref
                }
            }
            public var path: Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tarball/{ref}/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tarball/{ref}/GET/responses/302/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tarball/{ref}/get(repos/download-tarball-archive)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.repos_sol_download_hyphen_tarball_hyphen_archive.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List repository teams
    ///
    /// Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
    ///
    /// For a public repository, a team is listed only if that team added the public repository explicitly.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/teams`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/teams/get(repos/list-teams)`.
    public enum repos_sol_list_hyphen_teams {
        public static let id: Swift.String = "repos/list-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_list_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_teams.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_teams.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_teams.Input.Path,
                query: Operations.repos_sol_list_hyphen_teams.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_teams.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_teams.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_teams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_teams.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_teams.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/teams/get(repos/list-teams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_teams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_teams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/teams/get(repos/list-teams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all repository topics
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/topics`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/get(repos/get-all-topics)`.
    public enum repos_sol_get_hyphen_all_hyphen_topics {
        public static let id: Swift.String = "repos/get-all-topics"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_topics.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_all_hyphen_topics.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Path,
                query: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_all_hyphen_topics.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.topic)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.topic {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_all_hyphen_topics.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_all_hyphen_topics.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/get(repos/get-all-topics)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_all_hyphen_topics.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_all_hyphen_topics.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/get(repos/get-all-topics)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Replace all repository topics
    ///
    ///
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/topics`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/put(repos/replace-all-topics)`.
    public enum repos_sol_replace_hyphen_all_hyphen_topics {
        public static let id: Swift.String = "repos/replace-all-topics"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_replace_hyphen_all_hyphen_topics.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_replace_hyphen_all_hyphen_topics.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/requestBody/json/names`.
                    public var names: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - names: An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
                    public init(names: [Swift.String]) {
                        self.names = names
                    }
                    public enum CodingKeys: String, CodingKey {
                        case names
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/requestBody/content/application\/json`.
                case json(Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Path,
                headers: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Headers = .init(),
                body: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/topics/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.topic)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.topic {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/put(repos/replace-all-topics)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_replace_hyphen_all_hyphen_topics.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_replace_hyphen_all_hyphen_topics.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/put(repos/replace-all-topics)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/topics/put(repos/replace-all-topics)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get repository clones
    ///
    /// Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/clones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/clones/get(repos/get-clones)`.
    public enum repos_sol_get_hyphen_clones {
        public static let id: Swift.String = "repos/get-clones"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_clones.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/per`.
                @frozen public enum per: String, Codable, Hashable, Sendable {
                    case day = "day"
                    case week = "week"
                }
                /// The time frame to display results for.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/query/per`.
                public var per: Components.Parameters.per?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per: The time frame to display results for.
                public init(per: Components.Parameters.per? = nil) {
                    self.per = per
                }
            }
            public var query: Operations.repos_sol_get_hyphen_clones.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_clones.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_clones.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_clones.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_clones.Input.Path,
                query: Operations.repos_sol_get_hyphen_clones.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_clones.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/clones/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.clone_hyphen_traffic)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.clone_hyphen_traffic {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_clones.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_clones.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/clones/get(repos/get-clones)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_clones.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_clones.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/clones/get(repos/get-clones)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get top referral paths
    ///
    /// Get the top 10 popular contents over the last 14 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/popular/paths`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/paths/get(repos/get-top-paths)`.
    public enum repos_sol_get_hyphen_top_hyphen_paths {
        public static let id: Swift.String = "repos/get-top-paths"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/paths/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/paths/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/paths/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_top_hyphen_paths.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/paths/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_top_hyphen_paths.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_top_hyphen_paths.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_top_hyphen_paths.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_top_hyphen_paths.Input.Path,
                headers: Operations.repos_sol_get_hyphen_top_hyphen_paths.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/paths/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/paths/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.content_hyphen_traffic])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.content_hyphen_traffic] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_top_hyphen_paths.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_top_hyphen_paths.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/paths/get(repos/get-top-paths)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_top_hyphen_paths.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_top_hyphen_paths.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/paths/get(repos/get-top-paths)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get top referral sources
    ///
    /// Get the top 10 referrers over the last 14 days.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/popular/referrers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/referrers/get(repos/get-top-referrers)`.
    public enum repos_sol_get_hyphen_top_hyphen_referrers {
        public static let id: Swift.String = "repos/get-top-referrers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/referrers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/referrers/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/referrers/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/referrers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_top_hyphen_referrers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_top_hyphen_referrers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input.Path,
                headers: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/referrers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/popular/referrers/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.referrer_hyphen_traffic])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.referrer_hyphen_traffic] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/referrers/get(repos/get-top-referrers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_top_hyphen_referrers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_top_hyphen_referrers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/popular/referrers/get(repos/get-top-referrers)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get page views
    ///
    /// Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/traffic/views`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/views/get(repos/get-views)`.
    public enum repos_sol_get_hyphen_views {
        public static let id: Swift.String = "repos/get-views"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_get_hyphen_views.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/per`.
                @frozen public enum per: String, Codable, Hashable, Sendable {
                    case day = "day"
                    case week = "week"
                }
                /// The time frame to display results for.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/query/per`.
                public var per: Components.Parameters.per?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per: The time frame to display results for.
                public init(per: Components.Parameters.per? = nil) {
                    self.per = per
                }
            }
            public var query: Operations.repos_sol_get_hyphen_views.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_views.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_get_hyphen_views.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_get_hyphen_views.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_get_hyphen_views.Input.Path,
                query: Operations.repos_sol_get_hyphen_views.Input.Query = .init(),
                headers: Operations.repos_sol_get_hyphen_views.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/traffic/views/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.view_hyphen_traffic)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.view_hyphen_traffic {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_get_hyphen_views.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_get_hyphen_views.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/views/get(repos/get-views)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_get_hyphen_views.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_get_hyphen_views.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/traffic/views/get(repos/get-views)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Transfer a repository
    ///
    /// A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/transfer`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/transfer/post(repos/transfer)`.
    public enum repos_sol_transfer {
        public static let id: Swift.String = "repos/transfer"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_transfer.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_transfer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_transfer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_transfer.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The username or organization name the repository will be transferred to.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/requestBody/json/new_owner`.
                    public var new_owner: Swift.String
                    /// The new name to be given to the repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/requestBody/json/new_name`.
                    public var new_name: Swift.String?
                    /// ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/requestBody/json/team_ids`.
                    public var team_ids: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - new_owner: The username or organization name the repository will be transferred to.
                    ///   - new_name: The new name to be given to the repository.
                    ///   - team_ids: ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
                    public init(
                        new_owner: Swift.String,
                        new_name: Swift.String? = nil,
                        team_ids: [Swift.Int]? = nil
                    ) {
                        self.new_owner = new_owner
                        self.new_name = new_name
                        self.team_ids = team_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case new_owner
                        case new_name
                        case team_ids
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_transfer.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_transfer.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_transfer.Input.Path,
                headers: Operations.repos_sol_transfer.Input.Headers = .init(),
                body: Operations.repos_sol_transfer.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/transfer/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.minimal_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.minimal_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_transfer.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_transfer.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/transfer/post(repos/transfer)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.repos_sol_transfer.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.repos_sol_transfer.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if vulnerability alerts are enabled for a repository
    ///
    /// Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/get(repos/check-vulnerability-alerts)`.
    public enum repos_sol_check_hyphen_vulnerability_hyphen_alerts {
        public static let id: Swift.String = "repos/check-vulnerability-alerts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if repository is enabled with vulnerability alerts
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/get(repos/check-vulnerability-alerts)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if repository is not enabled with vulnerability alerts
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/get(repos/check-vulnerability-alerts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.repos_sol_check_hyphen_vulnerability_hyphen_alerts.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Enable vulnerability alerts
    ///
    /// Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/put(repos/enable-vulnerability-alerts)`.
    public enum repos_sol_enable_hyphen_vulnerability_hyphen_alerts {
        public static let id: Swift.String = "repos/enable-vulnerability-alerts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/put(repos/enable-vulnerability-alerts)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_enable_hyphen_vulnerability_hyphen_alerts.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Disable vulnerability alerts
    ///
    /// Disables dependency alerts and the dependency graph for a repository.
    /// The authenticated user must have admin access to the repository. For more information,
    /// see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/vulnerability-alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/delete(repos/disable-vulnerability-alerts)`.
    public enum repos_sol_disable_hyphen_vulnerability_hyphen_alerts {
        public static let id: Swift.String = "repos/disable-vulnerability-alerts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/vulnerability-alerts/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/vulnerability-alerts/delete(repos/disable-vulnerability-alerts)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_disable_hyphen_vulnerability_hyphen_alerts.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Download a repository archive (zip)
    ///
    /// Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    /// `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    /// the `Location` header to make a second `GET` request.
    ///
    /// > [!NOTE]
    /// > For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/zipball/{ref}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/zipball/{ref}/get(repos/download-zipball-archive)`.
    public enum repos_sol_download_hyphen_zipball_hyphen_archive {
        public static let id: Swift.String = "repos/download-zipball-archive"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/zipball/{ref}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/zipball/{ref}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/zipball/{ref}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/zipball/{ref}/GET/path/ref`.
                public var ref: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ref:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ref: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ref = ref
                }
            }
            public var path: Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/zipball/{ref}/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/zipball/{ref}/GET/responses/302/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/zipball/{ref}/get(repos/download-zipball-archive)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.repos_sol_download_hyphen_zipball_hyphen_archive.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a repository using a template
    ///
    /// Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /repos/{template_owner}/{template_repo}/generate`.
    /// - Remark: Generated from `#/paths//repos/{template_owner}/{template_repo}/generate/post(repos/create-using-template)`.
    public enum repos_sol_create_hyphen_using_hyphen_template {
        public static let id: Swift.String = "repos/create-using-template"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the template repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/path/template_owner`.
                public var template_owner: Swift.String
                /// The name of the template repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/path/template_repo`.
                public var template_repo: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - template_owner: The account owner of the template repository. The name is not case sensitive.
                ///   - template_repo: The name of the template repository without the `.git` extension. The name is not case sensitive.
                public init(
                    template_owner: Swift.String,
                    template_repo: Swift.String
                ) {
                    self.template_owner = template_owner
                    self.template_repo = template_repo
                }
            }
            public var path: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Path
            /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_using_hyphen_template.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_using_hyphen_template.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody/json/owner`.
                    public var owner: Swift.String?
                    /// The name of the new repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// A short description of the new repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody/json/include_all_branches`.
                    public var include_all_branches: Swift.Bool?
                    /// Either `true` to create a new private repository or `false` to create a new public one.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody/json/private`.
                    public var _private: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - owner: The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
                    ///   - name: The name of the new repository.
                    ///   - description: A short description of the new repository.
                    ///   - include_all_branches: Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
                    ///   - _private: Either `true` to create a new private repository or `false` to create a new public one.
                    public init(
                        owner: Swift.String? = nil,
                        name: Swift.String,
                        description: Swift.String? = nil,
                        include_all_branches: Swift.Bool? = nil,
                        _private: Swift.Bool? = nil
                    ) {
                        self.owner = owner
                        self.name = name
                        self.description = description
                        self.include_all_branches = include_all_branches
                        self._private = _private
                    }
                    public enum CodingKeys: String, CodingKey {
                        case owner
                        case name
                        case description
                        case include_all_branches
                        case _private = "private"
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Path,
                headers: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_using_hyphen_template.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_using_hyphen_template.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{template_owner}/{template_repo}/generate/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_using_hyphen_template.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_using_hyphen_template.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_using_hyphen_template.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{template_owner}/{template_repo}/generate/post(repos/create-using-template)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_using_hyphen_template.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_using_hyphen_template.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public repositories
    ///
    /// Lists all public repositories in the order that they were created.
    ///
    /// Note:
    /// - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
    /// - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
    ///
    /// - Remark: HTTP `GET /repositories`.
    /// - Remark: Generated from `#/paths//repositories/get(repos/list-public)`.
    public enum repos_sol_list_hyphen_public {
        public static let id: Swift.String = "repos/list-public"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A repository ID. Only return repositories with an ID greater than this ID.
                ///
                /// - Remark: Generated from `#/paths/repositories/GET/query/since`.
                public var since: Components.Parameters.since_hyphen_repo?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: A repository ID. Only return repositories with an ID greater than this ID.
                public init(since: Components.Parameters.since_hyphen_repo? = nil) {
                    self.since = since
                }
            }
            public var query: Operations.repos_sol_list_hyphen_public.Input.Query
            /// - Remark: Generated from `#/paths/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_public.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_public.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_public.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.repos_sol_list_hyphen_public.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_public.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repositories/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repositories/GET/responses/200/headers/Link`.
                    public var Link: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Swift.String? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_public.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repositories/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_public.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_public.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_public.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repositories/get(repos/list-public)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_public.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_public.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repositories/get(repos/list-public)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repositories/get(repos/list-public)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories for the authenticated user
    ///
    /// Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// - Remark: HTTP `GET /user/repos`.
    /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)`.
    public enum repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "repos/list-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/repos/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/repos/GET/query/visibility`.
                @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case _public = "public"
                    case _private = "private"
                }
                /// Limit results to repositories with the specified visibility.
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/visibility`.
                public var visibility: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.visibilityPayload?
                /// Comma-separated list of values. Can include:  
                ///  * `owner`: Repositories that are owned by the authenticated user.  
                ///  * `collaborator`: Repositories that the user has been added to as a collaborator.  
                ///  * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/affiliation`.
                public var affiliation: Swift.String?
                /// - Remark: Generated from `#/paths/user/repos/GET/query/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case owner = "owner"
                    case _public = "public"
                    case _private = "private"
                    case member = "member"
                }
                /// Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/type`.
                public var _type: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query._typePayload?
                /// - Remark: Generated from `#/paths/user/repos/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case pushed = "pushed"
                    case full_name = "full_name"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/sort`.
                public var sort: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/user/repos/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/direction`.
                public var direction: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.directionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/since`.
                public var since: Components.Parameters.since_hyphen_repo_hyphen_date?
                /// Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/user/repos/GET/query/before`.
                public var before: Components.Parameters.before_hyphen_repo_hyphen_date?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - visibility: Limit results to repositories with the specified visibility.
                ///   - affiliation: Comma-separated list of values. Can include:  
                ///   - _type: Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
                ///   - sort: The property to sort the results by.
                ///   - direction: The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - since: Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - before: Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                public init(
                    visibility: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.visibilityPayload? = nil,
                    affiliation: Swift.String? = nil,
                    _type: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query._typePayload? = nil,
                    sort: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.sortPayload? = nil,
                    direction: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    since: Components.Parameters.since_hyphen_repo_hyphen_date? = nil,
                    before: Components.Parameters.before_hyphen_repo_hyphen_date? = nil
                ) {
                    self.visibility = visibility
                    self.affiliation = affiliation
                    self._type = _type
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                    self.since = since
                    self.before = before
                }
            }
            public var query: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/repos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/repos/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/repos/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/repos/get(repos/list-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a repository for the authenticated user
    ///
    /// Creates a new repository for the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
    ///
    /// - Remark: HTTP `POST /user/repos`.
    /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)`.
    public enum repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "repos/create-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/repos/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/repos/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// A short description of the repository.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// A URL with more information about the repository.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/homepage`.
                    public var homepage: Swift.String?
                    /// Whether the repository is private.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/private`.
                    public var _private: Swift.Bool?
                    /// Whether issues are enabled.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/has_issues`.
                    public var has_issues: Swift.Bool?
                    /// Whether projects are enabled.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/has_projects`.
                    public var has_projects: Swift.Bool?
                    /// Whether the wiki is enabled.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/has_wiki`.
                    public var has_wiki: Swift.Bool?
                    /// Whether discussions are enabled.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/has_discussions`.
                    public var has_discussions: Swift.Bool?
                    /// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/team_id`.
                    public var team_id: Swift.Int?
                    /// Whether the repository is initialized with a minimal README.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/auto_init`.
                    public var auto_init: Swift.Bool?
                    /// The desired language or platform to apply to the .gitignore.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/gitignore_template`.
                    public var gitignore_template: Swift.String?
                    /// The license keyword of the open source license for this repository.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/license_template`.
                    public var license_template: Swift.String?
                    /// Whether to allow squash merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/allow_squash_merge`.
                    public var allow_squash_merge: Swift.Bool?
                    /// Whether to allow merge commits for pull requests.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/allow_merge_commit`.
                    public var allow_merge_commit: Swift.Bool?
                    /// Whether to allow rebase merges for pull requests.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/allow_rebase_merge`.
                    public var allow_rebase_merge: Swift.Bool?
                    /// Whether to allow Auto-merge to be used on pull requests.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/allow_auto_merge`.
                    public var allow_auto_merge: Swift.Bool?
                    /// Whether to delete head branches when pull requests are merged
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/delete_branch_on_merge`.
                    public var delete_branch_on_merge: Swift.Bool?
                    /// Required when using `squash_merge_commit_message`.
                    ///
                    /// The default value for a squash merge commit title:
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/squash_merge_commit_title`.
                    @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                        case PR_TITLE = "PR_TITLE"
                        case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
                    }
                    /// Required when using `squash_merge_commit_message`.
                    ///
                    /// The default value for a squash merge commit title:
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/squash_merge_commit_title`.
                    public var squash_merge_commit_title: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.squash_merge_commit_titlePayload?
                    /// The default value for a squash merge commit message:
                    ///
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/squash_merge_commit_message`.
                    @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                        case PR_BODY = "PR_BODY"
                        case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                        case BLANK = "BLANK"
                    }
                    /// The default value for a squash merge commit message:
                    ///
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/squash_merge_commit_message`.
                    public var squash_merge_commit_message: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.squash_merge_commit_messagePayload?
                    /// Required when using `merge_commit_message`.
                    ///
                    /// The default value for a merge commit title.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/merge_commit_title`.
                    @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                        case PR_TITLE = "PR_TITLE"
                        case MERGE_MESSAGE = "MERGE_MESSAGE"
                    }
                    /// Required when using `merge_commit_message`.
                    ///
                    /// The default value for a merge commit title.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/merge_commit_title`.
                    public var merge_commit_title: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.merge_commit_titlePayload?
                    /// The default value for a merge commit message.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/merge_commit_message`.
                    @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                        case PR_BODY = "PR_BODY"
                        case PR_TITLE = "PR_TITLE"
                        case BLANK = "BLANK"
                    }
                    /// The default value for a merge commit message.
                    ///
                    /// - `PR_TITLE` - default to the pull request's title.
                    /// - `PR_BODY` - default to the pull request's body.
                    /// - `BLANK` - default to a blank commit message.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/merge_commit_message`.
                    public var merge_commit_message: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.merge_commit_messagePayload?
                    /// Whether downloads are enabled.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/has_downloads`.
                    public var has_downloads: Swift.Bool?
                    /// Whether this repository acts as a template that can be used to generate new repositories.
                    ///
                    /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/json/is_template`.
                    public var is_template: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the repository.
                    ///   - description: A short description of the repository.
                    ///   - homepage: A URL with more information about the repository.
                    ///   - _private: Whether the repository is private.
                    ///   - has_issues: Whether issues are enabled.
                    ///   - has_projects: Whether projects are enabled.
                    ///   - has_wiki: Whether the wiki is enabled.
                    ///   - has_discussions: Whether discussions are enabled.
                    ///   - team_id: The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
                    ///   - auto_init: Whether the repository is initialized with a minimal README.
                    ///   - gitignore_template: The desired language or platform to apply to the .gitignore.
                    ///   - license_template: The license keyword of the open source license for this repository.
                    ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
                    ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
                    ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
                    ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
                    ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
                    ///   - squash_merge_commit_title: Required when using `squash_merge_commit_message`.
                    ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                    ///   - merge_commit_title: Required when using `merge_commit_message`.
                    ///   - merge_commit_message: The default value for a merge commit message.
                    ///   - has_downloads: Whether downloads are enabled.
                    ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
                    public init(
                        name: Swift.String,
                        description: Swift.String? = nil,
                        homepage: Swift.String? = nil,
                        _private: Swift.Bool? = nil,
                        has_issues: Swift.Bool? = nil,
                        has_projects: Swift.Bool? = nil,
                        has_wiki: Swift.Bool? = nil,
                        has_discussions: Swift.Bool? = nil,
                        team_id: Swift.Int? = nil,
                        auto_init: Swift.Bool? = nil,
                        gitignore_template: Swift.String? = nil,
                        license_template: Swift.String? = nil,
                        allow_squash_merge: Swift.Bool? = nil,
                        allow_merge_commit: Swift.Bool? = nil,
                        allow_rebase_merge: Swift.Bool? = nil,
                        allow_auto_merge: Swift.Bool? = nil,
                        delete_branch_on_merge: Swift.Bool? = nil,
                        squash_merge_commit_title: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.squash_merge_commit_titlePayload? = nil,
                        squash_merge_commit_message: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.squash_merge_commit_messagePayload? = nil,
                        merge_commit_title: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.merge_commit_titlePayload? = nil,
                        merge_commit_message: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.merge_commit_messagePayload? = nil,
                        has_downloads: Swift.Bool? = nil,
                        is_template: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.homepage = homepage
                        self._private = _private
                        self.has_issues = has_issues
                        self.has_projects = has_projects
                        self.has_wiki = has_wiki
                        self.has_discussions = has_discussions
                        self.team_id = team_id
                        self.auto_init = auto_init
                        self.gitignore_template = gitignore_template
                        self.license_template = license_template
                        self.allow_squash_merge = allow_squash_merge
                        self.allow_merge_commit = allow_merge_commit
                        self.allow_rebase_merge = allow_rebase_merge
                        self.allow_auto_merge = allow_auto_merge
                        self.delete_branch_on_merge = delete_branch_on_merge
                        self.squash_merge_commit_title = squash_merge_commit_title
                        self.squash_merge_commit_message = squash_merge_commit_message
                        self.merge_commit_title = merge_commit_title
                        self.merge_commit_message = merge_commit_message
                        self.has_downloads = has_downloads
                        self.is_template = is_template
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case homepage
                        case _private = "private"
                        case has_issues
                        case has_projects
                        case has_wiki
                        case has_discussions
                        case team_id
                        case auto_init
                        case gitignore_template
                        case license_template
                        case allow_squash_merge
                        case allow_merge_commit
                        case allow_rebase_merge
                        case allow_auto_merge
                        case delete_branch_on_merge
                        case squash_merge_commit_title
                        case squash_merge_commit_message
                        case merge_commit_title
                        case merge_commit_message
                        case has_downloads
                        case is_template
                    }
                }
                /// - Remark: Generated from `#/paths/user/repos/POST/requestBody/content/application\/json`.
                case json(Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/repos/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/repos/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Headers
                /// - Remark: Generated from `#/paths/user/repos/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/repos/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Headers = .init(),
                    body: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.repos_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//user/repos/post(repos/create-for-authenticated-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List repository invitations for the authenticated user
    ///
    /// When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
    ///
    /// - Remark: HTTP `GET /user/repository_invitations`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)`.
    public enum repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "repos/list-invitations-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/repository_invitations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/repository_invitations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/repository_invitations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/repository_invitations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/repository_invitations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/repository_invitations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/repository_invitations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/repository_invitations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository_hyphen_invitation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository_hyphen_invitation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_invitations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/get(repos/list-invitations-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Accept a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /user/repository_invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)`.
    public enum repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "repos/accept-invitation-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/repository_invitations/{invitation_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the invitation.
                ///
                /// - Remark: Generated from `#/paths/user/repository_invitations/{invitation_id}/PATCH/path/invitation_id`.
                public var invitation_id: Components.Parameters.invitation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - invitation_id: The unique identifier of the invitation.
                public init(invitation_id: Components.Parameters.invitation_hyphen_id) {
                    self.invitation_id = invitation_id
                }
            }
            public var path: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/repository_invitations/{invitation_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_accept_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/patch(repos/accept-invitation-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Decline a repository invitation
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /user/repository_invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)`.
    public enum repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "repos/decline-invitation-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/repository_invitations/{invitation_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the invitation.
                ///
                /// - Remark: Generated from `#/paths/user/repository_invitations/{invitation_id}/DELETE/path/invitation_id`.
                public var invitation_id: Components.Parameters.invitation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - invitation_id: The unique identifier of the invitation.
                public init(invitation_id: Components.Parameters.invitation_hyphen_id) {
                    self.invitation_id = invitation_id
                }
            }
            public var path: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/repository_invitations/{invitation_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.repos_sol_decline_hyphen_invitation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/repository_invitations/{invitation_id}/delete(repos/decline-invitation-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories for a user
    ///
    /// Lists public repositories for the specified user.
    ///
    /// - Remark: HTTP `GET /users/{username}/repos`.
    /// - Remark: Generated from `#/paths//users/{username}/repos/get(repos/list-for-user)`.
    public enum repos_sol_list_hyphen_for_hyphen_user {
        public static let id: Swift.String = "repos/list-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/repos/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case owner = "owner"
                    case member = "member"
                }
                /// Limit results to repositories of the specified type.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/type`.
                public var _type: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query._typePayload?
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case pushed = "pushed"
                    case full_name = "full_name"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/sort`.
                public var sort: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/direction`.
                public var direction: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query.directionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type: Limit results to repositories of the specified type.
                ///   - sort: The property to sort the results by.
                ///   - direction: The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    _type: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query._typePayload? = nil,
                    sort: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query.sortPayload? = nil,
                    direction: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self._type = _type
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/repos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.repos_sol_list_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Path,
                query: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.repos_sol_list_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/repos/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.repos_sol_list_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/repos/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/repos/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.repos_sol_list_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.repos_sol_list_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.repos_sol_list_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/repos/get(repos/list-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.repos_sol_list_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.repos_sol_list_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
