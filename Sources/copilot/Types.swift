// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get Copilot seat information and settings for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
    ///
    /// Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)`.
    func copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details(_ input: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output
    /// List all Copilot seat assignments for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
    /// Only organization owners can view assigned seats.
    ///
    /// Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing/seats`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)`.
    func copilot_sol_list_hyphen_copilot_hyphen_seats(_ input: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input) async throws -> Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output
    /// Add teams to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    ///
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    ///
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)`.
    func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams(_ input: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output
    /// Remove teams from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Sets seats for all members of each team specified to "pending cancellation".
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    ///
    /// Only organization owners can cancel Copilot seats for their organization members.
    ///
    /// The response contains the total number of seats set to "pending cancellation".
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)`.
    func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams(_ input: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output
    /// Add users to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    ///
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    ///
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)`.
    func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users(_ input: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output
    /// Remove users from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Sets seats for all users specified to "pending cancellation".
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    ///
    /// Only organization owners can cancel Copilot seats for their organization members.
    ///
    /// The response contains the total number of seats set to "pending cancellation".
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)`.
    func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users(_ input: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output
    /// Get Copilot metrics for an organization
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    ///
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    ///
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
    /// Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/metrics`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)`.
    func copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization(_ input: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input) async throws -> Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Output
    /// Get Copilot seat assignment details for a user
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
    ///
    /// The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    ///
    /// Only organization owners can view Copilot seat assignment details for members of their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/copilot`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)`.
    func copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user(_ input: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output
    /// Get Copilot metrics for a team
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    ///
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    ///
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
    /// Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/team/{team_slug}/copilot/metrics`.
    /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)`.
    func copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team(_ input: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input) async throws -> Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get Copilot seat information and settings for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
    ///
    /// Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)`.
    public func copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details(
        path: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Path,
        headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output {
        try await copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details(Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input(
            path: path,
            headers: headers
        ))
    }
    /// List all Copilot seat assignments for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
    /// Only organization owners can view assigned seats.
    ///
    /// Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing/seats`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)`.
    public func copilot_sol_list_hyphen_copilot_hyphen_seats(
        path: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Path,
        query: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Query = .init(),
        headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output {
        try await copilot_sol_list_hyphen_copilot_hyphen_seats(Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add teams to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    ///
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    ///
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)`.
    public func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams(
        path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Path,
        headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Headers = .init(),
        body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body
    ) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output {
        try await copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove teams from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Sets seats for all members of each team specified to "pending cancellation".
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    ///
    /// Only organization owners can cancel Copilot seats for their organization members.
    ///
    /// The response contains the total number of seats set to "pending cancellation".
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)`.
    public func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams(
        path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Path,
        headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Headers = .init(),
        body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body
    ) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output {
        try await copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Add users to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    ///
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    ///
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)`.
    public func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users(
        path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Path,
        headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Headers = .init(),
        body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body
    ) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output {
        try await copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove users from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Sets seats for all users specified to "pending cancellation".
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    ///
    /// Only organization owners can cancel Copilot seats for their organization members.
    ///
    /// The response contains the total number of seats set to "pending cancellation".
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)`.
    public func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users(
        path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Path,
        headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Headers = .init(),
        body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body
    ) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output {
        try await copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get Copilot metrics for an organization
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    ///
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    ///
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
    /// Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/metrics`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)`.
    public func copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization(
        path: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Path,
        query: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Query = .init(),
        headers: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Output {
        try await copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization(Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get Copilot seat assignment details for a user
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
    ///
    /// The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    ///
    /// Only organization owners can view Copilot seat assignment details for members of their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/copilot`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)`.
    public func copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user(
        path: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output {
        try await copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user(Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get Copilot metrics for a team
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    ///
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    ///
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
    /// Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/team/{team_slug}/copilot/metrics`.
    /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)`.
    public func copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team(
        path: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Path,
        query: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Query = .init(),
        headers: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Output {
        try await copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team(Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// The breakdown of Copilot Business seats for the organization.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-organization-seat-breakdown`.
        public struct copilot_hyphen_organization_hyphen_seat_hyphen_breakdown: Codable, Hashable, Sendable {
            /// The total number of seats being billed for the organization as of the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-seat-breakdown/total`.
            public var total: Swift.Int?
            /// Seats added during the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-seat-breakdown/added_this_cycle`.
            public var added_this_cycle: Swift.Int?
            /// The number of seats that are pending cancellation at the end of the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-seat-breakdown/pending_cancellation`.
            public var pending_cancellation: Swift.Int?
            /// The number of users who have been invited to receive a Copilot seat through this organization.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-seat-breakdown/pending_invitation`.
            public var pending_invitation: Swift.Int?
            /// The number of seats that have used Copilot during the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-seat-breakdown/active_this_cycle`.
            public var active_this_cycle: Swift.Int?
            /// The number of seats that have not used Copilot during the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-seat-breakdown/inactive_this_cycle`.
            public var inactive_this_cycle: Swift.Int?
            /// Creates a new `copilot_hyphen_organization_hyphen_seat_hyphen_breakdown`.
            ///
            /// - Parameters:
            ///   - total: The total number of seats being billed for the organization as of the current billing cycle.
            ///   - added_this_cycle: Seats added during the current billing cycle.
            ///   - pending_cancellation: The number of seats that are pending cancellation at the end of the current billing cycle.
            ///   - pending_invitation: The number of users who have been invited to receive a Copilot seat through this organization.
            ///   - active_this_cycle: The number of seats that have used Copilot during the current billing cycle.
            ///   - inactive_this_cycle: The number of seats that have not used Copilot during the current billing cycle.
            public init(
                total: Swift.Int? = nil,
                added_this_cycle: Swift.Int? = nil,
                pending_cancellation: Swift.Int? = nil,
                pending_invitation: Swift.Int? = nil,
                active_this_cycle: Swift.Int? = nil,
                inactive_this_cycle: Swift.Int? = nil
            ) {
                self.total = total
                self.added_this_cycle = added_this_cycle
                self.pending_cancellation = pending_cancellation
                self.pending_invitation = pending_invitation
                self.active_this_cycle = active_this_cycle
                self.inactive_this_cycle = inactive_this_cycle
            }
            public enum CodingKeys: String, CodingKey {
                case total
                case added_this_cycle
                case pending_cancellation
                case pending_invitation
                case active_this_cycle
                case inactive_this_cycle
            }
        }
        /// Information about the seat breakdown and policies set for an organization with a Copilot Business or Copilot Enterprise subscription.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-organization-details`.
        public struct copilot_hyphen_organization_hyphen_details: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/seat_breakdown`.
            public var seat_breakdown: Components.Schemas.copilot_hyphen_organization_hyphen_seat_hyphen_breakdown
            /// The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/public_code_suggestions`.
            @frozen public enum public_code_suggestionsPayload: String, Codable, Hashable, Sendable {
                case allow = "allow"
                case block = "block"
                case unconfigured = "unconfigured"
            }
            /// The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/public_code_suggestions`.
            public var public_code_suggestions: Components.Schemas.copilot_hyphen_organization_hyphen_details.public_code_suggestionsPayload
            /// The organization policy for allowing or disallowing Copilot Chat in the IDE.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/ide_chat`.
            @frozen public enum ide_chatPayload: String, Codable, Hashable, Sendable {
                case enabled = "enabled"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The organization policy for allowing or disallowing Copilot Chat in the IDE.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/ide_chat`.
            public var ide_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.ide_chatPayload?
            /// The organization policy for allowing or disallowing Copilot features on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/platform_chat`.
            @frozen public enum platform_chatPayload: String, Codable, Hashable, Sendable {
                case enabled = "enabled"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The organization policy for allowing or disallowing Copilot features on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/platform_chat`.
            public var platform_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.platform_chatPayload?
            /// The organization policy for allowing or disallowing Copilot in the CLI.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/cli`.
            @frozen public enum cliPayload: String, Codable, Hashable, Sendable {
                case enabled = "enabled"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The organization policy for allowing or disallowing Copilot in the CLI.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/cli`.
            public var cli: Components.Schemas.copilot_hyphen_organization_hyphen_details.cliPayload?
            /// The mode of assigning new seats.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/seat_management_setting`.
            @frozen public enum seat_management_settingPayload: String, Codable, Hashable, Sendable {
                case assign_all = "assign_all"
                case assign_selected = "assign_selected"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The mode of assigning new seats.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/seat_management_setting`.
            public var seat_management_setting: Components.Schemas.copilot_hyphen_organization_hyphen_details.seat_management_settingPayload
            /// The Copilot plan of the organization, or the parent enterprise, when applicable.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/plan_type`.
            @frozen public enum plan_typePayload: String, Codable, Hashable, Sendable {
                case business = "business"
                case enterprise = "enterprise"
            }
            /// The Copilot plan of the organization, or the parent enterprise, when applicable.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/plan_type`.
            public var plan_type: Components.Schemas.copilot_hyphen_organization_hyphen_details.plan_typePayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `copilot_hyphen_organization_hyphen_details`.
            ///
            /// - Parameters:
            ///   - seat_breakdown:
            ///   - public_code_suggestions: The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
            ///   - ide_chat: The organization policy for allowing or disallowing Copilot Chat in the IDE.
            ///   - platform_chat: The organization policy for allowing or disallowing Copilot features on GitHub.com.
            ///   - cli: The organization policy for allowing or disallowing Copilot in the CLI.
            ///   - seat_management_setting: The mode of assigning new seats.
            ///   - plan_type: The Copilot plan of the organization, or the parent enterprise, when applicable.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                seat_breakdown: Components.Schemas.copilot_hyphen_organization_hyphen_seat_hyphen_breakdown,
                public_code_suggestions: Components.Schemas.copilot_hyphen_organization_hyphen_details.public_code_suggestionsPayload,
                ide_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.ide_chatPayload? = nil,
                platform_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.platform_chatPayload? = nil,
                cli: Components.Schemas.copilot_hyphen_organization_hyphen_details.cliPayload? = nil,
                seat_management_setting: Components.Schemas.copilot_hyphen_organization_hyphen_details.seat_management_settingPayload,
                plan_type: Components.Schemas.copilot_hyphen_organization_hyphen_details.plan_typePayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.seat_breakdown = seat_breakdown
                self.public_code_suggestions = public_code_suggestions
                self.ide_chat = ide_chat
                self.platform_chat = platform_chat
                self.cli = cli
                self.seat_management_setting = seat_management_setting
                self.plan_type = plan_type
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case seat_breakdown
                case public_code_suggestions
                case ide_chat
                case platform_chat
                case cli
                case seat_management_setting
                case plan_type
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                seat_breakdown = try container.decode(
                    Components.Schemas.copilot_hyphen_organization_hyphen_seat_hyphen_breakdown.self,
                    forKey: .seat_breakdown
                )
                public_code_suggestions = try container.decode(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.public_code_suggestionsPayload.self,
                    forKey: .public_code_suggestions
                )
                ide_chat = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.ide_chatPayload.self,
                    forKey: .ide_chat
                )
                platform_chat = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.platform_chatPayload.self,
                    forKey: .platform_chat
                )
                cli = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.cliPayload.self,
                    forKey: .cli
                )
                seat_management_setting = try container.decode(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.seat_management_settingPayload.self,
                    forKey: .seat_management_setting
                )
                plan_type = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.plan_typePayload.self,
                    forKey: .plan_type
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "seat_breakdown",
                    "public_code_suggestions",
                    "ide_chat",
                    "platform_chat",
                    "cli",
                    "seat_management_setting",
                    "plan_type"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(
                    seat_breakdown,
                    forKey: .seat_breakdown
                )
                try container.encode(
                    public_code_suggestions,
                    forKey: .public_code_suggestions
                )
                try container.encodeIfPresent(
                    ide_chat,
                    forKey: .ide_chat
                )
                try container.encodeIfPresent(
                    platform_chat,
                    forKey: .platform_chat
                )
                try container.encodeIfPresent(
                    cli,
                    forKey: .cli
                )
                try container.encode(
                    seat_management_setting,
                    forKey: .seat_management_setting
                )
                try container.encodeIfPresent(
                    plan_type,
                    forKey: .plan_type
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// A GitHub organization.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-organization-simple`.
        public struct nullable_hyphen_organization_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/public_members_url`.
            public var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `nullable_hyphen_organization_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
            }
        }
        /// Group of enterprise owners and/or members
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise-team`.
        public struct enterprise_hyphen_team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/enterprise-team/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/enterprise-team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise-team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise-team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise-team/sync_to_organizations`.
            public var sync_to_organizations: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise-team/group_id`.
            public var group_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise-team/group_name`.
            public var group_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise-team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise-team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise-team/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/enterprise-team/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `enterprise_hyphen_team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - slug:
            ///   - url:
            ///   - sync_to_organizations:
            ///   - group_id:
            ///   - group_name:
            ///   - html_url:
            ///   - members_url:
            ///   - created_at:
            ///   - updated_at:
            public init(
                id: Swift.Int64,
                name: Swift.String,
                slug: Swift.String,
                url: Swift.String,
                sync_to_organizations: Swift.String,
                group_id: Swift.String? = nil,
                group_name: Swift.String? = nil,
                html_url: Swift.String,
                members_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.id = id
                self.name = name
                self.slug = slug
                self.url = url
                self.sync_to_organizations = sync_to_organizations
                self.group_id = group_id
                self.group_name = group_name
                self.html_url = html_url
                self.members_url = members_url
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case slug
                case url
                case sync_to_organizations
                case group_id
                case group_name
                case html_url
                case members_url
                case created_at
                case updated_at
            }
        }
        /// Information about a Copilot Business seat assignment for a user, team, or organization.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-seat-details`.
        public struct copilot_hyphen_seat_hyphen_details: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/organization`.
            public var organization: Components.Schemas.nullable_hyphen_organization_hyphen_simple?
            /// The team through which the assignee is granted access to GitHub Copilot, if applicable.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assigning_team`.
            @frozen public enum assigning_teamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assigning_team/case1`.
                case team(Components.Schemas.team)
                /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assigning_team/case2`.
                case enterprise_hyphen_team(Components.Schemas.enterprise_hyphen_team)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .team(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .enterprise_hyphen_team(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .team(value):
                        try value.encode(to: encoder)
                    case let .enterprise_hyphen_team(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The team through which the assignee is granted access to GitHub Copilot, if applicable.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assigning_team`.
            public var assigning_team: Components.Schemas.copilot_hyphen_seat_hyphen_details.assigning_teamPayload?
            /// The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/pending_cancellation_date`.
            public var pending_cancellation_date: Swift.String?
            /// Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/last_activity_at`.
            public var last_activity_at: Foundation.Date?
            /// Last editor that was used by the user for a GitHub Copilot completion.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/last_activity_editor`.
            public var last_activity_editor: Swift.String?
            /// Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/created_at`.
            public var created_at: Foundation.Date
            /// **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/updated_at`.
            @available(*, deprecated)
            public var updated_at: Foundation.Date?
            /// The Copilot plan of the organization, or the parent enterprise, when applicable.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/plan_type`.
            @frozen public enum plan_typePayload: String, Codable, Hashable, Sendable {
                case business = "business"
                case enterprise = "enterprise"
                case unknown = "unknown"
            }
            /// The Copilot plan of the organization, or the parent enterprise, when applicable.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/plan_type`.
            public var plan_type: Components.Schemas.copilot_hyphen_seat_hyphen_details.plan_typePayload?
            /// Creates a new `copilot_hyphen_seat_hyphen_details`.
            ///
            /// - Parameters:
            ///   - assignee:
            ///   - organization:
            ///   - assigning_team: The team through which the assignee is granted access to GitHub Copilot, if applicable.
            ///   - pending_cancellation_date: The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
            ///   - last_activity_at: Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
            ///   - last_activity_editor: Last editor that was used by the user for a GitHub Copilot completion.
            ///   - created_at: Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
            ///   - updated_at: **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
            ///   - plan_type: The Copilot plan of the organization, or the parent enterprise, when applicable.
            public init(
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                organization: Components.Schemas.nullable_hyphen_organization_hyphen_simple? = nil,
                assigning_team: Components.Schemas.copilot_hyphen_seat_hyphen_details.assigning_teamPayload? = nil,
                pending_cancellation_date: Swift.String? = nil,
                last_activity_at: Foundation.Date? = nil,
                last_activity_editor: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date? = nil,
                plan_type: Components.Schemas.copilot_hyphen_seat_hyphen_details.plan_typePayload? = nil
            ) {
                self.assignee = assignee
                self.organization = organization
                self.assigning_team = assigning_team
                self.pending_cancellation_date = pending_cancellation_date
                self.last_activity_at = last_activity_at
                self.last_activity_editor = last_activity_editor
                self.created_at = created_at
                self.updated_at = updated_at
                self.plan_type = plan_type
            }
            public enum CodingKeys: String, CodingKey {
                case assignee
                case organization
                case assigning_team
                case pending_cancellation_date
                case last_activity_at
                case last_activity_editor
                case created_at
                case updated_at
                case plan_type
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                assignee = try container.decodeIfPresent(
                    Components.Schemas.nullable_hyphen_simple_hyphen_user.self,
                    forKey: .assignee
                )
                organization = try container.decodeIfPresent(
                    Components.Schemas.nullable_hyphen_organization_hyphen_simple.self,
                    forKey: .organization
                )
                assigning_team = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_seat_hyphen_details.assigning_teamPayload.self,
                    forKey: .assigning_team
                )
                pending_cancellation_date = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .pending_cancellation_date
                )
                last_activity_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .last_activity_at
                )
                last_activity_editor = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .last_activity_editor
                )
                created_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .created_at
                )
                updated_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                plan_type = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_seat_hyphen_details.plan_typePayload.self,
                    forKey: .plan_type
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "assignee",
                    "organization",
                    "assigning_team",
                    "pending_cancellation_date",
                    "last_activity_at",
                    "last_activity_editor",
                    "created_at",
                    "updated_at",
                    "plan_type"
                ])
            }
        }
        /// Usage metrics for Copilot editor code completions in the IDE.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions`.
        public struct copilot_hyphen_ide_hyphen_code_hyphen_completions: Codable, Hashable, Sendable {
            /// Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/total_engaged_users`.
            public var total_engaged_users: Swift.Int?
            /// Usage metrics for a given language for the given editor for Copilot code completions.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/languagesPayload`.
            public struct languagesPayloadPayload: Codable, Hashable, Sendable {
                /// Name of the language used for Copilot code completion suggestions.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/languagesPayload/name`.
                public var name: Swift.String?
                /// Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/languagesPayload/total_engaged_users`.
                public var total_engaged_users: Swift.Int?
                /// Creates a new `languagesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the language used for Copilot code completion suggestions.
                ///   - total_engaged_users: Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances.
                public init(
                    name: Swift.String? = nil,
                    total_engaged_users: Swift.Int? = nil
                ) {
                    self.name = name
                    self.total_engaged_users = total_engaged_users
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case total_engaged_users
                }
            }
            /// Code completion metrics for active languages.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/languages`.
            public typealias languagesPayload = [Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.languagesPayloadPayload]
            /// Code completion metrics for active languages.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/languages`.
            public var languages: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.languagesPayload?
            /// Copilot code completion metrics for active editors.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload`.
            public struct editorsPayloadPayload: Codable, Hashable, Sendable {
                /// Name of the given editor.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/name`.
                public var name: Swift.String?
                /// Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/total_engaged_users`.
                public var total_engaged_users: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload`.
                public struct modelsPayloadPayload: Codable, Hashable, Sendable {
                    /// Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/name`.
                    public var name: Swift.String?
                    /// Indicates whether a model is custom or default.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/is_custom_model`.
                    public var is_custom_model: Swift.Bool?
                    /// The training date for the custom model.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/custom_model_training_date`.
                    public var custom_model_training_date: Swift.String?
                    /// Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/total_engaged_users`.
                    public var total_engaged_users: Swift.Int?
                    /// Usage metrics for a given language for the given editor for Copilot code completions.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languagesPayload`.
                    public struct languagesPayloadPayload: Codable, Hashable, Sendable {
                        /// Name of the language used for Copilot code completion suggestions, for the given editor.
                        ///
                        /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languagesPayload/name`.
                        public var name: Swift.String?
                        /// Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances.
                        ///
                        /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languagesPayload/total_engaged_users`.
                        public var total_engaged_users: Swift.Int?
                        /// The number of Copilot code suggestions generated for the given editor, for the given language.
                        ///
                        /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languagesPayload/total_code_suggestions`.
                        public var total_code_suggestions: Swift.Int?
                        /// The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances.
                        ///
                        /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languagesPayload/total_code_acceptances`.
                        public var total_code_acceptances: Swift.Int?
                        /// The number of lines of code suggested by Copilot code completions for the given editor, for the given language.
                        ///
                        /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languagesPayload/total_code_lines_suggested`.
                        public var total_code_lines_suggested: Swift.Int?
                        /// The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language.
                        ///
                        /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languagesPayload/total_code_lines_accepted`.
                        public var total_code_lines_accepted: Swift.Int?
                        /// Creates a new `languagesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - name: Name of the language used for Copilot code completion suggestions, for the given editor.
                        ///   - total_engaged_users: Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances.
                        ///   - total_code_suggestions: The number of Copilot code suggestions generated for the given editor, for the given language.
                        ///   - total_code_acceptances: The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances.
                        ///   - total_code_lines_suggested: The number of lines of code suggested by Copilot code completions for the given editor, for the given language.
                        ///   - total_code_lines_accepted: The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language.
                        public init(
                            name: Swift.String? = nil,
                            total_engaged_users: Swift.Int? = nil,
                            total_code_suggestions: Swift.Int? = nil,
                            total_code_acceptances: Swift.Int? = nil,
                            total_code_lines_suggested: Swift.Int? = nil,
                            total_code_lines_accepted: Swift.Int? = nil
                        ) {
                            self.name = name
                            self.total_engaged_users = total_engaged_users
                            self.total_code_suggestions = total_code_suggestions
                            self.total_code_acceptances = total_code_acceptances
                            self.total_code_lines_suggested = total_code_lines_suggested
                            self.total_code_lines_accepted = total_code_lines_accepted
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                            case total_engaged_users
                            case total_code_suggestions
                            case total_code_acceptances
                            case total_code_lines_suggested
                            case total_code_lines_accepted
                        }
                    }
                    /// Code completion metrics for active languages, for the given editor.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languages`.
                    public typealias languagesPayload = [Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload.modelsPayloadPayload.languagesPayloadPayload]
                    /// Code completion metrics for active languages, for the given editor.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/modelsPayload/languages`.
                    public var languages: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload.modelsPayloadPayload.languagesPayload?
                    /// Creates a new `modelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'.
                    ///   - is_custom_model: Indicates whether a model is custom or default.
                    ///   - custom_model_training_date: The training date for the custom model.
                    ///   - total_engaged_users: Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances.
                    ///   - languages: Code completion metrics for active languages, for the given editor.
                    public init(
                        name: Swift.String? = nil,
                        is_custom_model: Swift.Bool? = nil,
                        custom_model_training_date: Swift.String? = nil,
                        total_engaged_users: Swift.Int? = nil,
                        languages: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload.modelsPayloadPayload.languagesPayload? = nil
                    ) {
                        self.name = name
                        self.is_custom_model = is_custom_model
                        self.custom_model_training_date = custom_model_training_date
                        self.total_engaged_users = total_engaged_users
                        self.languages = languages
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case is_custom_model
                        case custom_model_training_date
                        case total_engaged_users
                        case languages
                    }
                }
                /// List of model metrics for custom models and the default model.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/models`.
                public typealias modelsPayload = [Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload.modelsPayloadPayload]
                /// List of model metrics for custom models and the default model.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editorsPayload/models`.
                public var models: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload.modelsPayload?
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `editorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the given editor.
                ///   - total_engaged_users: Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances.
                ///   - models: List of model metrics for custom models and the default model.
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    name: Swift.String? = nil,
                    total_engaged_users: Swift.Int? = nil,
                    models: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload.modelsPayload? = nil,
                    additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                ) {
                    self.name = name
                    self.total_engaged_users = total_engaged_users
                    self.models = models
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case total_engaged_users
                    case models
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    name = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .name
                    )
                    total_engaged_users = try container.decodeIfPresent(
                        Swift.Int.self,
                        forKey: .total_engaged_users
                    )
                    models = try container.decodeIfPresent(
                        Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload.modelsPayload.self,
                        forKey: .models
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "name",
                        "total_engaged_users",
                        "models"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        name,
                        forKey: .name
                    )
                    try container.encodeIfPresent(
                        total_engaged_users,
                        forKey: .total_engaged_users
                    )
                    try container.encodeIfPresent(
                        models,
                        forKey: .models
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editors`.
            public typealias editorsPayload = [Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/copilot-ide-code-completions/editors`.
            public var editors: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `copilot_hyphen_ide_hyphen_code_hyphen_completions`.
            ///
            /// - Parameters:
            ///   - total_engaged_users: Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances.
            ///   - languages: Code completion metrics for active languages.
            ///   - editors:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                total_engaged_users: Swift.Int? = nil,
                languages: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.languagesPayload? = nil,
                editors: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.total_engaged_users = total_engaged_users
                self.languages = languages
                self.editors = editors
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case total_engaged_users
                case languages
                case editors
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                total_engaged_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_engaged_users
                )
                languages = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.languagesPayload.self,
                    forKey: .languages
                )
                editors = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.editorsPayload.self,
                    forKey: .editors
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "total_engaged_users",
                    "languages",
                    "editors"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    total_engaged_users,
                    forKey: .total_engaged_users
                )
                try container.encodeIfPresent(
                    languages,
                    forKey: .languages
                )
                try container.encodeIfPresent(
                    editors,
                    forKey: .editors
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Usage metrics for Copilot Chat in the IDE.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-ide-chat`.
        public struct copilot_hyphen_ide_hyphen_chat: Codable, Hashable, Sendable {
            /// Total number of users who prompted Copilot Chat in the IDE.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/total_engaged_users`.
            public var total_engaged_users: Swift.Int?
            /// Copilot Chat metrics, for active editors.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload`.
            public struct editorsPayloadPayload: Codable, Hashable, Sendable {
                /// Name of the given editor.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/name`.
                public var name: Swift.String?
                /// The number of users who prompted Copilot Chat in the specified editor.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/total_engaged_users`.
                public var total_engaged_users: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload`.
                public struct modelsPayloadPayload: Codable, Hashable, Sendable {
                    /// Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload/name`.
                    public var name: Swift.String?
                    /// Indicates whether a model is custom or default.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload/is_custom_model`.
                    public var is_custom_model: Swift.Bool?
                    /// The training date for the custom model.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload/custom_model_training_date`.
                    public var custom_model_training_date: Swift.String?
                    /// The number of users who prompted Copilot Chat in the given editor and model.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload/total_engaged_users`.
                    public var total_engaged_users: Swift.Int?
                    /// The total number of chats initiated by users in the given editor and model.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload/total_chats`.
                    public var total_chats: Swift.Int?
                    /// The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload/total_chat_insertion_events`.
                    public var total_chat_insertion_events: Swift.Int?
                    /// The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/modelsPayload/total_chat_copy_events`.
                    public var total_chat_copy_events: Swift.Int?
                    /// Creates a new `modelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
                    ///   - is_custom_model: Indicates whether a model is custom or default.
                    ///   - custom_model_training_date: The training date for the custom model.
                    ///   - total_engaged_users: The number of users who prompted Copilot Chat in the given editor and model.
                    ///   - total_chats: The total number of chats initiated by users in the given editor and model.
                    ///   - total_chat_insertion_events: The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor.
                    ///   - total_chat_copy_events: The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor.
                    public init(
                        name: Swift.String? = nil,
                        is_custom_model: Swift.Bool? = nil,
                        custom_model_training_date: Swift.String? = nil,
                        total_engaged_users: Swift.Int? = nil,
                        total_chats: Swift.Int? = nil,
                        total_chat_insertion_events: Swift.Int? = nil,
                        total_chat_copy_events: Swift.Int? = nil
                    ) {
                        self.name = name
                        self.is_custom_model = is_custom_model
                        self.custom_model_training_date = custom_model_training_date
                        self.total_engaged_users = total_engaged_users
                        self.total_chats = total_chats
                        self.total_chat_insertion_events = total_chat_insertion_events
                        self.total_chat_copy_events = total_chat_copy_events
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case is_custom_model
                        case custom_model_training_date
                        case total_engaged_users
                        case total_chats
                        case total_chat_insertion_events
                        case total_chat_copy_events
                    }
                }
                /// List of model metrics for custom models and the default model.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/models`.
                public typealias modelsPayload = [Components.Schemas.copilot_hyphen_ide_hyphen_chat.editorsPayloadPayload.modelsPayloadPayload]
                /// List of model metrics for custom models and the default model.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editorsPayload/models`.
                public var models: Components.Schemas.copilot_hyphen_ide_hyphen_chat.editorsPayloadPayload.modelsPayload?
                /// Creates a new `editorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the given editor.
                ///   - total_engaged_users: The number of users who prompted Copilot Chat in the specified editor.
                ///   - models: List of model metrics for custom models and the default model.
                public init(
                    name: Swift.String? = nil,
                    total_engaged_users: Swift.Int? = nil,
                    models: Components.Schemas.copilot_hyphen_ide_hyphen_chat.editorsPayloadPayload.modelsPayload? = nil
                ) {
                    self.name = name
                    self.total_engaged_users = total_engaged_users
                    self.models = models
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case total_engaged_users
                    case models
                }
            }
            /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editors`.
            public typealias editorsPayload = [Components.Schemas.copilot_hyphen_ide_hyphen_chat.editorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/copilot-ide-chat/editors`.
            public var editors: Components.Schemas.copilot_hyphen_ide_hyphen_chat.editorsPayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `copilot_hyphen_ide_hyphen_chat`.
            ///
            /// - Parameters:
            ///   - total_engaged_users: Total number of users who prompted Copilot Chat in the IDE.
            ///   - editors:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                total_engaged_users: Swift.Int? = nil,
                editors: Components.Schemas.copilot_hyphen_ide_hyphen_chat.editorsPayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.total_engaged_users = total_engaged_users
                self.editors = editors
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case total_engaged_users
                case editors
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                total_engaged_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_engaged_users
                )
                editors = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_ide_hyphen_chat.editorsPayload.self,
                    forKey: .editors
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "total_engaged_users",
                    "editors"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    total_engaged_users,
                    forKey: .total_engaged_users
                )
                try container.encodeIfPresent(
                    editors,
                    forKey: .editors
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Usage metrics for Copilot Chat in GitHub.com
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat`.
        public struct copilot_hyphen_dotcom_hyphen_chat: Codable, Hashable, Sendable {
            /// Total number of users who prompted Copilot Chat on github.com at least once.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/total_engaged_users`.
            public var total_engaged_users: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/modelsPayload`.
            public struct modelsPayloadPayload: Codable, Hashable, Sendable {
                /// Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/modelsPayload/name`.
                public var name: Swift.String?
                /// Indicates whether a model is custom or default.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/modelsPayload/is_custom_model`.
                public var is_custom_model: Swift.Bool?
                /// The training date for the custom model (if applicable).
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/modelsPayload/custom_model_training_date`.
                public var custom_model_training_date: Swift.String?
                /// Total number of users who prompted Copilot Chat on github.com at least once for each model.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/modelsPayload/total_engaged_users`.
                public var total_engaged_users: Swift.Int?
                /// Total number of chats initiated by users on github.com.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/modelsPayload/total_chats`.
                public var total_chats: Swift.Int?
                /// Creates a new `modelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
                ///   - is_custom_model: Indicates whether a model is custom or default.
                ///   - custom_model_training_date: The training date for the custom model (if applicable).
                ///   - total_engaged_users: Total number of users who prompted Copilot Chat on github.com at least once for each model.
                ///   - total_chats: Total number of chats initiated by users on github.com.
                public init(
                    name: Swift.String? = nil,
                    is_custom_model: Swift.Bool? = nil,
                    custom_model_training_date: Swift.String? = nil,
                    total_engaged_users: Swift.Int? = nil,
                    total_chats: Swift.Int? = nil
                ) {
                    self.name = name
                    self.is_custom_model = is_custom_model
                    self.custom_model_training_date = custom_model_training_date
                    self.total_engaged_users = total_engaged_users
                    self.total_chats = total_chats
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case is_custom_model
                    case custom_model_training_date
                    case total_engaged_users
                    case total_chats
                }
            }
            /// List of model metrics for a custom models and the default model.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/models`.
            public typealias modelsPayload = [Components.Schemas.copilot_hyphen_dotcom_hyphen_chat.modelsPayloadPayload]
            /// List of model metrics for a custom models and the default model.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-chat/models`.
            public var models: Components.Schemas.copilot_hyphen_dotcom_hyphen_chat.modelsPayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `copilot_hyphen_dotcom_hyphen_chat`.
            ///
            /// - Parameters:
            ///   - total_engaged_users: Total number of users who prompted Copilot Chat on github.com at least once.
            ///   - models: List of model metrics for a custom models and the default model.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                total_engaged_users: Swift.Int? = nil,
                models: Components.Schemas.copilot_hyphen_dotcom_hyphen_chat.modelsPayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.total_engaged_users = total_engaged_users
                self.models = models
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case total_engaged_users
                case models
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                total_engaged_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_engaged_users
                )
                models = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_dotcom_hyphen_chat.modelsPayload.self,
                    forKey: .models
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "total_engaged_users",
                    "models"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    total_engaged_users,
                    forKey: .total_engaged_users
                )
                try container.encodeIfPresent(
                    models,
                    forKey: .models
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Usage metrics for Copilot for pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests`.
        public struct copilot_hyphen_dotcom_hyphen_pull_hyphen_requests: Codable, Hashable, Sendable {
            /// The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/total_engaged_users`.
            public var total_engaged_users: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload`.
            public struct repositoriesPayloadPayload: Codable, Hashable, Sendable {
                /// Repository name
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/name`.
                public var name: Swift.String?
                /// The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/total_engaged_users`.
                public var total_engaged_users: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/modelsPayload`.
                public struct modelsPayloadPayload: Codable, Hashable, Sendable {
                    /// Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/modelsPayload/name`.
                    public var name: Swift.String?
                    /// Indicates whether a model is custom or default.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/modelsPayload/is_custom_model`.
                    public var is_custom_model: Swift.Bool?
                    /// The training date for the custom model.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/modelsPayload/custom_model_training_date`.
                    public var custom_model_training_date: Swift.String?
                    /// The number of pull request summaries generated using Copilot for Pull Requests in the given repository.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/modelsPayload/total_pr_summaries_created`.
                    public var total_pr_summaries_created: Swift.Int?
                    /// The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model.
                    ///
                    /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/modelsPayload/total_engaged_users`.
                    public var total_engaged_users: Swift.Int?
                    /// Creates a new `modelsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'.
                    ///   - is_custom_model: Indicates whether a model is custom or default.
                    ///   - custom_model_training_date: The training date for the custom model.
                    ///   - total_pr_summaries_created: The number of pull request summaries generated using Copilot for Pull Requests in the given repository.
                    ///   - total_engaged_users: The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model.
                    public init(
                        name: Swift.String? = nil,
                        is_custom_model: Swift.Bool? = nil,
                        custom_model_training_date: Swift.String? = nil,
                        total_pr_summaries_created: Swift.Int? = nil,
                        total_engaged_users: Swift.Int? = nil
                    ) {
                        self.name = name
                        self.is_custom_model = is_custom_model
                        self.custom_model_training_date = custom_model_training_date
                        self.total_pr_summaries_created = total_pr_summaries_created
                        self.total_engaged_users = total_engaged_users
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case is_custom_model
                        case custom_model_training_date
                        case total_pr_summaries_created
                        case total_engaged_users
                    }
                }
                /// List of model metrics for custom models and the default model.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/models`.
                public typealias modelsPayload = [Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.repositoriesPayloadPayload.modelsPayloadPayload]
                /// List of model metrics for custom models and the default model.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositoriesPayload/models`.
                public var models: Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.repositoriesPayloadPayload.modelsPayload?
                /// Creates a new `repositoriesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name: Repository name
                ///   - total_engaged_users: The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository.
                ///   - models: List of model metrics for custom models and the default model.
                public init(
                    name: Swift.String? = nil,
                    total_engaged_users: Swift.Int? = nil,
                    models: Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.repositoriesPayloadPayload.modelsPayload? = nil
                ) {
                    self.name = name
                    self.total_engaged_users = total_engaged_users
                    self.models = models
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case total_engaged_users
                    case models
                }
            }
            /// Repositories in which users used Copilot for Pull Requests to generate pull request summaries
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositories`.
            public typealias repositoriesPayload = [Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.repositoriesPayloadPayload]
            /// Repositories in which users used Copilot for Pull Requests to generate pull request summaries
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-dotcom-pull-requests/repositories`.
            public var repositories: Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.repositoriesPayload?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `copilot_hyphen_dotcom_hyphen_pull_hyphen_requests`.
            ///
            /// - Parameters:
            ///   - total_engaged_users: The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once.
            ///   - repositories: Repositories in which users used Copilot for Pull Requests to generate pull request summaries
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                total_engaged_users: Swift.Int? = nil,
                repositories: Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.repositoriesPayload? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.total_engaged_users = total_engaged_users
                self.repositories = repositories
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case total_engaged_users
                case repositories
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                total_engaged_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_engaged_users
                )
                repositories = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.repositoriesPayload.self,
                    forKey: .repositories
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "total_engaged_users",
                    "repositories"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    total_engaged_users,
                    forKey: .total_engaged_users
                )
                try container.encodeIfPresent(
                    repositories,
                    forKey: .repositories
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Copilot usage metrics for a given day.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day`.
        public struct copilot_hyphen_usage_hyphen_metrics_hyphen_day: Codable, Hashable, Sendable {
            /// The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day/date`.
            public var date: Swift.String
            /// The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day/total_active_users`.
            public var total_active_users: Swift.Int?
            /// The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day/total_engaged_users`.
            public var total_engaged_users: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day/copilot_ide_code_completions`.
            public var copilot_ide_code_completions: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions?
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day/copilot_ide_chat`.
            public var copilot_ide_chat: Components.Schemas.copilot_hyphen_ide_hyphen_chat?
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day/copilot_dotcom_chat`.
            public var copilot_dotcom_chat: Components.Schemas.copilot_hyphen_dotcom_hyphen_chat?
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics-day/copilot_dotcom_pull_requests`.
            public var copilot_dotcom_pull_requests: Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `copilot_hyphen_usage_hyphen_metrics_hyphen_day`.
            ///
            /// - Parameters:
            ///   - date: The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
            ///   - total_active_users: The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
            ///   - total_engaged_users: The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
            ///   - copilot_ide_code_completions:
            ///   - copilot_ide_chat:
            ///   - copilot_dotcom_chat:
            ///   - copilot_dotcom_pull_requests:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                date: Swift.String,
                total_active_users: Swift.Int? = nil,
                total_engaged_users: Swift.Int? = nil,
                copilot_ide_code_completions: Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions? = nil,
                copilot_ide_chat: Components.Schemas.copilot_hyphen_ide_hyphen_chat? = nil,
                copilot_dotcom_chat: Components.Schemas.copilot_hyphen_dotcom_hyphen_chat? = nil,
                copilot_dotcom_pull_requests: Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.date = date
                self.total_active_users = total_active_users
                self.total_engaged_users = total_engaged_users
                self.copilot_ide_code_completions = copilot_ide_code_completions
                self.copilot_ide_chat = copilot_ide_chat
                self.copilot_dotcom_chat = copilot_dotcom_chat
                self.copilot_dotcom_pull_requests = copilot_dotcom_pull_requests
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case total_active_users
                case total_engaged_users
                case copilot_ide_code_completions
                case copilot_ide_chat
                case copilot_dotcom_chat
                case copilot_dotcom_pull_requests
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                date = try container.decode(
                    Swift.String.self,
                    forKey: .date
                )
                total_active_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_active_users
                )
                total_engaged_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_engaged_users
                )
                copilot_ide_code_completions = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_ide_hyphen_code_hyphen_completions.self,
                    forKey: .copilot_ide_code_completions
                )
                copilot_ide_chat = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_ide_hyphen_chat.self,
                    forKey: .copilot_ide_chat
                )
                copilot_dotcom_chat = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_dotcom_hyphen_chat.self,
                    forKey: .copilot_dotcom_chat
                )
                copilot_dotcom_pull_requests = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_dotcom_hyphen_pull_hyphen_requests.self,
                    forKey: .copilot_dotcom_pull_requests
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "date",
                    "total_active_users",
                    "total_engaged_users",
                    "copilot_ide_code_completions",
                    "copilot_ide_chat",
                    "copilot_dotcom_chat",
                    "copilot_dotcom_pull_requests"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(
                    date,
                    forKey: .date
                )
                try container.encodeIfPresent(
                    total_active_users,
                    forKey: .total_active_users
                )
                try container.encodeIfPresent(
                    total_engaged_users,
                    forKey: .total_engaged_users
                )
                try container.encodeIfPresent(
                    copilot_ide_code_completions,
                    forKey: .copilot_ide_code_completions
                )
                try container.encodeIfPresent(
                    copilot_ide_chat,
                    forKey: .copilot_ide_chat
                )
                try container.encodeIfPresent(
                    copilot_dotcom_chat,
                    forKey: .copilot_dotcom_chat
                )
                try container.encodeIfPresent(
                    copilot_dotcom_pull_requests,
                    forKey: .copilot_dotcom_pull_requests
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The slug of the team name.
        ///
        /// - Remark: Generated from `#/components/parameters/team-slug`.
        public typealias team_hyphen_slug = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
        public struct usage_metrics_api_disabled: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/usage_metrics_api_disabled/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/usage_metrics_api_disabled/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.usage_metrics_api_disabled.Body
            /// Creates a new `usage_metrics_api_disabled`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.usage_metrics_api_disabled.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get Copilot seat information and settings for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
    ///
    /// Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)`.
    public enum copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details {
        public static let id: Swift.String = "copilot/get-copilot-organization-details"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Path,
                headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.copilot_hyphen_organization_hyphen_details)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.copilot_hyphen_organization_hyphen_details {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// There is a problem with your account's associated payment method.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all Copilot seat assignments for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
    /// Only organization owners can view assigned seats.
    ///
    /// Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing/seats`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)`.
    public enum copilot_sol_list_hyphen_copilot_hyphen_seats {
        public static let id: Swift.String = "copilot/list-copilot-seats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Path,
                query: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Query = .init(),
                headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// Total number of Copilot seats for the organization currently being billed.
                        ///
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/json/total_seats`.
                        public var total_seats: Swift.Int?
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/json/seats`.
                        public var seats: [Components.Schemas.copilot_hyphen_seat_hyphen_details]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_seats: Total number of Copilot seats for the organization currently being billed.
                        ///   - seats:
                        public init(
                            total_seats: Swift.Int? = nil,
                            seats: [Components.Schemas.copilot_hyphen_seat_hyphen_details]? = nil
                        ) {
                            self.total_seats = total_seats
                            self.seats = seats
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_seats
                            case seats
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/application\/json`.
                    case json(Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Headers = .init(),
                    body: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add teams to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    ///
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    ///
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)`.
    public enum copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams {
        public static let id: Swift.String = "copilot/add-copilot-seats-for-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// List of team names within the organization to which to grant access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody/json/selected_teams`.
                    public var selected_teams: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_teams: List of team names within the organization to which to grant access to GitHub Copilot.
                    public init(selected_teams: [Swift.String]) {
                        self.selected_teams = selected_teams
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_teams
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Path,
                headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Headers = .init(),
                body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seats created for members of the specified team(s).
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content/json/seats_created`.
                        public var seats_created: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_created:
                        public init(seats_created: Swift.Int) {
                            self.seats_created = seats_created
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_created
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content/application\/json`.
                    case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove teams from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Sets seats for all members of each team specified to "pending cancellation".
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    ///
    /// Only organization owners can cancel Copilot seats for their organization members.
    ///
    /// The response contains the total number of seats set to "pending cancellation".
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)`.
    public enum copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams {
        public static let id: Swift.String = "copilot/cancel-copilot-seat-assignment-for-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The names of teams from which to revoke access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody/json/selected_teams`.
                    public var selected_teams: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_teams: The names of teams from which to revoke access to GitHub Copilot.
                    public init(selected_teams: [Swift.String]) {
                        self.selected_teams = selected_teams
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_teams
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Path,
                headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Headers = .init(),
                body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seats set to "pending cancellation" for members of the specified team(s).
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content/json/seats_cancelled`.
                        public var seats_cancelled: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_cancelled:
                        public init(seats_cancelled: Swift.Int) {
                            self.seats_cancelled = seats_cancelled
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_cancelled
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content/application\/json`.
                    case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add users to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    ///
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    ///
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)`.
    public enum copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users {
        public static let id: Swift.String = "copilot/add-copilot-seats-for-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The usernames of the organization members to be granted access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody/json/selected_usernames`.
                    public var selected_usernames: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_usernames: The usernames of the organization members to be granted access to GitHub Copilot.
                    public init(selected_usernames: [Swift.String]) {
                        self.selected_usernames = selected_usernames
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_usernames
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Path,
                headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Headers = .init(),
                body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seats created for the specified user(s).
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content/json/seats_created`.
                        public var seats_created: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_created:
                        public init(seats_created: Swift.Int) {
                            self.seats_created = seats_created
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_created
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content/application\/json`.
                    case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove users from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Sets seats for all users specified to "pending cancellation".
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    ///
    /// Only organization owners can cancel Copilot seats for their organization members.
    ///
    /// The response contains the total number of seats set to "pending cancellation".
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)`.
    public enum copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users {
        public static let id: Swift.String = "copilot/cancel-copilot-seat-assignment-for-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The usernames of the organization members for which to revoke access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody/json/selected_usernames`.
                    public var selected_usernames: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_usernames: The usernames of the organization members for which to revoke access to GitHub Copilot.
                    public init(selected_usernames: [Swift.String]) {
                        self.selected_usernames = selected_usernames
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_usernames
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Path,
                headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Headers = .init(),
                body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seats set to "pending cancellation" for the specified users.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content/json/seats_cancelled`.
                        public var seats_cancelled: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_cancelled:
                        public init(seats_cancelled: Swift.Int) {
                            self.seats_cancelled = seats_cancelled
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_cancelled
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content/application\/json`.
                    case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, the seat management setting is set to enable Copilot for all users or is unconfigured, or a user's seat cannot be cancelled because it was assigned to them via a team.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Copilot metrics for an organization
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    ///
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    ///
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
    /// Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/metrics`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)`.
    public enum copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization {
        public static let id: Swift.String = "copilot/copilot-metrics-for-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/query/since`.
                public var since: Swift.String?
                /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/query/until`.
                public var until: Swift.String?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///   - until: Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Path,
                query: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Query = .init(),
                headers: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/metrics/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.copilot_hyphen_usage_hyphen_metrics_hyphen_day])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.copilot_hyphen_usage_hyphen_metrics_hyphen_day] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Copilot Usage Merics API setting is disabled at the organization or enterprise level.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/metrics/get(copilot/copilot-metrics-for-organization)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.usage_metrics_api_disabled)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.usage_metrics_api_disabled {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Copilot seat assignment details for a user
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    ///
    /// Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
    ///
    /// The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    ///
    /// Only organization owners can view Copilot seat assignment details for members of their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/copilot`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)`.
    public enum copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user {
        public static let id: Swift.String = "copilot/get-copilot-seat-details-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.copilot_hyphen_seat_hyphen_details)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.copilot_hyphen_seat_hyphen_details {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The user's GitHub Copilot seat details, including usage.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization or the user has a pending organization invitation.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Copilot metrics for a team
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    ///
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    ///
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
    /// Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
    ///
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/team/{team_slug}/copilot/metrics`.
    /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)`.
    public enum copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team {
        public static let id: Swift.String = "copilot/copilot-metrics-for-team"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/query/since`.
                public var since: Swift.String?
                /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/query/until`.
                public var until: Swift.String?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///   - until: Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Path,
                query: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Query = .init(),
                headers: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/team/{team_slug}/copilot/metrics/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.copilot_hyphen_usage_hyphen_metrics_hyphen_day])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.copilot_hyphen_usage_hyphen_metrics_hyphen_day] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_copilot_hyphen_metrics_hyphen_for_hyphen_team.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Copilot Usage Merics API setting is disabled at the organization or enterprise level.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/team/{team_slug}/copilot/metrics/get(copilot/copilot-metrics-for-team)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.usage_metrics_api_disabled)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.usage_metrics_api_disabled {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
