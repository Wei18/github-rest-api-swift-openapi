// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get a summary of Copilot usage for enterprise members
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// for all users across organizations with access to Copilot within your enterprise, with a further breakdown of suggestions, acceptances,
    /// and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.
    ///
    /// The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// Only the owners and billing managers of enterprises with a Copilot Business or Enterprise subscription can view Copilot usage
    /// metrics for the enterprise.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/copilot/usage`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)`.
    func copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise(_ input: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input) async throws -> Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Output
    /// Get Copilot seat information and settings for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and code matching policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)".
    ///
    /// Only organization owners can configure and view details about the organization's Copilot Business subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)`.
    func copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details(_ input: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output
    /// List all Copilot seat assignments for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Lists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).
    ///
    /// Only organization owners can configure and view details about the organization's Copilot Business or Enterprise subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing/seats`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)`.
    func copilot_sol_list_hyphen_copilot_hyphen_seats(_ input: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input) async throws -> Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output
    /// Add teams to the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
    /// For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)`.
    func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams(_ input: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output
    /// Remove teams from the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Cancels the Copilot seat assignment for all members of each team specified.
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    ///
    /// For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)`.
    func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams(_ input: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output
    /// Add users to the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
    /// For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)`.
    func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users(_ input: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output
    /// Remove users from the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Cancels the Copilot seat assignment for each user specified.
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    ///
    /// For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)`.
    func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users(_ input: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output
    /// Get a summary of Copilot usage for organization members
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
    /// See the response schema tab for detailed metrics definitions.
    ///
    /// The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// Copilot Business or Copilot Enterprise organization owners, and owners and billing managers of their parent enterprises, can view
    /// Copilot usage metrics.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:org`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/usage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)`.
    func copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org(_ input: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input) async throws -> Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Output
    /// Get Copilot seat assignment details for a user
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Gets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.
    ///
    /// Organization owners can view GitHub Copilot seat assignment details for members in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/copilot`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)`.
    func copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user(_ input: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get a summary of Copilot usage for enterprise members
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// for all users across organizations with access to Copilot within your enterprise, with a further breakdown of suggestions, acceptances,
    /// and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.
    ///
    /// The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// Only the owners and billing managers of enterprises with a Copilot Business or Enterprise subscription can view Copilot usage
    /// metrics for the enterprise.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/copilot/usage`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)`.
    public func copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise(
        path: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Path,
        query: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Query = .init(),
        headers: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Output {
        try await copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise(Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get Copilot seat information and settings for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and code matching policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)".
    ///
    /// Only organization owners can configure and view details about the organization's Copilot Business subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)`.
    public func copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details(
        path: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Path,
        headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output {
        try await copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details(Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input(
            path: path,
            headers: headers
        ))
    }
    /// List all Copilot seat assignments for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Lists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).
    ///
    /// Only organization owners can configure and view details about the organization's Copilot Business or Enterprise subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing/seats`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)`.
    public func copilot_sol_list_hyphen_copilot_hyphen_seats(
        path: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Path,
        query: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Query = .init(),
        headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output {
        try await copilot_sol_list_hyphen_copilot_hyphen_seats(Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add teams to the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
    /// For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)`.
    public func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams(
        path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Path,
        headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Headers = .init(),
        body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body
    ) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output {
        try await copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove teams from the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Cancels the Copilot seat assignment for all members of each team specified.
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    ///
    /// For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)`.
    public func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams(
        path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Path,
        headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Headers = .init(),
        body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body
    ) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output {
        try await copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Add users to the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
    /// For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)`.
    public func copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users(
        path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Path,
        headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Headers = .init(),
        body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body
    ) async throws -> Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output {
        try await copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove users from the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Cancels the Copilot seat assignment for each user specified.
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    ///
    /// For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)`.
    public func copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users(
        path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Path,
        headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Headers = .init(),
        body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body
    ) async throws -> Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output {
        try await copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a summary of Copilot usage for organization members
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
    /// See the response schema tab for detailed metrics definitions.
    ///
    /// The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// Copilot Business or Copilot Enterprise organization owners, and owners and billing managers of their parent enterprises, can view
    /// Copilot usage metrics.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:org`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/usage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)`.
    public func copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org(
        path: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Path,
        query: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Output {
        try await copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org(Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get Copilot seat assignment details for a user
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Gets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.
    ///
    /// Organization owners can view GitHub Copilot seat assignment details for members in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/copilot`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)`.
    public func copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user(
        path: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output {
        try await copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user(Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Summary of Copilot usage.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics`.
        public struct copilot_hyphen_usage_hyphen_metrics: Codable, Hashable, Sendable {
            /// The date for which the usage metrics are reported, in `YYYY-MM-DD` format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/day`.
            public var day: Swift.String
            /// The total number of Copilot code completion suggestions shown to users.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_suggestions_count`.
            public var total_suggestions_count: Swift.Int?
            /// The total number of Copilot code completion suggestions accepted by users.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_acceptances_count`.
            public var total_acceptances_count: Swift.Int?
            /// The total number of lines of code completions suggested by Copilot.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_lines_suggested`.
            public var total_lines_suggested: Swift.Int?
            /// The total number of lines of code completions accepted by users.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_lines_accepted`.
            public var total_lines_accepted: Swift.Int?
            /// The total number of users who were shown Copilot code completion suggestions during the day specified.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_active_users`.
            public var total_active_users: Swift.Int?
            /// The total instances of users who accepted code suggested by Copilot Chat in the IDE (panel and inline).
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_chat_acceptances`.
            public var total_chat_acceptances: Swift.Int?
            /// The total number of chat turns (prompt and response pairs) sent between users and Copilot Chat in the IDE.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_chat_turns`.
            public var total_chat_turns: Swift.Int?
            /// The total number of users who interacted with Copilot Chat in the IDE during the day specified.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/total_active_chat_users`.
            public var total_active_chat_users: Swift.Int?
            /// Breakdown of Copilot usage by editor for this language
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload`.
            public struct breakdownPayloadPayload: Codable, Hashable, Sendable {
                /// The language in which Copilot suggestions were shown to users in the specified editor.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload/language`.
                public var language: Swift.String?
                /// The editor in which Copilot suggestions were shown to users for the specified language.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload/editor`.
                public var editor: Swift.String?
                /// The number of Copilot suggestions shown to users in the editor specified during the day specified.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload/suggestions_count`.
                public var suggestions_count: Swift.Int?
                /// The number of Copilot suggestions accepted by users in the editor specified during the day specified.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload/acceptances_count`.
                public var acceptances_count: Swift.Int?
                /// The number of lines of code suggested by Copilot in the editor specified during the day specified.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload/lines_suggested`.
                public var lines_suggested: Swift.Int?
                /// The number of lines of code accepted by users in the editor specified during the day specified.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload/lines_accepted`.
                public var lines_accepted: Swift.Int?
                /// The number of users who were shown Copilot completion suggestions in the editor specified during the day specified.
                ///
                /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdownPayload/active_users`.
                public var active_users: Swift.Int?
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `breakdownPayloadPayload`.
                ///
                /// - Parameters:
                ///   - language: The language in which Copilot suggestions were shown to users in the specified editor.
                ///   - editor: The editor in which Copilot suggestions were shown to users for the specified language.
                ///   - suggestions_count: The number of Copilot suggestions shown to users in the editor specified during the day specified.
                ///   - acceptances_count: The number of Copilot suggestions accepted by users in the editor specified during the day specified.
                ///   - lines_suggested: The number of lines of code suggested by Copilot in the editor specified during the day specified.
                ///   - lines_accepted: The number of lines of code accepted by users in the editor specified during the day specified.
                ///   - active_users: The number of users who were shown Copilot completion suggestions in the editor specified during the day specified.
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    language: Swift.String? = nil,
                    editor: Swift.String? = nil,
                    suggestions_count: Swift.Int? = nil,
                    acceptances_count: Swift.Int? = nil,
                    lines_suggested: Swift.Int? = nil,
                    lines_accepted: Swift.Int? = nil,
                    active_users: Swift.Int? = nil,
                    additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                ) {
                    self.language = language
                    self.editor = editor
                    self.suggestions_count = suggestions_count
                    self.acceptances_count = acceptances_count
                    self.lines_suggested = lines_suggested
                    self.lines_accepted = lines_accepted
                    self.active_users = active_users
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case language
                    case editor
                    case suggestions_count
                    case acceptances_count
                    case lines_suggested
                    case lines_accepted
                    case active_users
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    language = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .language
                    )
                    editor = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .editor
                    )
                    suggestions_count = try container.decodeIfPresent(
                        Swift.Int.self,
                        forKey: .suggestions_count
                    )
                    acceptances_count = try container.decodeIfPresent(
                        Swift.Int.self,
                        forKey: .acceptances_count
                    )
                    lines_suggested = try container.decodeIfPresent(
                        Swift.Int.self,
                        forKey: .lines_suggested
                    )
                    lines_accepted = try container.decodeIfPresent(
                        Swift.Int.self,
                        forKey: .lines_accepted
                    )
                    active_users = try container.decodeIfPresent(
                        Swift.Int.self,
                        forKey: .active_users
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "language",
                        "editor",
                        "suggestions_count",
                        "acceptances_count",
                        "lines_suggested",
                        "lines_accepted",
                        "active_users"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        language,
                        forKey: .language
                    )
                    try container.encodeIfPresent(
                        editor,
                        forKey: .editor
                    )
                    try container.encodeIfPresent(
                        suggestions_count,
                        forKey: .suggestions_count
                    )
                    try container.encodeIfPresent(
                        acceptances_count,
                        forKey: .acceptances_count
                    )
                    try container.encodeIfPresent(
                        lines_suggested,
                        forKey: .lines_suggested
                    )
                    try container.encodeIfPresent(
                        lines_accepted,
                        forKey: .lines_accepted
                    )
                    try container.encodeIfPresent(
                        active_users,
                        forKey: .active_users
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Breakdown of Copilot code completions usage by language and editor
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdown`.
            public typealias breakdownPayload = [Components.Schemas.copilot_hyphen_usage_hyphen_metrics.breakdownPayloadPayload]
            /// Breakdown of Copilot code completions usage by language and editor
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-usage-metrics/breakdown`.
            public var breakdown: Components.Schemas.copilot_hyphen_usage_hyphen_metrics.breakdownPayload?
            /// Creates a new `copilot_hyphen_usage_hyphen_metrics`.
            ///
            /// - Parameters:
            ///   - day: The date for which the usage metrics are reported, in `YYYY-MM-DD` format.
            ///   - total_suggestions_count: The total number of Copilot code completion suggestions shown to users.
            ///   - total_acceptances_count: The total number of Copilot code completion suggestions accepted by users.
            ///   - total_lines_suggested: The total number of lines of code completions suggested by Copilot.
            ///   - total_lines_accepted: The total number of lines of code completions accepted by users.
            ///   - total_active_users: The total number of users who were shown Copilot code completion suggestions during the day specified.
            ///   - total_chat_acceptances: The total instances of users who accepted code suggested by Copilot Chat in the IDE (panel and inline).
            ///   - total_chat_turns: The total number of chat turns (prompt and response pairs) sent between users and Copilot Chat in the IDE.
            ///   - total_active_chat_users: The total number of users who interacted with Copilot Chat in the IDE during the day specified.
            ///   - breakdown: Breakdown of Copilot code completions usage by language and editor
            public init(
                day: Swift.String,
                total_suggestions_count: Swift.Int? = nil,
                total_acceptances_count: Swift.Int? = nil,
                total_lines_suggested: Swift.Int? = nil,
                total_lines_accepted: Swift.Int? = nil,
                total_active_users: Swift.Int? = nil,
                total_chat_acceptances: Swift.Int? = nil,
                total_chat_turns: Swift.Int? = nil,
                total_active_chat_users: Swift.Int? = nil,
                breakdown: Components.Schemas.copilot_hyphen_usage_hyphen_metrics.breakdownPayload? = nil
            ) {
                self.day = day
                self.total_suggestions_count = total_suggestions_count
                self.total_acceptances_count = total_acceptances_count
                self.total_lines_suggested = total_lines_suggested
                self.total_lines_accepted = total_lines_accepted
                self.total_active_users = total_active_users
                self.total_chat_acceptances = total_chat_acceptances
                self.total_chat_turns = total_chat_turns
                self.total_active_chat_users = total_active_chat_users
                self.breakdown = breakdown
            }
            public enum CodingKeys: String, CodingKey {
                case day
                case total_suggestions_count
                case total_acceptances_count
                case total_lines_suggested
                case total_lines_accepted
                case total_active_users
                case total_chat_acceptances
                case total_chat_turns
                case total_active_chat_users
                case breakdown
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                day = try container.decode(
                    Swift.String.self,
                    forKey: .day
                )
                total_suggestions_count = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_suggestions_count
                )
                total_acceptances_count = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_acceptances_count
                )
                total_lines_suggested = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_lines_suggested
                )
                total_lines_accepted = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_lines_accepted
                )
                total_active_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_active_users
                )
                total_chat_acceptances = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_chat_acceptances
                )
                total_chat_turns = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_chat_turns
                )
                total_active_chat_users = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_active_chat_users
                )
                breakdown = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_usage_hyphen_metrics.breakdownPayload.self,
                    forKey: .breakdown
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "day",
                    "total_suggestions_count",
                    "total_acceptances_count",
                    "total_lines_suggested",
                    "total_lines_accepted",
                    "total_active_users",
                    "total_chat_acceptances",
                    "total_chat_turns",
                    "total_active_chat_users",
                    "breakdown"
                ])
            }
        }
        /// The breakdown of Copilot Business seats for the organization.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-seat-breakdown`.
        public struct copilot_hyphen_seat_hyphen_breakdown: Codable, Hashable, Sendable {
            /// The total number of seats being billed for the organization as of the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-breakdown/total`.
            public var total: Swift.Int?
            /// Seats added during the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-breakdown/added_this_cycle`.
            public var added_this_cycle: Swift.Int?
            /// The number of seats that are pending cancellation at the end of the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-breakdown/pending_cancellation`.
            public var pending_cancellation: Swift.Int?
            /// The number of seats that have been assigned to users that have not yet accepted an invitation to this organization.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-breakdown/pending_invitation`.
            public var pending_invitation: Swift.Int?
            /// The number of seats that have used Copilot during the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-breakdown/active_this_cycle`.
            public var active_this_cycle: Swift.Int?
            /// The number of seats that have not used Copilot during the current billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-breakdown/inactive_this_cycle`.
            public var inactive_this_cycle: Swift.Int?
            /// Creates a new `copilot_hyphen_seat_hyphen_breakdown`.
            ///
            /// - Parameters:
            ///   - total: The total number of seats being billed for the organization as of the current billing cycle.
            ///   - added_this_cycle: Seats added during the current billing cycle.
            ///   - pending_cancellation: The number of seats that are pending cancellation at the end of the current billing cycle.
            ///   - pending_invitation: The number of seats that have been assigned to users that have not yet accepted an invitation to this organization.
            ///   - active_this_cycle: The number of seats that have used Copilot during the current billing cycle.
            ///   - inactive_this_cycle: The number of seats that have not used Copilot during the current billing cycle.
            public init(
                total: Swift.Int? = nil,
                added_this_cycle: Swift.Int? = nil,
                pending_cancellation: Swift.Int? = nil,
                pending_invitation: Swift.Int? = nil,
                active_this_cycle: Swift.Int? = nil,
                inactive_this_cycle: Swift.Int? = nil
            ) {
                self.total = total
                self.added_this_cycle = added_this_cycle
                self.pending_cancellation = pending_cancellation
                self.pending_invitation = pending_invitation
                self.active_this_cycle = active_this_cycle
                self.inactive_this_cycle = inactive_this_cycle
            }
            public enum CodingKeys: String, CodingKey {
                case total
                case added_this_cycle
                case pending_cancellation
                case pending_invitation
                case active_this_cycle
                case inactive_this_cycle
            }
        }
        /// Information about the seat breakdown and policies set for an organization with a Copilot Business subscription.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-organization-details`.
        public struct copilot_hyphen_organization_hyphen_details: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/seat_breakdown`.
            public var seat_breakdown: Components.Schemas.copilot_hyphen_seat_hyphen_breakdown
            /// The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/public_code_suggestions`.
            @frozen public enum public_code_suggestionsPayload: String, Codable, Hashable, Sendable {
                case allow = "allow"
                case block = "block"
                case unconfigured = "unconfigured"
                case unknown = "unknown"
            }
            /// The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/public_code_suggestions`.
            public var public_code_suggestions: Components.Schemas.copilot_hyphen_organization_hyphen_details.public_code_suggestionsPayload
            /// The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/ide_chat`.
            @frozen public enum ide_chatPayload: String, Codable, Hashable, Sendable {
                case enabled = "enabled"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/ide_chat`.
            public var ide_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.ide_chatPayload?
            /// The organization policy for allowing or disallowing organization members to use Copilot features within github.com.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/platform_chat`.
            @frozen public enum platform_chatPayload: String, Codable, Hashable, Sendable {
                case enabled = "enabled"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The organization policy for allowing or disallowing organization members to use Copilot features within github.com.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/platform_chat`.
            public var platform_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.platform_chatPayload?
            /// The organization policy for allowing or disallowing organization members to use Copilot within their CLI.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/cli`.
            @frozen public enum cliPayload: String, Codable, Hashable, Sendable {
                case enabled = "enabled"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The organization policy for allowing or disallowing organization members to use Copilot within their CLI.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/cli`.
            public var cli: Components.Schemas.copilot_hyphen_organization_hyphen_details.cliPayload?
            /// The mode of assigning new seats.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/seat_management_setting`.
            @frozen public enum seat_management_settingPayload: String, Codable, Hashable, Sendable {
                case assign_all = "assign_all"
                case assign_selected = "assign_selected"
                case disabled = "disabled"
                case unconfigured = "unconfigured"
            }
            /// The mode of assigning new seats.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-organization-details/seat_management_setting`.
            public var seat_management_setting: Components.Schemas.copilot_hyphen_organization_hyphen_details.seat_management_settingPayload
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `copilot_hyphen_organization_hyphen_details`.
            ///
            /// - Parameters:
            ///   - seat_breakdown:
            ///   - public_code_suggestions: The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
            ///   - ide_chat: The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.
            ///   - platform_chat: The organization policy for allowing or disallowing organization members to use Copilot features within github.com.
            ///   - cli: The organization policy for allowing or disallowing organization members to use Copilot within their CLI.
            ///   - seat_management_setting: The mode of assigning new seats.
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                seat_breakdown: Components.Schemas.copilot_hyphen_seat_hyphen_breakdown,
                public_code_suggestions: Components.Schemas.copilot_hyphen_organization_hyphen_details.public_code_suggestionsPayload,
                ide_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.ide_chatPayload? = nil,
                platform_chat: Components.Schemas.copilot_hyphen_organization_hyphen_details.platform_chatPayload? = nil,
                cli: Components.Schemas.copilot_hyphen_organization_hyphen_details.cliPayload? = nil,
                seat_management_setting: Components.Schemas.copilot_hyphen_organization_hyphen_details.seat_management_settingPayload,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.seat_breakdown = seat_breakdown
                self.public_code_suggestions = public_code_suggestions
                self.ide_chat = ide_chat
                self.platform_chat = platform_chat
                self.cli = cli
                self.seat_management_setting = seat_management_setting
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case seat_breakdown
                case public_code_suggestions
                case ide_chat
                case platform_chat
                case cli
                case seat_management_setting
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                seat_breakdown = try container.decode(
                    Components.Schemas.copilot_hyphen_seat_hyphen_breakdown.self,
                    forKey: .seat_breakdown
                )
                public_code_suggestions = try container.decode(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.public_code_suggestionsPayload.self,
                    forKey: .public_code_suggestions
                )
                ide_chat = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.ide_chatPayload.self,
                    forKey: .ide_chat
                )
                platform_chat = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.platform_chatPayload.self,
                    forKey: .platform_chat
                )
                cli = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.cliPayload.self,
                    forKey: .cli
                )
                seat_management_setting = try container.decode(
                    Components.Schemas.copilot_hyphen_organization_hyphen_details.seat_management_settingPayload.self,
                    forKey: .seat_management_setting
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "seat_breakdown",
                    "public_code_suggestions",
                    "ide_chat",
                    "platform_chat",
                    "cli",
                    "seat_management_setting"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encode(
                    seat_breakdown,
                    forKey: .seat_breakdown
                )
                try container.encode(
                    public_code_suggestions,
                    forKey: .public_code_suggestions
                )
                try container.encodeIfPresent(
                    ide_chat,
                    forKey: .ide_chat
                )
                try container.encodeIfPresent(
                    platform_chat,
                    forKey: .platform_chat
                )
                try container.encodeIfPresent(
                    cli,
                    forKey: .cli
                )
                try container.encode(
                    seat_management_setting,
                    forKey: .seat_management_setting
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// GitHub account for managing multiple users, teams, and repositories
        ///
        /// - Remark: Generated from `#/components/schemas/organization`.
        public struct organization: Codable, Hashable, Sendable {
            /// Unique login name of the organization
            ///
            /// - Remark: Generated from `#/components/schemas/organization/login`.
            public var login: Swift.String
            /// URL for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/organization/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/public_members_url`.
            public var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/description`.
            public var description: Swift.String?
            /// Display blog url for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/organization/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization/html_url`.
            public var html_url: Swift.String
            /// Display name for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/organization/name`.
            public var name: Swift.String?
            /// Display company name for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/organization/company`.
            public var company: Swift.String?
            /// Display location for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/organization/location`.
            public var location: Swift.String?
            /// Display email for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/organization/email`.
            public var email: Swift.String?
            /// Specifies if organization projects are enabled for this org
            ///
            /// - Remark: Generated from `#/components/schemas/organization/has_organization_projects`.
            public var has_organization_projects: Swift.Bool
            /// Specifies if repository projects are enabled for repositories that belong to this org
            ///
            /// - Remark: Generated from `#/components/schemas/organization/has_repository_projects`.
            public var has_repository_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization/is_verified`.
            public var is_verified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization/public_repos`.
            public var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization/public_gists`.
            public var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization/followers`.
            public var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization/following`.
            public var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization/plan`.
            public struct planPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/organization/plan/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/organization/plan/space`.
                public var space: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/organization/plan/private_repos`.
                public var private_repos: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/organization/plan/filled_seats`.
                public var filled_seats: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/organization/plan/seats`.
                public var seats: Swift.Int?
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                ///   - filled_seats:
                ///   - seats:
                public init(
                    name: Swift.String? = nil,
                    space: Swift.Int? = nil,
                    private_repos: Swift.Int? = nil,
                    filled_seats: Swift.Int? = nil,
                    seats: Swift.Int? = nil
                ) {
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                    self.filled_seats = filled_seats
                    self.seats = seats
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case space
                    case private_repos
                    case filled_seats
                    case seats
                }
            }
            /// - Remark: Generated from `#/components/schemas/organization/plan`.
            public var plan: Components.Schemas.organization.planPayload?
            /// Creates a new `organization`.
            ///
            /// - Parameters:
            ///   - login: Unique login name of the organization
            ///   - url: URL for the organization
            ///   - id:
            ///   - node_id:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            ///   - blog: Display blog url for the organization
            ///   - html_url:
            ///   - name: Display name for the organization
            ///   - company: Display company name for the organization
            ///   - location: Display location for the organization
            ///   - email: Display email for the organization
            ///   - has_organization_projects: Specifies if organization projects are enabled for this org
            ///   - has_repository_projects: Specifies if repository projects are enabled for repositories that belong to this org
            ///   - is_verified:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - _type:
            ///   - created_at:
            ///   - updated_at:
            ///   - plan:
            public init(
                login: Swift.String,
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String? = nil,
                blog: Swift.String? = nil,
                html_url: Swift.String,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                has_organization_projects: Swift.Bool,
                has_repository_projects: Swift.Bool,
                is_verified: Swift.Bool? = nil,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                _type: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                plan: Components.Schemas.organization.planPayload? = nil
            ) {
                self.login = login
                self.url = url
                self.id = id
                self.node_id = node_id
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
                self.blog = blog
                self.html_url = html_url
                self.name = name
                self.company = company
                self.location = location
                self.email = email
                self.has_organization_projects = has_organization_projects
                self.has_repository_projects = has_repository_projects
                self.is_verified = is_verified
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self._type = _type
                self.created_at = created_at
                self.updated_at = updated_at
                self.plan = plan
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case url
                case id
                case node_id
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
                case blog
                case html_url
                case name
                case company
                case location
                case email
                case has_organization_projects
                case has_repository_projects
                case is_verified
                case public_repos
                case public_gists
                case followers
                case following
                case _type = "type"
                case created_at
                case updated_at
                case plan
            }
        }
        /// Information about a Copilot Business seat assignment for a user, team, or organization.
        ///
        /// - Remark: Generated from `#/components/schemas/copilot-seat-details`.
        public struct copilot_hyphen_seat_hyphen_details: Codable, Hashable, Sendable {
            /// The assignee that has been granted access to GitHub Copilot.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assignee`.
            @frozen public enum assigneePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assignee/case1`.
                case simple_hyphen_user(Components.Schemas.simple_hyphen_user)
                /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assignee/case2`.
                case team(Components.Schemas.team)
                /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assignee/case3`.
                case organization(Components.Schemas.organization)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .simple_hyphen_user(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .team(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .organization(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .simple_hyphen_user(value):
                        try value.encode(to: encoder)
                    case let .team(value):
                        try value.encode(to: encoder)
                    case let .organization(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The assignee that has been granted access to GitHub Copilot.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assignee`.
            public var assignee: Components.Schemas.copilot_hyphen_seat_hyphen_details.assigneePayload
            /// The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assigning_team`.
            @frozen public enum assigning_teamPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assigning_team/case1`.
                case team(Components.Schemas.team)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .team(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .team(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/assigning_team`.
            public var assigning_team: Components.Schemas.copilot_hyphen_seat_hyphen_details.assigning_teamPayload?
            /// The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/pending_cancellation_date`.
            public var pending_cancellation_date: Swift.String?
            /// Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/last_activity_at`.
            public var last_activity_at: Foundation.Date?
            /// Last editor that was used by the user for a GitHub Copilot completion.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/last_activity_editor`.
            public var last_activity_editor: Swift.String?
            /// Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/created_at`.
            public var created_at: Foundation.Date
            /// Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/copilot-seat-details/updated_at`.
            public var updated_at: Foundation.Date?
            /// Creates a new `copilot_hyphen_seat_hyphen_details`.
            ///
            /// - Parameters:
            ///   - assignee: The assignee that has been granted access to GitHub Copilot.
            ///   - assigning_team: The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually.
            ///   - pending_cancellation_date: The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
            ///   - last_activity_at: Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
            ///   - last_activity_editor: Last editor that was used by the user for a GitHub Copilot completion.
            ///   - created_at: Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
            ///   - updated_at: Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
            public init(
                assignee: Components.Schemas.copilot_hyphen_seat_hyphen_details.assigneePayload,
                assigning_team: Components.Schemas.copilot_hyphen_seat_hyphen_details.assigning_teamPayload? = nil,
                pending_cancellation_date: Swift.String? = nil,
                last_activity_at: Foundation.Date? = nil,
                last_activity_editor: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date? = nil
            ) {
                self.assignee = assignee
                self.assigning_team = assigning_team
                self.pending_cancellation_date = pending_cancellation_date
                self.last_activity_at = last_activity_at
                self.last_activity_editor = last_activity_editor
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case assignee
                case assigning_team
                case pending_cancellation_date
                case last_activity_at
                case last_activity_editor
                case created_at
                case updated_at
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                assignee = try container.decode(
                    Components.Schemas.copilot_hyphen_seat_hyphen_details.assigneePayload.self,
                    forKey: .assignee
                )
                assigning_team = try container.decodeIfPresent(
                    Components.Schemas.copilot_hyphen_seat_hyphen_details.assigning_teamPayload.self,
                    forKey: .assigning_team
                )
                pending_cancellation_date = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .pending_cancellation_date
                )
                last_activity_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .last_activity_at
                )
                last_activity_editor = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .last_activity_editor
                )
                created_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .created_at
                )
                updated_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "assignee",
                    "assigning_team",
                    "pending_cancellation_date",
                    "last_activity_at",
                    "last_activity_editor",
                    "created_at",
                    "updated_at"
                ])
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        ///
        /// - Remark: Generated from `#/components/parameters/enterprise`.
        public typealias enterprise = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get a summary of Copilot usage for enterprise members
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// for all users across organizations with access to Copilot within your enterprise, with a further breakdown of suggestions, acceptances,
    /// and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.
    ///
    /// The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// Only the owners and billing managers of enterprises with a Copilot Business or Enterprise subscription can view Copilot usage
    /// metrics for the enterprise.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/copilot/usage`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)`.
    public enum copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise {
        public static let id: Swift.String = "copilot/usage-metrics-for-enterprise"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/path/enterprise`.
                public var enterprise: Components.Parameters.enterprise
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - enterprise: The slug version of the enterprise name. You can also substitute this value with the enterprise id.
                public init(enterprise: Components.Parameters.enterprise) {
                    self.enterprise = enterprise
                }
            }
            public var path: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Path
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/query/since`.
                public var since: Swift.String?
                /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/query/until`.
                public var until: Swift.String?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///   - until: Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Query
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Path,
                query: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Query = .init(),
                headers: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enterprises/{enterprise}/copilot/usage/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.copilot_hyphen_usage_hyphen_metrics])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.copilot_hyphen_usage_hyphen_metrics] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_enterprise.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/copilot/usage/get(copilot/usage-metrics-for-enterprise)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Copilot seat information and settings for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and code matching policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)".
    ///
    /// Only organization owners can configure and view details about the organization's Copilot Business subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)`.
    public enum copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details {
        public static let id: Swift.String = "copilot/get-copilot-organization-details"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Path,
                headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.copilot_hyphen_organization_hyphen_details)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.copilot_hyphen_organization_hyphen_details {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// There is a problem with your account's associated payment method.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/get(copilot/get-copilot-organization-details)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_get_hyphen_copilot_hyphen_organization_hyphen_details.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all Copilot seat assignments for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Lists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).
    ///
    /// Only organization owners can configure and view details about the organization's Copilot Business or Enterprise subscription.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/billing/seats`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)`.
    public enum copilot_sol_list_hyphen_copilot_hyphen_seats {
        public static let id: Swift.String = "copilot/list-copilot-seats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Path,
                query: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Query = .init(),
                headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// Total number of Copilot seats for the organization currently being billed.
                        ///
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/json/total_seats`.
                        public var total_seats: Swift.Int?
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/json/seats`.
                        public var seats: [Components.Schemas.copilot_hyphen_seat_hyphen_details]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_seats: Total number of Copilot seats for the organization currently being billed.
                        ///   - seats:
                        public init(
                            total_seats: Swift.Int? = nil,
                            seats: [Components.Schemas.copilot_hyphen_seat_hyphen_details]? = nil
                        ) {
                            self.total_seats = total_seats
                            self.seats = seats
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_seats
                            case seats
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/seats/GET/responses/200/content/application\/json`.
                    case json(Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Headers = .init(),
                    body: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_list_hyphen_copilot_hyphen_seats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/seats/get(copilot/list-copilot-seats)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add teams to the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
    /// For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)`.
    public enum copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams {
        public static let id: Swift.String = "copilot/add-copilot-seats-for-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// List of team names within the organization to which to grant access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody/json/selected_teams`.
                    public var selected_teams: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_teams: List of team names within the organization to which to grant access to GitHub Copilot.
                    public init(selected_teams: [Swift.String]) {
                        self.selected_teams = selected_teams
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_teams
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Path,
                headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Headers = .init(),
                body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seat assignments created.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content/json/seats_created`.
                        public var seats_created: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_created:
                        public init(seats_created: Swift.Int) {
                            self.seats_created = seats_created
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_created
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/POST/responses/201/content/application\/json`.
                    case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/post(copilot/add-copilot-seats-for-teams)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_teams.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove teams from the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Cancels the Copilot seat assignment for all members of each team specified.
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    ///
    /// For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)`.
    public enum copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams {
        public static let id: Swift.String = "copilot/cancel-copilot-seat-assignment-for-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The names of teams from which to revoke access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody/json/selected_teams`.
                    public var selected_teams: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_teams: The names of teams from which to revoke access to GitHub Copilot.
                    public init(selected_teams: [Swift.String]) {
                        self.selected_teams = selected_teams
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_teams
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Path,
                headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Headers = .init(),
                body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seat assignments cancelled.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content/json/seats_cancelled`.
                        public var seats_cancelled: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_cancelled:
                        public init(seats_cancelled: Swift.Int) {
                            self.seats_cancelled = seats_cancelled
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_cancelled
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_teams/DELETE/responses/200/content/application\/json`.
                    case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_teams/delete(copilot/cancel-copilot-seat-assignment-for-teams)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_teams.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add users to the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
    /// For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)`.
    public enum copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users {
        public static let id: Swift.String = "copilot/add-copilot-seats-for-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The usernames of the organization members to be granted access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody/json/selected_usernames`.
                    public var selected_usernames: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_usernames: The usernames of the organization members to be granted access to GitHub Copilot.
                    public init(selected_usernames: [Swift.String]) {
                        self.selected_usernames = selected_usernames
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_usernames
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Path,
                headers: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Headers = .init(),
                body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seat assignments created.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content/json/seats_created`.
                        public var seats_created: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_created:
                        public init(seats_created: Swift.Int) {
                            self.seats_created = seats_created
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_created
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/POST/responses/201/content/application\/json`.
                    case json(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/post(copilot/add-copilot-seats-for-users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_add_hyphen_copilot_hyphen_seats_hyphen_for_hyphen_users.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove users from the Copilot subscription for an organization
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Cancels the Copilot seat assignment for each user specified.
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    ///
    /// For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
    ///
    /// For more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
    ///
    /// Only organization owners can configure GitHub Copilot in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/copilot/billing/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)`.
    public enum copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users {
        public static let id: Swift.String = "copilot/cancel-copilot-seat-assignment-for-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The usernames of the organization members for which to revoke access to GitHub Copilot.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody/json/selected_usernames`.
                    public var selected_usernames: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_usernames: The usernames of the organization members for which to revoke access to GitHub Copilot.
                    public init(selected_usernames: [Swift.String]) {
                        self.selected_usernames = selected_usernames
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_usernames
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/requestBody/content/application\/json`.
                case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body.jsonPayload)
            }
            public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Path,
                headers: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Headers = .init(),
                body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// The total number of seat assignments cancelled.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content/json/seats_cancelled`.
                        public var seats_cancelled: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - seats_cancelled:
                        public init(seats_cancelled: Swift.Int) {
                            self.seats_cancelled = seats_cancelled
                        }
                        public enum CodingKeys: String, CodingKey {
                            case seats_cancelled
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/billing/selected_users/DELETE/responses/200/content/application\/json`.
                    case json(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, the seat management setting is set to enable Copilot for all users or is unconfigured, or a user's seat cannot be cancelled because it was assigned to them via a team.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/billing/selected_users/delete(copilot/cancel-copilot-seat-assignment-for-users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_cancel_hyphen_copilot_hyphen_seat_hyphen_assignment_hyphen_for_hyphen_users.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a summary of Copilot usage for organization members
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
    /// See the response schema tab for detailed metrics definitions.
    ///
    /// The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    ///
    /// Copilot Business or Copilot Enterprise organization owners, and owners and billing managers of their parent enterprises, can view
    /// Copilot usage metrics.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `copilot`, `manage_billing:copilot`, `admin:org`, `admin:enterprise`, or `manage_billing:enterprise` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/copilot/usage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)`.
    public enum copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org {
        public static let id: Swift.String = "copilot/usage-metrics-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/query/since`.
                public var since: Swift.String?
                /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/query/until`.
                public var until: Swift.String?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
                ///   - until: Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Path,
                query: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/copilot/usage/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.copilot_hyphen_usage_hyphen_metrics])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.copilot_hyphen_usage_hyphen_metrics] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_usage_hyphen_metrics_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/copilot/usage/get(copilot/usage-metrics-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Copilot seat assignment details for a user
    ///
    /// **Note**: This endpoint is in beta and is subject to change.
    ///
    /// Gets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.
    ///
    /// Organization owners can view GitHub Copilot seat assignment details for members in their organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/copilot`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)`.
    public enum copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user {
        public static let id: Swift.String = "copilot/get-copilot-seat-details-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/copilot/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.copilot_hyphen_seat_hyphen_details)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.copilot_hyphen_seat_hyphen_details {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The user's GitHub Copilot seat details, including usage.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Copilot Business or Enterprise is not enabled for this organization or the user has a pending organization invitation.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/copilot/get(copilot/get-copilot-seat-details-for-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.copilot_sol_get_hyphen_copilot_hyphen_seat_hyphen_details_hyphen_for_hyphen_user.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
