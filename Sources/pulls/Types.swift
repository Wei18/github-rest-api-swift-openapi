// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List pull requests
    ///
    /// Lists pull requests in a specified repository.
    ///
    /// Draft pull requests are available in public repositories with GitHub
    /// Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
    /// plans, and in public and private repositories with GitHub Team and GitHub Enterprise
    /// Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
    /// in the GitHub Help documentation.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    func pulls_sol_list(_ input: Operations.pulls_sol_list.Input) async throws -> Operations.pulls_sol_list.Output
    /// Create a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/post(pulls/create)`.
    func pulls_sol_create(_ input: Operations.pulls_sol_create.Input) async throws -> Operations.pulls_sol_create.Output
    /// List review comments in a repository
    ///
    /// Lists review comments for all pull requests in a repository. By default,
    /// review comments are in ascending order by ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/get(pulls/list-review-comments-for-repo)`.
    func pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo(_ input: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input) async throws -> Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output
    /// Get a review comment for a pull request
    ///
    /// Provides details for a specified review comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/get(pulls/get-review-comment)`.
    func pulls_sol_get_hyphen_review_hyphen_comment(_ input: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input) async throws -> Operations.pulls_sol_get_hyphen_review_hyphen_comment.Output
    /// Update a review comment for a pull request
    ///
    /// Edits the content of a specified review comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/patch(pulls/update-review-comment)`.
    func pulls_sol_update_hyphen_review_hyphen_comment(_ input: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input) async throws -> Operations.pulls_sol_update_hyphen_review_hyphen_comment.Output
    /// Delete a review comment for a pull request
    ///
    /// Deletes a review comment.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/delete(pulls/delete-review-comment)`.
    func pulls_sol_delete_hyphen_review_hyphen_comment(_ input: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input) async throws -> Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Output
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    /// - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    func pulls_sol_get(_ input: Operations.pulls_sol_get.Input) async throws -> Operations.pulls_sol_get.Output
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    func pulls_sol_update(_ input: Operations.pulls_sol_update.Input) async throws -> Operations.pulls_sol_update.Output
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a specified pull request. By default, review comments
    /// are in ascending order by ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    func pulls_sol_list_hyphen_review_hyphen_comments(_ input: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input) async throws -> Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output
    /// Create a review comment for a pull request
    ///
    /// Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."
    ///
    /// If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.
    ///
    /// The `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/post(pulls/create-review-comment)`.
    func pulls_sol_create_hyphen_review_hyphen_comment(_ input: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input) async throws -> Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output
    /// Create a reply for a review comment
    ///
    /// Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/post(pulls/create-reply-for-review-comment)`.
    func pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment(_ input: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input) async throws -> Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output
    /// List commits on a pull request
    ///
    /// Lists a maximum of 250 commits for a pull request. To receive a complete
    /// commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
    /// endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/commits/get(pulls/list-commits)`.
    func pulls_sol_list_hyphen_commits(_ input: Operations.pulls_sol_list_hyphen_commits.Input) async throws -> Operations.pulls_sol_list_hyphen_commits.Output
    /// List pull requests files
    ///
    /// Lists the files in a specified pull request.
    ///
    /// > [!NOTE]
    /// > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    func pulls_sol_list_hyphen_files(_ input: Operations.pulls_sol_list_hyphen_files.Input) async throws -> Operations.pulls_sol_list_hyphen_files.Output
    /// Check if a pull request has been merged
    ///
    /// Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/merge`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/get(pulls/check-if-merged)`.
    func pulls_sol_check_hyphen_if_hyphen_merged(_ input: Operations.pulls_sol_check_hyphen_if_hyphen_merged.Input) async throws -> Operations.pulls_sol_check_hyphen_if_hyphen_merged.Output
    /// Merge a pull request
    ///
    /// Merges a pull request into the base branch.
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)`.
    func pulls_sol_merge(_ input: Operations.pulls_sol_merge.Input) async throws -> Operations.pulls_sol_merge.Output
    /// Get all requested reviewers for a pull request
    ///
    /// Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/get(pulls/list-requested-reviewers)`.
    func pulls_sol_list_hyphen_requested_hyphen_reviewers(_ input: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input) async throws -> Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output
    /// Request reviewers for a pull request
    ///
    /// Requests reviews for a pull request from a given set of users and/or teams.
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/post(pulls/request-reviewers)`.
    func pulls_sol_request_hyphen_reviewers(_ input: Operations.pulls_sol_request_hyphen_reviewers.Input) async throws -> Operations.pulls_sol_request_hyphen_reviewers.Output
    /// Remove requested reviewers from a pull request
    ///
    /// Removes review requests from a pull request for a given set of users and/or teams.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/delete(pulls/remove-requested-reviewers)`.
    func pulls_sol_remove_hyphen_requested_hyphen_reviewers(_ input: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input) async throws -> Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Output
    /// List reviews for a pull request
    ///
    /// Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    func pulls_sol_list_hyphen_reviews(_ input: Operations.pulls_sol_list_hyphen_reviews.Input) async throws -> Operations.pulls_sol_list_hyphen_reviews.Output
    /// Create a review for a pull request
    ///
    /// Creates a review on a specified pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
    ///
    /// > [!NOTE]
    /// > To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
    ///
    /// The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/post(pulls/create-review)`.
    func pulls_sol_create_hyphen_review(_ input: Operations.pulls_sol_create_hyphen_review.Input) async throws -> Operations.pulls_sol_create_hyphen_review.Output
    /// Get a review for a pull request
    ///
    /// Retrieves a pull request review by its ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/get(pulls/get-review)`.
    func pulls_sol_get_hyphen_review(_ input: Operations.pulls_sol_get_hyphen_review.Input) async throws -> Operations.pulls_sol_get_hyphen_review.Output
    /// Update a review for a pull request
    ///
    /// Updates the contents of a specified review summary comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/put(pulls/update-review)`.
    func pulls_sol_update_hyphen_review(_ input: Operations.pulls_sol_update_hyphen_review.Input) async throws -> Operations.pulls_sol_update_hyphen_review.Output
    /// Delete a pending review for a pull request
    ///
    /// Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/delete(pulls/delete-pending-review)`.
    func pulls_sol_delete_hyphen_pending_hyphen_review(_ input: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input) async throws -> Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Output
    /// List comments for a pull request review
    ///
    /// Lists comments for a specific pull request review.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/get(pulls/list-comments-for-review)`.
    func pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review(_ input: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input) async throws -> Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output
    /// Dismiss a review for a pull request
    ///
    /// Dismisses a specified review on a pull request.
    ///
    /// > [!NOTE]
    /// > To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/put(pulls/dismiss-review)`.
    func pulls_sol_dismiss_hyphen_review(_ input: Operations.pulls_sol_dismiss_hyphen_review.Input) async throws -> Operations.pulls_sol_dismiss_hyphen_review.Output
    /// Submit a review for a pull request
    ///
    /// Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/post(pulls/submit-review)`.
    func pulls_sol_submit_hyphen_review(_ input: Operations.pulls_sol_submit_hyphen_review.Input) async throws -> Operations.pulls_sol_submit_hyphen_review.Output
    /// Update a pull request branch
    ///
    /// Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
    /// Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/update-branch/put(pulls/update-branch)`.
    func pulls_sol_update_hyphen_branch(_ input: Operations.pulls_sol_update_hyphen_branch.Input) async throws -> Operations.pulls_sol_update_hyphen_branch.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List pull requests
    ///
    /// Lists pull requests in a specified repository.
    ///
    /// Draft pull requests are available in public repositories with GitHub
    /// Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
    /// plans, and in public and private repositories with GitHub Team and GitHub Enterprise
    /// Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
    /// in the GitHub Help documentation.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    public func pulls_sol_list(
        path: Operations.pulls_sol_list.Input.Path,
        query: Operations.pulls_sol_list.Input.Query = .init(),
        headers: Operations.pulls_sol_list.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list.Output {
        try await pulls_sol_list(Operations.pulls_sol_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/post(pulls/create)`.
    public func pulls_sol_create(
        path: Operations.pulls_sol_create.Input.Path,
        headers: Operations.pulls_sol_create.Input.Headers = .init(),
        body: Operations.pulls_sol_create.Input.Body
    ) async throws -> Operations.pulls_sol_create.Output {
        try await pulls_sol_create(Operations.pulls_sol_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List review comments in a repository
    ///
    /// Lists review comments for all pull requests in a repository. By default,
    /// review comments are in ascending order by ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/get(pulls/list-review-comments-for-repo)`.
    public func pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo(
        path: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output {
        try await pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo(Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a review comment for a pull request
    ///
    /// Provides details for a specified review comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/get(pulls/get-review-comment)`.
    public func pulls_sol_get_hyphen_review_hyphen_comment(
        path: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input.Path,
        headers: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_get_hyphen_review_hyphen_comment.Output {
        try await pulls_sol_get_hyphen_review_hyphen_comment(Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a review comment for a pull request
    ///
    /// Edits the content of a specified review comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/patch(pulls/update-review-comment)`.
    public func pulls_sol_update_hyphen_review_hyphen_comment(
        path: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Path,
        headers: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Headers = .init(),
        body: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Body
    ) async throws -> Operations.pulls_sol_update_hyphen_review_hyphen_comment.Output {
        try await pulls_sol_update_hyphen_review_hyphen_comment(Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a review comment for a pull request
    ///
    /// Deletes a review comment.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/delete(pulls/delete-review-comment)`.
    public func pulls_sol_delete_hyphen_review_hyphen_comment(
        path: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input.Path,
        headers: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Output {
        try await pulls_sol_delete_hyphen_review_hyphen_comment(Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    /// - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    public func pulls_sol_get(
        path: Operations.pulls_sol_get.Input.Path,
        headers: Operations.pulls_sol_get.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_get.Output {
        try await pulls_sol_get(Operations.pulls_sol_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    public func pulls_sol_update(
        path: Operations.pulls_sol_update.Input.Path,
        headers: Operations.pulls_sol_update.Input.Headers = .init(),
        body: Operations.pulls_sol_update.Input.Body? = nil
    ) async throws -> Operations.pulls_sol_update.Output {
        try await pulls_sol_update(Operations.pulls_sol_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a specified pull request. By default, review comments
    /// are in ascending order by ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    public func pulls_sol_list_hyphen_review_hyphen_comments(
        path: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Path,
        query: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Query = .init(),
        headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output {
        try await pulls_sol_list_hyphen_review_hyphen_comments(Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a review comment for a pull request
    ///
    /// Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."
    ///
    /// If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.
    ///
    /// The `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/post(pulls/create-review-comment)`.
    public func pulls_sol_create_hyphen_review_hyphen_comment(
        path: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Path,
        headers: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Headers = .init(),
        body: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body
    ) async throws -> Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output {
        try await pulls_sol_create_hyphen_review_hyphen_comment(Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create a reply for a review comment
    ///
    /// Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/post(pulls/create-reply-for-review-comment)`.
    public func pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment(
        path: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Path,
        headers: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Headers = .init(),
        body: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Body
    ) async throws -> Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output {
        try await pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment(Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List commits on a pull request
    ///
    /// Lists a maximum of 250 commits for a pull request. To receive a complete
    /// commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
    /// endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/commits/get(pulls/list-commits)`.
    public func pulls_sol_list_hyphen_commits(
        path: Operations.pulls_sol_list_hyphen_commits.Input.Path,
        query: Operations.pulls_sol_list_hyphen_commits.Input.Query = .init(),
        headers: Operations.pulls_sol_list_hyphen_commits.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list_hyphen_commits.Output {
        try await pulls_sol_list_hyphen_commits(Operations.pulls_sol_list_hyphen_commits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests files
    ///
    /// Lists the files in a specified pull request.
    ///
    /// > [!NOTE]
    /// > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    public func pulls_sol_list_hyphen_files(
        path: Operations.pulls_sol_list_hyphen_files.Input.Path,
        query: Operations.pulls_sol_list_hyphen_files.Input.Query = .init(),
        headers: Operations.pulls_sol_list_hyphen_files.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list_hyphen_files.Output {
        try await pulls_sol_list_hyphen_files(Operations.pulls_sol_list_hyphen_files.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check if a pull request has been merged
    ///
    /// Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/merge`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/get(pulls/check-if-merged)`.
    public func pulls_sol_check_hyphen_if_hyphen_merged(path: Operations.pulls_sol_check_hyphen_if_hyphen_merged.Input.Path) async throws -> Operations.pulls_sol_check_hyphen_if_hyphen_merged.Output {
        try await pulls_sol_check_hyphen_if_hyphen_merged(Operations.pulls_sol_check_hyphen_if_hyphen_merged.Input(path: path))
    }
    /// Merge a pull request
    ///
    /// Merges a pull request into the base branch.
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)`.
    public func pulls_sol_merge(
        path: Operations.pulls_sol_merge.Input.Path,
        headers: Operations.pulls_sol_merge.Input.Headers = .init(),
        body: Operations.pulls_sol_merge.Input.Body? = nil
    ) async throws -> Operations.pulls_sol_merge.Output {
        try await pulls_sol_merge(Operations.pulls_sol_merge.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get all requested reviewers for a pull request
    ///
    /// Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/get(pulls/list-requested-reviewers)`.
    public func pulls_sol_list_hyphen_requested_hyphen_reviewers(
        path: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input.Path,
        headers: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output {
        try await pulls_sol_list_hyphen_requested_hyphen_reviewers(Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input(
            path: path,
            headers: headers
        ))
    }
    /// Request reviewers for a pull request
    ///
    /// Requests reviews for a pull request from a given set of users and/or teams.
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/post(pulls/request-reviewers)`.
    public func pulls_sol_request_hyphen_reviewers(
        path: Operations.pulls_sol_request_hyphen_reviewers.Input.Path,
        headers: Operations.pulls_sol_request_hyphen_reviewers.Input.Headers = .init(),
        body: Operations.pulls_sol_request_hyphen_reviewers.Input.Body? = nil
    ) async throws -> Operations.pulls_sol_request_hyphen_reviewers.Output {
        try await pulls_sol_request_hyphen_reviewers(Operations.pulls_sol_request_hyphen_reviewers.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove requested reviewers from a pull request
    ///
    /// Removes review requests from a pull request for a given set of users and/or teams.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/delete(pulls/remove-requested-reviewers)`.
    public func pulls_sol_remove_hyphen_requested_hyphen_reviewers(
        path: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Path,
        headers: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Headers = .init(),
        body: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Body
    ) async throws -> Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Output {
        try await pulls_sol_remove_hyphen_requested_hyphen_reviewers(Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List reviews for a pull request
    ///
    /// Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    public func pulls_sol_list_hyphen_reviews(
        path: Operations.pulls_sol_list_hyphen_reviews.Input.Path,
        query: Operations.pulls_sol_list_hyphen_reviews.Input.Query = .init(),
        headers: Operations.pulls_sol_list_hyphen_reviews.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list_hyphen_reviews.Output {
        try await pulls_sol_list_hyphen_reviews(Operations.pulls_sol_list_hyphen_reviews.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a review for a pull request
    ///
    /// Creates a review on a specified pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
    ///
    /// > [!NOTE]
    /// > To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
    ///
    /// The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/post(pulls/create-review)`.
    public func pulls_sol_create_hyphen_review(
        path: Operations.pulls_sol_create_hyphen_review.Input.Path,
        headers: Operations.pulls_sol_create_hyphen_review.Input.Headers = .init(),
        body: Operations.pulls_sol_create_hyphen_review.Input.Body? = nil
    ) async throws -> Operations.pulls_sol_create_hyphen_review.Output {
        try await pulls_sol_create_hyphen_review(Operations.pulls_sol_create_hyphen_review.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a review for a pull request
    ///
    /// Retrieves a pull request review by its ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/get(pulls/get-review)`.
    public func pulls_sol_get_hyphen_review(
        path: Operations.pulls_sol_get_hyphen_review.Input.Path,
        headers: Operations.pulls_sol_get_hyphen_review.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_get_hyphen_review.Output {
        try await pulls_sol_get_hyphen_review(Operations.pulls_sol_get_hyphen_review.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a review for a pull request
    ///
    /// Updates the contents of a specified review summary comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/put(pulls/update-review)`.
    public func pulls_sol_update_hyphen_review(
        path: Operations.pulls_sol_update_hyphen_review.Input.Path,
        headers: Operations.pulls_sol_update_hyphen_review.Input.Headers = .init(),
        body: Operations.pulls_sol_update_hyphen_review.Input.Body
    ) async throws -> Operations.pulls_sol_update_hyphen_review.Output {
        try await pulls_sol_update_hyphen_review(Operations.pulls_sol_update_hyphen_review.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a pending review for a pull request
    ///
    /// Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/delete(pulls/delete-pending-review)`.
    public func pulls_sol_delete_hyphen_pending_hyphen_review(
        path: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input.Path,
        headers: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Output {
        try await pulls_sol_delete_hyphen_pending_hyphen_review(Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input(
            path: path,
            headers: headers
        ))
    }
    /// List comments for a pull request review
    ///
    /// Lists comments for a specific pull request review.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/get(pulls/list-comments-for-review)`.
    public func pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review(
        path: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Path,
        query: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Query = .init(),
        headers: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Headers = .init()
    ) async throws -> Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output {
        try await pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review(Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Dismiss a review for a pull request
    ///
    /// Dismisses a specified review on a pull request.
    ///
    /// > [!NOTE]
    /// > To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/put(pulls/dismiss-review)`.
    public func pulls_sol_dismiss_hyphen_review(
        path: Operations.pulls_sol_dismiss_hyphen_review.Input.Path,
        headers: Operations.pulls_sol_dismiss_hyphen_review.Input.Headers = .init(),
        body: Operations.pulls_sol_dismiss_hyphen_review.Input.Body
    ) async throws -> Operations.pulls_sol_dismiss_hyphen_review.Output {
        try await pulls_sol_dismiss_hyphen_review(Operations.pulls_sol_dismiss_hyphen_review.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Submit a review for a pull request
    ///
    /// Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/post(pulls/submit-review)`.
    public func pulls_sol_submit_hyphen_review(
        path: Operations.pulls_sol_submit_hyphen_review.Input.Path,
        headers: Operations.pulls_sol_submit_hyphen_review.Input.Headers = .init(),
        body: Operations.pulls_sol_submit_hyphen_review.Input.Body
    ) async throws -> Operations.pulls_sol_submit_hyphen_review.Output {
        try await pulls_sol_submit_hyphen_review(Operations.pulls_sol_submit_hyphen_review.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Update a pull request branch
    ///
    /// Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
    /// Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/update-branch/put(pulls/update-branch)`.
    public func pulls_sol_update_hyphen_branch(
        path: Operations.pulls_sol_update_hyphen_branch.Input.Path,
        headers: Operations.pulls_sol_update_hyphen_branch.Input.Headers = .init(),
        body: Operations.pulls_sol_update_hyphen_branch.Input.Body? = nil
    ) async throws -> Operations.pulls_sol_update_hyphen_branch.Output {
        try await pulls_sol_update_hyphen_branch(Operations.pulls_sol_update_hyphen_branch.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_hyphen_error_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_hyphen_error_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        public struct nullable_hyphen_milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            public var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            public var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            public var state: Components.Schemas.nullable_hyphen_milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            public var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            public var due_on: Foundation.Date?
            /// Creates a new `nullable_hyphen_milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.nullable_hyphen_milestone.statePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                due_on: Foundation.Date? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen public enum author_hyphen_association: String, Codable, Hashable, Sendable {
            case COLLABORATOR = "COLLABORATOR"
            case CONTRIBUTOR = "CONTRIBUTOR"
            case FIRST_TIMER = "FIRST_TIMER"
            case FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
            case MANNEQUIN = "MANNEQUIN"
            case MEMBER = "MEMBER"
            case NONE = "NONE"
            case OWNER = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        public struct reaction_hyphen_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            public var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            public var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            public var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            public var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            public var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            public var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            public var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            public var rocket: Swift.Int
            /// Creates a new `reaction_hyphen_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            public init(
                url: Swift.String,
                total_count: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        public struct empty_hyphen_object: Codable, Hashable, Sendable {
            /// Creates a new `empty_hyphen_object`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team-simple`.
        public struct team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Metaproperties for Git author/committer information.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-git-user`.
        public struct nullable_hyphen_git_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/date`.
            public var date: Swift.String?
            /// Creates a new `nullable_hyphen_git_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - date:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                date: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.date = date
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/verification`.
        public struct verification: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/verification/verified`.
            public var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/verification/reason`.
            public var reason: Swift.String
            /// - Remark: Generated from `#/components/schemas/verification/payload`.
            public var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/signature`.
            public var signature: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/verified_at`.
            public var verified_at: Swift.String?
            /// Creates a new `verification`.
            ///
            /// - Parameters:
            ///   - verified:
            ///   - reason:
            ///   - payload:
            ///   - signature:
            ///   - verified_at:
            public init(
                verified: Swift.Bool,
                reason: Swift.String,
                payload: Swift.String? = nil,
                signature: Swift.String? = nil,
                verified_at: Swift.String? = nil
            ) {
                self.verified = verified
                self.reason = reason
                self.payload = payload
                self.signature = signature
                self.verified_at = verified_at
            }
            public enum CodingKeys: String, CodingKey {
                case verified
                case reason
                case payload
                case signature
                case verified_at
            }
        }
        /// Diff Entry
        ///
        /// - Remark: Generated from `#/components/schemas/diff-entry`.
        public struct diff_hyphen_entry: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/diff-entry/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/filename`.
            public var filename: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case added = "added"
                case removed = "removed"
                case modified = "modified"
                case renamed = "renamed"
                case copied = "copied"
                case changed = "changed"
                case unchanged = "unchanged"
            }
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            public var status: Components.Schemas.diff_hyphen_entry.statusPayload
            /// - Remark: Generated from `#/components/schemas/diff-entry/additions`.
            public var additions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/deletions`.
            public var deletions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/changes`.
            public var changes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/blob_url`.
            public var blob_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/raw_url`.
            public var raw_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/patch`.
            public var patch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/diff-entry/previous_filename`.
            public var previous_filename: Swift.String?
            /// Creates a new `diff_hyphen_entry`.
            ///
            /// - Parameters:
            ///   - sha:
            ///   - filename:
            ///   - status:
            ///   - additions:
            ///   - deletions:
            ///   - changes:
            ///   - blob_url:
            ///   - raw_url:
            ///   - contents_url:
            ///   - patch:
            ///   - previous_filename:
            public init(
                sha: Swift.String,
                filename: Swift.String,
                status: Components.Schemas.diff_hyphen_entry.statusPayload,
                additions: Swift.Int,
                deletions: Swift.Int,
                changes: Swift.Int,
                blob_url: Swift.String,
                raw_url: Swift.String,
                contents_url: Swift.String,
                patch: Swift.String? = nil,
                previous_filename: Swift.String? = nil
            ) {
                self.sha = sha
                self.filename = filename
                self.status = status
                self.additions = additions
                self.deletions = deletions
                self.changes = changes
                self.blob_url = blob_url
                self.raw_url = raw_url
                self.contents_url = contents_url
                self.patch = patch
                self.previous_filename = previous_filename
            }
            public enum CodingKeys: String, CodingKey {
                case sha
                case filename
                case status
                case additions
                case deletions
                case changes
                case blob_url
                case raw_url
                case contents_url
                case patch
                case previous_filename
            }
        }
        /// Commit
        ///
        /// - Remark: Generated from `#/components/schemas/commit`.
        public struct commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            public struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/commit/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/author`.
                public var author: Components.Schemas.nullable_hyphen_git_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/commit/commit/committer`.
                public var committer: Components.Schemas.nullable_hyphen_git_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/commit/commit/message`.
                public var message: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/comment_count`.
                public var comment_count: Swift.Int
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                public struct treePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/sha`.
                    public var sha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/url`.
                    public var url: Swift.String
                    /// Creates a new `treePayload`.
                    ///
                    /// - Parameters:
                    ///   - sha:
                    ///   - url:
                    public init(
                        sha: Swift.String,
                        url: Swift.String
                    ) {
                        self.sha = sha
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sha
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                public var tree: Components.Schemas.commit.commitPayload.treePayload
                /// - Remark: Generated from `#/components/schemas/commit/commit/verification`.
                public var verification: Components.Schemas.verification?
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - author:
                ///   - committer:
                ///   - message:
                ///   - comment_count:
                ///   - tree:
                ///   - verification:
                public init(
                    url: Swift.String,
                    author: Components.Schemas.nullable_hyphen_git_hyphen_user? = nil,
                    committer: Components.Schemas.nullable_hyphen_git_hyphen_user? = nil,
                    message: Swift.String,
                    comment_count: Swift.Int,
                    tree: Components.Schemas.commit.commitPayload.treePayload,
                    verification: Components.Schemas.verification? = nil
                ) {
                    self.url = url
                    self.author = author
                    self.committer = committer
                    self.message = message
                    self.comment_count = comment_count
                    self.tree = tree
                    self.verification = verification
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case author
                    case committer
                    case message
                    case comment_count
                    case tree
                    case verification
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            public var commit: Components.Schemas.commit.commitPayload
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            @frozen public enum authorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/author/case1`.
                case simple_hyphen_user(Components.Schemas.simple_hyphen_user)
                /// - Remark: Generated from `#/components/schemas/commit/author/case2`.
                case empty_hyphen_object(Components.Schemas.empty_hyphen_object)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .simple_hyphen_user(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .empty_hyphen_object(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .simple_hyphen_user(value):
                        try value.encode(to: encoder)
                    case let .empty_hyphen_object(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            public var author: Components.Schemas.commit.authorPayload?
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            @frozen public enum committerPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/committer/case1`.
                case simple_hyphen_user(Components.Schemas.simple_hyphen_user)
                /// - Remark: Generated from `#/components/schemas/commit/committer/case2`.
                case empty_hyphen_object(Components.Schemas.empty_hyphen_object)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .simple_hyphen_user(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .empty_hyphen_object(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .simple_hyphen_user(value):
                        try value.encode(to: encoder)
                    case let .empty_hyphen_object(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            public var committer: Components.Schemas.commit.committerPayload?
            /// - Remark: Generated from `#/components/schemas/commit/parentsPayload`.
            public struct parentsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/parentsPayload/html_url`.
                public var html_url: Swift.String?
                /// Creates a new `parentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                ///   - html_url:
                public init(
                    sha: Swift.String,
                    url: Swift.String,
                    html_url: Swift.String? = nil
                ) {
                    self.sha = sha
                    self.url = url
                    self.html_url = html_url
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case html_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            public typealias parentsPayload = [Components.Schemas.commit.parentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            public var parents: Components.Schemas.commit.parentsPayload
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            public struct statsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/stats/additions`.
                public var additions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/deletions`.
                public var deletions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/total`.
                public var total: Swift.Int?
                /// Creates a new `statsPayload`.
                ///
                /// - Parameters:
                ///   - additions:
                ///   - deletions:
                ///   - total:
                public init(
                    additions: Swift.Int? = nil,
                    deletions: Swift.Int? = nil,
                    total: Swift.Int? = nil
                ) {
                    self.additions = additions
                    self.deletions = deletions
                    self.total = total
                }
                public enum CodingKeys: String, CodingKey {
                    case additions
                    case deletions
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            public var stats: Components.Schemas.commit.statsPayload?
            /// - Remark: Generated from `#/components/schemas/commit/files`.
            public var files: [Components.Schemas.diff_hyphen_entry]?
            /// Creates a new `commit`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - sha:
            ///   - node_id:
            ///   - html_url:
            ///   - comments_url:
            ///   - commit:
            ///   - author:
            ///   - committer:
            ///   - parents:
            ///   - stats:
            ///   - files:
            public init(
                url: Swift.String,
                sha: Swift.String,
                node_id: Swift.String,
                html_url: Swift.String,
                comments_url: Swift.String,
                commit: Components.Schemas.commit.commitPayload,
                author: Components.Schemas.commit.authorPayload? = nil,
                committer: Components.Schemas.commit.committerPayload? = nil,
                parents: Components.Schemas.commit.parentsPayload,
                stats: Components.Schemas.commit.statsPayload? = nil,
                files: [Components.Schemas.diff_hyphen_entry]? = nil
            ) {
                self.url = url
                self.sha = sha
                self.node_id = node_id
                self.html_url = html_url
                self.comments_url = comments_url
                self.commit = commit
                self.author = author
                self.committer = committer
                self.parents = parents
                self.stats = stats
                self.files = files
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case sha
                case node_id
                case html_url
                case comments_url
                case commit
                case author
                case committer
                case parents
                case stats
                case files
            }
        }
        /// Hypermedia Link
        ///
        /// - Remark: Generated from `#/components/schemas/link`.
        public struct link: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/link/href`.
            public var href: Swift.String
            /// Creates a new `link`.
            ///
            /// - Parameters:
            ///   - href:
            public init(href: Swift.String) {
                self.href = href
            }
            public enum CodingKeys: String, CodingKey {
                case href
            }
        }
        /// The status of auto merging a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/auto-merge`.
        public struct auto_hyphen_merge: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/auto-merge/enabled_by`.
            public var enabled_by: Components.Schemas.simple_hyphen_user
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            @frozen public enum merge_methodPayload: String, Codable, Hashable, Sendable {
                case merge = "merge"
                case squash = "squash"
                case rebase = "rebase"
            }
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            public var merge_method: Components.Schemas.auto_hyphen_merge.merge_methodPayload
            /// Title for the merge commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_title`.
            public var commit_title: Swift.String
            /// Commit message for the merge commit.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_message`.
            public var commit_message: Swift.String
            /// Creates a new `auto_hyphen_merge`.
            ///
            /// - Parameters:
            ///   - enabled_by:
            ///   - merge_method: The merge method to use.
            ///   - commit_title: Title for the merge commit message.
            ///   - commit_message: Commit message for the merge commit.
            public init(
                enabled_by: Components.Schemas.simple_hyphen_user,
                merge_method: Components.Schemas.auto_hyphen_merge.merge_methodPayload,
                commit_title: Swift.String,
                commit_message: Swift.String
            ) {
                self.enabled_by = enabled_by
                self.merge_method = merge_method
                self.commit_title = commit_title
                self.commit_message = commit_message
            }
            public enum CodingKeys: String, CodingKey {
                case enabled_by
                case merge_method
                case commit_title
                case commit_message
            }
        }
        /// Pull Request Simple
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-simple`.
        public struct pull_hyphen_request_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/diff_url`.
            public var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/patch_url`.
            public var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comments_url`.
            public var review_comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comment_url`.
            public var review_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload`.
            public struct labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/id`.
                public var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/node_id`.
                public var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/description`.
                public var description: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/labelsPayload/default`.
                public var _default: Swift.Bool
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                public init(
                    id: Swift.Int64,
                    node_id: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            public typealias labelsPayload = [Components.Schemas.pull_hyphen_request_hyphen_simple.labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            public var labels: Components.Schemas.pull_hyphen_request_hyphen_simple.labelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/milestone`.
            public var milestone: Components.Schemas.nullable_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merged_at`.
            public var merged_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merge_commit_sha`.
            public var merge_commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignees`.
            public var assignees: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_reviewers`.
            public var requested_reviewers: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_teams`.
            public var requested_teams: [Components.Schemas.team]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            public struct headPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/user`.
                public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            public var head: Components.Schemas.pull_hyphen_request_hyphen_simple.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            public struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/user`.
                public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            public var base: Components.Schemas.pull_hyphen_request_hyphen_simple.basePayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/comments`.
                public var comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/commits`.
                public var commits: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/statuses`.
                public var statuses: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/html`.
                public var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/issue`.
                public var issue: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comments`.
                public var review_comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comment`.
                public var review_comment: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/self`.
                public var _self: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - review_comments:
                ///   - review_comment:
                ///   - _self:
                public init(
                    comments: Components.Schemas.link,
                    commits: Components.Schemas.link,
                    statuses: Components.Schemas.link,
                    html: Components.Schemas.link,
                    issue: Components.Schemas.link,
                    review_comments: Components.Schemas.link,
                    review_comment: Components.Schemas.link,
                    _self: Components.Schemas.link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.review_comments = review_comments
                    self.review_comment = review_comment
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case review_comments
                    case review_comment
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            public var _links: Components.Schemas.pull_hyphen_request_hyphen_simple._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/auto_merge`.
            public var auto_merge: Components.Schemas.auto_hyphen_merge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/draft`.
            public var draft: Swift.Bool?
            /// Creates a new `pull_hyphen_request_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - html_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - issue_url:
            ///   - commits_url:
            ///   - review_comments_url:
            ///   - review_comment_url:
            ///   - comments_url:
            ///   - statuses_url:
            ///   - number:
            ///   - state:
            ///   - locked:
            ///   - title:
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - active_lock_reason:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - merged_at:
            ///   - merge_commit_sha:
            ///   - assignee:
            ///   - assignees:
            ///   - requested_reviewers:
            ///   - requested_teams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - author_association:
            ///   - auto_merge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            public init(
                url: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                html_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                issue_url: Swift.String,
                commits_url: Swift.String,
                review_comments_url: Swift.String,
                review_comment_url: Swift.String,
                comments_url: Swift.String,
                statuses_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body: Swift.String? = nil,
                labels: Components.Schemas.pull_hyphen_request_hyphen_simple.labelsPayload,
                milestone: Components.Schemas.nullable_hyphen_milestone? = nil,
                active_lock_reason: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                merged_at: Foundation.Date? = nil,
                merge_commit_sha: Swift.String? = nil,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                assignees: [Components.Schemas.simple_hyphen_user]? = nil,
                requested_reviewers: [Components.Schemas.simple_hyphen_user]? = nil,
                requested_teams: [Components.Schemas.team]? = nil,
                head: Components.Schemas.pull_hyphen_request_hyphen_simple.headPayload,
                base: Components.Schemas.pull_hyphen_request_hyphen_simple.basePayload,
                _links: Components.Schemas.pull_hyphen_request_hyphen_simple._linksPayload,
                author_association: Components.Schemas.author_hyphen_association,
                auto_merge: Components.Schemas.auto_hyphen_merge? = nil,
                draft: Swift.Bool? = nil
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.html_url = html_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.issue_url = issue_url
                self.commits_url = commits_url
                self.review_comments_url = review_comments_url
                self.review_comment_url = review_comment_url
                self.comments_url = comments_url
                self.statuses_url = statuses_url
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.active_lock_reason = active_lock_reason
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.merged_at = merged_at
                self.merge_commit_sha = merge_commit_sha
                self.assignee = assignee
                self.assignees = assignees
                self.requested_reviewers = requested_reviewers
                self.requested_teams = requested_teams
                self.head = head
                self.base = base
                self._links = _links
                self.author_association = author_association
                self.auto_merge = auto_merge
                self.draft = draft
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case html_url
                case diff_url
                case patch_url
                case issue_url
                case commits_url
                case review_comments_url
                case review_comment_url
                case comments_url
                case statuses_url
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case active_lock_reason
                case created_at
                case updated_at
                case closed_at
                case merged_at
                case merge_commit_sha
                case assignee
                case assignees
                case requested_reviewers
                case requested_teams
                case head
                case base
                case _links
                case author_association
                case auto_merge
                case draft
            }
        }
        /// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review-comment`.
        public struct pull_hyphen_request_hyphen_review_hyphen_comment: Codable, Hashable, Sendable {
            /// URL for the pull request review comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/url`.
            public var url: Swift.String
            /// The ID of the pull request review to which the comment belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_review_id`.
            public var pull_request_review_id: Swift.Int64?
            /// The ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/id`.
            public var id: Swift.Int64
            /// The node ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/node_id`.
            public var node_id: Swift.String
            /// The diff of the line that the comment refers to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/diff_hunk`.
            public var diff_hunk: Swift.String
            /// The relative path of the file to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/path`.
            public var path: Swift.String
            /// The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/position`.
            public var position: Swift.Int?
            /// The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_position`.
            public var original_position: Swift.Int?
            /// The SHA of the commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/commit_id`.
            public var commit_id: Swift.String
            /// The SHA of the original commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_commit_id`.
            public var original_commit_id: Swift.String
            /// The comment ID to reply to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/in_reply_to_id`.
            public var in_reply_to_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/user`.
            public var user: Components.Schemas.simple_hyphen_user
            /// The text of the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// HTML URL for the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/html_url`.
            public var html_url: Swift.String
            /// URL for the pull request that the review comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_url`.
            public var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                public struct _selfPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self/href`.
                    public var href: Swift.String
                    /// Creates a new `_selfPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                public var _self: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload._selfPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                public struct htmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html/href`.
                    public var href: Swift.String
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                public var html: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.htmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                public struct pull_requestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request/href`.
                    public var href: Swift.String
                    /// Creates a new `pull_requestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                public var pull_request: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.pull_requestPayload
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - _self:
                ///   - html:
                ///   - pull_request:
                public init(
                    _self: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload._selfPayload,
                    html: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.htmlPayload,
                    pull_request: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.pull_requestPayload
                ) {
                    self._self = _self
                    self.html = html
                    self.pull_request = pull_request
                }
                public enum CodingKeys: String, CodingKey {
                    case _self = "self"
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            public var _links: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_line`.
            public var start_line: Swift.Int?
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_start_line`.
            public var original_start_line: Swift.Int?
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            @frozen public enum start_sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            public var start_side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.start_sidePayload?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/line`.
            public var line: Swift.Int?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_line`.
            public var original_line: Swift.Int?
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            @frozen public enum sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            public var side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.sidePayload?
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            @frozen public enum subject_typePayload: String, Codable, Hashable, Sendable {
                case line = "line"
                case file = "file"
            }
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            public var subject_type: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.subject_typePayload?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_text`.
            public var body_text: Swift.String?
            /// Creates a new `pull_hyphen_request_hyphen_review_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - url: URL for the pull request review comment
            ///   - pull_request_review_id: The ID of the pull request review to which the comment belongs.
            ///   - id: The ID of the pull request review comment.
            ///   - node_id: The node ID of the pull request review comment.
            ///   - diff_hunk: The diff of the line that the comment refers to.
            ///   - path: The relative path of the file to which the comment applies.
            ///   - position: The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
            ///   - original_position: The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
            ///   - commit_id: The SHA of the commit to which the comment applies.
            ///   - original_commit_id: The SHA of the original commit to which the comment applies.
            ///   - in_reply_to_id: The comment ID to reply to.
            ///   - user:
            ///   - body: The text of the comment.
            ///   - created_at:
            ///   - updated_at:
            ///   - html_url: HTML URL for the pull request review comment.
            ///   - pull_request_url: URL for the pull request that the review comment belongs to.
            ///   - author_association:
            ///   - _links:
            ///   - start_line: The first line of the range for a multi-line comment.
            ///   - original_start_line: The first line of the range for a multi-line comment.
            ///   - start_side: The side of the first line of the range for a multi-line comment.
            ///   - line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - original_line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - side: The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///   - subject_type: The level at which the comment is targeted, can be a diff line or a file.
            ///   - reactions:
            ///   - body_html:
            ///   - body_text:
            public init(
                url: Swift.String,
                pull_request_review_id: Swift.Int64? = nil,
                id: Swift.Int64,
                node_id: Swift.String,
                diff_hunk: Swift.String,
                path: Swift.String,
                position: Swift.Int? = nil,
                original_position: Swift.Int? = nil,
                commit_id: Swift.String,
                original_commit_id: Swift.String,
                in_reply_to_id: Swift.Int? = nil,
                user: Components.Schemas.simple_hyphen_user,
                body: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                author_association: Components.Schemas.author_hyphen_association,
                _links: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload,
                start_line: Swift.Int? = nil,
                original_start_line: Swift.Int? = nil,
                start_side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.start_sidePayload? = nil,
                line: Swift.Int? = nil,
                original_line: Swift.Int? = nil,
                side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.sidePayload? = nil,
                subject_type: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.subject_typePayload? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil
            ) {
                self.url = url
                self.pull_request_review_id = pull_request_review_id
                self.id = id
                self.node_id = node_id
                self.diff_hunk = diff_hunk
                self.path = path
                self.position = position
                self.original_position = original_position
                self.commit_id = commit_id
                self.original_commit_id = original_commit_id
                self.in_reply_to_id = in_reply_to_id
                self.user = user
                self.body = body
                self.created_at = created_at
                self.updated_at = updated_at
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self.author_association = author_association
                self._links = _links
                self.start_line = start_line
                self.original_start_line = original_start_line
                self.start_side = start_side
                self.line = line
                self.original_line = original_line
                self.side = side
                self.subject_type = subject_type
                self.reactions = reactions
                self.body_html = body_html
                self.body_text = body_text
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case pull_request_review_id
                case id
                case node_id
                case diff_hunk
                case path
                case position
                case original_position
                case commit_id
                case original_commit_id
                case in_reply_to_id
                case user
                case body
                case created_at
                case updated_at
                case html_url
                case pull_request_url
                case author_association
                case _links
                case start_line
                case original_start_line
                case start_side
                case line
                case original_line
                case side
                case subject_type
                case reactions
                case body_html
                case body_text
            }
        }
        /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request`.
        public struct pull_hyphen_request: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/diff_url`.
            public var diff_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/patch_url`.
            public var patch_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments_url`.
            public var review_comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comment_url`.
            public var review_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/statuses_url`.
            public var statuses_url: Swift.String
            /// Number uniquely identifying the pull request within its repository.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/number`.
            public var number: Swift.Int
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            public var state: Components.Schemas.pull_hyphen_request.statePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/locked`.
            public var locked: Swift.Bool
            /// The title of the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/user`.
            public var user: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/pull-request/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload`.
            public struct labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/id`.
                public var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/node_id`.
                public var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/color`.
                public var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/labelsPayload/default`.
                public var _default: Swift.Bool
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                public init(
                    id: Swift.Int64,
                    node_id: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String? = nil,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            public typealias labelsPayload = [Components.Schemas.pull_hyphen_request.labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            public var labels: Components.Schemas.pull_hyphen_request.labelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/milestone`.
            public var milestone: Components.Schemas.nullable_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/pull-request/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_at`.
            public var merged_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merge_commit_sha`.
            public var merge_commit_sha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignees`.
            public var assignees: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_reviewers`.
            public var requested_reviewers: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_teams`.
            public var requested_teams: [Components.Schemas.team_hyphen_simple]?
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            public struct headPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/head/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request/head/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                public var user: Components.Schemas.simple_hyphen_user
                /// Creates a new `headPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.simple_hyphen_user
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            public var head: Components.Schemas.pull_hyphen_request.headPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            public struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/base/label`.
                public var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/ref`.
                public var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                public var repo: Components.Schemas.repository
                /// - Remark: Generated from `#/components/schemas/pull-request/base/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                public var user: Components.Schemas.simple_hyphen_user
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                public init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.repository,
                    sha: Swift.String,
                    user: Components.Schemas.simple_hyphen_user
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            public var base: Components.Schemas.pull_hyphen_request.basePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/comments`.
                public var comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/commits`.
                public var commits: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/statuses`.
                public var statuses: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/html`.
                public var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/issue`.
                public var issue: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comments`.
                public var review_comments: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comment`.
                public var review_comment: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/self`.
                public var _self: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - review_comments:
                ///   - review_comment:
                ///   - _self:
                public init(
                    comments: Components.Schemas.link,
                    commits: Components.Schemas.link,
                    statuses: Components.Schemas.link,
                    html: Components.Schemas.link,
                    issue: Components.Schemas.link,
                    review_comments: Components.Schemas.link,
                    review_comment: Components.Schemas.link,
                    _self: Components.Schemas.link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.review_comments = review_comments
                    self.review_comment = review_comment
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case review_comments
                    case review_comment
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            public var _links: Components.Schemas.pull_hyphen_request._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/pull-request/auto_merge`.
            public var auto_merge: Components.Schemas.auto_hyphen_merge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/draft`.
            public var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged`.
            public var merged: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable`.
            public var mergeable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/rebaseable`.
            public var rebaseable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable_state`.
            public var mergeable_state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_by`.
            public var merged_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/pull-request/comments`.
            public var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments`.
            public var review_comments: Swift.Int
            /// Indicates whether maintainers can modify the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/maintainer_can_modify`.
            public var maintainer_can_modify: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request/commits`.
            public var commits: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request/additions`.
            public var additions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request/deletions`.
            public var deletions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request/changed_files`.
            public var changed_files: Swift.Int
            /// Creates a new `pull_hyphen_request`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - html_url:
            ///   - diff_url:
            ///   - patch_url:
            ///   - issue_url:
            ///   - commits_url:
            ///   - review_comments_url:
            ///   - review_comment_url:
            ///   - comments_url:
            ///   - statuses_url:
            ///   - number: Number uniquely identifying the pull request within its repository.
            ///   - state: State of this Pull Request. Either `open` or `closed`.
            ///   - locked:
            ///   - title: The title of the pull request.
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - active_lock_reason:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - merged_at:
            ///   - merge_commit_sha:
            ///   - assignee:
            ///   - assignees:
            ///   - requested_reviewers:
            ///   - requested_teams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - author_association:
            ///   - auto_merge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            ///   - merged:
            ///   - mergeable:
            ///   - rebaseable:
            ///   - mergeable_state:
            ///   - merged_by:
            ///   - comments:
            ///   - review_comments:
            ///   - maintainer_can_modify: Indicates whether maintainers can modify the pull request.
            ///   - commits:
            ///   - additions:
            ///   - deletions:
            ///   - changed_files:
            public init(
                url: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                html_url: Swift.String,
                diff_url: Swift.String,
                patch_url: Swift.String,
                issue_url: Swift.String,
                commits_url: Swift.String,
                review_comments_url: Swift.String,
                review_comment_url: Swift.String,
                comments_url: Swift.String,
                statuses_url: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.pull_hyphen_request.statePayload,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.simple_hyphen_user,
                body: Swift.String? = nil,
                labels: Components.Schemas.pull_hyphen_request.labelsPayload,
                milestone: Components.Schemas.nullable_hyphen_milestone? = nil,
                active_lock_reason: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                merged_at: Foundation.Date? = nil,
                merge_commit_sha: Swift.String? = nil,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                assignees: [Components.Schemas.simple_hyphen_user]? = nil,
                requested_reviewers: [Components.Schemas.simple_hyphen_user]? = nil,
                requested_teams: [Components.Schemas.team_hyphen_simple]? = nil,
                head: Components.Schemas.pull_hyphen_request.headPayload,
                base: Components.Schemas.pull_hyphen_request.basePayload,
                _links: Components.Schemas.pull_hyphen_request._linksPayload,
                author_association: Components.Schemas.author_hyphen_association,
                auto_merge: Components.Schemas.auto_hyphen_merge? = nil,
                draft: Swift.Bool? = nil,
                merged: Swift.Bool,
                mergeable: Swift.Bool? = nil,
                rebaseable: Swift.Bool? = nil,
                mergeable_state: Swift.String,
                merged_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                comments: Swift.Int,
                review_comments: Swift.Int,
                maintainer_can_modify: Swift.Bool,
                commits: Swift.Int,
                additions: Swift.Int,
                deletions: Swift.Int,
                changed_files: Swift.Int
            ) {
                self.url = url
                self.id = id
                self.node_id = node_id
                self.html_url = html_url
                self.diff_url = diff_url
                self.patch_url = patch_url
                self.issue_url = issue_url
                self.commits_url = commits_url
                self.review_comments_url = review_comments_url
                self.review_comment_url = review_comment_url
                self.comments_url = comments_url
                self.statuses_url = statuses_url
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.active_lock_reason = active_lock_reason
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.merged_at = merged_at
                self.merge_commit_sha = merge_commit_sha
                self.assignee = assignee
                self.assignees = assignees
                self.requested_reviewers = requested_reviewers
                self.requested_teams = requested_teams
                self.head = head
                self.base = base
                self._links = _links
                self.author_association = author_association
                self.auto_merge = auto_merge
                self.draft = draft
                self.merged = merged
                self.mergeable = mergeable
                self.rebaseable = rebaseable
                self.mergeable_state = mergeable_state
                self.merged_by = merged_by
                self.comments = comments
                self.review_comments = review_comments
                self.maintainer_can_modify = maintainer_can_modify
                self.commits = commits
                self.additions = additions
                self.deletions = deletions
                self.changed_files = changed_files
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case node_id
                case html_url
                case diff_url
                case patch_url
                case issue_url
                case commits_url
                case review_comments_url
                case review_comment_url
                case comments_url
                case statuses_url
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case active_lock_reason
                case created_at
                case updated_at
                case closed_at
                case merged_at
                case merge_commit_sha
                case assignee
                case assignees
                case requested_reviewers
                case requested_teams
                case head
                case base
                case _links
                case author_association
                case auto_merge
                case draft
                case merged
                case mergeable
                case rebaseable
                case mergeable_state
                case merged_by
                case comments
                case review_comments
                case maintainer_can_modify
                case commits
                case additions
                case deletions
                case changed_files
            }
        }
        /// Pull Request Merge Result
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-merge-result`.
        public struct pull_hyphen_request_hyphen_merge_hyphen_result: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-merge-result/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-merge-result/merged`.
            public var merged: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request-merge-result/message`.
            public var message: Swift.String
            /// Creates a new `pull_hyphen_request_hyphen_merge_hyphen_result`.
            ///
            /// - Parameters:
            ///   - sha:
            ///   - merged:
            ///   - message:
            public init(
                sha: Swift.String,
                merged: Swift.Bool,
                message: Swift.String
            ) {
                self.sha = sha
                self.merged = merged
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case sha
                case merged
                case message
            }
        }
        /// Pull Request Review Request
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review-request`.
        public struct pull_hyphen_request_hyphen_review_hyphen_request: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-review-request/users`.
            public var users: [Components.Schemas.simple_hyphen_user]
            /// - Remark: Generated from `#/components/schemas/pull-request-review-request/teams`.
            public var teams: [Components.Schemas.team]
            /// Creates a new `pull_hyphen_request_hyphen_review_hyphen_request`.
            ///
            /// - Parameters:
            ///   - users:
            ///   - teams:
            public init(
                users: [Components.Schemas.simple_hyphen_user],
                teams: [Components.Schemas.team]
            ) {
                self.users = users
                self.teams = teams
            }
            public enum CodingKeys: String, CodingKey {
                case users
                case teams
            }
        }
        /// Pull Request Reviews are reviews on pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review`.
        public struct pull_hyphen_request_hyphen_review: Codable, Hashable, Sendable {
            /// Unique identifier of the review
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request-review/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The text of the review.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/pull_request_url`.
            public var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html`.
                public struct htmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html/href`.
                    public var href: Swift.String
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html`.
                public var html: Components.Schemas.pull_hyphen_request_hyphen_review._linksPayload.htmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request`.
                public struct pull_requestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request/href`.
                    public var href: Swift.String
                    /// Creates a new `pull_requestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request`.
                public var pull_request: Components.Schemas.pull_hyphen_request_hyphen_review._linksPayload.pull_requestPayload
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - html:
                ///   - pull_request:
                public init(
                    html: Components.Schemas.pull_hyphen_request_hyphen_review._linksPayload.htmlPayload,
                    pull_request: Components.Schemas.pull_hyphen_request_hyphen_review._linksPayload.pull_requestPayload
                ) {
                    self.html = html
                    self.pull_request = pull_request
                }
                public enum CodingKeys: String, CodingKey {
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review/_links`.
            public var _links: Components.Schemas.pull_hyphen_request_hyphen_review._linksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-review/submitted_at`.
            public var submitted_at: Foundation.Date?
            /// A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// Creates a new `pull_hyphen_request_hyphen_review`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the review
            ///   - node_id:
            ///   - user:
            ///   - body: The text of the review.
            ///   - state:
            ///   - html_url:
            ///   - pull_request_url:
            ///   - _links:
            ///   - submitted_at:
            ///   - commit_id: A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
            ///   - body_html:
            ///   - body_text:
            ///   - author_association:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body: Swift.String,
                state: Swift.String,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                _links: Components.Schemas.pull_hyphen_request_hyphen_review._linksPayload,
                submitted_at: Foundation.Date? = nil,
                commit_id: Swift.String? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                author_association: Components.Schemas.author_hyphen_association
            ) {
                self.id = id
                self.node_id = node_id
                self.user = user
                self.body = body
                self.state = state
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self._links = _links
                self.submitted_at = submitted_at
                self.commit_id = commit_id
                self.body_html = body_html
                self.body_text = body_text
                self.author_association = author_association
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case user
                case body
                case state
                case html_url
                case pull_request_url
                case _links
                case submitted_at
                case commit_id
                case body_html
                case body_text
                case author_association
            }
        }
        /// Legacy Review Comment
        ///
        /// - Remark: Generated from `#/components/schemas/review-comment`.
        public struct review_hyphen_comment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-comment/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/pull_request_review_id`.
            public var pull_request_review_id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/review-comment/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/review-comment/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/diff_hunk`.
            public var diff_hunk: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/position`.
            public var position: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/review-comment/original_position`.
            public var original_position: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-comment/commit_id`.
            public var commit_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/original_commit_id`.
            public var original_commit_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/in_reply_to_id`.
            public var in_reply_to_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/review-comment/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/review-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/review-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/review-comment/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/pull_request_url`.
            public var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/review-comment/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/review-comment/_links/self`.
                public var _self: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/review-comment/_links/html`.
                public var html: Components.Schemas.link
                /// - Remark: Generated from `#/components/schemas/review-comment/_links/pull_request`.
                public var pull_request: Components.Schemas.link
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - _self:
                ///   - html:
                ///   - pull_request:
                public init(
                    _self: Components.Schemas.link,
                    html: Components.Schemas.link,
                    pull_request: Components.Schemas.link
                ) {
                    self._self = _self
                    self.html = html
                    self.pull_request = pull_request
                }
                public enum CodingKeys: String, CodingKey {
                    case _self = "self"
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/review-comment/_links`.
            public var _links: Components.Schemas.review_hyphen_comment._linksPayload
            /// - Remark: Generated from `#/components/schemas/review-comment/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-comment/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/side`.
            @frozen public enum sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/side`.
            public var side: Components.Schemas.review_hyphen_comment.sidePayload?
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/start_side`.
            @frozen public enum start_sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/start_side`.
            public var start_side: Components.Schemas.review_hyphen_comment.start_sidePayload?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/line`.
            public var line: Swift.Int?
            /// The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/original_line`.
            public var original_line: Swift.Int?
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/start_line`.
            public var start_line: Swift.Int?
            /// The original first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/review-comment/original_start_line`.
            public var original_start_line: Swift.Int?
            /// Creates a new `review_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - pull_request_review_id:
            ///   - id:
            ///   - node_id:
            ///   - diff_hunk:
            ///   - path:
            ///   - position:
            ///   - original_position:
            ///   - commit_id:
            ///   - original_commit_id:
            ///   - in_reply_to_id:
            ///   - user:
            ///   - body:
            ///   - created_at:
            ///   - updated_at:
            ///   - html_url:
            ///   - pull_request_url:
            ///   - author_association:
            ///   - _links:
            ///   - body_text:
            ///   - body_html:
            ///   - reactions:
            ///   - side: The side of the first line of the range for a multi-line comment.
            ///   - start_side: The side of the first line of the range for a multi-line comment.
            ///   - line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - original_line: The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - start_line: The first line of the range for a multi-line comment.
            ///   - original_start_line: The original first line of the range for a multi-line comment.
            public init(
                url: Swift.String,
                pull_request_review_id: Swift.Int64? = nil,
                id: Swift.Int64,
                node_id: Swift.String,
                diff_hunk: Swift.String,
                path: Swift.String,
                position: Swift.Int? = nil,
                original_position: Swift.Int,
                commit_id: Swift.String,
                original_commit_id: Swift.String,
                in_reply_to_id: Swift.Int? = nil,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                author_association: Components.Schemas.author_hyphen_association,
                _links: Components.Schemas.review_hyphen_comment._linksPayload,
                body_text: Swift.String? = nil,
                body_html: Swift.String? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil,
                side: Components.Schemas.review_hyphen_comment.sidePayload? = nil,
                start_side: Components.Schemas.review_hyphen_comment.start_sidePayload? = nil,
                line: Swift.Int? = nil,
                original_line: Swift.Int? = nil,
                start_line: Swift.Int? = nil,
                original_start_line: Swift.Int? = nil
            ) {
                self.url = url
                self.pull_request_review_id = pull_request_review_id
                self.id = id
                self.node_id = node_id
                self.diff_hunk = diff_hunk
                self.path = path
                self.position = position
                self.original_position = original_position
                self.commit_id = commit_id
                self.original_commit_id = original_commit_id
                self.in_reply_to_id = in_reply_to_id
                self.user = user
                self.body = body
                self.created_at = created_at
                self.updated_at = updated_at
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self.author_association = author_association
                self._links = _links
                self.body_text = body_text
                self.body_html = body_html
                self.reactions = reactions
                self.side = side
                self.start_side = start_side
                self.line = line
                self.original_line = original_line
                self.start_line = start_line
                self.original_start_line = original_start_line
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case pull_request_review_id
                case id
                case node_id
                case diff_hunk
                case path
                case position
                case original_position
                case commit_id
                case original_commit_id
                case in_reply_to_id
                case user
                case body
                case created_at
                case updated_at
                case html_url
                case pull_request_url
                case author_association
                case _links
                case body_text
                case body_html
                case reactions
                case side
                case start_side
                case line
                case original_line
                case start_line
                case original_start_line
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        public typealias since = Foundation.Date
        /// The unique identifier of the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-id`.
        public typealias comment_hyphen_id = Swift.Int64
        /// The property to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/sort`.
        @frozen public enum sort: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The number that identifies the pull request.
        ///
        /// - Remark: Generated from `#/components/parameters/pull-number`.
        public typealias pull_hyphen_number = Swift.Int
        /// The unique identifier of the review.
        ///
        /// - Remark: Generated from `#/components/parameters/review-id`.
        public typealias review_hyphen_id = Swift.Int
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct validation_failed_simple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error_hyphen_simple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error_hyphen_simple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed_simple.Body) {
                self.body = body
            }
        }
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
        public struct unacceptable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/unacceptable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/unacceptable/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.unacceptable.Body
            /// Creates a new `unacceptable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.unacceptable.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List pull requests
    ///
    /// Lists pull requests in a specified repository.
    ///
    /// Draft pull requests are available in public repositories with GitHub
    /// Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
    /// plans, and in public and private repositories with GitHub Team and GitHub Enterprise
    /// Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
    /// in the GitHub Help documentation.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)`.
    public enum pulls_sol_list {
        public static let id: Swift.String = "pulls/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.pulls_sol_list.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Either `open`, `closed`, or `all` to filter by state.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/state`.
                public var state: Operations.pulls_sol_list.Input.Query.statePayload?
                /// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/head`.
                public var head: Swift.String?
                /// Filter pulls by base branch name. Example: `gh-pages`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/base`.
                public var base: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case popularity = "popularity"
                    case long_hyphen_running = "long-running"
                }
                /// What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/sort`.
                public var sort: Operations.pulls_sol_list.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/direction`.
                public var direction: Operations.pulls_sol_list.Input.Query.directionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: Either `open`, `closed`, or `all` to filter by state.
                ///   - head: Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
                ///   - base: Filter pulls by base branch name. Example: `gh-pages`.
                ///   - sort: What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
                ///   - direction: The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    state: Operations.pulls_sol_list.Input.Query.statePayload? = nil,
                    head: Swift.String? = nil,
                    base: Swift.String? = nil,
                    sort: Operations.pulls_sol_list.Input.Query.sortPayload? = nil,
                    direction: Operations.pulls_sol_list.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.state = state
                    self.head = head
                    self.base = base
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_sol_list.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list.Input.Path,
                query: Operations.pulls_sol_list.Input.Query = .init(),
                headers: Operations.pulls_sol_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_hyphen_request_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.pull_hyphen_request_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/get(pulls/list)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/post(pulls/create)`.
    public enum pulls_sol_create {
        public static let id: Swift.String = "pulls/create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.pulls_sol_create.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_create.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the new pull request. Required unless `issue` is specified.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/head`.
                    public var head: Swift.String
                    /// The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/head_repo`.
                    public var head_repo: Swift.String?
                    /// The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/base`.
                    public var base: Swift.String
                    /// The contents of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/body`.
                    public var body: Swift.String?
                    /// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/maintainer_can_modify`.
                    public var maintainer_can_modify: Swift.Bool?
                    /// Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/draft`.
                    public var draft: Swift.Bool?
                    /// An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/json/issue`.
                    public var issue: Swift.Int64?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the new pull request. Required unless `issue` is specified.
                    ///   - head: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
                    ///   - head_repo: The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
                    ///   - base: The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
                    ///   - body: The contents of the pull request.
                    ///   - maintainer_can_modify: Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    ///   - draft: Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
                    ///   - issue: An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
                    public init(
                        title: Swift.String? = nil,
                        head: Swift.String,
                        head_repo: Swift.String? = nil,
                        base: Swift.String,
                        body: Swift.String? = nil,
                        maintainer_can_modify: Swift.Bool? = nil,
                        draft: Swift.Bool? = nil,
                        issue: Swift.Int64? = nil
                    ) {
                        self.title = title
                        self.head = head
                        self.head_repo = head_repo
                        self.base = base
                        self.body = body
                        self.maintainer_can_modify = maintainer_can_modify
                        self.draft = draft
                        self.issue = issue
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case head
                        case head_repo
                        case base
                        case body
                        case maintainer_can_modify
                        case draft
                        case issue
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_create.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_create.Input.Path,
                headers: Operations.pulls_sol_create.Input.Headers = .init(),
                body: Operations.pulls_sol_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_create.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_create.Output.Created.Headers = .init(),
                    body: Operations.pulls_sol_create.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/post(pulls/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.pulls_sol_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.pulls_sol_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/post(pulls/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/post(pulls/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List review comments in a repository
    ///
    /// Lists review comments for all pull requests in a repository. By default,
    /// review comments are in ascending order by ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/get(pulls/list-review-comments-for-repo)`.
    public enum pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "pulls/list-review-comments-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case created_at = "created_at"
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query/sort`.
                public var sort: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort results. Ignored without `sort` parameter.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query/direction`.
                public var direction: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Query.directionPayload?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort:
                ///   - direction: The direction to sort results. Ignored without `sort` parameter.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Query.sortPayload? = nil,
                    direction: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Query.directionPayload? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/get(pulls/list-review-comments-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list_hyphen_review_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a review comment for a pull request
    ///
    /// Provides details for a specified review comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/get(pulls/get-review-comment)`.
    public enum pulls_sol_get_hyphen_review_hyphen_comment {
        public static let id: Swift.String = "pulls/get-review-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/GET/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_get_hyphen_review_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_get_hyphen_review_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input.Path,
                headers: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/get(pulls/get-review-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_get_hyphen_review_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_get_hyphen_review_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/get(pulls/get-review-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a review comment for a pull request
    ///
    /// Edits the content of a specified review comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/patch(pulls/update-review-comment)`.
    public enum pulls_sol_update_hyphen_review_hyphen_comment {
        public static let id: Swift.String = "pulls/update-review-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update_hyphen_review_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update_hyphen_review_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The text of the reply to the review comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The text of the reply to the review comment.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Path,
                headers: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Headers = .init(),
                body: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/patch(pulls/update-review-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_update_hyphen_review_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_update_hyphen_review_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a review comment for a pull request
    ///
    /// Deletes a review comment.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/delete(pulls/delete-review-comment)`.
    public enum pulls_sol_delete_hyphen_review_hyphen_comment {
        public static let id: Swift.String = "pulls/delete-review-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/DELETE/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/comments/{comment_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_delete_hyphen_review_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_delete_hyphen_review_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input.Path,
                headers: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/delete(pulls/delete-review-comment)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.pulls_sol_delete_hyphen_review_hyphen_comment.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/comments/{comment_id}/delete(pulls/delete-review-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    /// - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    public enum pulls_sol_get {
        public static let id: Swift.String = "pulls/get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_get.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_get.Input.Path,
                headers: Operations.pulls_sol_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unacceptable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/406`.
            ///
            /// HTTP response code: `406 notAcceptable`.
            case notAcceptable(Components.Responses.unacceptable)
            /// The associated value of the enum case if `self` is `.notAcceptable`.
            ///
            /// - Throws: An error if `self` is not `.notAcceptable`.
            /// - SeeAlso: `.notAcceptable`.
            public var notAcceptable: Components.Responses.unacceptable {
                get throws {
                    switch self {
                    case let .notAcceptable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notAcceptable",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    public enum pulls_sol_update {
        public static let id: Swift.String = "pulls/update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_update.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_update.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The contents of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/body`.
                    public var body: Swift.String?
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    public var state: Operations.pulls_sol_update.Input.Body.jsonPayload.statePayload?
                    /// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/base`.
                    public var base: Swift.String?
                    /// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/maintainer_can_modify`.
                    public var maintainer_can_modify: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the pull request.
                    ///   - body: The contents of the pull request.
                    ///   - state: State of this Pull Request. Either `open` or `closed`.
                    ///   - base: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///   - maintainer_can_modify: Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    public init(
                        title: Swift.String? = nil,
                        body: Swift.String? = nil,
                        state: Operations.pulls_sol_update.Input.Body.jsonPayload.statePayload? = nil,
                        base: Swift.String? = nil,
                        maintainer_can_modify: Swift.Bool? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.state = state
                        self.base = base
                        self.maintainer_can_modify = maintainer_can_modify
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case state
                        case base
                        case maintainer_can_modify
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_update.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_update.Input.Path,
                headers: Operations.pulls_sol_update.Input.Headers = .init(),
                body: Operations.pulls_sol_update.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List review comments on a pull request
    ///
    /// Lists all review comments for a specified pull request. By default, review comments
    /// are in ascending order by ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)`.
    public enum pulls_sol_list_hyphen_review_hyphen_comments {
        public static let id: Swift.String = "pulls/list-review-comments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort`.
                @frozen public enum sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/sort`.
                public var sort: Components.Parameters.sort?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort results. Ignored without `sort` parameter.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/direction`.
                public var direction: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Query.directionPayload?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by.
                ///   - direction: The direction to sort results. Ignored without `sort` parameter.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Components.Parameters.sort? = nil,
                    direction: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Query.directionPayload? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_review_hyphen_comments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_review_hyphen_comments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Path,
                query: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Query = .init(),
                headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/get(pulls/list-review-comments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list_hyphen_review_hyphen_comments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a review comment for a pull request
    ///
    /// Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."
    ///
    /// If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.
    ///
    /// The `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/post(pulls/create-review-comment)`.
    public enum pulls_sol_create_hyphen_review_hyphen_comment {
        public static let id: Swift.String = "pulls/create-review-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create_hyphen_review_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create_hyphen_review_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The text of the review comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/commit_id`.
                    public var commit_id: Swift.String
                    /// The relative path to the file that necessitates a comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/path`.
                    public var path: Swift.String
                    /// **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/position`.
                    @available(*, deprecated)
                    public var position: Swift.Int?
                    /// In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/side`.
                    @frozen public enum sidePayload: String, Codable, Hashable, Sendable {
                        case LEFT = "LEFT"
                        case RIGHT = "RIGHT"
                    }
                    /// In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/side`.
                    public var side: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body.jsonPayload.sidePayload?
                    /// **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/line`.
                    public var line: Swift.Int?
                    /// **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/start_line`.
                    public var start_line: Swift.Int?
                    /// **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/start_side`.
                    @frozen public enum start_sidePayload: String, Codable, Hashable, Sendable {
                        case LEFT = "LEFT"
                        case RIGHT = "RIGHT"
                        case side = "side"
                    }
                    /// **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/start_side`.
                    public var start_side: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body.jsonPayload.start_sidePayload?
                    /// The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/in_reply_to`.
                    public var in_reply_to: Swift.Int?
                    /// The level at which the comment is targeted.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/subject_type`.
                    @frozen public enum subject_typePayload: String, Codable, Hashable, Sendable {
                        case line = "line"
                        case file = "file"
                    }
                    /// The level at which the comment is targeted.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/json/subject_type`.
                    public var subject_type: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body.jsonPayload.subject_typePayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The text of the review comment.
                    ///   - commit_id: The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
                    ///   - path: The relative path to the file that necessitates a comment.
                    ///   - position: **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
                    ///   - side: In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
                    ///   - line: **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
                    ///   - start_line: **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
                    ///   - start_side: **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
                    ///   - in_reply_to: The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
                    ///   - subject_type: The level at which the comment is targeted.
                    public init(
                        body: Swift.String,
                        commit_id: Swift.String,
                        path: Swift.String,
                        position: Swift.Int? = nil,
                        side: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body.jsonPayload.sidePayload? = nil,
                        line: Swift.Int? = nil,
                        start_line: Swift.Int? = nil,
                        start_side: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body.jsonPayload.start_sidePayload? = nil,
                        in_reply_to: Swift.Int? = nil,
                        subject_type: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body.jsonPayload.subject_typePayload? = nil
                    ) {
                        self.body = body
                        self.commit_id = commit_id
                        self.path = path
                        self.position = position
                        self.side = side
                        self.line = line
                        self.start_line = start_line
                        self.start_side = start_side
                        self.in_reply_to = in_reply_to
                        self.subject_type = subject_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                        case commit_id
                        case path
                        case position
                        case side
                        case line
                        case start_line
                        case start_side
                        case in_reply_to
                        case subject_type
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Path,
                headers: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Headers = .init(),
                body: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output.Created.Headers = .init(),
                    body: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/post(pulls/create-review-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.pulls_sol_create_hyphen_review_hyphen_comment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/post(pulls/create-review-comment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/post(pulls/create-review-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a reply for a review comment
    ///
    /// Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/post(pulls/create-reply-for-review-comment)`.
    public enum pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment {
        public static let id: Swift.String = "pulls/create-reply-for-review-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The text of the review comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The text of the review comment.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Path,
                headers: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Headers = .init(),
                body: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output.Created.Headers = .init(),
                    body: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/post(pulls/create-reply-for-review-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.pulls_sol_create_hyphen_reply_hyphen_for_hyphen_review_hyphen_comment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies/post(pulls/create-reply-for-review-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commits on a pull request
    ///
    /// Lists a maximum of 250 commits for a pull request. To receive a complete
    /// commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
    /// endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/commits/get(pulls/list-commits)`.
    public enum pulls_sol_list_hyphen_commits {
        public static let id: Swift.String = "pulls/list-commits"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_list_hyphen_commits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_sol_list_hyphen_commits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_commits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_commits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list_hyphen_commits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list_hyphen_commits.Input.Path,
                query: Operations.pulls_sol_list_hyphen_commits.Input.Query = .init(),
                headers: Operations.pulls_sol_list_hyphen_commits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list_hyphen_commits.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/commits/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.commit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.commit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list_hyphen_commits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list_hyphen_commits.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list_hyphen_commits.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/commits/get(pulls/list-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list_hyphen_commits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list_hyphen_commits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests files
    ///
    /// Lists the files in a specified pull request.
    ///
    /// > [!NOTE]
    /// > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    public enum pulls_sol_list_hyphen_files {
        public static let id: Swift.String = "pulls/list-files"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_list_hyphen_files.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_sol_list_hyphen_files.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_files.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_files.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list_hyphen_files.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list_hyphen_files.Input.Path,
                query: Operations.pulls_sol_list_hyphen_files.Input.Query = .init(),
                headers: Operations.pulls_sol_list_hyphen_files.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list_hyphen_files.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.diff_hyphen_entry])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.diff_hyphen_entry] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list_hyphen_files.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list_hyphen_files.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list_hyphen_files.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list_hyphen_files.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list_hyphen_files.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a pull request has been merged
    ///
    /// Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/merge`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/get(pulls/check-if-merged)`.
    public enum pulls_sol_check_hyphen_if_hyphen_merged {
        public static let id: Swift.String = "pulls/check-if-merged"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_check_hyphen_if_hyphen_merged.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.pulls_sol_check_hyphen_if_hyphen_merged.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if pull request has been merged
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/get(pulls/check-if-merged)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.pulls_sol_check_hyphen_if_hyphen_merged.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.pulls_sol_check_hyphen_if_hyphen_merged.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if pull request has not been merged
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/get(pulls/check-if-merged)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.pulls_sol_check_hyphen_if_hyphen_merged.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.pulls_sol_check_hyphen_if_hyphen_merged.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Merge a pull request
    ///
    /// Merges a pull request into the base branch.
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)`.
    public enum pulls_sol_merge {
        public static let id: Swift.String = "pulls/merge"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_merge.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_merge.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_merge.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_merge.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Title for the automatic commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody/json/commit_title`.
                    public var commit_title: Swift.String?
                    /// Extra detail to append to automatic commit message.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody/json/commit_message`.
                    public var commit_message: Swift.String?
                    /// SHA that pull request head must match to allow merge.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody/json/sha`.
                    public var sha: Swift.String?
                    /// The merge method to use.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody/json/merge_method`.
                    @frozen public enum merge_methodPayload: String, Codable, Hashable, Sendable {
                        case merge = "merge"
                        case squash = "squash"
                        case rebase = "rebase"
                    }
                    /// The merge method to use.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody/json/merge_method`.
                    public var merge_method: Operations.pulls_sol_merge.Input.Body.jsonPayload.merge_methodPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commit_title: Title for the automatic commit message.
                    ///   - commit_message: Extra detail to append to automatic commit message.
                    ///   - sha: SHA that pull request head must match to allow merge.
                    ///   - merge_method: The merge method to use.
                    public init(
                        commit_title: Swift.String? = nil,
                        commit_message: Swift.String? = nil,
                        sha: Swift.String? = nil,
                        merge_method: Operations.pulls_sol_merge.Input.Body.jsonPayload.merge_methodPayload? = nil
                    ) {
                        self.commit_title = commit_title
                        self.commit_message = commit_message
                        self.sha = sha
                        self.merge_method = merge_method
                    }
                    public enum CodingKeys: String, CodingKey {
                        case commit_title
                        case commit_message
                        case sha
                        case merge_method
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_merge.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_merge.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_merge.Input.Path,
                headers: Operations.pulls_sol_merge.Input.Headers = .init(),
                body: Operations.pulls_sol_merge.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_merge_hyphen_result)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_merge_hyphen_result {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_merge.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_merge.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// if merge was successful
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_merge.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_merge.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct MethodNotAllowed: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/405/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/405/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/405/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/405/content/json/documentation_url`.
                        public var documentation_url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        public init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/405/content/application\/json`.
                    case json(Operations.pulls_sol_merge.Output.MethodNotAllowed.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.pulls_sol_merge.Output.MethodNotAllowed.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_merge.Output.MethodNotAllowed.Body
                /// Creates a new `MethodNotAllowed`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_merge.Output.MethodNotAllowed.Body) {
                    self.body = body
                }
            }
            /// Method Not Allowed if merge cannot be performed
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)/responses/405`.
            ///
            /// HTTP response code: `405 methodNotAllowed`.
            case methodNotAllowed(Operations.pulls_sol_merge.Output.MethodNotAllowed)
            /// The associated value of the enum case if `self` is `.methodNotAllowed`.
            ///
            /// - Throws: An error if `self` is not `.methodNotAllowed`.
            /// - SeeAlso: `.methodNotAllowed`.
            public var methodNotAllowed: Operations.pulls_sol_merge.Output.MethodNotAllowed {
                get throws {
                    switch self {
                    case let .methodNotAllowed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "methodNotAllowed",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/409/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/409/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/409/content/json/documentation_url`.
                        public var documentation_url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        public init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/merge/PUT/responses/409/content/application\/json`.
                    case json(Operations.pulls_sol_merge.Output.Conflict.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.pulls_sol_merge.Output.Conflict.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_merge.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_merge.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict if sha was provided and pull request head did not match
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.pulls_sol_merge.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.pulls_sol_merge.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/merge/put(pulls/merge)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all requested reviewers for a pull request
    ///
    /// Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/get(pulls/list-requested-reviewers)`.
    public enum pulls_sol_list_hyphen_requested_hyphen_reviewers {
        public static let id: Swift.String = "pulls/list-requested-reviewers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input.Path,
                headers: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_request)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_request {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/get(pulls/list-requested-reviewers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list_hyphen_requested_hyphen_reviewers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Request reviewers for a pull request
    ///
    /// Requests reviews for a pull request from a given set of users and/or teams.
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/post(pulls/request-reviewers)`.
    public enum pulls_sol_request_hyphen_reviewers {
        public static let id: Swift.String = "pulls/request-reviewers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_request_hyphen_reviewers.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_request_hyphen_reviewers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_request_hyphen_reviewers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_request_hyphen_reviewers.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/requestBody/json/value1`.
                    public struct Value1Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value1Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/requestBody/json/value1`.
                    public var value1: Operations.pulls_sol_request_hyphen_reviewers.Input.Body.jsonPayload.Value1Payload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/requestBody/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Value2Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/requestBody/json/value2`.
                    public var value2: Operations.pulls_sol_request_hyphen_reviewers.Input.Body.jsonPayload.Value2Payload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Operations.pulls_sol_request_hyphen_reviewers.Input.Body.jsonPayload.Value1Payload? = nil,
                        value2: Operations.pulls_sol_request_hyphen_reviewers.Input.Body.jsonPayload.Value2Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1?.encode(to: encoder)
                        try value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_request_hyphen_reviewers.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_request_hyphen_reviewers.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_request_hyphen_reviewers.Input.Path,
                headers: Operations.pulls_sol_request_hyphen_reviewers.Input.Headers = .init(),
                body: Operations.pulls_sol_request_hyphen_reviewers.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_simple)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_simple {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_request_hyphen_reviewers.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_request_hyphen_reviewers.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/post(pulls/request-reviewers)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.pulls_sol_request_hyphen_reviewers.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.pulls_sol_request_hyphen_reviewers.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Unprocessable Entity if user is not a collaborator
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/post(pulls/request-reviewers)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.pulls_sol_request_hyphen_reviewers.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.pulls_sol_request_hyphen_reviewers.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/post(pulls/request-reviewers)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove requested reviewers from a pull request
    ///
    /// Removes review requests from a pull request for a given set of users and/or teams.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/delete(pulls/remove-requested-reviewers)`.
    public enum pulls_sol_remove_hyphen_requested_hyphen_reviewers {
        public static let id: Swift.String = "pulls/remove-requested-reviewers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of user `login`s that will be removed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/requestBody/json/reviewers`.
                    public var reviewers: [Swift.String]
                    /// An array of team `slug`s that will be removed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/requestBody/json/team_reviewers`.
                    public var team_reviewers: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reviewers: An array of user `login`s that will be removed.
                    ///   - team_reviewers: An array of team `slug`s that will be removed.
                    public init(
                        reviewers: [Swift.String],
                        team_reviewers: [Swift.String]? = nil
                    ) {
                        self.reviewers = reviewers
                        self.team_reviewers = team_reviewers
                    }
                    public enum CodingKeys: String, CodingKey {
                        case reviewers
                        case team_reviewers
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Path,
                headers: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Headers = .init(),
                body: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_simple)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_simple {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/delete(pulls/remove-requested-reviewers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_remove_hyphen_requested_hyphen_reviewers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers/delete(pulls/remove-requested-reviewers)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List reviews for a pull request
    ///
    /// Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    public enum pulls_sol_list_hyphen_reviews {
        public static let id: Swift.String = "pulls/list-reviews"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_list_hyphen_reviews.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_sol_list_hyphen_reviews.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_reviews.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_reviews.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list_hyphen_reviews.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list_hyphen_reviews.Input.Path,
                query: Operations.pulls_sol_list_hyphen_reviews.Input.Query = .init(),
                headers: Operations.pulls_sol_list_hyphen_reviews.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list_hyphen_reviews.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.pull_hyphen_request_hyphen_review])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.pull_hyphen_request_hyphen_review] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list_hyphen_reviews.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list_hyphen_reviews.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list_hyphen_reviews.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of reviews returns in chronological order.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list_hyphen_reviews.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list_hyphen_reviews.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a review for a pull request
    ///
    /// Creates a review on a specified pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
    ///
    /// > [!NOTE]
    /// > To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
    ///
    /// The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/post(pulls/create-review)`.
    public enum pulls_sol_create_hyphen_review {
        public static let id: Swift.String = "pulls/create-review"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_create_hyphen_review.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create_hyphen_review.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_create_hyphen_review.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_create_hyphen_review.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commit_id`.
                    public var commit_id: Swift.String?
                    /// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/body`.
                    public var body: Swift.String?
                    /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/event`.
                    @frozen public enum eventPayload: String, Codable, Hashable, Sendable {
                        case APPROVE = "APPROVE"
                        case REQUEST_CHANGES = "REQUEST_CHANGES"
                        case COMMENT = "COMMENT"
                    }
                    /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/event`.
                    public var event: Operations.pulls_sol_create_hyphen_review.Input.Body.jsonPayload.eventPayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload`.
                    public struct commentsPayloadPayload: Codable, Hashable, Sendable {
                        /// The relative path to the file that necessitates a review comment.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload/path`.
                        public var path: Swift.String
                        /// The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload/position`.
                        public var position: Swift.Int?
                        /// Text of the review comment.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload/body`.
                        public var body: Swift.String
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload/line`.
                        public var line: Swift.Int?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload/side`.
                        public var side: Swift.String?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload/start_line`.
                        public var start_line: Swift.Int?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/commentsPayload/start_side`.
                        public var start_side: Swift.String?
                        /// Creates a new `commentsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - path: The relative path to the file that necessitates a review comment.
                        ///   - position: The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
                        ///   - body: Text of the review comment.
                        ///   - line:
                        ///   - side:
                        ///   - start_line:
                        ///   - start_side:
                        public init(
                            path: Swift.String,
                            position: Swift.Int? = nil,
                            body: Swift.String,
                            line: Swift.Int? = nil,
                            side: Swift.String? = nil,
                            start_line: Swift.Int? = nil,
                            start_side: Swift.String? = nil
                        ) {
                            self.path = path
                            self.position = position
                            self.body = body
                            self.line = line
                            self.side = side
                            self.start_line = start_line
                            self.start_side = start_side
                        }
                        public enum CodingKeys: String, CodingKey {
                            case path
                            case position
                            case body
                            case line
                            case side
                            case start_line
                            case start_side
                        }
                    }
                    /// Use the following table to specify the location, destination, and contents of the draft review comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/comments`.
                    public typealias commentsPayload = [Operations.pulls_sol_create_hyphen_review.Input.Body.jsonPayload.commentsPayloadPayload]
                    /// Use the following table to specify the location, destination, and contents of the draft review comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/json/comments`.
                    public var comments: Operations.pulls_sol_create_hyphen_review.Input.Body.jsonPayload.commentsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - commit_id: The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
                    ///   - body: **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
                    ///   - event: The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
                    ///   - comments: Use the following table to specify the location, destination, and contents of the draft review comment.
                    public init(
                        commit_id: Swift.String? = nil,
                        body: Swift.String? = nil,
                        event: Operations.pulls_sol_create_hyphen_review.Input.Body.jsonPayload.eventPayload? = nil,
                        comments: Operations.pulls_sol_create_hyphen_review.Input.Body.jsonPayload.commentsPayload? = nil
                    ) {
                        self.commit_id = commit_id
                        self.body = body
                        self.event = event
                        self.comments = comments
                    }
                    public enum CodingKeys: String, CodingKey {
                        case commit_id
                        case body
                        case event
                        case comments
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_create_hyphen_review.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_create_hyphen_review.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_create_hyphen_review.Input.Path,
                headers: Operations.pulls_sol_create_hyphen_review.Input.Headers = .init(),
                body: Operations.pulls_sol_create_hyphen_review.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_create_hyphen_review.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_create_hyphen_review.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/post(pulls/create-review)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_create_hyphen_review.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_create_hyphen_review.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/post(pulls/create-review)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/post(pulls/create-review)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a review for a pull request
    ///
    /// Retrieves a pull request review by its ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/get(pulls/get-review)`.
    public enum pulls_sol_get_hyphen_review {
        public static let id: Swift.String = "pulls/get-review"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// The unique identifier of the review.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/path/review_id`.
                public var review_id: Components.Parameters.review_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                ///   - review_id: The unique identifier of the review.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number,
                    review_id: Components.Parameters.review_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                    self.review_id = review_id
                }
            }
            public var path: Operations.pulls_sol_get_hyphen_review.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_get_hyphen_review.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_get_hyphen_review.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_get_hyphen_review.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_get_hyphen_review.Input.Path,
                headers: Operations.pulls_sol_get_hyphen_review.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_get_hyphen_review.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_get_hyphen_review.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/get(pulls/get-review)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_get_hyphen_review.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_get_hyphen_review.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/get(pulls/get-review)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a review for a pull request
    ///
    /// Updates the contents of a specified review summary comment.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/put(pulls/update-review)`.
    public enum pulls_sol_update_hyphen_review {
        public static let id: Swift.String = "pulls/update-review"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// The unique identifier of the review.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/path/review_id`.
                public var review_id: Components.Parameters.review_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                ///   - review_id: The unique identifier of the review.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number,
                    review_id: Components.Parameters.review_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                    self.review_id = review_id
                }
            }
            public var path: Operations.pulls_sol_update_hyphen_review.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update_hyphen_review.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update_hyphen_review.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_update_hyphen_review.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The body text of the pull request review.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The body text of the pull request review.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_update_hyphen_review.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_update_hyphen_review.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_update_hyphen_review.Input.Path,
                headers: Operations.pulls_sol_update_hyphen_review.Input.Headers = .init(),
                body: Operations.pulls_sol_update_hyphen_review.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_update_hyphen_review.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_update_hyphen_review.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/put(pulls/update-review)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_update_hyphen_review.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_update_hyphen_review.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/put(pulls/update-review)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a pending review for a pull request
    ///
    /// Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/delete(pulls/delete-pending-review)`.
    public enum pulls_sol_delete_hyphen_pending_hyphen_review {
        public static let id: Swift.String = "pulls/delete-pending-review"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// The unique identifier of the review.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/path/review_id`.
                public var review_id: Components.Parameters.review_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                ///   - review_id: The unique identifier of the review.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number,
                    review_id: Components.Parameters.review_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                    self.review_id = review_id
                }
            }
            public var path: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_delete_hyphen_pending_hyphen_review.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_delete_hyphen_pending_hyphen_review.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input.Path,
                headers: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/delete(pulls/delete-pending-review)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_delete_hyphen_pending_hyphen_review.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/delete(pulls/delete-pending-review)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/delete(pulls/delete-pending-review)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List comments for a pull request review
    ///
    /// Lists comments for a specific pull request review.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/get(pulls/list-comments-for-review)`.
    public enum pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review {
        public static let id: Swift.String = "pulls/list-comments-for-review"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// The unique identifier of the review.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/path/review_id`.
                public var review_id: Components.Parameters.review_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                ///   - review_id: The unique identifier of the review.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number,
                    review_id: Components.Parameters.review_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                    self.review_id = review_id
                }
            }
            public var path: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Path,
                query: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Query = .init(),
                headers: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.review_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.review_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output.Ok.Headers = .init(),
                    body: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/get(pulls/list-comments-for-review)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_list_hyphen_comments_hyphen_for_hyphen_review.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments/get(pulls/list-comments-for-review)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Dismiss a review for a pull request
    ///
    /// Dismisses a specified review on a pull request.
    ///
    /// > [!NOTE]
    /// > To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/put(pulls/dismiss-review)`.
    public enum pulls_sol_dismiss_hyphen_review {
        public static let id: Swift.String = "pulls/dismiss-review"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// The unique identifier of the review.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/path/review_id`.
                public var review_id: Components.Parameters.review_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                ///   - review_id: The unique identifier of the review.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number,
                    review_id: Components.Parameters.review_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                    self.review_id = review_id
                }
            }
            public var path: Operations.pulls_sol_dismiss_hyphen_review.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_dismiss_hyphen_review.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_dismiss_hyphen_review.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_dismiss_hyphen_review.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The message for the pull request review dismissal
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/requestBody/json/message`.
                    public var message: Swift.String
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/requestBody/json/event`.
                    @frozen public enum eventPayload: String, Codable, Hashable, Sendable {
                        case DISMISS = "DISMISS"
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/requestBody/json/event`.
                    public var event: Operations.pulls_sol_dismiss_hyphen_review.Input.Body.jsonPayload.eventPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - message: The message for the pull request review dismissal
                    ///   - event:
                    public init(
                        message: Swift.String,
                        event: Operations.pulls_sol_dismiss_hyphen_review.Input.Body.jsonPayload.eventPayload? = nil
                    ) {
                        self.message = message
                        self.event = event
                    }
                    public enum CodingKeys: String, CodingKey {
                        case message
                        case event
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_dismiss_hyphen_review.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_dismiss_hyphen_review.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_dismiss_hyphen_review.Input.Path,
                headers: Operations.pulls_sol_dismiss_hyphen_review.Input.Headers = .init(),
                body: Operations.pulls_sol_dismiss_hyphen_review.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_dismiss_hyphen_review.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_dismiss_hyphen_review.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/put(pulls/dismiss-review)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_dismiss_hyphen_review.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_dismiss_hyphen_review.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/put(pulls/dismiss-review)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals/put(pulls/dismiss-review)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Submit a review for a pull request
    ///
    /// Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/post(pulls/submit-review)`.
    public enum pulls_sol_submit_hyphen_review {
        public static let id: Swift.String = "pulls/submit-review"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// The unique identifier of the review.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/path/review_id`.
                public var review_id: Components.Parameters.review_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                ///   - review_id: The unique identifier of the review.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number,
                    review_id: Components.Parameters.review_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                    self.review_id = review_id
                }
            }
            public var path: Operations.pulls_sol_submit_hyphen_review.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_submit_hyphen_review.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_submit_hyphen_review.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_submit_hyphen_review.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The body text of the pull request review
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/requestBody/json/body`.
                    public var body: Swift.String?
                    /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/requestBody/json/event`.
                    @frozen public enum eventPayload: String, Codable, Hashable, Sendable {
                        case APPROVE = "APPROVE"
                        case REQUEST_CHANGES = "REQUEST_CHANGES"
                        case COMMENT = "COMMENT"
                    }
                    /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/requestBody/json/event`.
                    public var event: Operations.pulls_sol_submit_hyphen_review.Input.Body.jsonPayload.eventPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The body text of the pull request review
                    ///   - event: The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
                    public init(
                        body: Swift.String? = nil,
                        event: Operations.pulls_sol_submit_hyphen_review.Input.Body.jsonPayload.eventPayload
                    ) {
                        self.body = body
                        self.event = event
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                        case event
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_submit_hyphen_review.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_submit_hyphen_review.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_submit_hyphen_review.Input.Path,
                headers: Operations.pulls_sol_submit_hyphen_review.Input.Headers = .init(),
                body: Operations.pulls_sol_submit_hyphen_review.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.pull_hyphen_request_hyphen_review)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.pull_hyphen_request_hyphen_review {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_submit_hyphen_review.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_submit_hyphen_review.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/post(pulls/submit-review)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.pulls_sol_submit_hyphen_review.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.pulls_sol_submit_hyphen_review.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/post(pulls/submit-review)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/post(pulls/submit-review)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events/post(pulls/submit-review)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a pull request branch
    ///
    /// Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
    /// Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/update-branch/put(pulls/update-branch)`.
    public enum pulls_sol_update_hyphen_branch {
        public static let id: Swift.String = "pulls/update-branch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.pulls_sol_update_hyphen_branch.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update_hyphen_branch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.pulls_sol_update_hyphen_branch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.pulls_sol_update_hyphen_branch.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/requestBody/json/expected_head_sha`.
                    public var expected_head_sha: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - expected_head_sha: The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
                    public init(expected_head_sha: Swift.String? = nil) {
                        self.expected_head_sha = expected_head_sha
                    }
                    public enum CodingKeys: String, CodingKey {
                        case expected_head_sha
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/requestBody/content/application\/json`.
                case json(Operations.pulls_sol_update_hyphen_branch.Input.Body.jsonPayload)
            }
            public var body: Operations.pulls_sol_update_hyphen_branch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.pulls_sol_update_hyphen_branch.Input.Path,
                headers: Operations.pulls_sol_update_hyphen_branch.Input.Headers = .init(),
                body: Operations.pulls_sol_update_hyphen_branch.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/responses/202/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/responses/202/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/responses/202/content/json/url`.
                        public var url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - url:
                        public init(
                            message: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/update-branch/PUT/responses/202/content/application\/json`.
                    case json(Operations.pulls_sol_update_hyphen_branch.Output.Accepted.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.pulls_sol_update_hyphen_branch.Output.Accepted.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.pulls_sol_update_hyphen_branch.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.pulls_sol_update_hyphen_branch.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/update-branch/put(pulls/update-branch)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.pulls_sol_update_hyphen_branch.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.pulls_sol_update_hyphen_branch.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/update-branch/put(pulls/update-branch)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/update-branch/put(pulls/update-branch)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
