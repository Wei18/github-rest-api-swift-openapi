// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List codespaces for the organization
    ///
    /// Lists the codespaces associated to a specified organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)`.
    func codespaces_sol_list_hyphen_in_hyphen_organization(_ input: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input) async throws -> Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output
    /// Manage access control for organization codespaces
    ///
    /// Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/access`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)`.
    @available(*, deprecated)
    func codespaces_sol_set_hyphen_codespaces_hyphen_access(_ input: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input) async throws -> Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Output
    /// Add users to Codespaces access for an organization
    ///
    /// Codespaces for the specified users will be billed to the organization.
    ///
    /// To use this endpoint, the access settings for the organization must be set to `selected_members`.
    /// For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/codespaces/access/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)`.
    @available(*, deprecated)
    func codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users(_ input: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input) async throws -> Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Output
    /// Remove users from Codespaces access for an organization
    ///
    /// Codespaces for the specified users will no longer be billed to the organization.
    ///
    /// To use this endpoint, the access settings for the organization must be set to `selected_members`.
    /// For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/access/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)`.
    @available(*, deprecated)
    func codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users(_ input: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input) async throws -> Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Output
    /// List organization secrets
    ///
    /// Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/get(codespaces/list-org-secrets)`.
    func codespaces_sol_list_hyphen_org_hyphen_secrets(_ input: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input) async throws -> Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output
    /// Get an organization public key
    ///
    /// Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/public-key/get(codespaces/get-org-public-key)`.
    func codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key(_ input: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input) async throws -> Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Output
    /// Get an organization secret
    ///
    /// Gets an organization development environment secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/get(codespaces/get-org-secret)`.
    func codespaces_sol_get_hyphen_org_hyphen_secret(_ input: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input) async throws -> Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-org-secret)`.
    func codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(_ input: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input) async throws -> Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output
    /// Delete an organization secret
    ///
    /// Deletes an organization development environment secret using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/delete(codespaces/delete-org-secret)`.
    func codespaces_sol_delete_hyphen_org_hyphen_secret(_ input: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input) async throws -> Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Output
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-selected-repos-for-org-secret)`.
    func codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(_ input: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input) async throws -> Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization development environment secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-selected-repos-for-org-secret)`.
    func codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(_ input: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input) async throws -> Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-selected-repo-to-org-secret)`.
    func codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(_ input: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input) async throws -> Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization development environment secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-selected-repo-from-org-secret)`.
    func codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(_ input: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input) async throws -> Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output
    /// List codespaces for a user in organization
    ///
    /// Lists the codespaces that a member of an organization has for repositories in that organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/codespaces`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)`.
    func codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org(_ input: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input) async throws -> Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output
    /// Delete a codespace from the organization
    ///
    /// Deletes a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)`.
    func codespaces_sol_delete_hyphen_from_hyphen_organization(_ input: Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input) async throws -> Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Output
    /// Stop a codespace for an organization user
    ///
    /// Stops a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)`.
    func codespaces_sol_stop_hyphen_in_hyphen_organization(_ input: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input) async throws -> Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Output
    /// List codespaces in a repository for the authenticated user
    ///
    /// Lists the codespaces associated to a specified repository and the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)`.
    func codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create a codespace in a repository
    ///
    /// Creates a codespace owned by the authenticated user in the specified repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)`.
    func codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List devcontainer configurations in a repository for the authenticated user
    ///
    /// Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
    /// specify launchpoint configurations for codespaces created within the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/devcontainers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)`.
    func codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List available machine types for a repository
    ///
    /// List the machine types available for a given repository based on its configuration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/machines`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)`.
    func codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get default attributes for a codespace
    ///
    /// Gets the default attributes for codespaces created by the user with the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/new`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/new/get(codespaces/pre-flight-with-repo-for-authenticated-user)`.
    func codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Check if permissions defined by a devcontainer have been accepted by the authenticated user
    ///
    /// Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/permissions_check`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)`.
    func codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer(_ input: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input) async throws -> Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Output
    /// List repository secrets
    ///
    /// Lists all development environment secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/get(codespaces/list-repo-secrets)`.
    func codespaces_sol_list_hyphen_repo_hyphen_secrets(_ input: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input) async throws -> Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/public-key/get(codespaces/get-repo-public-key)`.
    func codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key(_ input: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input) async throws -> Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output
    /// Get a repository secret
    ///
    /// Gets a single repository development environment secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/get(codespaces/get-repo-secret)`.
    func codespaces_sol_get_hyphen_repo_hyphen_secret(_ input: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input) async throws -> Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Output
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-repo-secret)`.
    func codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(_ input: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input) async throws -> Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output
    /// Delete a repository secret
    ///
    /// Deletes a development environment secret in a repository using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/delete(codespaces/delete-repo-secret)`.
    func codespaces_sol_delete_hyphen_repo_hyphen_secret(_ input: Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Input) async throws -> Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Output
    /// Create a codespace from a pull request
    ///
    /// Creates a codespace owned by the authenticated user for the specified pull request.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)`.
    func codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List codespaces for the authenticated user
    ///
    /// Lists the authenticated user's codespaces.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces`.
    /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)`.
    func codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create a codespace for the authenticated user
    ///
    /// Creates a new codespace, owned by the authenticated user.
    ///
    /// This endpoint requires either a `repository_id` OR a `pull_request` but not both.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces`.
    /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)`.
    func codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List secrets for the authenticated user
    ///
    /// Lists all development environment secrets available for a user's codespaces without revealing their
    /// encrypted values.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/get(codespaces/list-secrets-for-authenticated-user)`.
    func codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get public key for the authenticated user
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/public-key/get(codespaces/get-public-key-for-authenticated-user)`.
    func codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get a secret for the authenticated user
    ///
    /// Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/get(codespaces/get-secret-for-authenticated-user)`.
    func codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create or update a secret for the authenticated user
    ///
    /// Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-secret-for-authenticated-user)`.
    func codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete a secret for the authenticated user
    ///
    /// Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/delete(codespaces/delete-secret-for-authenticated-user)`.
    func codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List selected repositories for a user secret
    ///
    /// List the repositories that have been granted the ability to use a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)`.
    func codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Set selected repositories for a user secret
    ///
    /// Select the repositories that will use a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)`.
    func codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Add a selected repository to a user secret
    ///
    /// Adds a repository to the selected repositories for a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)`.
    func codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Remove a selected repository from a user secret
    ///
    /// Removes a repository from the selected repositories for a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)`.
    func codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get a codespace for the authenticated user
    ///
    /// Gets information about a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)`.
    func codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Update a codespace for the authenticated user
    ///
    /// Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
    ///
    /// If you specify a new machine type it will be applied the next time your codespace is started.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/patch(codespaces/update-for-authenticated-user)`.
    func codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete a codespace for the authenticated user
    ///
    /// Deletes a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)`.
    func codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Export a codespace for the authenticated user
    ///
    /// Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
    ///
    /// If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/exports`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)`.
    func codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get details about a codespace export
    ///
    /// Gets information about an export of a codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}/exports/{export_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/{export_id}/get(codespaces/get-export-details-for-authenticated-user)`.
    func codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List machine types for a codespace
    ///
    /// List the machine types a codespace can transition to use.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}/machines`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)`.
    func codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Create a repository from an unpublished codespace
    ///
    /// Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
    ///
    /// The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
    ///
    /// This will fail for a codespace that is already published, meaning it has an associated repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/publish`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)`.
    func codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Start a codespace for the authenticated user
    ///
    /// Starts a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/start`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)`.
    func codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Stop a codespace for the authenticated user
    ///
    /// Stops a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/stop`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)`.
    func codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List codespaces for the organization
    ///
    /// Lists the codespaces associated to a specified organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)`.
    public func codespaces_sol_list_hyphen_in_hyphen_organization(
        path: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Path,
        query: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output {
        try await codespaces_sol_list_hyphen_in_hyphen_organization(Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Manage access control for organization codespaces
    ///
    /// Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/access`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)`.
    @available(*, deprecated)
    public func codespaces_sol_set_hyphen_codespaces_hyphen_access(
        path: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Path,
        headers: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Headers = .init(),
        body: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Body
    ) async throws -> Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Output {
        try await codespaces_sol_set_hyphen_codespaces_hyphen_access(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Add users to Codespaces access for an organization
    ///
    /// Codespaces for the specified users will be billed to the organization.
    ///
    /// To use this endpoint, the access settings for the organization must be set to `selected_members`.
    /// For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/codespaces/access/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)`.
    @available(*, deprecated)
    public func codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users(
        path: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Path,
        headers: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Headers = .init(),
        body: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body
    ) async throws -> Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Output {
        try await codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove users from Codespaces access for an organization
    ///
    /// Codespaces for the specified users will no longer be billed to the organization.
    ///
    /// To use this endpoint, the access settings for the organization must be set to `selected_members`.
    /// For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/access/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)`.
    @available(*, deprecated)
    public func codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users(
        path: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Path,
        headers: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Headers = .init(),
        body: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body
    ) async throws -> Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Output {
        try await codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users(Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List organization secrets
    ///
    /// Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/get(codespaces/list-org-secrets)`.
    public func codespaces_sol_list_hyphen_org_hyphen_secrets(
        path: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Path,
        query: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output {
        try await codespaces_sol_list_hyphen_org_hyphen_secrets(Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an organization public key
    ///
    /// Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/public-key/get(codespaces/get-org-public-key)`.
    public func codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key(
        path: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path,
        headers: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Output {
        try await codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key(Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get an organization secret
    ///
    /// Gets an organization development environment secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/get(codespaces/get-org-secret)`.
    public func codespaces_sol_get_hyphen_org_hyphen_secret(
        path: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output {
        try await codespaces_sol_get_hyphen_org_hyphen_secret(Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-org-secret)`.
    public func codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(
        path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers = .init(),
        body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
    ) async throws -> Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output {
        try await codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an organization secret
    ///
    /// Deletes an organization development environment secret using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/delete(codespaces/delete-org-secret)`.
    public func codespaces_sol_delete_hyphen_org_hyphen_secret(
        path: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Output {
        try await codespaces_sol_delete_hyphen_org_hyphen_secret(Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-selected-repos-for-org-secret)`.
    public func codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(
        path: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
        query: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output {
        try await codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization development environment secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-selected-repos-for-org-secret)`.
    public func codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(
        path: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init(),
        body: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
    ) async throws -> Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output {
        try await codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-selected-repo-to-org-secret)`.
    public func codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(
        path: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output {
        try await codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization development environment secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-selected-repo-from-org-secret)`.
    public func codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(
        path: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output {
        try await codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// List codespaces for a user in organization
    ///
    /// Lists the codespaces that a member of an organization has for repositories in that organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/codespaces`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)`.
    public func codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org(
        path: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path,
        query: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output {
        try await codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org(Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Delete a codespace from the organization
    ///
    /// Deletes a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)`.
    public func codespaces_sol_delete_hyphen_from_hyphen_organization(
        path: Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input.Path,
        headers: Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Output {
        try await codespaces_sol_delete_hyphen_from_hyphen_organization(Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// Stop a codespace for an organization user
    ///
    /// Stops a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)`.
    public func codespaces_sol_stop_hyphen_in_hyphen_organization(
        path: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input.Path,
        headers: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Output {
        try await codespaces_sol_stop_hyphen_in_hyphen_organization(Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// List codespaces in a repository for the authenticated user
    ///
    /// Lists the codespaces associated to a specified repository and the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)`.
    public func codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a codespace in a repository
    ///
    /// Creates a codespace owned by the authenticated user in the specified repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)`.
    public func codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List devcontainer configurations in a repository for the authenticated user
    ///
    /// Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
    /// specify launchpoint configurations for codespaces created within the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/devcontainers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)`.
    public func codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List available machine types for a repository
    ///
    /// List the machine types available for a given repository based on its configuration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/machines`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)`.
    public func codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get default attributes for a codespace
    ///
    /// Gets the default attributes for codespaces created by the user with the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/new`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/new/get(codespaces/pre-flight-with-repo-for-authenticated-user)`.
    public func codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check if permissions defined by a devcontainer have been accepted by the authenticated user
    ///
    /// Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/permissions_check`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)`.
    public func codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer(
        path: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Path,
        query: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Query,
        headers: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Output {
        try await codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer(Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository secrets
    ///
    /// Lists all development environment secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/get(codespaces/list-repo-secrets)`.
    public func codespaces_sol_list_hyphen_repo_hyphen_secrets(
        path: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Path,
        query: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output {
        try await codespaces_sol_list_hyphen_repo_hyphen_secrets(Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/public-key/get(codespaces/get-repo-public-key)`.
    public func codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key(
        path: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path,
        headers: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output {
        try await codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key(Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a repository secret
    ///
    /// Gets a single repository development environment secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/get(codespaces/get-repo-secret)`.
    public func codespaces_sol_get_hyphen_repo_hyphen_secret(
        path: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Output {
        try await codespaces_sol_get_hyphen_repo_hyphen_secret(Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-repo-secret)`.
    public func codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(
        path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path,
        headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers = .init(),
        body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
    ) async throws -> Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output {
        try await codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository secret
    ///
    /// Deletes a development environment secret in a repository using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/delete(codespaces/delete-repo-secret)`.
    public func codespaces_sol_delete_hyphen_repo_hyphen_secret(path: Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Input.Path) async throws -> Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Output {
        try await codespaces_sol_delete_hyphen_repo_hyphen_secret(Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Input(path: path))
    }
    /// Create a codespace from a pull request
    ///
    /// Creates a codespace owned by the authenticated user for the specified pull request.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)`.
    public func codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List codespaces for the authenticated user
    ///
    /// Lists the authenticated user's codespaces.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces`.
    /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)`.
    public func codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a codespace for the authenticated user
    ///
    /// Creates a new codespace, owned by the authenticated user.
    ///
    /// This endpoint requires either a `repository_id` OR a `pull_request` but not both.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces`.
    /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)`.
    public func codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user(
        headers: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            headers: headers,
            body: body
        ))
    }
    /// List secrets for the authenticated user
    ///
    /// Lists all development environment secrets available for a user's codespaces without revealing their
    /// encrypted values.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/get(codespaces/list-secrets-for-authenticated-user)`.
    public func codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get public key for the authenticated user
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/public-key/get(codespaces/get-public-key-for-authenticated-user)`.
    public func codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(headers: Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()) async throws -> Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input(headers: headers))
    }
    /// Get a secret for the authenticated user
    ///
    /// Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/get(codespaces/get-secret-for-authenticated-user)`.
    public func codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update a secret for the authenticated user
    ///
    /// Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-secret-for-authenticated-user)`.
    public func codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a secret for the authenticated user
    ///
    /// Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/delete(codespaces/delete-secret-for-authenticated-user)`.
    public func codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(path: Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path) async throws -> Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input(path: path))
    }
    /// List selected repositories for a user secret
    ///
    /// List the repositories that have been granted the ability to use a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)`.
    public func codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set selected repositories for a user secret
    ///
    /// Select the repositories that will use a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)`.
    public func codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Add a selected repository to a user secret
    ///
    /// Adds a repository to the selected repositories for a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)`.
    public func codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove a selected repository from a user secret
    ///
    /// Removes a repository from the selected repositories for a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)`.
    public func codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a codespace for the authenticated user
    ///
    /// Gets information about a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)`.
    public func codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a codespace for the authenticated user
    ///
    /// Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
    ///
    /// If you specify a new machine type it will be applied the next time your codespace is started.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/patch(codespaces/update-for-authenticated-user)`.
    public func codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body? = nil
    ) async throws -> Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a codespace for the authenticated user
    ///
    /// Deletes a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)`.
    public func codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export a codespace for the authenticated user
    ///
    /// Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
    ///
    /// If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/exports`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)`.
    public func codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get details about a codespace export
    ///
    /// Gets information about an export of a codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}/exports/{export_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/{export_id}/get(codespaces/get-export-details-for-authenticated-user)`.
    public func codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List machine types for a codespace
    ///
    /// List the machine types a codespace can transition to use.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}/machines`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)`.
    public func codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a repository from an unpublished codespace
    ///
    /// Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
    ///
    /// The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
    ///
    /// This will fail for a codespace that is already published, meaning it has an associated repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/publish`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)`.
    public func codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Start a codespace for the authenticated user
    ///
    /// Starts a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/start`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)`.
    public func codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Stop a codespace for the authenticated user
    ///
    /// Stops a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/stop`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)`.
    public func codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user(Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        public struct empty_hyphen_object: Codable, Hashable, Sendable {
            /// Creates a new `empty_hyphen_object`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// A description of the machine powering a codespace.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine`.
        public struct nullable_hyphen_codespace_hyphen_machine: Codable, Hashable, Sendable {
            /// The name of the machine.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/name`.
            public var name: Swift.String
            /// The display name of the machine includes cores, memory, and storage.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/display_name`.
            public var display_name: Swift.String
            /// The operating system of the machine.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/operating_system`.
            public var operating_system: Swift.String
            /// How much storage is available to the codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/storage_in_bytes`.
            public var storage_in_bytes: Swift.Int
            /// How much memory is available to the codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/memory_in_bytes`.
            public var memory_in_bytes: Swift.Int
            /// How many cores are available to the codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/cpus`.
            public var cpus: Swift.Int
            /// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/prebuild_availability`.
            @frozen public enum prebuild_availabilityPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case ready = "ready"
                case in_progress = "in_progress"
            }
            /// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-codespace-machine/prebuild_availability`.
            public var prebuild_availability: Components.Schemas.nullable_hyphen_codespace_hyphen_machine.prebuild_availabilityPayload?
            /// Creates a new `nullable_hyphen_codespace_hyphen_machine`.
            ///
            /// - Parameters:
            ///   - name: The name of the machine.
            ///   - display_name: The display name of the machine includes cores, memory, and storage.
            ///   - operating_system: The operating system of the machine.
            ///   - storage_in_bytes: How much storage is available to the codespace.
            ///   - memory_in_bytes: How much memory is available to the codespace.
            ///   - cpus: How many cores are available to the codespace.
            ///   - prebuild_availability: Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
            public init(
                name: Swift.String,
                display_name: Swift.String,
                operating_system: Swift.String,
                storage_in_bytes: Swift.Int,
                memory_in_bytes: Swift.Int,
                cpus: Swift.Int,
                prebuild_availability: Components.Schemas.nullable_hyphen_codespace_hyphen_machine.prebuild_availabilityPayload? = nil
            ) {
                self.name = name
                self.display_name = display_name
                self.operating_system = operating_system
                self.storage_in_bytes = storage_in_bytes
                self.memory_in_bytes = memory_in_bytes
                self.cpus = cpus
                self.prebuild_availability = prebuild_availability
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case display_name
                case operating_system
                case storage_in_bytes
                case memory_in_bytes
                case cpus
                case prebuild_availability
            }
        }
        /// A codespace.
        ///
        /// - Remark: Generated from `#/components/schemas/codespace`.
        public struct codespace: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/codespace/id`.
            public var id: Swift.Int
            /// Automatically generated name of this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/name`.
            public var name: Swift.String
            /// Display name for this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/display_name`.
            public var display_name: Swift.String?
            /// UUID identifying this codespace's environment.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/environment_id`.
            public var environment_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/codespace/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/codespace/billable_owner`.
            public var billable_owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/codespace/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/codespace/machine`.
            public var machine: Components.Schemas.nullable_hyphen_codespace_hyphen_machine?
            /// Path to devcontainer.json from repo root used to create Codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/devcontainer_path`.
            public var devcontainer_path: Swift.String?
            /// Whether the codespace was created from a prebuild.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/prebuild`.
            public var prebuild: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/codespace/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/codespace/updated_at`.
            public var updated_at: Foundation.Date
            /// Last known time this codespace was started.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/last_used_at`.
            public var last_used_at: Foundation.Date
            /// State of this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case Unknown = "Unknown"
                case Created = "Created"
                case Queued = "Queued"
                case Provisioning = "Provisioning"
                case Available = "Available"
                case Awaiting = "Awaiting"
                case Unavailable = "Unavailable"
                case Deleted = "Deleted"
                case Moved = "Moved"
                case Shutdown = "Shutdown"
                case Archived = "Archived"
                case Starting = "Starting"
                case ShuttingDown = "ShuttingDown"
                case Failed = "Failed"
                case Exporting = "Exporting"
                case Updating = "Updating"
                case Rebuilding = "Rebuilding"
            }
            /// State of this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/state`.
            public var state: Components.Schemas.codespace.statePayload
            /// API URL for this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/url`.
            public var url: Swift.String
            /// Details about the codespace's git repository.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/git_status`.
            public struct git_statusPayload: Codable, Hashable, Sendable {
                /// The number of commits the local repository is ahead of the remote.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace/git_status/ahead`.
                public var ahead: Swift.Int?
                /// The number of commits the local repository is behind the remote.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace/git_status/behind`.
                public var behind: Swift.Int?
                /// Whether the local repository has unpushed changes.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace/git_status/has_unpushed_changes`.
                public var has_unpushed_changes: Swift.Bool?
                /// Whether the local repository has uncommitted changes.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace/git_status/has_uncommitted_changes`.
                public var has_uncommitted_changes: Swift.Bool?
                /// The current branch (or SHA if in detached HEAD state) of the local repository.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace/git_status/ref`.
                public var ref: Swift.String?
                /// Creates a new `git_statusPayload`.
                ///
                /// - Parameters:
                ///   - ahead: The number of commits the local repository is ahead of the remote.
                ///   - behind: The number of commits the local repository is behind the remote.
                ///   - has_unpushed_changes: Whether the local repository has unpushed changes.
                ///   - has_uncommitted_changes: Whether the local repository has uncommitted changes.
                ///   - ref: The current branch (or SHA if in detached HEAD state) of the local repository.
                public init(
                    ahead: Swift.Int? = nil,
                    behind: Swift.Int? = nil,
                    has_unpushed_changes: Swift.Bool? = nil,
                    has_uncommitted_changes: Swift.Bool? = nil,
                    ref: Swift.String? = nil
                ) {
                    self.ahead = ahead
                    self.behind = behind
                    self.has_unpushed_changes = has_unpushed_changes
                    self.has_uncommitted_changes = has_uncommitted_changes
                    self.ref = ref
                }
                public enum CodingKeys: String, CodingKey {
                    case ahead
                    case behind
                    case has_unpushed_changes
                    case has_uncommitted_changes
                    case ref
                }
            }
            /// Details about the codespace's git repository.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/git_status`.
            public var git_status: Components.Schemas.codespace.git_statusPayload
            /// The initally assigned location of a new codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/location`.
            @frozen public enum locationPayload: String, Codable, Hashable, Sendable {
                case EastUs = "EastUs"
                case SouthEastAsia = "SouthEastAsia"
                case WestEurope = "WestEurope"
                case WestUs2 = "WestUs2"
            }
            /// The initally assigned location of a new codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/location`.
            public var location: Components.Schemas.codespace.locationPayload
            /// The number of minutes of inactivity after which this codespace will be automatically stopped.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/idle_timeout_minutes`.
            public var idle_timeout_minutes: Swift.Int?
            /// URL to access this codespace on the web.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/web_url`.
            public var web_url: Swift.String
            /// API URL to access available alternate machine types for this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/machines_url`.
            public var machines_url: Swift.String
            /// API URL to start this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/start_url`.
            public var start_url: Swift.String
            /// API URL to stop this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/stop_url`.
            public var stop_url: Swift.String
            /// API URL to publish this codespace to a new repository.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/publish_url`.
            public var publish_url: Swift.String?
            /// API URL for the Pull Request associated with this codespace, if any.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/pulls_url`.
            public var pulls_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/codespace/recent_folders`.
            public var recent_folders: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/codespace/runtime_constraints`.
            public struct runtime_constraintsPayload: Codable, Hashable, Sendable {
                /// The privacy settings a user can select from when forwarding a port.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace/runtime_constraints/allowed_port_privacy_settings`.
                public var allowed_port_privacy_settings: [Swift.String]?
                /// Creates a new `runtime_constraintsPayload`.
                ///
                /// - Parameters:
                ///   - allowed_port_privacy_settings: The privacy settings a user can select from when forwarding a port.
                public init(allowed_port_privacy_settings: [Swift.String]? = nil) {
                    self.allowed_port_privacy_settings = allowed_port_privacy_settings
                }
                public enum CodingKeys: String, CodingKey {
                    case allowed_port_privacy_settings
                }
            }
            /// - Remark: Generated from `#/components/schemas/codespace/runtime_constraints`.
            public var runtime_constraints: Components.Schemas.codespace.runtime_constraintsPayload?
            /// Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/pending_operation`.
            public var pending_operation: Swift.Bool?
            /// Text to show user when codespace is disabled by a pending operation
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/pending_operation_disabled_reason`.
            public var pending_operation_disabled_reason: Swift.String?
            /// Text to show user when codespace idle timeout minutes has been overriden by an organization policy
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/idle_timeout_notice`.
            public var idle_timeout_notice: Swift.String?
            /// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/retention_period_minutes`.
            public var retention_period_minutes: Swift.Int?
            /// When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/retention_expires_at`.
            public var retention_expires_at: Foundation.Date?
            /// The text to display to a user when a codespace has been stopped for a potentially actionable reason.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace/last_known_stop_notice`.
            public var last_known_stop_notice: Swift.String?
            /// Creates a new `codespace`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name: Automatically generated name of this codespace.
            ///   - display_name: Display name for this codespace.
            ///   - environment_id: UUID identifying this codespace's environment.
            ///   - owner:
            ///   - billable_owner:
            ///   - repository:
            ///   - machine:
            ///   - devcontainer_path: Path to devcontainer.json from repo root used to create Codespace.
            ///   - prebuild: Whether the codespace was created from a prebuild.
            ///   - created_at:
            ///   - updated_at:
            ///   - last_used_at: Last known time this codespace was started.
            ///   - state: State of this codespace.
            ///   - url: API URL for this codespace.
            ///   - git_status: Details about the codespace's git repository.
            ///   - location: The initally assigned location of a new codespace.
            ///   - idle_timeout_minutes: The number of minutes of inactivity after which this codespace will be automatically stopped.
            ///   - web_url: URL to access this codespace on the web.
            ///   - machines_url: API URL to access available alternate machine types for this codespace.
            ///   - start_url: API URL to start this codespace.
            ///   - stop_url: API URL to stop this codespace.
            ///   - publish_url: API URL to publish this codespace to a new repository.
            ///   - pulls_url: API URL for the Pull Request associated with this codespace, if any.
            ///   - recent_folders:
            ///   - runtime_constraints:
            ///   - pending_operation: Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
            ///   - pending_operation_disabled_reason: Text to show user when codespace is disabled by a pending operation
            ///   - idle_timeout_notice: Text to show user when codespace idle timeout minutes has been overriden by an organization policy
            ///   - retention_period_minutes: Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
            ///   - retention_expires_at: When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
            ///   - last_known_stop_notice: The text to display to a user when a codespace has been stopped for a potentially actionable reason.
            public init(
                id: Swift.Int,
                name: Swift.String,
                display_name: Swift.String? = nil,
                environment_id: Swift.String? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                billable_owner: Components.Schemas.simple_hyphen_user,
                repository: Components.Schemas.minimal_hyphen_repository,
                machine: Components.Schemas.nullable_hyphen_codespace_hyphen_machine? = nil,
                devcontainer_path: Swift.String? = nil,
                prebuild: Swift.Bool? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                last_used_at: Foundation.Date,
                state: Components.Schemas.codespace.statePayload,
                url: Swift.String,
                git_status: Components.Schemas.codespace.git_statusPayload,
                location: Components.Schemas.codespace.locationPayload,
                idle_timeout_minutes: Swift.Int? = nil,
                web_url: Swift.String,
                machines_url: Swift.String,
                start_url: Swift.String,
                stop_url: Swift.String,
                publish_url: Swift.String? = nil,
                pulls_url: Swift.String? = nil,
                recent_folders: [Swift.String],
                runtime_constraints: Components.Schemas.codespace.runtime_constraintsPayload? = nil,
                pending_operation: Swift.Bool? = nil,
                pending_operation_disabled_reason: Swift.String? = nil,
                idle_timeout_notice: Swift.String? = nil,
                retention_period_minutes: Swift.Int? = nil,
                retention_expires_at: Foundation.Date? = nil,
                last_known_stop_notice: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.display_name = display_name
                self.environment_id = environment_id
                self.owner = owner
                self.billable_owner = billable_owner
                self.repository = repository
                self.machine = machine
                self.devcontainer_path = devcontainer_path
                self.prebuild = prebuild
                self.created_at = created_at
                self.updated_at = updated_at
                self.last_used_at = last_used_at
                self.state = state
                self.url = url
                self.git_status = git_status
                self.location = location
                self.idle_timeout_minutes = idle_timeout_minutes
                self.web_url = web_url
                self.machines_url = machines_url
                self.start_url = start_url
                self.stop_url = stop_url
                self.publish_url = publish_url
                self.pulls_url = pulls_url
                self.recent_folders = recent_folders
                self.runtime_constraints = runtime_constraints
                self.pending_operation = pending_operation
                self.pending_operation_disabled_reason = pending_operation_disabled_reason
                self.idle_timeout_notice = idle_timeout_notice
                self.retention_period_minutes = retention_period_minutes
                self.retention_expires_at = retention_expires_at
                self.last_known_stop_notice = last_known_stop_notice
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case display_name
                case environment_id
                case owner
                case billable_owner
                case repository
                case machine
                case devcontainer_path
                case prebuild
                case created_at
                case updated_at
                case last_used_at
                case state
                case url
                case git_status
                case location
                case idle_timeout_minutes
                case web_url
                case machines_url
                case start_url
                case stop_url
                case publish_url
                case pulls_url
                case recent_folders
                case runtime_constraints
                case pending_operation
                case pending_operation_disabled_reason
                case idle_timeout_notice
                case retention_period_minutes
                case retention_expires_at
                case last_known_stop_notice
            }
        }
        /// Secrets for a GitHub Codespace.
        ///
        /// - Remark: Generated from `#/components/schemas/codespaces-org-secret`.
        public struct codespaces_hyphen_org_hyphen_secret: Codable, Hashable, Sendable {
            /// The name of the secret
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-org-secret/name`.
            public var name: Swift.String
            /// The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-org-secret/created_at`.
            public var created_at: Foundation.Date
            /// The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-org-secret/updated_at`.
            public var updated_at: Foundation.Date
            /// The type of repositories in the organization that the secret is visible to
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-org-secret/visibility`.
            @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case _private = "private"
                case selected = "selected"
            }
            /// The type of repositories in the organization that the secret is visible to
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-org-secret/visibility`.
            public var visibility: Components.Schemas.codespaces_hyphen_org_hyphen_secret.visibilityPayload
            /// The API URL at which the list of repositories this secret is visible to can be retrieved
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-org-secret/selected_repositories_url`.
            public var selected_repositories_url: Swift.String?
            /// Creates a new `codespaces_hyphen_org_hyphen_secret`.
            ///
            /// - Parameters:
            ///   - name: The name of the secret
            ///   - created_at: The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - updated_at: The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - visibility: The type of repositories in the organization that the secret is visible to
            ///   - selected_repositories_url: The API URL at which the list of repositories this secret is visible to can be retrieved
            public init(
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                visibility: Components.Schemas.codespaces_hyphen_org_hyphen_secret.visibilityPayload,
                selected_repositories_url: Swift.String? = nil
            ) {
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
                self.visibility = visibility
                self.selected_repositories_url = selected_repositories_url
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case created_at
                case updated_at
                case visibility
                case selected_repositories_url
            }
        }
        /// The public key used for setting Codespaces secrets.
        ///
        /// - Remark: Generated from `#/components/schemas/codespaces-public-key`.
        public struct codespaces_hyphen_public_hyphen_key: Codable, Hashable, Sendable {
            /// The identifier for the key.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-public-key/key_id`.
            public var key_id: Swift.String
            /// The Base64 encoded public key.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-public-key/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/codespaces-public-key/id`.
            public var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/codespaces-public-key/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/codespaces-public-key/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/codespaces-public-key/created_at`.
            public var created_at: Swift.String?
            /// Creates a new `codespaces_hyphen_public_hyphen_key`.
            ///
            /// - Parameters:
            ///   - key_id: The identifier for the key.
            ///   - key: The Base64 encoded public key.
            ///   - id:
            ///   - url:
            ///   - title:
            ///   - created_at:
            public init(
                key_id: Swift.String,
                key: Swift.String,
                id: Swift.Int? = nil,
                url: Swift.String? = nil,
                title: Swift.String? = nil,
                created_at: Swift.String? = nil
            ) {
                self.key_id = key_id
                self.key = key
                self.id = id
                self.url = url
                self.title = title
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case key_id
                case key
                case id
                case url
                case title
                case created_at
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-repository`.
        public struct nullable_hyphen_repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.nullable_hyphen_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.nullable_hyphen_repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `nullable_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.nullable_hyphen_repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.nullable_hyphen_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.nullable_hyphen_repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code of Conduct Simple
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple`.
        public struct code_hyphen_of_hyphen_conduct_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - key:
            ///   - name:
            ///   - html_url:
            public init(
                url: Swift.String,
                key: Swift.String,
                name: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.url = url
                self.key = key
                self.name = name
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case key
                case name
                case html_url
            }
        }
        /// Full Repository
        ///
        /// - Remark: Generated from `#/components/schemas/full-repository`.
        public struct full_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/full-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/full-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_discussions`.
            public var has_discussions: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/pushed_at`.
            public var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public var permissions: Components.Schemas.full_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/template_repository`.
            public var template_repository: Components.Schemas.nullable_hyphen_repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/use_squash_pr_title_as_default`.
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.full_hyphen_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.full_hyphen_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.full_hyphen_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.full_hyphen_repository.merge_commit_messagePayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_count`.
            public var subscribers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/network_count`.
            public var network_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/organization`.
            public var organization: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/full-repository/parent`.
            public var parent: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/source`.
            public var source: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers`.
            public var watchers: Swift.Int
            /// Whether anonymous git access is allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/custom_properties`.
            public struct custom_propertiesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `custom_propertiesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/custom_properties`.
            public var custom_properties: Components.Schemas.full_hyphen_repository.custom_propertiesPayload?
            /// Creates a new `full_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - allow_rebase_merge:
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge:
            ///   - allow_auto_merge:
            ///   - delete_branch_on_merge:
            ///   - allow_merge_commit:
            ///   - allow_update_branch:
            ///   - use_squash_pr_title_as_default:
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - license:
            ///   - organization:
            ///   - parent:
            ///   - source:
            ///   - forks:
            ///   - master_branch:
            ///   - open_issues:
            ///   - watchers:
            ///   - anonymous_access_enabled: Whether anonymous git access is allowed.
            ///   - code_of_conduct:
            ///   - security_and_analysis:
            ///   - custom_properties: The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.full_hyphen_repository.permissionsPayload? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.nullable_hyphen_repository? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.full_hyphen_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.full_hyphen_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.full_hyphen_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.full_hyphen_repository.merge_commit_messagePayload? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int,
                network_count: Swift.Int,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                organization: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                parent: Components.Schemas.repository? = nil,
                source: Components.Schemas.repository? = nil,
                forks: Swift.Int,
                master_branch: Swift.String? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                anonymous_access_enabled: Swift.Bool? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct_hyphen_simple? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil,
                custom_properties: Components.Schemas.full_hyphen_repository.custom_propertiesPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_merge_commit = allow_merge_commit
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.license = license
                self.organization = organization
                self.parent = parent
                self.source = source
                self.forks = forks
                self.master_branch = master_branch
                self.open_issues = open_issues
                self.watchers = watchers
                self.anonymous_access_enabled = anonymous_access_enabled
                self.code_of_conduct = code_of_conduct
                self.security_and_analysis = security_and_analysis
                self.custom_properties = custom_properties
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_merge_commit
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case license
                case organization
                case parent
                case source
                case forks
                case master_branch
                case open_issues
                case watchers
                case anonymous_access_enabled
                case code_of_conduct
                case security_and_analysis
                case custom_properties
            }
        }
        /// A description of the machine powering a codespace.
        ///
        /// - Remark: Generated from `#/components/schemas/codespace-machine`.
        public struct codespace_hyphen_machine: Codable, Hashable, Sendable {
            /// The name of the machine.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/name`.
            public var name: Swift.String
            /// The display name of the machine includes cores, memory, and storage.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/display_name`.
            public var display_name: Swift.String
            /// The operating system of the machine.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/operating_system`.
            public var operating_system: Swift.String
            /// How much storage is available to the codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/storage_in_bytes`.
            public var storage_in_bytes: Swift.Int
            /// How much memory is available to the codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/memory_in_bytes`.
            public var memory_in_bytes: Swift.Int
            /// How many cores are available to the codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/cpus`.
            public var cpus: Swift.Int
            /// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/prebuild_availability`.
            @frozen public enum prebuild_availabilityPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case ready = "ready"
                case in_progress = "in_progress"
            }
            /// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-machine/prebuild_availability`.
            public var prebuild_availability: Components.Schemas.codespace_hyphen_machine.prebuild_availabilityPayload?
            /// Creates a new `codespace_hyphen_machine`.
            ///
            /// - Parameters:
            ///   - name: The name of the machine.
            ///   - display_name: The display name of the machine includes cores, memory, and storage.
            ///   - operating_system: The operating system of the machine.
            ///   - storage_in_bytes: How much storage is available to the codespace.
            ///   - memory_in_bytes: How much memory is available to the codespace.
            ///   - cpus: How many cores are available to the codespace.
            ///   - prebuild_availability: Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
            public init(
                name: Swift.String,
                display_name: Swift.String,
                operating_system: Swift.String,
                storage_in_bytes: Swift.Int,
                memory_in_bytes: Swift.Int,
                cpus: Swift.Int,
                prebuild_availability: Components.Schemas.codespace_hyphen_machine.prebuild_availabilityPayload? = nil
            ) {
                self.name = name
                self.display_name = display_name
                self.operating_system = operating_system
                self.storage_in_bytes = storage_in_bytes
                self.memory_in_bytes = memory_in_bytes
                self.cpus = cpus
                self.prebuild_availability = prebuild_availability
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case display_name
                case operating_system
                case storage_in_bytes
                case memory_in_bytes
                case cpus
                case prebuild_availability
            }
        }
        /// Permission check result for a given devcontainer config.
        ///
        /// - Remark: Generated from `#/components/schemas/codespaces-permissions-check-for-devcontainer`.
        public struct codespaces_hyphen_permissions_hyphen_check_hyphen_for_hyphen_devcontainer: Codable, Hashable, Sendable {
            /// Whether the user has accepted the permissions defined by the devcontainer config
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-permissions-check-for-devcontainer/accepted`.
            public var accepted: Swift.Bool
            /// Creates a new `codespaces_hyphen_permissions_hyphen_check_hyphen_for_hyphen_devcontainer`.
            ///
            /// - Parameters:
            ///   - accepted: Whether the user has accepted the permissions defined by the devcontainer config
            public init(accepted: Swift.Bool) {
                self.accepted = accepted
            }
            public enum CodingKeys: String, CodingKey {
                case accepted
            }
        }
        /// Set repository secrets for GitHub Codespaces.
        ///
        /// - Remark: Generated from `#/components/schemas/repo-codespaces-secret`.
        public struct repo_hyphen_codespaces_hyphen_secret: Codable, Hashable, Sendable {
            /// The name of the secret.
            ///
            /// - Remark: Generated from `#/components/schemas/repo-codespaces-secret/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-codespaces-secret/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repo-codespaces-secret/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `repo_hyphen_codespaces_hyphen_secret`.
            ///
            /// - Parameters:
            ///   - name: The name of the secret.
            ///   - created_at:
            ///   - updated_at:
            public init(
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case created_at
                case updated_at
            }
        }
        /// Secrets for a GitHub Codespace.
        ///
        /// - Remark: Generated from `#/components/schemas/codespaces-secret`.
        public struct codespaces_hyphen_secret: Codable, Hashable, Sendable {
            /// The name of the secret
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-secret/name`.
            public var name: Swift.String
            /// The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-secret/created_at`.
            public var created_at: Foundation.Date
            /// The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-secret/updated_at`.
            public var updated_at: Foundation.Date
            /// The type of repositories in the organization that the secret is visible to
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-secret/visibility`.
            @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case _private = "private"
                case selected = "selected"
            }
            /// The type of repositories in the organization that the secret is visible to
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-secret/visibility`.
            public var visibility: Components.Schemas.codespaces_hyphen_secret.visibilityPayload
            /// The API URL at which the list of repositories this secret is visible to can be retrieved
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-secret/selected_repositories_url`.
            public var selected_repositories_url: Swift.String
            /// Creates a new `codespaces_hyphen_secret`.
            ///
            /// - Parameters:
            ///   - name: The name of the secret
            ///   - created_at: The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - updated_at: The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
            ///   - visibility: The type of repositories in the organization that the secret is visible to
            ///   - selected_repositories_url: The API URL at which the list of repositories this secret is visible to can be retrieved
            public init(
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                visibility: Components.Schemas.codespaces_hyphen_secret.visibilityPayload,
                selected_repositories_url: Swift.String
            ) {
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
                self.visibility = visibility
                self.selected_repositories_url = selected_repositories_url
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case created_at
                case updated_at
                case visibility
                case selected_repositories_url
            }
        }
        /// The public key used for setting user Codespaces' Secrets.
        ///
        /// - Remark: Generated from `#/components/schemas/codespaces-user-public-key`.
        public struct codespaces_hyphen_user_hyphen_public_hyphen_key: Codable, Hashable, Sendable {
            /// The identifier for the key.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-user-public-key/key_id`.
            public var key_id: Swift.String
            /// The Base64 encoded public key.
            ///
            /// - Remark: Generated from `#/components/schemas/codespaces-user-public-key/key`.
            public var key: Swift.String
            /// Creates a new `codespaces_hyphen_user_hyphen_public_hyphen_key`.
            ///
            /// - Parameters:
            ///   - key_id: The identifier for the key.
            ///   - key: The Base64 encoded public key.
            public init(
                key_id: Swift.String,
                key: Swift.String
            ) {
                self.key_id = key_id
                self.key = key
            }
            public enum CodingKeys: String, CodingKey {
                case key_id
                case key
            }
        }
        /// An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
        ///
        /// - Remark: Generated from `#/components/schemas/codespace-export-details`.
        public struct codespace_hyphen_export_hyphen_details: Codable, Hashable, Sendable {
            /// State of the latest export
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-export-details/state`.
            public var state: Swift.String?
            /// Completion time of the last export operation
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-export-details/completed_at`.
            public var completed_at: Foundation.Date?
            /// Name of the exported branch
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-export-details/branch`.
            public var branch: Swift.String?
            /// Git commit SHA of the exported branch
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-export-details/sha`.
            public var sha: Swift.String?
            /// Id for the export details
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-export-details/id`.
            public var id: Swift.String?
            /// Url for fetching export details
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-export-details/export_url`.
            public var export_url: Swift.String?
            /// Web url for the exported branch
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-export-details/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `codespace_hyphen_export_hyphen_details`.
            ///
            /// - Parameters:
            ///   - state: State of the latest export
            ///   - completed_at: Completion time of the last export operation
            ///   - branch: Name of the exported branch
            ///   - sha: Git commit SHA of the exported branch
            ///   - id: Id for the export details
            ///   - export_url: Url for fetching export details
            ///   - html_url: Web url for the exported branch
            public init(
                state: Swift.String? = nil,
                completed_at: Foundation.Date? = nil,
                branch: Swift.String? = nil,
                sha: Swift.String? = nil,
                id: Swift.String? = nil,
                export_url: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.state = state
                self.completed_at = completed_at
                self.branch = branch
                self.sha = sha
                self.id = id
                self.export_url = export_url
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case state
                case completed_at
                case branch
                case sha
                case id
                case export_url
                case html_url
            }
        }
        /// A codespace.
        ///
        /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository`.
        public struct codespace_hyphen_with_hyphen_full_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/id`.
            public var id: Swift.Int
            /// Automatically generated name of this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/name`.
            public var name: Swift.String
            /// Display name for this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/display_name`.
            public var display_name: Swift.String?
            /// UUID identifying this codespace's environment.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/environment_id`.
            public var environment_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/billable_owner`.
            public var billable_owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/repository`.
            public var repository: Components.Schemas.full_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/machine`.
            public var machine: Components.Schemas.nullable_hyphen_codespace_hyphen_machine?
            /// Path to devcontainer.json from repo root used to create Codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/devcontainer_path`.
            public var devcontainer_path: Swift.String?
            /// Whether the codespace was created from a prebuild.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/prebuild`.
            public var prebuild: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/updated_at`.
            public var updated_at: Foundation.Date
            /// Last known time this codespace was started.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/last_used_at`.
            public var last_used_at: Foundation.Date
            /// State of this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case Unknown = "Unknown"
                case Created = "Created"
                case Queued = "Queued"
                case Provisioning = "Provisioning"
                case Available = "Available"
                case Awaiting = "Awaiting"
                case Unavailable = "Unavailable"
                case Deleted = "Deleted"
                case Moved = "Moved"
                case Shutdown = "Shutdown"
                case Archived = "Archived"
                case Starting = "Starting"
                case ShuttingDown = "ShuttingDown"
                case Failed = "Failed"
                case Exporting = "Exporting"
                case Updating = "Updating"
                case Rebuilding = "Rebuilding"
            }
            /// State of this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/state`.
            public var state: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.statePayload
            /// API URL for this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/url`.
            public var url: Swift.String
            /// Details about the codespace's git repository.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/git_status`.
            public struct git_statusPayload: Codable, Hashable, Sendable {
                /// The number of commits the local repository is ahead of the remote.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/git_status/ahead`.
                public var ahead: Swift.Int?
                /// The number of commits the local repository is behind the remote.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/git_status/behind`.
                public var behind: Swift.Int?
                /// Whether the local repository has unpushed changes.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/git_status/has_unpushed_changes`.
                public var has_unpushed_changes: Swift.Bool?
                /// Whether the local repository has uncommitted changes.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/git_status/has_uncommitted_changes`.
                public var has_uncommitted_changes: Swift.Bool?
                /// The current branch (or SHA if in detached HEAD state) of the local repository.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/git_status/ref`.
                public var ref: Swift.String?
                /// Creates a new `git_statusPayload`.
                ///
                /// - Parameters:
                ///   - ahead: The number of commits the local repository is ahead of the remote.
                ///   - behind: The number of commits the local repository is behind the remote.
                ///   - has_unpushed_changes: Whether the local repository has unpushed changes.
                ///   - has_uncommitted_changes: Whether the local repository has uncommitted changes.
                ///   - ref: The current branch (or SHA if in detached HEAD state) of the local repository.
                public init(
                    ahead: Swift.Int? = nil,
                    behind: Swift.Int? = nil,
                    has_unpushed_changes: Swift.Bool? = nil,
                    has_uncommitted_changes: Swift.Bool? = nil,
                    ref: Swift.String? = nil
                ) {
                    self.ahead = ahead
                    self.behind = behind
                    self.has_unpushed_changes = has_unpushed_changes
                    self.has_uncommitted_changes = has_uncommitted_changes
                    self.ref = ref
                }
                public enum CodingKeys: String, CodingKey {
                    case ahead
                    case behind
                    case has_unpushed_changes
                    case has_uncommitted_changes
                    case ref
                }
            }
            /// Details about the codespace's git repository.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/git_status`.
            public var git_status: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.git_statusPayload
            /// The initally assigned location of a new codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/location`.
            @frozen public enum locationPayload: String, Codable, Hashable, Sendable {
                case EastUs = "EastUs"
                case SouthEastAsia = "SouthEastAsia"
                case WestEurope = "WestEurope"
                case WestUs2 = "WestUs2"
            }
            /// The initally assigned location of a new codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/location`.
            public var location: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.locationPayload
            /// The number of minutes of inactivity after which this codespace will be automatically stopped.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/idle_timeout_minutes`.
            public var idle_timeout_minutes: Swift.Int?
            /// URL to access this codespace on the web.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/web_url`.
            public var web_url: Swift.String
            /// API URL to access available alternate machine types for this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/machines_url`.
            public var machines_url: Swift.String
            /// API URL to start this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/start_url`.
            public var start_url: Swift.String
            /// API URL to stop this codespace.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/stop_url`.
            public var stop_url: Swift.String
            /// API URL to publish this codespace to a new repository.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/publish_url`.
            public var publish_url: Swift.String?
            /// API URL for the Pull Request associated with this codespace, if any.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/pulls_url`.
            public var pulls_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/recent_folders`.
            public var recent_folders: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/runtime_constraints`.
            public struct runtime_constraintsPayload: Codable, Hashable, Sendable {
                /// The privacy settings a user can select from when forwarding a port.
                ///
                /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/runtime_constraints/allowed_port_privacy_settings`.
                public var allowed_port_privacy_settings: [Swift.String]?
                /// Creates a new `runtime_constraintsPayload`.
                ///
                /// - Parameters:
                ///   - allowed_port_privacy_settings: The privacy settings a user can select from when forwarding a port.
                public init(allowed_port_privacy_settings: [Swift.String]? = nil) {
                    self.allowed_port_privacy_settings = allowed_port_privacy_settings
                }
                public enum CodingKeys: String, CodingKey {
                    case allowed_port_privacy_settings
                }
            }
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/runtime_constraints`.
            public var runtime_constraints: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.runtime_constraintsPayload?
            /// Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/pending_operation`.
            public var pending_operation: Swift.Bool?
            /// Text to show user when codespace is disabled by a pending operation
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/pending_operation_disabled_reason`.
            public var pending_operation_disabled_reason: Swift.String?
            /// Text to show user when codespace idle timeout minutes has been overriden by an organization policy
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/idle_timeout_notice`.
            public var idle_timeout_notice: Swift.String?
            /// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/retention_period_minutes`.
            public var retention_period_minutes: Swift.Int?
            /// When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
            ///
            /// - Remark: Generated from `#/components/schemas/codespace-with-full-repository/retention_expires_at`.
            public var retention_expires_at: Foundation.Date?
            /// Creates a new `codespace_hyphen_with_hyphen_full_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name: Automatically generated name of this codespace.
            ///   - display_name: Display name for this codespace.
            ///   - environment_id: UUID identifying this codespace's environment.
            ///   - owner:
            ///   - billable_owner:
            ///   - repository:
            ///   - machine:
            ///   - devcontainer_path: Path to devcontainer.json from repo root used to create Codespace.
            ///   - prebuild: Whether the codespace was created from a prebuild.
            ///   - created_at:
            ///   - updated_at:
            ///   - last_used_at: Last known time this codespace was started.
            ///   - state: State of this codespace.
            ///   - url: API URL for this codespace.
            ///   - git_status: Details about the codespace's git repository.
            ///   - location: The initally assigned location of a new codespace.
            ///   - idle_timeout_minutes: The number of minutes of inactivity after which this codespace will be automatically stopped.
            ///   - web_url: URL to access this codespace on the web.
            ///   - machines_url: API URL to access available alternate machine types for this codespace.
            ///   - start_url: API URL to start this codespace.
            ///   - stop_url: API URL to stop this codespace.
            ///   - publish_url: API URL to publish this codespace to a new repository.
            ///   - pulls_url: API URL for the Pull Request associated with this codespace, if any.
            ///   - recent_folders:
            ///   - runtime_constraints:
            ///   - pending_operation: Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
            ///   - pending_operation_disabled_reason: Text to show user when codespace is disabled by a pending operation
            ///   - idle_timeout_notice: Text to show user when codespace idle timeout minutes has been overriden by an organization policy
            ///   - retention_period_minutes: Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
            ///   - retention_expires_at: When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
            public init(
                id: Swift.Int,
                name: Swift.String,
                display_name: Swift.String? = nil,
                environment_id: Swift.String? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                billable_owner: Components.Schemas.simple_hyphen_user,
                repository: Components.Schemas.full_hyphen_repository,
                machine: Components.Schemas.nullable_hyphen_codespace_hyphen_machine? = nil,
                devcontainer_path: Swift.String? = nil,
                prebuild: Swift.Bool? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                last_used_at: Foundation.Date,
                state: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.statePayload,
                url: Swift.String,
                git_status: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.git_statusPayload,
                location: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.locationPayload,
                idle_timeout_minutes: Swift.Int? = nil,
                web_url: Swift.String,
                machines_url: Swift.String,
                start_url: Swift.String,
                stop_url: Swift.String,
                publish_url: Swift.String? = nil,
                pulls_url: Swift.String? = nil,
                recent_folders: [Swift.String],
                runtime_constraints: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository.runtime_constraintsPayload? = nil,
                pending_operation: Swift.Bool? = nil,
                pending_operation_disabled_reason: Swift.String? = nil,
                idle_timeout_notice: Swift.String? = nil,
                retention_period_minutes: Swift.Int? = nil,
                retention_expires_at: Foundation.Date? = nil
            ) {
                self.id = id
                self.name = name
                self.display_name = display_name
                self.environment_id = environment_id
                self.owner = owner
                self.billable_owner = billable_owner
                self.repository = repository
                self.machine = machine
                self.devcontainer_path = devcontainer_path
                self.prebuild = prebuild
                self.created_at = created_at
                self.updated_at = updated_at
                self.last_used_at = last_used_at
                self.state = state
                self.url = url
                self.git_status = git_status
                self.location = location
                self.idle_timeout_minutes = idle_timeout_minutes
                self.web_url = web_url
                self.machines_url = machines_url
                self.start_url = start_url
                self.stop_url = stop_url
                self.publish_url = publish_url
                self.pulls_url = pulls_url
                self.recent_folders = recent_folders
                self.runtime_constraints = runtime_constraints
                self.pending_operation = pending_operation
                self.pending_operation_disabled_reason = pending_operation_disabled_reason
                self.idle_timeout_notice = idle_timeout_notice
                self.retention_period_minutes = retention_period_minutes
                self.retention_expires_at = retention_expires_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case display_name
                case environment_id
                case owner
                case billable_owner
                case repository
                case machine
                case devcontainer_path
                case prebuild
                case created_at
                case updated_at
                case last_used_at
                case state
                case url
                case git_status
                case location
                case idle_timeout_minutes
                case web_url
                case machines_url
                case start_url
                case stop_url
                case publish_url
                case pulls_url
                case recent_folders
                case runtime_constraints
                case pending_operation
                case pending_operation_disabled_reason
                case idle_timeout_notice
                case retention_period_minutes
                case retention_expires_at
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The name of the secret.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-name`.
        public typealias secret_hyphen_name = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The name of the codespace.
        ///
        /// - Remark: Generated from `#/components/parameters/codespace-name`.
        public typealias codespace_hyphen_name = Swift.String
        /// The number that identifies the pull request.
        ///
        /// - Remark: Generated from `#/components/parameters/pull-number`.
        public typealias pull_hyphen_number = Swift.Int
        /// ID of the Repository to filter on
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id-in-query`.
        public typealias repository_hyphen_id_hyphen_in_hyphen_query = Swift.Int
        /// The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
        ///
        /// - Remark: Generated from `#/components/parameters/export-id`.
        public typealias export_hyphen_id = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct accepted: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/accepted/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/accepted/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.accepted.Body
            /// Creates a new `accepted`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.accepted.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
        public struct conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.conflict.Body
            /// Creates a new `conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.conflict.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List codespaces for the organization
    ///
    /// Lists the codespaces associated to a specified organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)`.
    public enum codespaces_sol_list_hyphen_in_hyphen_organization {
        public static let id: Swift.String = "codespaces/list-in-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_in_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_in_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Path,
                query: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/responses/200/content/json/codespaces`.
                        public var codespaces: [Components.Schemas.codespace]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - codespaces:
                        public init(
                            total_count: Swift.Int,
                            codespaces: [Components.Schemas.codespace]
                        ) {
                            self.total_count = total_count
                            self.codespaces = codespaces
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case codespaces
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_in_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/get(codespaces/list-in-organization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Manage access control for organization codespaces
    ///
    /// Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/access`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)`.
    public enum codespaces_sol_set_hyphen_codespaces_hyphen_access {
        public static let id: Swift.String = "codespaces/set-codespaces-access"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case disabled = "disabled"
                        case selected_members = "selected_members"
                        case all_members = "all_members"
                        case all_members_and_outside_collaborators = "all_members_and_outside_collaborators"
                    }
                    /// Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/requestBody/json/visibility`.
                    public var visibility: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Body.jsonPayload.visibilityPayload
                    /// The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/requestBody/json/selected_usernames`.
                    public var selected_usernames: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - visibility: Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
                    ///   - selected_usernames: The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
                    public init(
                        visibility: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Body.jsonPayload.visibilityPayload,
                        selected_usernames: [Swift.String]? = nil
                    ) {
                        self.visibility = visibility
                        self.selected_usernames = selected_usernames
                    }
                    public enum CodingKeys: String, CodingKey {
                        case visibility
                        case selected_usernames
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/PUT/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Path,
                headers: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Headers = .init(),
                body: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when successfully modifying permissions.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Users are neither members nor collaborators of this organization.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/put(codespaces/set-codespaces-access)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add users to Codespaces access for an organization
    ///
    /// Codespaces for the specified users will be billed to the organization.
    ///
    /// To use this endpoint, the access settings for the organization must be set to `selected_members`.
    /// For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/codespaces/access/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)`.
    public enum codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users {
        public static let id: Swift.String = "codespaces/set-codespaces-access-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The usernames of the organization members whose codespaces be billed to the organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/POST/requestBody/json/selected_usernames`.
                    public var selected_usernames: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_usernames: The usernames of the organization members whose codespaces be billed to the organization.
                    public init(selected_usernames: [Swift.String]) {
                        self.selected_usernames = selected_usernames
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_usernames
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/POST/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Path,
                headers: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Headers = .init(),
                body: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when successfully modifying permissions.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Users are neither members nor collaborators of this organization.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.codespaces_sol_set_hyphen_codespaces_hyphen_access_hyphen_users.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/post(codespaces/set-codespaces-access-users)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove users from Codespaces access for an organization
    ///
    /// Codespaces for the specified users will no longer be billed to the organization.
    ///
    /// To use this endpoint, the access settings for the organization must be set to `selected_members`.
    /// For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/access/selected_users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)`.
    public enum codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users {
        public static let id: Swift.String = "codespaces/delete-codespaces-access-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The usernames of the organization members whose codespaces should not be billed to the organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/DELETE/requestBody/json/selected_usernames`.
                    public var selected_usernames: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_usernames: The usernames of the organization members whose codespaces should not be billed to the organization.
                    public init(selected_usernames: [Swift.String]) {
                        self.selected_usernames = selected_usernames
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_usernames
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/access/selected_users/DELETE/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Path,
                headers: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Headers = .init(),
                body: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when successfully modifying permissions.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Users are neither members nor collaborators of this organization.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.codespaces_sol_delete_hyphen_codespaces_hyphen_access_hyphen_users.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/access/selected_users/delete(codespaces/delete-codespaces-access-users)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization secrets
    ///
    /// Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/get(codespaces/list-org-secrets)`.
    public enum codespaces_sol_list_hyphen_org_hyphen_secrets {
        public static let id: Swift.String = "codespaces/list-org-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Path,
                query: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.codespaces_hyphen_org_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.codespaces_hyphen_org_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/get(codespaces/list-org-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_org_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization public key
    ///
    /// Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/public-key/get(codespaces/get-org-public-key)`.
    public enum codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key {
        public static let id: Swift.String = "codespaces/get-org-public-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/public-key/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/public-key/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path,
                headers: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespaces_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespaces_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/public-key/get(codespaces/get-org-public-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization secret
    ///
    /// Gets an organization development environment secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/get(codespaces/get-org-secret)`.
    public enum codespaces_sol_get_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "codespaces/get-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespaces_hyphen_org_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespaces_hyphen_org_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output.Ok.Headers = .init(),
                    body: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/get(codespaces/get-org-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_org_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-org-secret)`.
    public enum codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "codespaces/create-or-update-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String?
                    /// The ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String?
                    /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                        case all = "all"
                        case _private = "private"
                        case selected = "selected"
                    }
                    /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody/json/visibility`.
                    public var visibility: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload.visibilityPayload
                    /// An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
                    ///   - key_id: The ID of the key you used to encrypt the secret.
                    ///   - visibility: Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///   - selected_repository_ids: An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    public init(
                        encrypted_value: Swift.String? = nil,
                        key_id: Swift.String? = nil,
                        visibility: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload.visibilityPayload,
                        selected_repository_ids: [Swift.Int]? = nil
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                        self.visibility = visibility
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                        case visibility
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers = .init(),
                body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a secret
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-org-secret)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-org-secret)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-org-secret)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an organization secret
    ///
    /// Deletes an organization development environment secret using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/delete(codespaces/delete-org-secret)`.
    public enum codespaces_sol_delete_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "codespaces/delete-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/delete(codespaces/delete-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_delete_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/delete(codespaces/delete-org-secret)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-selected-repos-for-org-secret)`.
    public enum codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "codespaces/list-selected-repos-for-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
                query: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.minimal_hyphen_repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repositories:
                        public init(
                            total_count: Swift.Int,
                            repositories: [Components.Schemas.minimal_hyphen_repository]
                        ) {
                            self.total_count = total_count
                            self.repositories = repositories
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repositories
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-selected-repos-for-org-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-selected-repos-for-org-secret)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization development environment secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-selected-repos-for-org-secret)`.
    public enum codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "codespaces/set-selected-repos-for-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_repository_ids: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    public init(selected_repository_ids: [Swift.Int]) {
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/PUT/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init(),
                body: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-selected-repos-for-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-selected-repos-for-org-secret)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when visibility type not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-selected-repos-for-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.codespaces_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-selected-repo-to-org-secret)`.
    public enum codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "codespaces/add-selected-repo-to-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when repository was added to the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-selected-repo-to-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-selected-repo-to-org-secret)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when visibility type is not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-selected-repo-to-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.codespaces_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-selected-repo-to-org-secret)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization development environment secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-selected-repo-from-org-secret)`.
    public enum codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "codespaces/remove-selected-repo-from-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when repository was removed from the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-selected-repo-from-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-selected-repo-from-org-secret)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when visibility type not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-selected-repo-from-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.codespaces_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-selected-repo-from-org-secret)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List codespaces for a user in organization
    ///
    /// Lists the codespaces that a member of an organization has for repositories in that organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}/codespaces`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)`.
    public enum codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org {
        public static let id: Swift.String = "codespaces/get-codespaces-for-user-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path,
                query: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/responses/200/content/json/codespaces`.
                        public var codespaces: [Components.Schemas.codespace]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - codespaces:
                        public init(
                            total_count: Swift.Int,
                            codespaces: [Components.Schemas.codespace]
                        ) {
                            self.total_count = total_count
                            self.codespaces = codespaces
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case codespaces
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_codespaces_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/get(codespaces/get-codespaces-for-user-in-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a codespace from the organization
    ///
    /// Deletes a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)`.
    public enum codespaces_sol_delete_hyphen_from_hyphen_organization {
        public static let id: Swift.String = "codespaces/delete-from-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/DELETE/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                ///   - codespace_name: The name of the codespace.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username,
                    codespace_name: Components.Parameters.codespace_hyphen_name
                ) {
                    self.org = org
                    self.username = username
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input.Path,
                headers: Operations.codespaces_sol_delete_hyphen_from_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/delete(codespaces/delete-from-organization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stop a codespace for an organization user
    ///
    /// Stops a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)`.
    public enum codespaces_sol_stop_hyphen_in_hyphen_organization {
        public static let id: Swift.String = "codespaces/stop-in-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/POST/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/POST/path/username`.
                public var username: Components.Parameters.username
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/POST/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                ///   - codespace_name: The name of the codespace.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username,
                    codespace_name: Components.Parameters.codespace_hyphen_name
                ) {
                    self.org = org
                    self.username = username
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input.Path,
                headers: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_stop_hyphen_in_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/codespaces/{codespace_name}/stop/post(codespaces/stop-in-organization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List codespaces in a repository for the authenticated user
    ///
    /// Lists the codespaces associated to a specified repository and the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)`.
    public enum codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/list-in-repository-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/responses/200/content/json/codespaces`.
                        public var codespaces: [Components.Schemas.codespace]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - codespaces:
                        public init(
                            total_count: Swift.Int,
                            codespaces: [Components.Schemas.codespace]
                        ) {
                            self.total_count = total_count
                            self.codespaces = codespaces
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case codespaces
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/get(codespaces/list-in-repository-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a codespace in a repository
    ///
    /// Creates a codespace owned by the authenticated user in the specified repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)`.
    public enum codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/create-with-repo-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Git ref (typically a branch name) for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/ref`.
                    public var ref: Swift.String?
                    /// The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/location`.
                    public var location: Swift.String?
                    /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/geo`.
                    @frozen public enum geoPayload: String, Codable, Hashable, Sendable {
                        case EuropeWest = "EuropeWest"
                        case SoutheastAsia = "SoutheastAsia"
                        case UsEast = "UsEast"
                        case UsWest = "UsWest"
                    }
                    /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/geo`.
                    public var geo: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.geoPayload?
                    /// IP for location auto-detection when proxying a request
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/client_ip`.
                    public var client_ip: Swift.String?
                    /// Machine type to use for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/machine`.
                    public var machine: Swift.String?
                    /// Path to devcontainer.json config to use for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/devcontainer_path`.
                    public var devcontainer_path: Swift.String?
                    /// Whether to authorize requested permissions from devcontainer.json
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/multi_repo_permissions_opt_out`.
                    public var multi_repo_permissions_opt_out: Swift.Bool?
                    /// Working directory for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/working_directory`.
                    public var working_directory: Swift.String?
                    /// Time in minutes before codespace stops from inactivity
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/idle_timeout_minutes`.
                    public var idle_timeout_minutes: Swift.Int?
                    /// Display name for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/display_name`.
                    public var display_name: Swift.String?
                    /// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/json/retention_period_minutes`.
                    public var retention_period_minutes: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ref: Git ref (typically a branch name) for this codespace
                    ///   - location: The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                    ///   - geo: The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                    ///   - client_ip: IP for location auto-detection when proxying a request
                    ///   - machine: Machine type to use for this codespace
                    ///   - devcontainer_path: Path to devcontainer.json config to use for this codespace
                    ///   - multi_repo_permissions_opt_out: Whether to authorize requested permissions from devcontainer.json
                    ///   - working_directory: Working directory for this codespace
                    ///   - idle_timeout_minutes: Time in minutes before codespace stops from inactivity
                    ///   - display_name: Display name for this codespace
                    ///   - retention_period_minutes: Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
                    public init(
                        ref: Swift.String? = nil,
                        location: Swift.String? = nil,
                        geo: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.geoPayload? = nil,
                        client_ip: Swift.String? = nil,
                        machine: Swift.String? = nil,
                        devcontainer_path: Swift.String? = nil,
                        multi_repo_permissions_opt_out: Swift.Bool? = nil,
                        working_directory: Swift.String? = nil,
                        idle_timeout_minutes: Swift.Int? = nil,
                        display_name: Swift.String? = nil,
                        retention_period_minutes: Swift.Int? = nil
                    ) {
                        self.ref = ref
                        self.location = location
                        self.geo = geo
                        self.client_ip = client_ip
                        self.machine = machine
                        self.devcontainer_path = devcontainer_path
                        self.multi_repo_permissions_opt_out = multi_repo_permissions_opt_out
                        self.working_directory = working_directory
                        self.idle_timeout_minutes = idle_timeout_minutes
                        self.display_name = display_name
                        self.retention_period_minutes = retention_period_minutes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ref
                        case location
                        case geo
                        case client_ip
                        case machine
                        case devcontainer_path
                        case multi_repo_permissions_opt_out
                        case working_directory
                        case idle_timeout_minutes
                        case display_name
                        case retention_period_minutes
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when the codespace was successfully created
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response when the codespace creation partially failed but is being retried in the background
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.codespaces_sol_create_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/post(codespaces/create-with-repo-for-authenticated-user)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List devcontainer configurations in a repository for the authenticated user
    ///
    /// Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
    /// specify launchpoint configurations for codespaces created within the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/devcontainers`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)`.
    public enum codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/list-devcontainers-in-repository-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json/devcontainersPayload`.
                        public struct devcontainersPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json/devcontainersPayload/path`.
                            public var path: Swift.String
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json/devcontainersPayload/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json/devcontainersPayload/display_name`.
                            public var display_name: Swift.String?
                            /// Creates a new `devcontainersPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - path:
                            ///   - name:
                            ///   - display_name:
                            public init(
                                path: Swift.String,
                                name: Swift.String? = nil,
                                display_name: Swift.String? = nil
                            ) {
                                self.path = path
                                self.name = name
                                self.display_name = display_name
                            }
                            public enum CodingKeys: String, CodingKey {
                                case path
                                case name
                                case display_name
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json/devcontainers`.
                        public typealias devcontainersPayload = [Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload.devcontainersPayloadPayload]
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/json/devcontainers`.
                        public var devcontainers: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload.devcontainersPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - devcontainers:
                        public init(
                            total_count: Swift.Int,
                            devcontainers: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload.devcontainersPayload
                        ) {
                            self.total_count = total_count
                            self.devcontainers = devcontainers
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case devcontainers
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/devcontainers/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_devcontainers_hyphen_in_hyphen_repository_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/devcontainers/get(codespaces/list-devcontainers-in-repository-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List available machine types for a repository
    ///
    /// List the machine types available for a given repository based on its configuration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/machines`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)`.
    public enum codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/repo-machines-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The location to check for available machines. Assigned by IP if not provided.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/query/location`.
                public var location: Swift.String?
                /// IP for location auto-detection when proxying a request
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/query/client_ip`.
                public var client_ip: Swift.String?
                /// The branch or commit to check for prebuild availability and devcontainer restrictions.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/query/ref`.
                public var ref: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - location: The location to check for available machines. Assigned by IP if not provided.
                ///   - client_ip: IP for location auto-detection when proxying a request
                ///   - ref: The branch or commit to check for prebuild availability and devcontainer restrictions.
                public init(
                    location: Swift.String? = nil,
                    client_ip: Swift.String? = nil,
                    ref: Swift.String? = nil
                ) {
                    self.location = location
                    self.client_ip = client_ip
                    self.ref = ref
                }
            }
            public var query: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/responses/200/content/json/machines`.
                        public var machines: [Components.Schemas.codespace_hyphen_machine]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - machines:
                        public init(
                            total_count: Swift.Int,
                            machines: [Components.Schemas.codespace_hyphen_machine]
                        ) {
                            self.total_count = total_count
                            self.machines = machines
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case machines
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/machines/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_repo_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/machines/get(codespaces/repo-machines-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get default attributes for a codespace
    ///
    /// Gets the default attributes for codespaces created by the user with the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/new`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/new/get(codespaces/pre-flight-with-repo-for-authenticated-user)`.
    public enum codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/pre-flight-with-repo-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/query/ref`.
                public var ref: Swift.String?
                /// An alternative IP for default location auto-detection, such as when proxying a request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/query/client_ip`.
                public var client_ip: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
                ///   - client_ip: An alternative IP for default location auto-detection, such as when proxying a request.
                public init(
                    ref: Swift.String? = nil,
                    client_ip: Swift.String? = nil
                ) {
                    self.ref = ref
                    self.client_ip = client_ip
                }
            }
            public var query: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content/json/billable_owner`.
                        public var billable_owner: Components.Schemas.simple_hyphen_user?
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content/json/defaults`.
                        public struct defaultsPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content/json/defaults/location`.
                            public var location: Swift.String
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content/json/defaults/devcontainer_path`.
                            public var devcontainer_path: Swift.String?
                            /// Creates a new `defaultsPayload`.
                            ///
                            /// - Parameters:
                            ///   - location:
                            ///   - devcontainer_path:
                            public init(
                                location: Swift.String,
                                devcontainer_path: Swift.String? = nil
                            ) {
                                self.location = location
                                self.devcontainer_path = devcontainer_path
                            }
                            public enum CodingKeys: String, CodingKey {
                                case location
                                case devcontainer_path
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content/json/defaults`.
                        public var defaults: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload.defaultsPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - billable_owner:
                        ///   - defaults:
                        public init(
                            billable_owner: Components.Schemas.simple_hyphen_user? = nil,
                            defaults: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload.defaultsPayload? = nil
                        ) {
                            self.billable_owner = billable_owner
                            self.defaults = defaults
                        }
                        public enum CodingKeys: String, CodingKey {
                            case billable_owner
                            case defaults
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/new/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response when a user is able to create codespaces from the repository.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/new/get(codespaces/pre-flight-with-repo-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_pre_hyphen_flight_hyphen_with_hyphen_repo_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/new/get(codespaces/pre-flight-with-repo-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/new/get(codespaces/pre-flight-with-repo-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/new/get(codespaces/pre-flight-with-repo-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if permissions defined by a devcontainer have been accepted by the authenticated user
    ///
    /// Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/permissions_check`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)`.
    public enum codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer {
        public static let id: Swift.String = "codespaces/check-permissions-for-devcontainer"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/query/ref`.
                public var ref: Swift.String
                /// Path to the devcontainer.json configuration to use for the permission check.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/query/devcontainer_path`.
                public var devcontainer_path: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ref: The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
                ///   - devcontainer_path: Path to the devcontainer.json configuration to use for the permission check.
                public init(
                    ref: Swift.String,
                    devcontainer_path: Swift.String
                ) {
                    self.ref = ref
                    self.devcontainer_path = devcontainer_path
                }
            }
            public var query: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Path,
                query: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Query,
                headers: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/permissions_check/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespaces_hyphen_permissions_hyphen_check_hyphen_for_hyphen_devcontainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespaces_hyphen_permissions_hyphen_check_hyphen_for_hyphen_devcontainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response when the permission check is successful
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_check_hyphen_permissions_hyphen_for_hyphen_devcontainer.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/permissions_check/get(codespaces/check-permissions-for-devcontainer)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository secrets
    ///
    /// Lists all development environment secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/get(codespaces/list-repo-secrets)`.
    public enum codespaces_sol_list_hyphen_repo_hyphen_secrets {
        public static let id: Swift.String = "codespaces/list-repo-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Path,
                query: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.repo_hyphen_codespaces_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.repo_hyphen_codespaces_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/get(codespaces/list-repo-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_repo_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// Anyone with read access to the repository can use this endpoint.
    ///
    /// If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/public-key/get(codespaces/get-repo-public-key)`.
    public enum codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key {
        public static let id: Swift.String = "codespaces/get-repo-public-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/public-key/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/public-key/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/public-key/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path,
                headers: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespaces_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespaces_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/public-key/get(codespaces/get-repo-public-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository secret
    ///
    /// Gets a single repository development environment secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/get(codespaces/get-repo-secret)`.
    public enum codespaces_sol_get_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "codespaces/get-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.repo_hyphen_codespaces_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repo_hyphen_codespaces_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/get(codespaces/get-repo-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_repo_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-repo-secret)`.
    public enum codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "codespaces/create-or-update-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String?
                    /// ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
                    ///   - key_id: ID of the key you used to encrypt the secret.
                    public init(
                        encrypted_value: Swift.String? = nil,
                        key_id: Swift.String? = nil
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path,
                headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers = .init(),
                body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-repo-secret)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository secret
    ///
    /// Deletes a development environment secret in a repository using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/delete(codespaces/delete-repo-secret)`.
    public enum codespaces_sol_delete_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "codespaces/delete-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/codespaces/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/codespaces/secrets/{secret_name}/delete(codespaces/delete-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_delete_hyphen_repo_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a codespace from a pull request
    ///
    /// Creates a codespace owned by the authenticated user for the specified pull request.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)`.
    public enum codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/create-with-pr-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/path/pull_number`.
                public var pull_number: Components.Parameters.pull_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pull_number: The number that identifies the pull request.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    pull_number: Components.Parameters.pull_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pull_number = pull_number
                }
            }
            public var path: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/location`.
                    public var location: Swift.String?
                    /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/geo`.
                    @frozen public enum geoPayload: String, Codable, Hashable, Sendable {
                        case EuropeWest = "EuropeWest"
                        case SoutheastAsia = "SoutheastAsia"
                        case UsEast = "UsEast"
                        case UsWest = "UsWest"
                    }
                    /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/geo`.
                    public var geo: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.geoPayload?
                    /// IP for location auto-detection when proxying a request
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/client_ip`.
                    public var client_ip: Swift.String?
                    /// Machine type to use for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/machine`.
                    public var machine: Swift.String?
                    /// Path to devcontainer.json config to use for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/devcontainer_path`.
                    public var devcontainer_path: Swift.String?
                    /// Whether to authorize requested permissions from devcontainer.json
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/multi_repo_permissions_opt_out`.
                    public var multi_repo_permissions_opt_out: Swift.Bool?
                    /// Working directory for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/working_directory`.
                    public var working_directory: Swift.String?
                    /// Time in minutes before codespace stops from inactivity
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/idle_timeout_minutes`.
                    public var idle_timeout_minutes: Swift.Int?
                    /// Display name for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/display_name`.
                    public var display_name: Swift.String?
                    /// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/json/retention_period_minutes`.
                    public var retention_period_minutes: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - location: The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                    ///   - geo: The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                    ///   - client_ip: IP for location auto-detection when proxying a request
                    ///   - machine: Machine type to use for this codespace
                    ///   - devcontainer_path: Path to devcontainer.json config to use for this codespace
                    ///   - multi_repo_permissions_opt_out: Whether to authorize requested permissions from devcontainer.json
                    ///   - working_directory: Working directory for this codespace
                    ///   - idle_timeout_minutes: Time in minutes before codespace stops from inactivity
                    ///   - display_name: Display name for this codespace
                    ///   - retention_period_minutes: Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
                    public init(
                        location: Swift.String? = nil,
                        geo: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.geoPayload? = nil,
                        client_ip: Swift.String? = nil,
                        machine: Swift.String? = nil,
                        devcontainer_path: Swift.String? = nil,
                        multi_repo_permissions_opt_out: Swift.Bool? = nil,
                        working_directory: Swift.String? = nil,
                        idle_timeout_minutes: Swift.Int? = nil,
                        display_name: Swift.String? = nil,
                        retention_period_minutes: Swift.Int? = nil
                    ) {
                        self.location = location
                        self.geo = geo
                        self.client_ip = client_ip
                        self.machine = machine
                        self.devcontainer_path = devcontainer_path
                        self.multi_repo_permissions_opt_out = multi_repo_permissions_opt_out
                        self.working_directory = working_directory
                        self.idle_timeout_minutes = idle_timeout_minutes
                        self.display_name = display_name
                        self.retention_period_minutes = retention_period_minutes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case location
                        case geo
                        case client_ip
                        case machine
                        case devcontainer_path
                        case multi_repo_permissions_opt_out
                        case working_directory
                        case idle_timeout_minutes
                        case display_name
                        case retention_period_minutes
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when the codespace was successfully created
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/codespaces/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response when the codespace creation partially failed but is being retried in the background
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.codespaces_sol_create_hyphen_with_hyphen_pr_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/codespaces/post(codespaces/create-with-pr-for-authenticated-user)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List codespaces for the authenticated user
    ///
    /// Lists the authenticated user's codespaces.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces`.
    /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)`.
    public enum codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/list-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/GET/query/page`.
                public var page: Components.Parameters.page?
                /// ID of the Repository to filter on
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/GET/query/repository_id`.
                public var repository_id: Components.Parameters.repository_hyphen_id_hyphen_in_hyphen_query?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - repository_id: ID of the Repository to filter on
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    repository_id: Components.Parameters.repository_hyphen_id_hyphen_in_hyphen_query? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.repository_id = repository_id
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/codespaces/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/codespaces/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/user/codespaces/GET/responses/200/content/json/codespaces`.
                        public var codespaces: [Components.Schemas.codespace]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - codespaces:
                        public init(
                            total_count: Swift.Int,
                            codespaces: [Components.Schemas.codespace]
                        ) {
                            self.total_count = total_count
                            self.codespaces = codespaces
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case codespaces
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/codespaces/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/get(codespaces/list-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a codespace for the authenticated user
    ///
    /// Creates a new codespace, owned by the authenticated user.
    ///
    /// This endpoint requires either a `repository_id` OR a `pull_request` but not both.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces`.
    /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)`.
    public enum codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/create-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Repository id for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/repository_id`.
                        public var repository_id: Swift.Int
                        /// Git ref (typically a branch name) for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/ref`.
                        public var ref: Swift.String?
                        /// The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/location`.
                        public var location: Swift.String?
                        /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/geo`.
                        @frozen public enum geoPayload: String, Codable, Hashable, Sendable {
                            case EuropeWest = "EuropeWest"
                            case SoutheastAsia = "SoutheastAsia"
                            case UsEast = "UsEast"
                            case UsWest = "UsWest"
                        }
                        /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/geo`.
                        public var geo: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case1Payload.geoPayload?
                        /// IP for location auto-detection when proxying a request
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/client_ip`.
                        public var client_ip: Swift.String?
                        /// Machine type to use for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/machine`.
                        public var machine: Swift.String?
                        /// Path to devcontainer.json config to use for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/devcontainer_path`.
                        public var devcontainer_path: Swift.String?
                        /// Whether to authorize requested permissions from devcontainer.json
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/multi_repo_permissions_opt_out`.
                        public var multi_repo_permissions_opt_out: Swift.Bool?
                        /// Working directory for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/working_directory`.
                        public var working_directory: Swift.String?
                        /// Time in minutes before codespace stops from inactivity
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/idle_timeout_minutes`.
                        public var idle_timeout_minutes: Swift.Int?
                        /// Display name for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/display_name`.
                        public var display_name: Swift.String?
                        /// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1/retention_period_minutes`.
                        public var retention_period_minutes: Swift.Int?
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - repository_id: Repository id for this codespace
                        ///   - ref: Git ref (typically a branch name) for this codespace
                        ///   - location: The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                        ///   - geo: The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                        ///   - client_ip: IP for location auto-detection when proxying a request
                        ///   - machine: Machine type to use for this codespace
                        ///   - devcontainer_path: Path to devcontainer.json config to use for this codespace
                        ///   - multi_repo_permissions_opt_out: Whether to authorize requested permissions from devcontainer.json
                        ///   - working_directory: Working directory for this codespace
                        ///   - idle_timeout_minutes: Time in minutes before codespace stops from inactivity
                        ///   - display_name: Display name for this codespace
                        ///   - retention_period_minutes: Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
                        public init(
                            repository_id: Swift.Int,
                            ref: Swift.String? = nil,
                            location: Swift.String? = nil,
                            geo: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case1Payload.geoPayload? = nil,
                            client_ip: Swift.String? = nil,
                            machine: Swift.String? = nil,
                            devcontainer_path: Swift.String? = nil,
                            multi_repo_permissions_opt_out: Swift.Bool? = nil,
                            working_directory: Swift.String? = nil,
                            idle_timeout_minutes: Swift.Int? = nil,
                            display_name: Swift.String? = nil,
                            retention_period_minutes: Swift.Int? = nil
                        ) {
                            self.repository_id = repository_id
                            self.ref = ref
                            self.location = location
                            self.geo = geo
                            self.client_ip = client_ip
                            self.machine = machine
                            self.devcontainer_path = devcontainer_path
                            self.multi_repo_permissions_opt_out = multi_repo_permissions_opt_out
                            self.working_directory = working_directory
                            self.idle_timeout_minutes = idle_timeout_minutes
                            self.display_name = display_name
                            self.retention_period_minutes = retention_period_minutes
                        }
                        public enum CodingKeys: String, CodingKey {
                            case repository_id
                            case ref
                            case location
                            case geo
                            case client_ip
                            case machine
                            case devcontainer_path
                            case multi_repo_permissions_opt_out
                            case working_directory
                            case idle_timeout_minutes
                            case display_name
                            case retention_period_minutes
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case1`.
                    case case1(Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// Pull request number for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/pull_request`.
                        public struct pull_requestPayload: Codable, Hashable, Sendable {
                            /// Pull request number
                            ///
                            /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/pull_request/pull_request_number`.
                            public var pull_request_number: Swift.Int
                            /// Repository id for this codespace
                            ///
                            /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/pull_request/repository_id`.
                            public var repository_id: Swift.Int
                            /// Creates a new `pull_requestPayload`.
                            ///
                            /// - Parameters:
                            ///   - pull_request_number: Pull request number
                            ///   - repository_id: Repository id for this codespace
                            public init(
                                pull_request_number: Swift.Int,
                                repository_id: Swift.Int
                            ) {
                                self.pull_request_number = pull_request_number
                                self.repository_id = repository_id
                            }
                            public enum CodingKeys: String, CodingKey {
                                case pull_request_number
                                case repository_id
                            }
                        }
                        /// Pull request number for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/pull_request`.
                        public var pull_request: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case2Payload.pull_requestPayload
                        /// The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/location`.
                        public var location: Swift.String?
                        /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/geo`.
                        @frozen public enum geoPayload: String, Codable, Hashable, Sendable {
                            case EuropeWest = "EuropeWest"
                            case SoutheastAsia = "SoutheastAsia"
                            case UsEast = "UsEast"
                            case UsWest = "UsWest"
                        }
                        /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/geo`.
                        public var geo: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case2Payload.geoPayload?
                        /// Machine type to use for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/machine`.
                        public var machine: Swift.String?
                        /// Path to devcontainer.json config to use for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/devcontainer_path`.
                        public var devcontainer_path: Swift.String?
                        /// Working directory for this codespace
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/working_directory`.
                        public var working_directory: Swift.String?
                        /// Time in minutes before codespace stops from inactivity
                        ///
                        /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2/idle_timeout_minutes`.
                        public var idle_timeout_minutes: Swift.Int?
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - pull_request: Pull request number for this codespace
                        ///   - location: The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
                        ///   - geo: The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
                        ///   - machine: Machine type to use for this codespace
                        ///   - devcontainer_path: Path to devcontainer.json config to use for this codespace
                        ///   - working_directory: Working directory for this codespace
                        ///   - idle_timeout_minutes: Time in minutes before codespace stops from inactivity
                        public init(
                            pull_request: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case2Payload.pull_requestPayload,
                            location: Swift.String? = nil,
                            geo: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case2Payload.geoPayload? = nil,
                            machine: Swift.String? = nil,
                            devcontainer_path: Swift.String? = nil,
                            working_directory: Swift.String? = nil,
                            idle_timeout_minutes: Swift.Int? = nil
                        ) {
                            self.pull_request = pull_request
                            self.location = location
                            self.geo = geo
                            self.machine = machine
                            self.devcontainer_path = devcontainer_path
                            self.working_directory = working_directory
                            self.idle_timeout_minutes = idle_timeout_minutes
                        }
                        public enum CodingKeys: String, CodingKey {
                            case pull_request
                            case location
                            case geo
                            case machine
                            case devcontainer_path
                            case working_directory
                            case idle_timeout_minutes
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/json/case2`.
                    case case2(Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/user/codespaces/POST/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when the codespace was successfully created
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response when the codespace creation partially failed but is being retried in the background
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.codespaces_sol_create_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/post(codespaces/create-for-authenticated-user)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List secrets for the authenticated user
    ///
    /// Lists all development environment secrets available for a user's codespaces without revealing their
    /// encrypted values.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/get(codespaces/list-secrets-for-authenticated-user)`.
    public enum codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/list-secrets-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.codespaces_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.codespaces_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/get(codespaces/list-secrets-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_secrets_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get public key for the authenticated user
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/public-key`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/public-key/get(codespaces/get-public-key-for-authenticated-user)`.
    public enum codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/get-public-key-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespaces_hyphen_user_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespaces_hyphen_user_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/public-key/get(codespaces/get-public-key-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_public_hyphen_key_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a secret for the authenticated user
    ///
    /// Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/get(codespaces/get-secret-for-authenticated-user)`.
    public enum codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/get-secret-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - secret_name: The name of the secret.
                public init(secret_name: Components.Parameters.secret_hyphen_name) {
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespaces_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespaces_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/get(codespaces/get-secret-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update a secret for the authenticated user
    ///
    /// Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-secret-for-authenticated-user)`.
    public enum codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/create-or-update-secret-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - secret_name: The name of the secret.
                public init(secret_name: Components.Parameters.secret_hyphen_name) {
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String?
                    /// ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json/selected_repository_idsPayload`.
                    public struct selected_repository_idsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json/selected_repository_idsPayload/value1`.
                        public var value1: Swift.Int?
                        /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json/selected_repository_idsPayload/value2`.
                        public var value2: Swift.String?
                        /// Creates a new `selected_repository_idsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Swift.Int? = nil,
                            value2: Swift.String? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                value2 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    value1,
                                    value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                value1,
                                value2
                            ])
                        }
                    }
                    /// An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json/selected_repository_ids`.
                    public typealias selected_repository_idsPayload = [Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.selected_repository_idsPayloadPayload]
                    /// An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.selected_repository_idsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
                    ///   - key_id: ID of the key you used to encrypt the secret.
                    ///   - selected_repository_ids: An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
                    public init(
                        encrypted_value: Swift.String? = nil,
                        key_id: Swift.String,
                        selected_repository_ids: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.selected_repository_idsPayload? = nil
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response after successfully creating a secret
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-secret-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response after successfully updating a secret
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-secret-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_create_hyphen_or_hyphen_update_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-secret-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/put(codespaces/create-or-update-secret-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a secret for the authenticated user
    ///
    /// Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/delete(codespaces/delete-secret-for-authenticated-user)`.
    public enum codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/delete-secret-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - secret_name: The name of the secret.
                public init(secret_name: Components.Parameters.secret_hyphen_name) {
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/delete(codespaces/delete-secret-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_delete_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List selected repositories for a user secret
    ///
    /// List the repositories that have been granted the ability to use a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)`.
    public enum codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/list-repositories-for-secret-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - secret_name: The name of the secret.
                public init(secret_name: Components.Parameters.secret_hyphen_name) {
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.minimal_hyphen_repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repositories:
                        public init(
                            total_count: Swift.Int,
                            repositories: [Components.Schemas.minimal_hyphen_repository]
                        ) {
                            self.total_count = total_count
                            self.repositories = repositories
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repositories
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_list_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/get(codespaces/list-repositories-for-secret-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set selected repositories for a user secret
    ///
    /// Select the repositories that will use a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)`.
    public enum codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/set-repositories-for-secret-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - secret_name: The name of the secret.
                public init(secret_name: Components.Parameters.secret_hyphen_name) {
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_repository_ids: An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
                    public init(selected_repository_ids: [Swift.Int]) {
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/PUT/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when repositories were added to the selected list
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_set_hyphen_repositories_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/put(codespaces/set-repositories-for-secret-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add a selected repository to a user secret
    ///
    /// Adds a repository to the selected repositories for a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)`.
    public enum codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/add-repository-for-secret-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when repository was added to the selected list
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_add_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/put(codespaces/add-repository-for-secret-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a selected repository from a user secret
    ///
    /// Removes a repository from the selected repositories for a user's development environment secret.
    ///
    /// The authenticated user must have Codespaces access to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)`.
    public enum codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/remove-repository-for-secret-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/secrets/{secret_name}/repositories/{repository_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when repository was removed from the selected list
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.codespaces_sol_remove_hyphen_repository_hyphen_for_hyphen_secret_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/secrets/{secret_name}/repositories/{repository_id}/delete(codespaces/remove-repository-for-secret-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a codespace for the authenticated user
    ///
    /// Gets information about a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)`.
    public enum codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/get-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/GET/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/get(codespaces/get-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a codespace for the authenticated user
    ///
    /// Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
    ///
    /// If you specify a new machine type it will be applied the next time your codespace is started.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/patch(codespaces/update-for-authenticated-user)`.
    public enum codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/update-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A valid machine to transition this codespace to.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/requestBody/json/machine`.
                    public var machine: Swift.String?
                    /// Display name for this codespace
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/requestBody/json/display_name`.
                    public var display_name: Swift.String?
                    /// Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/requestBody/json/recent_folders`.
                    public var recent_folders: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - machine: A valid machine to transition this codespace to.
                    ///   - display_name: Display name for this codespace
                    ///   - recent_folders: Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
                    public init(
                        machine: Swift.String? = nil,
                        display_name: Swift.String? = nil,
                        recent_folders: [Swift.String]? = nil
                    ) {
                        self.machine = machine
                        self.display_name = display_name
                        self.recent_folders = recent_folders
                    }
                    public enum CodingKeys: String, CodingKey {
                        case machine
                        case display_name
                        case recent_folders
                    }
                }
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/patch(codespaces/update-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_update_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/patch(codespaces/update-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/patch(codespaces/update-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/patch(codespaces/update-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a codespace for the authenticated user
    ///
    /// Deletes a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /user/codespaces/{codespace_name}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)`.
    public enum codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/delete-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/DELETE/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_delete_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/delete(codespaces/delete-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export a codespace for the authenticated user
    ///
    /// Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
    ///
    /// If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/exports`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)`.
    public enum codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/export-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/POST/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.codespace_hyphen_export_hyphen_details)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace_hyphen_export_hyphen_details {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.codespaces_sol_export_hyphen_for_hyphen_authenticated_hyphen_user.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/post(codespaces/export-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get details about a codespace export
    ///
    /// Gets information about an export of a codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}/exports/{export_id}`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/{export_id}/get(codespaces/get-export-details-for-authenticated-user)`.
    public enum codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/get-export-details-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/{export_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/{export_id}/GET/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/{export_id}/GET/path/export_id`.
                public var export_id: Components.Parameters.export_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                ///   - export_id: The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
                public init(
                    codespace_name: Components.Parameters.codespace_hyphen_name,
                    export_id: Components.Parameters.export_hyphen_id
                ) {
                    self.codespace_name = codespace_name
                    self.export_id = export_id
                }
            }
            public var path: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/{export_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/{export_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/exports/{export_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespace_hyphen_export_hyphen_details)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace_hyphen_export_hyphen_details {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/{export_id}/get(codespaces/get-export-details-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_get_hyphen_export_hyphen_details_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/exports/{export_id}/get(codespaces/get-export-details-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List machine types for a codespace
    ///
    /// List the machine types a codespace can transition to use.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/codespaces/{codespace_name}/machines`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)`.
    public enum codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/codespace-machines-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/responses/200/content/json/machines`.
                        public var machines: [Components.Schemas.codespace_hyphen_machine]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - machines:
                        public init(
                            total_count: Swift.Int,
                            machines: [Components.Schemas.codespace_hyphen_machine]
                        ) {
                            self.total_count = total_count
                            self.machines = machines
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case machines
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/machines/GET/responses/200/content/application\/json`.
                    case json(Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_codespace_hyphen_machines_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/machines/get(codespaces/codespace-machines-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a repository from an unpublished codespace
    ///
    /// Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
    ///
    /// The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
    ///
    /// This will fail for a codespace that is already published, meaning it has an associated repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/publish`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)`.
    public enum codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/publish-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// A name for the new repository.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Whether the new repository should be private.
                    ///
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/requestBody/json/private`.
                    public var _private: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: A name for the new repository.
                    ///   - _private: Whether the new repository should be private.
                    public init(
                        name: Swift.String? = nil,
                        _private: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self._private = _private
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case _private = "private"
                    }
                }
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/requestBody/content/application\/json`.
                case json(Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/publish/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace_hyphen_with_hyphen_full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.codespaces_sol_publish_hyphen_for_hyphen_authenticated_hyphen_user.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/publish/post(codespaces/publish-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Start a codespace for the authenticated user
    ///
    /// Starts a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/start`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)`.
    public enum codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/start-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/start/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/start/POST/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/start/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/start/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/start/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Code402: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/start/POST/responses/402/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/start/POST/responses/402/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Code402.Body
                /// Creates a new `Code402`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Code402.Body) {
                    self.body = body
                }
            }
            /// Payment required
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/402`.
            ///
            /// HTTP response code: `402 code402`.
            case code402(Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Code402)
            /// The associated value of the enum case if `self` is `.code402`.
            ///
            /// - Throws: An error if `self` is not `.code402`.
            /// - SeeAlso: `.code402`.
            public var code402: Operations.codespaces_sol_start_hyphen_for_hyphen_authenticated_hyphen_user.Output.Code402 {
                get throws {
                    switch self {
                    case let .code402(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "code402",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/start/post(codespaces/start-for-authenticated-user)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Stop a codespace for the authenticated user
    ///
    /// Stops a user's codespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /user/codespaces/{codespace_name}/stop`.
    /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)`.
    public enum codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "codespaces/stop-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/stop/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The name of the codespace.
                ///
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/stop/POST/path/codespace_name`.
                public var codespace_name: Components.Parameters.codespace_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - codespace_name: The name of the codespace.
                public init(codespace_name: Components.Parameters.codespace_hyphen_name) {
                    self.codespace_name = codespace_name
                }
            }
            public var path: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/stop/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/stop/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/codespaces/{codespace_name}/stop/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.codespace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.codespace {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.codespaces_sol_stop_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/codespaces/{codespace_name}/stop/post(codespaces/stop-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
