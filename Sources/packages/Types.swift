// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get list of conflicting packages during Docker migration for organization
    ///
    /// Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/docker/conflicts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-organization)`.
    func packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization(_ input: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input) async throws -> Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Output
    /// List packages for an organization
    ///
    /// Lists packages in an organization readable by the user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/get(packages/list-packages-for-organization)`.
    func packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization(_ input: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input) async throws -> Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Output
    /// Get a package for an organization
    ///
    /// Gets a specific package in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/get(packages/get-package-for-organization)`.
    func packages_sol_get_hyphen_package_hyphen_for_hyphen_organization(_ input: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Output
    /// Delete a package for an organization
    ///
    /// Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-org)`.
    func packages_sol_delete_hyphen_package_hyphen_for_hyphen_org(_ input: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Output
    /// Restore a package for an organization
    ///
    /// Restores an entire package in an organization.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-org)`.
    func packages_sol_restore_hyphen_package_hyphen_for_hyphen_org(_ input: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Output
    /// List package versions for a package owned by an organization
    ///
    /// Lists package versions for a package owned by an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-org)`.
    func packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org(_ input: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input) async throws -> Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Output
    /// Get a package version for an organization
    ///
    /// Gets a specific package version in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-organization)`.
    func packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization(_ input: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Output
    /// Delete package version for an organization
    ///
    /// Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-org)`.
    func packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org(_ input: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output
    /// Restore package version for an organization
    ///
    /// Restores a specific package version in an organization.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-org)`.
    func packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org(_ input: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output
    /// Get list of conflicting packages during Docker migration for authenticated-user
    ///
    /// Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/docker/conflicts`.
    /// - Remark: Generated from `#/paths//user/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-authenticated-user)`.
    func packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List packages for the authenticated user's namespace
    ///
    /// Lists packages owned by the authenticated user within the user's namespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages`.
    /// - Remark: Generated from `#/paths//user/packages/get(packages/list-packages-for-authenticated-user)`.
    func packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get a package for the authenticated user
    ///
    /// Gets a specific package for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/get(packages/get-package-for-authenticated-user)`.
    func packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete a package for the authenticated user
    ///
    /// Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, `repo` scope is also required. For the list these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /user/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/delete(packages/delete-package-for-authenticated-user)`.
    func packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Restore a package for the authenticated user
    ///
    /// Restores a package owned by the authenticated user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /user/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-authenticated-user)`.
    func packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List package versions for a package owned by the authenticated user
    ///
    /// Lists package versions for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-authenticated-user)`.
    func packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Output
    /// Get a package version for the authenticated user
    ///
    /// Gets a specific package version for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-authenticated-user)`.
    func packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Delete a package version for the authenticated user
    ///
    /// Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-authenticated-user)`.
    func packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Restore a package version for the authenticated user
    ///
    /// Restores a package version owned by the authenticated user.
    ///
    /// You can restore a deleted package version under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-authenticated-user)`.
    func packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get list of conflicting packages during Docker migration for user
    ///
    /// Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/docker/conflicts`.
    /// - Remark: Generated from `#/paths//users/{username}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-user)`.
    func packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user(_ input: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Output
    /// List packages for a user
    ///
    /// Lists all packages in a user's namespace for which the requesting user has access.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/get(packages/list-packages-for-user)`.
    func packages_sol_list_hyphen_packages_hyphen_for_hyphen_user(_ input: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Output
    /// Get a package for a user
    ///
    /// Gets a specific package metadata for a public package owned by a user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/get(packages/get-package-for-user)`.
    func packages_sol_get_hyphen_package_hyphen_for_hyphen_user(_ input: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Output
    /// Delete a package for a user
    ///
    /// Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /users/{username}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-user)`.
    func packages_sol_delete_hyphen_package_hyphen_for_hyphen_user(_ input: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Output
    /// Restore a package for a user
    ///
    /// Restores an entire package for a user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /users/{username}/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-user)`.
    func packages_sol_restore_hyphen_package_hyphen_for_hyphen_user(_ input: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Output
    /// List package versions for a package owned by a user
    ///
    /// Lists package versions for a public package owned by a specified user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-user)`.
    func packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user(_ input: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input) async throws -> Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Output
    /// Get a package version for a user
    ///
    /// Gets a specific package version for a public package owned by a specified user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-user)`.
    func packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user(_ input: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output
    /// Delete package version for a user
    ///
    /// Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-user)`.
    func packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user(_ input: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output
    /// Restore package version for a user
    ///
    /// Restores a specific package version for a user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-user)`.
    func packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user(_ input: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get list of conflicting packages during Docker migration for organization
    ///
    /// Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/docker/conflicts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-organization)`.
    public func packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization(
        path: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input.Path,
        headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Output {
        try await packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization(Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// List packages for an organization
    ///
    /// Lists packages in an organization readable by the user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/get(packages/list-packages-for-organization)`.
    public func packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization(
        path: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Path,
        query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Query,
        headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Output {
        try await packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization(Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a package for an organization
    ///
    /// Gets a specific package in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/get(packages/get-package-for-organization)`.
    public func packages_sol_get_hyphen_package_hyphen_for_hyphen_organization(
        path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input.Path,
        headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Output {
        try await packages_sol_get_hyphen_package_hyphen_for_hyphen_organization(Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a package for an organization
    ///
    /// Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-org)`.
    public func packages_sol_delete_hyphen_package_hyphen_for_hyphen_org(
        path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Output {
        try await packages_sol_delete_hyphen_package_hyphen_for_hyphen_org(Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Restore a package for an organization
    ///
    /// Restores an entire package in an organization.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-org)`.
    public func packages_sol_restore_hyphen_package_hyphen_for_hyphen_org(
        path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Path,
        query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Output {
        try await packages_sol_restore_hyphen_package_hyphen_for_hyphen_org(Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List package versions for a package owned by an organization
    ///
    /// Lists package versions for a package owned by an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-org)`.
    public func packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org(
        path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Path,
        query: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Query = .init(),
        headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Output {
        try await packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org(Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a package version for an organization
    ///
    /// Gets a specific package version in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-organization)`.
    public func packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization(
        path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input.Path,
        headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Output {
        try await packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization(Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete package version for an organization
    ///
    /// Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-org)`.
    public func packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org(
        path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output {
        try await packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org(Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Restore package version for an organization
    ///
    /// Restores a specific package version in an organization.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-org)`.
    public func packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org(
        path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output {
        try await packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org(Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get list of conflicting packages during Docker migration for authenticated-user
    ///
    /// Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/docker/conflicts`.
    /// - Remark: Generated from `#/paths//user/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-authenticated-user)`.
    public func packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user(headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()) async throws -> Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input(headers: headers))
    }
    /// List packages for the authenticated user's namespace
    ///
    /// Lists packages owned by the authenticated user within the user's namespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages`.
    /// - Remark: Generated from `#/paths//user/packages/get(packages/list-packages-for-authenticated-user)`.
    public func packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query,
        headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get a package for the authenticated user
    ///
    /// Gets a specific package for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/get(packages/get-package-for-authenticated-user)`.
    public func packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a package for the authenticated user
    ///
    /// Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, `repo` scope is also required. For the list these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /user/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/delete(packages/delete-package-for-authenticated-user)`.
    public func packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Restore a package for the authenticated user
    ///
    /// Restores a package owned by the authenticated user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /user/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-authenticated-user)`.
    public func packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List package versions for a package owned by the authenticated user
    ///
    /// Lists package versions for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-authenticated-user)`.
    public func packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user(
        path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user(Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a package version for the authenticated user
    ///
    /// Gets a specific package version for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-authenticated-user)`.
    public func packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a package version for the authenticated user
    ///
    /// Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-authenticated-user)`.
    public func packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Restore a package version for the authenticated user
    ///
    /// Restores a package version owned by the authenticated user.
    ///
    /// You can restore a deleted package version under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-authenticated-user)`.
    public func packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user(Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get list of conflicting packages during Docker migration for user
    ///
    /// Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/docker/conflicts`.
    /// - Remark: Generated from `#/paths//users/{username}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-user)`.
    public func packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user(
        path: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Output {
        try await packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user(Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List packages for a user
    ///
    /// Lists all packages in a user's namespace for which the requesting user has access.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/get(packages/list-packages-for-user)`.
    public func packages_sol_list_hyphen_packages_hyphen_for_hyphen_user(
        path: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Path,
        query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Query,
        headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Output {
        try await packages_sol_list_hyphen_packages_hyphen_for_hyphen_user(Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a package for a user
    ///
    /// Gets a specific package metadata for a public package owned by a user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/get(packages/get-package-for-user)`.
    public func packages_sol_get_hyphen_package_hyphen_for_hyphen_user(
        path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Output {
        try await packages_sol_get_hyphen_package_hyphen_for_hyphen_user(Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a package for a user
    ///
    /// Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /users/{username}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-user)`.
    public func packages_sol_delete_hyphen_package_hyphen_for_hyphen_user(
        path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Output {
        try await packages_sol_delete_hyphen_package_hyphen_for_hyphen_user(Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Restore a package for a user
    ///
    /// Restores an entire package for a user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /users/{username}/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-user)`.
    public func packages_sol_restore_hyphen_package_hyphen_for_hyphen_user(
        path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Path,
        query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Output {
        try await packages_sol_restore_hyphen_package_hyphen_for_hyphen_user(Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List package versions for a package owned by a user
    ///
    /// Lists package versions for a public package owned by a specified user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-user)`.
    public func packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user(
        path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input.Path,
        headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Output {
        try await packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user(Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a package version for a user
    ///
    /// Gets a specific package version for a public package owned by a specified user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-user)`.
    public func packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user(
        path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output {
        try await packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user(Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete package version for a user
    ///
    /// Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-user)`.
    public func packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user(
        path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output {
        try await packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user(Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Restore package version for a user
    ///
    /// Restores a specific package version for a user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-user)`.
    public func packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user(
        path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output {
        try await packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user(Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository`.
        public struct nullable_hyphen_minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `nullable_hyphen_minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.nullable_hyphen_minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.nullable_hyphen_minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// A software package
        ///
        /// - Remark: Generated from `#/components/schemas/package`.
        public struct package: Codable, Hashable, Sendable {
            /// Unique identifier of the package.
            ///
            /// - Remark: Generated from `#/components/schemas/package/id`.
            public var id: Swift.Int
            /// The name of the package.
            ///
            /// - Remark: Generated from `#/components/schemas/package/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/package/package_type`.
            @frozen public enum package_typePayload: String, Codable, Hashable, Sendable {
                case npm = "npm"
                case maven = "maven"
                case rubygems = "rubygems"
                case docker = "docker"
                case nuget = "nuget"
                case container = "container"
            }
            /// - Remark: Generated from `#/components/schemas/package/package_type`.
            public var package_type: Components.Schemas.package.package_typePayload
            /// - Remark: Generated from `#/components/schemas/package/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/package/html_url`.
            public var html_url: Swift.String
            /// The number of versions of the package.
            ///
            /// - Remark: Generated from `#/components/schemas/package/version_count`.
            public var version_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/package/visibility`.
            @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable {
                case _private = "private"
                case _public = "public"
            }
            /// - Remark: Generated from `#/components/schemas/package/visibility`.
            public var visibility: Components.Schemas.package.visibilityPayload
            /// - Remark: Generated from `#/components/schemas/package/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/package/repository`.
            public var repository: Components.Schemas.nullable_hyphen_minimal_hyphen_repository?
            /// - Remark: Generated from `#/components/schemas/package/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/package/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `package`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the package.
            ///   - name: The name of the package.
            ///   - package_type:
            ///   - url:
            ///   - html_url:
            ///   - version_count: The number of versions of the package.
            ///   - visibility:
            ///   - owner:
            ///   - repository:
            ///   - created_at:
            ///   - updated_at:
            public init(
                id: Swift.Int,
                name: Swift.String,
                package_type: Components.Schemas.package.package_typePayload,
                url: Swift.String,
                html_url: Swift.String,
                version_count: Swift.Int,
                visibility: Components.Schemas.package.visibilityPayload,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                repository: Components.Schemas.nullable_hyphen_minimal_hyphen_repository? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.id = id
                self.name = name
                self.package_type = package_type
                self.url = url
                self.html_url = html_url
                self.version_count = version_count
                self.visibility = visibility
                self.owner = owner
                self.repository = repository
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case package_type
                case url
                case html_url
                case version_count
                case visibility
                case owner
                case repository
                case created_at
                case updated_at
            }
        }
        /// A version of a software package
        ///
        /// - Remark: Generated from `#/components/schemas/package-version`.
        public struct package_hyphen_version: Codable, Hashable, Sendable {
            /// Unique identifier of the package version.
            ///
            /// - Remark: Generated from `#/components/schemas/package-version/id`.
            public var id: Swift.Int
            /// The name of the package version.
            ///
            /// - Remark: Generated from `#/components/schemas/package-version/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/package-version/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/package-version/package_html_url`.
            public var package_html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/package-version/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/package-version/license`.
            public var license: Swift.String?
            /// - Remark: Generated from `#/components/schemas/package-version/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/package-version/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/package-version/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/package-version/deleted_at`.
            public var deleted_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/package-version/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/package-version/metadata/package_type`.
                @frozen public enum package_typePayload: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// - Remark: Generated from `#/components/schemas/package-version/metadata/package_type`.
                public var package_type: Components.Schemas.package_hyphen_version.metadataPayload.package_typePayload
                /// - Remark: Generated from `#/components/schemas/package-version/metadata/container`.
                public struct containerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/package-version/metadata/container/tags`.
                    public var tags: [Swift.String]
                    /// Creates a new `containerPayload`.
                    ///
                    /// - Parameters:
                    ///   - tags:
                    public init(tags: [Swift.String]) {
                        self.tags = tags
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tags
                    }
                }
                /// - Remark: Generated from `#/components/schemas/package-version/metadata/container`.
                public var container: Components.Schemas.package_hyphen_version.metadataPayload.containerPayload?
                /// - Remark: Generated from `#/components/schemas/package-version/metadata/docker`.
                public struct dockerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/package-version/metadata/docker/tag`.
                    public var tag: [Swift.String]?
                    /// Creates a new `dockerPayload`.
                    ///
                    /// - Parameters:
                    ///   - tag:
                    public init(tag: [Swift.String]? = nil) {
                        self.tag = tag
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tag
                    }
                }
                /// - Remark: Generated from `#/components/schemas/package-version/metadata/docker`.
                public var docker: Components.Schemas.package_hyphen_version.metadataPayload.dockerPayload?
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - package_type:
                ///   - container:
                ///   - docker:
                public init(
                    package_type: Components.Schemas.package_hyphen_version.metadataPayload.package_typePayload,
                    container: Components.Schemas.package_hyphen_version.metadataPayload.containerPayload? = nil,
                    docker: Components.Schemas.package_hyphen_version.metadataPayload.dockerPayload? = nil
                ) {
                    self.package_type = package_type
                    self.container = container
                    self.docker = docker
                }
                public enum CodingKeys: String, CodingKey {
                    case package_type
                    case container
                    case docker
                }
            }
            /// - Remark: Generated from `#/components/schemas/package-version/metadata`.
            public var metadata: Components.Schemas.package_hyphen_version.metadataPayload?
            /// Creates a new `package_hyphen_version`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the package version.
            ///   - name: The name of the package version.
            ///   - url:
            ///   - package_html_url:
            ///   - html_url:
            ///   - license:
            ///   - description:
            ///   - created_at:
            ///   - updated_at:
            ///   - deleted_at:
            ///   - metadata:
            public init(
                id: Swift.Int,
                name: Swift.String,
                url: Swift.String,
                package_html_url: Swift.String,
                html_url: Swift.String? = nil,
                license: Swift.String? = nil,
                description: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                deleted_at: Foundation.Date? = nil,
                metadata: Components.Schemas.package_hyphen_version.metadataPayload? = nil
            ) {
                self.id = id
                self.name = name
                self.url = url
                self.package_html_url = package_html_url
                self.html_url = html_url
                self.license = license
                self.description = description
                self.created_at = created_at
                self.updated_at = updated_at
                self.deleted_at = deleted_at
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case url
                case package_html_url
                case html_url
                case license
                case description
                case created_at
                case updated_at
                case deleted_at
                case metadata
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
        ///
        /// The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
        /// For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
        ///
        /// - Remark: Generated from `#/components/parameters/package-visibility`.
        @frozen public enum package_hyphen_visibility: String, Codable, Hashable, Sendable {
            case _public = "public"
            case _private = "private"
            case _internal = "internal"
        }
        /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        ///
        /// - Remark: Generated from `#/components/parameters/package-type`.
        @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
            case npm = "npm"
            case maven = "maven"
            case rubygems = "rubygems"
            case docker = "docker"
            case nuget = "nuget"
            case container = "container"
        }
        /// The name of the package.
        ///
        /// - Remark: Generated from `#/components/parameters/package-name`.
        public typealias package_hyphen_name = Swift.String
        /// Unique identifier of the package version.
        ///
        /// - Remark: Generated from `#/components/parameters/package-version-id`.
        public typealias package_hyphen_version_hyphen_id = Swift.Int
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct package_es_list_error: Sendable, Hashable {
            /// Creates a new `package_es_list_error`.
            public init() {}
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get list of conflicting packages during Docker migration for organization
    ///
    /// Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/docker/conflicts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-organization)`.
    public enum packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization {
        public static let id: Swift.String = "packages/list-docker-migration-conflicting-packages-for-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/docker/conflicts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/docker/conflicts/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/docker/conflicts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input.Path,
                headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/docker/conflicts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/docker/conflicts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-organization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-organization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List packages for an organization
    ///
    /// Lists packages in an organization readable by the user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/get(packages/list-packages-for-organization)`.
    public enum packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization {
        public static let id: Swift.String = "packages/list-packages-for-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/query/package_type`.
                @frozen public enum package_typePayload: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/query/package_type`.
                public var package_type: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Query.package_typePayload
                /// - Remark: Generated from `#/components/parameters/package-visibility`.
                @frozen public enum package_hyphen_visibility: String, Codable, Hashable, Sendable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
                ///
                /// The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
                /// For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/query/visibility`.
                public var visibility: Components.Parameters.package_hyphen_visibility?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/query/page`.
                public var page: Swift.Int?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - visibility: The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    package_type: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Query.package_typePayload,
                    visibility: Components.Parameters.package_hyphen_visibility? = nil,
                    page: Swift.Int? = nil,
                    per_page: Swift.Int? = nil
                ) {
                    self.package_type = package_type
                    self.visibility = visibility
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Path,
                query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Query,
                headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/packages/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/get(packages/list-packages-for-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/get(packages/list-packages-for-organization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/get(packages/list-packages-for-organization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The value of `per_page` multiplied by `page` cannot be greater than 10000.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/get(packages/list-packages-for-organization)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.package_es_list_error)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.package_es_list_error {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a package for an organization
    ///
    /// Gets a specific package in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/get(packages/get-package-for-organization)`.
    public enum packages_sol_get_hyphen_package_hyphen_for_hyphen_organization {
        public static let id: Swift.String = "packages/get-package-for-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - org: The organization name. The name is not case sensitive.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    org: Components.Parameters.org
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.org = org
                }
            }
            public var path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input.Path,
                headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.package)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.package {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/get(packages/get-package-for-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a package for an organization
    ///
    /// Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-org)`.
    public enum packages_sol_delete_hyphen_package_hyphen_for_hyphen_org {
        public static let id: Swift.String = "packages/delete-package-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/DELETE/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/DELETE/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - org: The organization name. The name is not case sensitive.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    org: Components.Parameters.org
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.org = org
                }
            }
            public var path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-org)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Restore a package for an organization
    ///
    /// Restores an entire package in an organization.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-org)`.
    public enum packages_sol_restore_hyphen_package_hyphen_for_hyphen_org {
        public static let id: Swift.String = "packages/restore-package-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/restore/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/restore/POST/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/restore/POST/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/restore/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - org: The organization name. The name is not case sensitive.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    org: Components.Parameters.org
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.org = org
                }
            }
            public var path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/restore/POST/query`.
            public struct Query: Sendable, Hashable {
                /// package token
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/restore/POST/query/token`.
                public var token: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token: package token
                public init(token: Swift.String? = nil) {
                    self.token = token
                }
            }
            public var query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/restore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Path,
                query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-org)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List package versions for a package owned by an organization
    ///
    /// Lists package versions for a package owned by an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-org)`.
    public enum packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org {
        public static let id: Swift.String = "packages/get-all-package-versions-for-package-owned-by-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - org: The organization name. The name is not case sensitive.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    org: Components.Parameters.org
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.org = org
                }
            }
            public var path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case active = "active"
                    case deleted = "deleted"
                }
                /// The state of the package, either active or deleted.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/query/state`.
                public var state: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Query.statePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - state: The state of the package, either active or deleted.
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    state: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Query.statePayload? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                    self.state = state
                }
            }
            public var query: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Path,
                query: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Query = .init(),
                headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package_hyphen_version])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package_hyphen_version] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-org)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a package version for an organization
    ///
    /// Gets a specific package version in an organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-organization)`.
    public enum packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization {
        public static let id: Swift.String = "packages/get-package-version-for-organization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - org: The organization name. The name is not case sensitive.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    org: Components.Parameters.org,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.org = org
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input.Path,
                headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.package_hyphen_version)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.package_hyphen_version {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-organization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_organization.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete package version for an organization
    ///
    /// Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-org)`.
    public enum packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org {
        public static let id: Swift.String = "packages/delete-package-version-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - org: The organization name. The name is not case sensitive.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    org: Components.Parameters.org,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.org = org
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-org)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Restore package version for an organization
    ///
    /// Restores a specific package version in an organization.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-org)`.
    public enum packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org {
        public static let id: Swift.String = "packages/restore-package-version-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - org: The organization name. The name is not case sensitive.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    org: Components.Parameters.org,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.org = org
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-org)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get list of conflicting packages during Docker migration for authenticated-user
    ///
    /// Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /user/docker/conflicts`.
    /// - Remark: Generated from `#/paths//user/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-authenticated-user)`.
    public enum packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/list-docker-migration-conflicting-packages-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/docker/conflicts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/docker/conflicts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/docker/conflicts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List packages for the authenticated user's namespace
    ///
    /// Lists packages owned by the authenticated user within the user's namespace.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages`.
    /// - Remark: Generated from `#/paths//user/packages/get(packages/list-packages-for-authenticated-user)`.
    public enum packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/list-packages-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/packages/GET/query/package_type`.
                @frozen public enum package_typePayload: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/GET/query/package_type`.
                public var package_type: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.package_typePayload
                /// - Remark: Generated from `#/components/parameters/package-visibility`.
                @frozen public enum package_hyphen_visibility: String, Codable, Hashable, Sendable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
                ///
                /// The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
                /// For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
                ///
                /// - Remark: Generated from `#/paths/user/packages/GET/query/visibility`.
                public var visibility: Components.Parameters.package_hyphen_visibility?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/packages/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/packages/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - visibility: The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    package_type: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.package_typePayload,
                    visibility: Components.Parameters.package_hyphen_visibility? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.package_type = package_type
                    self.visibility = visibility
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/packages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query,
                headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/packages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/packages/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/get(packages/list-packages-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The value of `per_page` multiplied by `page` cannot be greater than 10000.
            ///
            /// - Remark: Generated from `#/paths//user/packages/get(packages/list-packages-for-authenticated-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.package_es_list_error)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.package_es_list_error {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a package for the authenticated user
    ///
    /// Gets a specific package for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/get(packages/get-package-for-authenticated-user)`.
    public enum packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/get-package-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                }
            }
            public var path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.package)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.package {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/get(packages/get-package-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a package for the authenticated user
    ///
    /// Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, `repo` scope is also required. For the list these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /user/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/delete(packages/delete-package-for-authenticated-user)`.
    public enum packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/delete-package-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/DELETE/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/DELETE/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                }
            }
            public var path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/delete(packages/delete-package-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/delete(packages/delete-package-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/delete(packages/delete-package-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/delete(packages/delete-package-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Restore a package for the authenticated user
    ///
    /// Restores a package owned by the authenticated user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /user/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-authenticated-user)`.
    public enum packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/restore-package-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/restore/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/restore/POST/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/restore/POST/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                }
            }
            public var path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/restore/POST/query`.
            public struct Query: Sendable, Hashable {
                /// package token
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/restore/POST/query/token`.
                public var token: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token: package token
                public init(token: Swift.String? = nil) {
                    self.token = token
                }
            }
            public var query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/restore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List package versions for a package owned by the authenticated user
    ///
    /// Lists package versions for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-authenticated-user)`.
    public enum packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/get-all-package-versions-for-package-owned-by-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                }
            }
            public var path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case active = "active"
                    case deleted = "deleted"
                }
                /// The state of the package, either active or deleted.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/query/state`.
                public var state: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query.statePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - state: The state of the package, either active or deleted.
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    state: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query.statePayload? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                    self.state = state
                }
            }
            public var query: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package_hyphen_version])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package_hyphen_version] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a package version for the authenticated user
    ///
    /// Gets a specific package version for a package owned by the authenticated user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-authenticated-user)`.
    public enum packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/get-package-version-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.package_hyphen_version)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.package_hyphen_version {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a package version for the authenticated user
    ///
    /// Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// The authenticated user must have admin permissions in the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-authenticated-user)`.
    public enum packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/delete-package-version-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Restore a package version for the authenticated user
    ///
    /// Restores a package version owned by the authenticated user.
    ///
    /// You can restore a deleted package version under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-authenticated-user)`.
    public enum packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "packages/restore-package-version-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get list of conflicting packages during Docker migration for user
    ///
    /// Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/docker/conflicts`.
    /// - Remark: Generated from `#/paths//users/{username}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-user)`.
    public enum packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/list-docker-migration-conflicting-packages-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/docker/conflicts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/docker/conflicts/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/docker/conflicts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/docker/conflicts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/docker/conflicts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_list_hyphen_docker_hyphen_migration_hyphen_conflicting_hyphen_packages_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//users/{username}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//users/{username}/docker/conflicts/get(packages/list-docker-migration-conflicting-packages-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List packages for a user
    ///
    /// Lists all packages in a user's namespace for which the requesting user has access.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/get(packages/list-packages-for-user)`.
    public enum packages_sol_list_hyphen_packages_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/list-packages-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/packages/GET/query/package_type`.
                @frozen public enum package_typePayload: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/GET/query/package_type`.
                public var package_type: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Query.package_typePayload
                /// - Remark: Generated from `#/components/parameters/package-visibility`.
                @frozen public enum package_hyphen_visibility: String, Codable, Hashable, Sendable {
                    case _public = "public"
                    case _private = "private"
                    case _internal = "internal"
                }
                /// The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
                ///
                /// The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
                /// For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/GET/query/visibility`.
                public var visibility: Components.Parameters.package_hyphen_visibility?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - visibility: The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    package_type: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Query.package_typePayload,
                    visibility: Components.Parameters.package_hyphen_visibility? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.package_type = package_type
                    self.visibility = visibility
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/packages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Path,
                query: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Query,
                headers: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/packages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/packages/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/get(packages/list-packages-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_list_hyphen_packages_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/get(packages/list-packages-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/get(packages/list-packages-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The value of `per_page` multiplied by `page` cannot be greater than 10000.
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/get(packages/list-packages-for-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.package_es_list_error)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.package_es_list_error {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a package for a user
    ///
    /// Gets a specific package metadata for a public package owned by a user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/get(packages/get-package-for-user)`.
    public enum packages_sol_get_hyphen_package_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/get-package-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - username: The handle for the GitHub user account.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    username: Components.Parameters.username
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.username = username
                }
            }
            public var path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.package)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.package {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/get(packages/get-package-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_package_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a package for a user
    ///
    /// Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /users/{username}/packages/{package_type}/{package_name}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-user)`.
    public enum packages_sol_delete_hyphen_package_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/delete-package-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/DELETE/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/DELETE/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - username: The handle for the GitHub user account.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    username: Components.Parameters.username
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.username = username
                }
            }
            public var path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_delete_hyphen_package_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/delete(packages/delete-package-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Restore a package for a user
    ///
    /// Restores an entire package for a user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /users/{username}/packages/{package_type}/{package_name}/restore`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-user)`.
    public enum packages_sol_restore_hyphen_package_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/restore-package-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/restore/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/restore/POST/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/restore/POST/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/restore/POST/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - username: The handle for the GitHub user account.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    username: Components.Parameters.username
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.username = username
                }
            }
            public var path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/restore/POST/query`.
            public struct Query: Sendable, Hashable {
                /// package token
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/restore/POST/query/token`.
                public var token: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token: package token
                public init(token: Swift.String? = nil) {
                    self.token = token
                }
            }
            public var query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/restore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Path,
                query: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_restore_hyphen_package_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/restore/post(packages/restore-package-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List package versions for a package owned by a user
    ///
    /// Lists package versions for a public package owned by a specified user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}/versions`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-user)`.
    public enum packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user {
        public static let id: Swift.String = "packages/get-all-package-versions-for-package-owned-by-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - username: The handle for the GitHub user account.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    username: Components.Parameters.username
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.username = username
                }
            }
            public var path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input.Path,
                headers: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.package_hyphen_version])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.package_hyphen_version] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_all_hyphen_package_hyphen_versions_hyphen_for_hyphen_package_hyphen_owned_hyphen_by_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/get(packages/get-all-package-versions-for-package-owned-by-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a package version for a user
    ///
    /// Gets a specific package version for a public package owned by a specified user.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-user)`.
    public enum packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/get-package-version-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - package_version_id: Unique identifier of the package version.
                ///   - username: The handle for the GitHub user account.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id,
                    username: Components.Parameters.username
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.package_version_id = package_version_id
                    self.username = username
                }
            }
            public var path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.package_hyphen_version)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.package_hyphen_version {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/get(packages/get-package-version-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.packages_sol_get_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete package version for a user
    ///
    /// Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-user)`.
    public enum packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/delete-package-version-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - username: The handle for the GitHub user account.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    username: Components.Parameters.username,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.username = username
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_delete_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/delete(packages/delete-package-version-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Restore package version for a user
    ///
    /// Restores a specific package version for a user.
    ///
    /// You can restore a deleted package under the following conditions:
    ///   - The package was deleted within the last 30 days.
    ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    ///
    /// If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    ///
    /// - Remark: HTTP `POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`.
    /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-user)`.
    public enum packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user {
        public static let id: Swift.String = "packages/restore-package-version-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/package-type`.
                @frozen public enum package_hyphen_type: String, Codable, Hashable, Sendable {
                    case npm = "npm"
                    case maven = "maven"
                    case rubygems = "rubygems"
                    case docker = "docker"
                    case nuget = "nuget"
                    case container = "container"
                }
                /// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_type`.
                public var package_type: Components.Parameters.package_hyphen_type
                /// The name of the package.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_name`.
                public var package_name: Components.Parameters.package_hyphen_name
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/username`.
                public var username: Components.Parameters.username
                /// Unique identifier of the package version.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/path/package_version_id`.
                public var package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - package_type: The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
                ///   - package_name: The name of the package.
                ///   - username: The handle for the GitHub user account.
                ///   - package_version_id: Unique identifier of the package version.
                public init(
                    package_type: Components.Parameters.package_hyphen_type,
                    package_name: Components.Parameters.package_hyphen_name,
                    username: Components.Parameters.username,
                    package_version_id: Components.Parameters.package_hyphen_version_hyphen_id
                ) {
                    self.package_type = package_type
                    self.package_name = package_name
                    self.username = username
                    self.package_version_id = package_version_id
                }
            }
            public var path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.packages_sol_restore_hyphen_package_hyphen_version_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore/post(packages/restore-package-version-for-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
